commit 6b9f1c4b882cf059a36f1fbb95c39ed43b902360
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 20:31:06 2014 +1100

    fetch paper

diff --git a/CMS/Database.cpp b/CMS/Database.cpp
index e03569a..a32631e 100644
--- a/CMS/Database.cpp
+++ b/CMS/Database.cpp
@@ -1,1276 +1,4 @@
-#include "Database.hpp"
-
-#include "cppconn/driver.h"
-#include "cppconn/exception.h"
-#include "cppconn/resultset.h"
-#include "cppconn/statement.h"
-#include "cppconn/prepared_statement.h"
-
-#include <cstring>
-#include <stdlib.h>
-#include <iostream>
-
-#include <vector>
-#include <map>
-#include <string>
-#include <list>
-
-using namespace sql;
-
-const char* databaseStr = "localhost";
-const char* databaseUserName = "user";
-const char* databaseUserPassword = "user";
-const char* databaseSchema = "csci222";
-
-const char* noDB = "Sorry, but was unable to open database so operation failed";
-
-const char* prepareFailed = "Failure when preparing statement";
-const char* bindFailed = "Failure when binding arguments";
-const char* writeFailed = "Failure when writing to database";
-
-Database::Database()
-{
-        // Constructors should always succeed. But suppose it failed and
-        // the database couldn't be created?
-        invalid = true;
-        driver = get_driver_instance();
-        try {
-                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
-        } catch (sql::SQLException &e) {
-                // Failed
-                return;
-        }
-        dbcon->setSchema(databaseSchema);
-        // It's ok
-        invalid = false;
-}
-
-Database::~Database()
-{
-        if (!invalid) {
-                this->close();
-        }
-}
-
-void Database::close()
-{
-        if (!invalid) {
-                dbcon->close();
-                delete dbcon;
-        }
-        invalid = true;
-}
-
-User Database::fetchUser(std::string key, std::string confName) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	// Add information on user from database to User object
-	const char* getUser = "SELECT * FROM UserAccount WHERE username=?";
-	const char* getPersonalInfo = "SELECT * FROM PersonalInfo WHERE userID=?";
-	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
-        const char* getUserType = "SELECT userType FROM UserType WHERE (userID=? and confID=(SELECT confID FROM Conference WHERE name=?))";
-
-        // =======================================
-        // user account
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUser);
-	pstmt->setString(1, key);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return User();
-	}
-        
-        int userID = rs->getInt(1);
-        std::string username = rs->getString(2);
-        std::string password = rs->getString(3);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Personal Info
-	pstmt = dbcon->prepareStatement(getPersonalInfo);
-	pstmt->setInt(1, userID);
-	rs = pstmt->executeQuery();
-	haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return User();
-	}
-        
-        std::string name = rs->getString(3);
-	std::string email = rs->getString(4);
-	std::string organisation = rs->getString(5);
-	std::string phone = rs->getString(6);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise Area
-        std::vector<std::string> vec;
-	
-	pstmt = dbcon->prepareStatement(getExpertise);
-	pstmt->setInt(1, userID);
-	rs = pstmt->executeQuery();
-        
-        while (rs->next()) {
-                std::string expertise = rs->getString(1);
-                vec.push_back(expertise);
-        }
-        
-        // =======================================
-        // user type 
-        UserType_t userType = AUTHOR;
-        
-	pstmt = dbcon->prepareStatement(getUserType);
-
-        pstmt->setInt(1, userID);
-	pstmt->setString(2, confName);
-
-	rs = pstmt->executeQuery();
-
-	haveRecord = rs->next();
-	if (haveRecord)
-	{
-            int e = rs->getInt(1);            
-            if (e = 1)
-                userType = AUTHOR;
-            else if (e = 2)
-                userType = REVIEWER;
-            else if (e = 3)
-                userType = PCCHAIR;
-	}
-        delete rs;
-        delete pstmt;
-        
-        User user(
-		username,
-		name,
-		email,
-		organisation,
-		phone,
-		password,
-		userID,
-		vec,
-                userType);
-
-	return user;
-}
-
-bool Database::existsUserName(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* countUser = "SELECT COUNT(*) FROM UserAccount WHERE username=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countUser);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count == 1;
-}
-
-void Database::putUser(std::string key, User user) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-        if (this->existsUserName(key))
-	{
-                this->updateUser(user);
-        }
-	else
-	{
-        	this->createUser(user);
-	}
-}
-
-void Database::createUser(User user)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* insertPersonalInfo = "INSERT INTO PersonalInfo(userID, name, email, organisation, phone) VALUES(NULL, ?, ?, ?, ?)";
-	const char* insertUser = "INSERT INTO UserAccount(username, password, infoID) VALUES(?, ?, LAST_INSERT_ID())";
-	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() WHERE infoID=(SELECT infoID FROM UserAccount WHERE userID=LAST_INSERT_ID())";
-	const char* getUserID = "SELECT LAST_INSERT_ID()";
-	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Personal Info
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertPersonalInfo);
-        pstmt->setString(1, user.name);
-        pstmt->setString(2, user.email);
-        pstmt->setString(3, user.organisation);
-        pstmt->setString(4, user.phone);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // user account
-        pstmt = dbcon->prepareStatement(insertUser);
-        pstmt->setString(1, user.userName);
-        pstmt->setString(2, user.password);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Personal Info Update
-        pstmt = dbcon->prepareStatement(updatePIuserID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Store userID
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUserID);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int userID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise
-      	if (user.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertExpertise);
-    		std::vector<std::string>::const_iterator it;
-      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
-		    {
-			    std::string word = *it;	
-
-        	    	if (!this->existsKeyword(word))
-			    {
-			    	this->addKeyword(word);
-			    }
-			    
-			    pstmt->setInt(1, userID);
-			    pstmt->setString(2, word);
-
-      		            pstmt->executeUpdate();
-		    }
-      		delete pstmt;
-
-      	}
-}
-
-void Database::updateUser(User user)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getUserID = "SELECT userID FROM UserAccount WHERE username = ?";
-	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
-	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
-
-        const char* deleteExpertise = "DELETE FROM ExpertiseArea WHERE userID=?";
-	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Store userID
-        sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUserID);
-        pstmt->setString(1, user.userName);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int userID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // user account
-        pstmt = dbcon->prepareStatement(updateUser);
-        pstmt->setString(1, user.userName);
-        pstmt->setString(2, user.password);
-        pstmt->setInt(3, userID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Personal Info
-        pstmt = dbcon->prepareStatement(updatePersonalInfo);
-        pstmt->setString(1, user.name);
-        pstmt->setString(2, user.email);
-        pstmt->setString(3, user.organisation);
-        pstmt->setString(4, user.phone);
-        pstmt->setInt(5, userID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Expertise Delete
-        pstmt = dbcon->prepareStatement(deleteExpertise);
-        pstmt->setInt(1, userID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Expertise Insert
-      	if (user.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertExpertise);
-		    std::vector<std::string>::const_iterator it;
-      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
-		    {
-		    	std::string word = *it;	
-            		if (!this->existsKeyword(word))
-		    	{
-		    		this->addKeyword(word);
-		    	}
-		    	pstmt->setInt(1, userID);
-		    	pstmt->setString(2, word);
-
-      	    	        pstmt->executeUpdate();
-		    }
-      		delete pstmt;
-
-      	}
-}
-
-std::vector<int> Database::allUserIDs()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<int> vptr;
-
-        const char* selectall = "select userID from UserAccount";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                int anid = rs->getInt(1);
-                vptr.push_back(anid);
-        }
-
-        return vptr;
-}
-
-std::vector<std::string> Database::allUserNames()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> vptr;
-
-        const char* selectall = "select username from UserAccount";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string aname = rs->getString(1);
-                vptr.push_back(aname);
-        }
-
-        return vptr;
-}
-
-void Database::setUserAsAuthor(int userID, int confID) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-    
-    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'author')";
-    
-    // ======================================
-    // insert new userType
-    sql::PreparedStatement *pstmt = NULL;
-
-    pstmt = dbcon->prepareStatement(insertChairType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-
-    delete pstmt;
-}
-
-void Database::updateUserAsAuthor(int userID, int confID) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-
-    const char* updateCurrentType = "UPDATE UserType SET userType='author' WHERE (userID=? and confID=?)";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
-
-    pstmt = dbcon->prepareStatement(updateCurrentType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-    
-    delete pstmt;
-}
-
-void Database::setUserAsPC(int userID, int confID) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-    
-    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
-    
-    // ======================================
-    // insert new userType
-    sql::PreparedStatement *pstmt = NULL;
-
-    pstmt = dbcon->prepareStatement(insertChairType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-
-    delete pstmt;
-}
-
-void Database::updateUserAsPC(int userID, int confID) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-
-    const char* updateCurrentType = "UPDATE UserType SET userType='pc' WHERE (userID=? and confID=?)";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
-
-    pstmt = dbcon->prepareStatement(updateCurrentType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-    
-    delete pstmt;
-}
-
-void Database::setUserAsChair(int userID, int confID) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-    
-    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'chair')";
-    
-    // ======================================
-    // insert new userType
-    sql::PreparedStatement *pstmt = NULL;
-
-    pstmt = dbcon->prepareStatement(insertChairType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-
-    delete pstmt;
-}
-
-void Database::updateUserAsChair(int userID, int confID) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-
-    const char* updateCurrentType = "UPDATE UserType SET userType='chair' WHERE (userID=? and confID=?)";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
-
-    pstmt = dbcon->prepareStatement(updateCurrentType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-    
-    delete pstmt;
-}
-
-bool Database::existsKeyword(std::string key) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-
-	const char* countKeyword = "SELECT COUNT(*) FROM Keywords WHERE keyword=?";
-
-    sql::PreparedStatement *pstmt = NULL;
-    sql::ResultSet * rs = NULL;
-
-    pstmt = dbcon->prepareStatement(countKeyword);
-
-    int count = 0;
-    pstmt->setString(1, key);
-    rs = pstmt->executeQuery();
-
-    if (rs->next()) {
-            count = rs->getInt(1);
-    }
-    delete rs;
-    delete pstmt;
-
-    return count == 1;
-}
-
-void Database::addKeyword(std::string key) throw (const char*)
-{
-	if (invalid)
-		throw (noDB);
-
-	const char* insertKeyword = "INSERT INTO Keywords VALUES(NULL, ?)";
-
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertKeyword);
-        pstmt->setString(1, key);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-}
-
-Conference Database::fetchConference(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	// Add information on user from database to User object
-	const char* getConference = "SELECT * FROM Conference WHERE name=?";
-	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords WHERE confID=?)";
-
-        // =======================================
-        // Conference 
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getConference);
-	pstmt->setString(1, key);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Conference();
-	}
-
-        int confID = rs->getInt(1);
-        std::string title = rs->getString(2);
-        std::string topic = rs->getString(3);
-        std::string description = rs->getString(4);
-        std::string location = rs->getString(5);
-        bool isActive = rs->getBoolean(6);
-        int paperDeadlineD  = rs->getInt(7);
-        int paperDeadlineM  = rs->getInt(8);
-        int paperDeadlineY  = rs->getInt(9);
-	Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
-        bool isBeforePaperDeadline = rs->getBoolean(10);
-        int allocationDateD  = rs->getInt(11);
-        int allocationDateM  = rs->getInt(12);
-        int allocationDateY  = rs->getInt(13);
-	Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
-        bool isBeforeAllocationDate = rs->getBoolean(14);
-        int reviewDeadlineSoftD  = rs->getInt(15);
-        int reviewDeadlineSoftM  = rs->getInt(16);
-        int reviewDeadlineSoftY  = rs->getInt(17);
-	Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY);
-        bool isBeforeSoftReviewDeadline = rs->getBoolean(18);
-	int reviewDeadlineHardD  = rs->getInt(19);
-        int reviewDeadlineHardM  = rs->getInt(20);
-        int reviewDeadlineHardY  = rs->getInt(21);
-	Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
-        bool isBeforeHardReviewDeadline = rs->getBoolean(22);
-        int discussDeadlineD  = rs->getInt(23);
-        int discussDeadlineM  = rs->getInt(24);
-        int discussDeadlineY  = rs->getInt(25);
-	Date discussDeadline(discussDeadlineD, discussDeadlineM, discussDeadlineY);
-        bool isBeforeDiscussDeadline = rs->getBoolean(26);
-	int reviewersPerPaper = rs->getInt(27);
-	int postWordLimit = rs->getInt(28);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise Area
-        std::vector<std::string> vec;
-	
-	pstmt = dbcon->prepareStatement(getConfKeywords);
-	pstmt->setInt(1, confID);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string keyword = rs->getString(1);
-                vec.push_back(keyword);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        Conference conf(
-		isActive,
-		title,
-		confID,
-		topic,
-		description,
-		location,
-		vec,
-		isBeforePaperDeadline,
-		paperDeadline,
-		isBeforeAllocationDate,
-		allocationDate,
-		isBeforeSoftReviewDeadline,
-		reviewDeadlineSoft,
-		isBeforeHardReviewDeadline,
-		reviewDeadlineHard,
-		isBeforeDiscussDeadline,
-		discussDeadline,
-		reviewersPerPaper,
-		postWordLimit
-		);
-	
-	return conf;
-}
-
-bool Database::existsConfName(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* countConf = "SELECT COUNT(*) FROM Conference WHERE name=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countConf);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count == 1;
-}
-
-void Database::putConf(std::string key, Conference conf) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-        if (this->existsConfName(key))
-	{
-                this->updateConf(conf);
-        }
-	else
-	{
-        	this->createConf(conf);
-	}
-}
-
-void Database::createConf(Conference conf)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadlineD, paperDeadlineM, paperDeadlineY, paperDeadlineBool, allocationDateD, allocationDateM, allocationDateY, allocationDateBool, reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY, reviewDeadlineSoftBool, reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY, reviewDeadlineHardBool, discussDeadlineD, discussDeadlineM, discussDeadlineY, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
-
-	const char* getconfID = "SELECT LAST_INSERT_ID()";
-	const char* insertConfKeyword = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Personal Info
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertConference);
-
-        pstmt->setString(1, conf.title);
-        pstmt->setString(2, conf.topic);
-        pstmt->setString(3, conf.description);
-        pstmt->setString(4, conf.location);
-        pstmt->setBoolean(5, conf.isActive);
-        pstmt->setInt(6, conf.paperDeadline.getDay());
-        pstmt->setInt(7, conf.paperDeadline.getMonth());
-        pstmt->setInt(8, conf.paperDeadline.getYear());
-        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
-        pstmt->setInt(10, conf.allocationDate.getDay());
-        pstmt->setInt(11, conf.allocationDate.getMonth());
-        pstmt->setInt(12, conf.allocationDate.getYear());
-        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
-        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
-        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
-        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
-        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
-        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
-        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
-        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf.discussDeadline.getDay());
-        pstmt->setInt(23, conf.discussDeadline.getMonth());
-        pstmt->setInt(24, conf.discussDeadline.getYear());
-        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
-	pstmt->setInt(26, conf.reviewersPerPaper);
-	pstmt->setInt(27, conf.postWordLimit);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Store confID
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getconfID);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int confID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise
-      	if (conf.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertConfKeyword);
-		    std::vector<std::string>::const_iterator it;
-      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
-		    {
-		    	std::string word = *it;	
-
-            		if (!this->existsKeyword(word))
-		    	{
-		    		this->addKeyword(word);
-		    	}
-		    	
-		    	pstmt->setInt(1, confID);
-		    	pstmt->setString(2, word);
-
-      	    	        pstmt->executeUpdate();
-		    }
-      		delete pstmt;
-
-      	}
-}
-
-void Database::updateConf(Conference conf)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getConfID = "SELECT confID FROM Conference WHERE name = ?";
-
-	const char* updateConference = "UPDATE Conference SET name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
-
-        const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
-	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Store confID
-        sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getConfID);
-        pstmt->setString(1, conf.title);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int confID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Conference
-        pstmt = dbcon->prepareStatement(updateConference);
-
-        pstmt->setString(1, conf.title);
-        pstmt->setString(2, conf.topic);
-        pstmt->setString(3, conf.description);
-        pstmt->setString(4, conf.location);
-        pstmt->setBoolean(5, conf.isActive);
-	int day = conf.paperDeadline.getDay();
-	int month = conf.paperDeadline.getMonth();
-	int year = conf.paperDeadline.getYear();
-        pstmt->setInt(6, day);
-        pstmt->setInt(7, month);
-        pstmt->setInt(8, year);
-        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
-        pstmt->setInt(10, conf.allocationDate.getDay());
-        pstmt->setInt(11, conf.allocationDate.getMonth());
-        pstmt->setInt(12, conf.allocationDate.getYear());
-        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
-        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
-        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
-        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
-        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
-        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
-        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
-        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf.discussDeadline.getDay());
-        pstmt->setInt(23, conf.discussDeadline.getMonth());
-        pstmt->setInt(24, conf.discussDeadline.getYear());
-        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
-	pstmt->setInt(26, conf.reviewersPerPaper);
-	pstmt->setInt(27, conf.postWordLimit);
-	pstmt->setInt(28, confID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Keywords Delete
-        pstmt = dbcon->prepareStatement(deleteKeywords);
-        pstmt->setInt(1, confID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Keywords Insert
-      	if (conf.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertKeywords);
-		    std::vector<std::string>::const_iterator it;
-      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
-		    {
-		    	std::string word = *it;	
-            		if (!this->existsKeyword(word))
-		    	{
-		    		this->addKeyword(word);
-		    	}
-		    	pstmt->setInt(1, confID);
-		    	pstmt->setString(2, word);
-
-      	    	        pstmt->executeUpdate();
-		    }
-      		delete pstmt;
-      	}
-}
-
-std::vector<int> Database::allConfIDs()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<int> vptr;
-
-        const char* selectall = "select confID from Conference";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                int anid = rs->getInt(1);
-                vptr.push_back(anid);
-        }
-
-        return vptr;
-}
-
-std::vector<std::string> Database::allConfNames()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> vptr;
-
-        const char* selectall = "select name from Conference";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string aname = rs->getString(1);
-                vptr.push_back(aname);
-        }
-
-        return vptr;
-}
-
-std::vector<int> Database::activeConfIDs()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<int> vptr;
-
-        const char* selectActive = "SELECT confID FROM Conference WHERE active = 1";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectActive);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                int anid = rs->getInt(1);
-                vptr.push_back(anid);
-        }
-
-        return vptr;
-}
-
-std::vector<std::string> Database::activeConfNames()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> vptr;
-
-        const char* selectActive = "SELECT name FROM Conference WHERE active = 1";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectActive);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string aname = rs->getString(1);
-                vptr.push_back(aname);
-        }
-
-        return vptr;
-}
-
-PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperSummary = "SELECT paperName FROM Paper WHERE paperID=?";
-
-        // =======================================
-        // Paper Summary 
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperSummary);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return PaperSummary();
-	}
-
-        std::string paperName = rs->getString(1);
-
-        delete rs;
-        delete pstmt;
-
-        PaperSummary papSum(key, paperName);
-	
-	return papSum;
-}
-
-std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int leadAuthorID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and leadAuthorID=?)";
-
-        // =======================================
-        // Paper Summary 
-	std::vector<PaperSummary> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperSummary);
-	pstmt->setInt(1, confID);
-	pstmt->setInt(2, leadAuthorID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-        	std::string paperName = rs->getString(1);
-        	int paperID = rs->getInt(2);
-        	PaperSummary papSum(paperID, paperName);
-                vec.push_back(papSum);
-        }
-
-        delete rs;
-        delete pstmt;
-	
-	return vec;
-}
-
-Paper Database::fetchPaper(int key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaper = "SELECT * FROM Paper WHERE paperID=?";
-	const char* getConfKeyword = "SELECT keyword FROM Keywords WHERE keywordID=(SELECT keywordID FROM Paper WHERE paperID=?)";
-	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords WHERE paperID=?)";
-	
-	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
-
-	const char* getDiscussPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
-
-	const char* getReviews = "SELECT * FROM Review WHERE (paperID=? and confID=?)";
-	
-        // =======================================
-        // Paper
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaper);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Paper();
-	}
-
-    	int paperID = rs->getInt(1);
-	int confID = rs->getInt(3);
-    	int leadAuthorID = rs->getInt(2);
-    	std::string title = rs->getString(5);
-    	std::string abstract = rs->getString(6);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // confKeyword
-	pstmt = dbcon->prepareStatement(getConfKeyword);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-
-	haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Paper();
-	}
-
-	std::string confKeyword = rs->getString(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Paper Keywords
-        std::vector<std::string> keywords;
-	
-	pstmt = dbcon->prepareStatement(getPaperKeywords);
-	pstmt->setInt(1, key);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string keyword = rs->getString(1);
-                keywords.push_back(keyword);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Authors 
-        std::vector<PersonalInfo> authors;
-	
-	pstmt = dbcon->prepareStatement(getAuthors);
-	pstmt->setInt(1, key);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int infoID = rs->getInt(1);
-		std::string name = rs->getString(2);
-		std::string email = rs->getString(3);
-		std::string organisation = rs->getString(4);
-		std::string phone = rs->getString(5);
-		PersonalInfo pInfo(name, email, organisation, phone, infoID);
-                authors.push_back(pInfo);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Discussion
-        Discussion discussion;
-	
-	pstmt = dbcon->prepareStatement(getDiscussPost);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		std::string comment = rs->getString(1);
-		int reviewerID = rs->getInt(2);
-		int commentID = rs->getInt(3);
-		DiscussionPost discuss(comment, reviewerID, commentID);
-                discussion.discussion.push_back(discuss);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Reviews
-        std::vector<Review> reviews;
-	
-	pstmt = dbcon->prepareStatement(getReviews);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int reviewerID = rs->getInt(3);
-		int overall = rs->getInt(5);
-		int confidence = rs->getInt(6);
-		int relevance = rs->getInt(7);
-		int originality = rs->getInt(8);
-		int significance = rs->getInt(9);
-		int presentation = rs->getInt(10);
-		int techQuality = rs->getInt(11);
-		int evaluation = rs->getInt(12);
-  		std::string commentsStrength = rs->getString(13);
-  		std::string commentsWeakness = rs->getString(14);
-  		std::string commentsSuggestions = rs->getString(15);
-  		std::string commentsShortPaper = rs->getString(16);
-  		std::string commentsBestAward = rs->getString(17);
-
-		Review review(paperID, 
-			reviewerID, 
-			overall, 
-			confidence, 
-			relevance, 
-			originality, 
-			significance, 
-			presentation, 
-			techQuality, 
-			evaluation, 
-			commentsStrength, 
-			commentsWeakness, 
-			commentsSuggestions, 
-			commentsShortPaper, 
-			commentsBestAward);
-		reviews.push_back(review);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	Paper paper(
-		paperID,
-		confID,
-		leadAuthorID,
-		title,
-		abstract,
-		authors,
-		keywords,
-		confKeyword,
-		reviews,
-		discussion);
-
-	return paper;
-}
-
-bool Database::existsPaperTitleConf(Paper paper) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* countPaper = "SELECT COUNT(*) FROM Paper WHERE (paperTitle=? and confID=?)";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countPaper);
-
-        int count = 0;
-        pstmt->setString(1, paper.title);
-        pstmt->setInt(2, paper.confID);
-
-        rs = pstmt->executeQuery();
-
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count == 1;
-}
-void Database::createPaper(Paper paper, std::string pdf) throw (const char*)
+createPaper(Paper paper, std::string pdf) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -1484,6 +212,7 @@ std::vector<int> Database::fetchPaperAccepted(int confID) throw (const char*)
 
 	delete pstmt;
 	delete rs;
+        return vec;
 }
 
 Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (const char*)
@@ -2213,3 +942,31 @@ void Database::adminChangeUserType(std::string username, std::string confTitle,
             break;
     }
 }
+
+std::String fetchPDF(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAccepted = "SELECT paper FROM Paper WHERE (paperID=? and confID=?)";
+
+        // =======================================
+        // Paper 
+
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+
+	pstmt = dbcon->prepareStatement(getAccepted);
+        pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        bool haveRecord = rs->next();
+
+        std::string pdf = rs->getString(1);
+
+	delete pstmt;
+	delete rs;
+
+        return pdf;
+}
diff --git a/CMS/Database.hpp b/CMS/Database.hpp
index 92bc034..f1a4c20 100644
--- a/CMS/Database.hpp
+++ b/CMS/Database.hpp
@@ -73,6 +73,7 @@ public:
     void updatePaper(Paper paper) throw (const char*);
 	void addPaperAccepted(int paperID, int confID) throw (const char*);
 	std::vector<int> fetchPaperAccepted(int confID) throw (const char*);
+    std::string fetchPDF(int paperID, int confID) throw (const char*);
 
 	// REVIEW
 	Review fetchReview(int paperID, int reviewerID, int confID) throw (const char*);
diff --git a/CMS/create_tables.txt b/CMS/create_tables.txt
index c2b6545..11dbebd 100644
--- a/CMS/create_tables.txt
+++ b/CMS/create_tables.txt
@@ -103,7 +103,7 @@ CREATE TABLE `Paper` (
 	`keywordID` int NOT NULL,
 	`paperTitle` varchar(255) NOT NULL,
 	`paperAbstract` TEXT NOT NULL,
-	`paper` blob NOT NULL,
+	`paper` TEXT NOT NULL,
 	PRIMARY KEY(`paperID`),
 	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),

commit 804ed0db56b700454aa2dbe9453b4d64377b9e69
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 20:04:30 2014 +1100

    minor fix

diff --git a/CMS/Database.cpp b/CMS/Database.cpp
index ac7f499..e03569a 100644
--- a/CMS/Database.cpp
+++ b/CMS/Database.cpp
@@ -2179,8 +2179,7 @@ UserType_t Database::adminFetchUserType(std::string username, std::string confTi
     bool haveRecord = rs->next();
     if (!haveRecord)
     {
-        userType = AUTHOR;
-        setUserAsAuthorByNames(username, confTitle);
+        userType = NOUSER;
     }
     else
     {

commit f69c544b0d907e0864839fd2963c9feef27619b3
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 19:56:47 2014 +1100

    changes to set/update userType

diff --git a/CMS/Database.cpp b/CMS/Database.cpp
index b6eea37..ac7f499 100644
--- a/CMS/Database.cpp
+++ b/CMS/Database.cpp
@@ -458,60 +458,16 @@ void Database::updateUserAsAuthor(int userID, int confID) throw (const char*)
     delete pstmt;
 }
 
-void Database::setUserAsAuthorByNames(std::string username, std::string confTitle) throw (const char*)
-{
-    if (invalid)
-        throw (noDB);
-
-    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='?') and confID=(SELECT confID FROM Conference WHERE name='?'))";
-    const char* insertAuthorType = "INSERT INTO UserType VALUES((SELECT userID FROM UserAccount WHERE username='?'), (select confID from Conference where name='?'), 'author')";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
-    
-    pstmt = dbcon->prepareStatement(removeCurrentType);
-    pstmt->setString(1, username);
-    pstmt->setString(2, confTitle);
-
-    pstmt->executeUpdate();
-    
-    delete pstmt;
-    
-    // ======================================
-    // insert new userType
-    
-    pstmt = dbcon->prepareStatement(insertAuthorType);
-    pstmt->setString(1, username);
-    pstmt->setString(2, confTitle);
-
-    pstmt->executeUpdate();
-
-    delete pstmt;
-}
-
 void Database::setUserAsPC(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
-
-    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID='?' and confID='?')";
-    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
     
-    pstmt = dbcon->prepareStatement(removeCurrentType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-    
-    delete pstmt;
+    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
     
     // ======================================
     // insert new userType
+    sql::PreparedStatement *pstmt = NULL;
 
     pstmt = dbcon->prepareStatement(insertChairType);
     pstmt->setInt(1, userID);
@@ -522,35 +478,23 @@ void Database::setUserAsPC(int userID, int confID) throw (const char*)
     delete pstmt;
 }
 
-void Database::setUserAsPCByNames(std::string username, std::string confTitle) throw (const char*)
+void Database::updateUserAsPC(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
 
-    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='?') and confID=(SELECT confID FROM Conference WHERE name='?'))";
-    const char* insertAuthorType = "INSERT INTO UserType VALUES((SELECT userID FROM UserAccount WHERE username='?'), (select confID from Conference where name='?'), 'pc')";
+    const char* updateCurrentType = "UPDATE UserType SET userType='pc' WHERE (userID=? and confID=?)";
 
     // =====================================
     // remove current type(s) for matching userID, confID
     sql::PreparedStatement *pstmt = NULL;
-    
-    pstmt = dbcon->prepareStatement(removeCurrentType);
-    pstmt->setString(1, username);
-    pstmt->setString(2, confTitle);
 
-    pstmt->executeUpdate();
-    
-    delete pstmt;
-    
-    // ======================================
-    // insert new userType
-    
-    pstmt = dbcon->prepareStatement(insertAuthorType);
-    pstmt->setString(1, username);
-    pstmt->setString(2, confTitle);
+    pstmt = dbcon->prepareStatement(updateCurrentType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
 
     pstmt->executeUpdate();
-
+    
     delete pstmt;
 }
 
@@ -558,24 +502,12 @@ void Database::setUserAsChair(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
-
-    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID='?' and confID='?')";
-    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'chair')";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
     
-    pstmt = dbcon->prepareStatement(removeCurrentType);
-    pstmt->setInt(1, userID);
-    pstmt->setInt(2, confID);
-
-    pstmt->executeUpdate();
-    
-    delete pstmt;
+    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'chair')";
     
     // ======================================
     // insert new userType
+    sql::PreparedStatement *pstmt = NULL;
 
     pstmt = dbcon->prepareStatement(insertChairType);
     pstmt->setInt(1, userID);
@@ -586,35 +518,23 @@ void Database::setUserAsChair(int userID, int confID) throw (const char*)
     delete pstmt;
 }
 
-void Database::setUserAsChairByNames(std::string username, std::string confTitle) throw (const char*)
+void Database::updateUserAsChair(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
 
-    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='?') and confID=(SELECT confID FROM Conference WHERE name='?'))";
-    const char* insertAuthorType = "INSERT INTO UserType VALUES((SELECT userID FROM UserAccount WHERE username='?'), (select confID from Conference where name='?'), 'chair')";
+    const char* updateCurrentType = "UPDATE UserType SET userType='chair' WHERE (userID=? and confID=?)";
 
     // =====================================
     // remove current type(s) for matching userID, confID
     sql::PreparedStatement *pstmt = NULL;
-    
-    pstmt = dbcon->prepareStatement(removeCurrentType);
-    pstmt->setString(1, username);
-    pstmt->setString(2, confTitle);
 
-    pstmt->executeUpdate();
-    
-    delete pstmt;
-    
-    // ======================================
-    // insert new userType
-    
-    pstmt = dbcon->prepareStatement(insertAuthorType);
-    pstmt->setString(1, username);
-    pstmt->setString(2, confTitle);
+    pstmt = dbcon->prepareStatement(updateCurrentType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
 
     pstmt->executeUpdate();
-
+    
     delete pstmt;
 }
 
@@ -2243,8 +2163,7 @@ void Database::adminChangePassword(std::string username, std::string password) t
 UserType_t Database::adminFetchUserType(std::string username, std::string confTitle) throw (const char*)
 {
 //    const char* 
-    std::string fetchUserType = "SELECT userType FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='"
-            + username + "') and confID=(SELECT confID FROM Conference WHERE name='" + confTitle + "'))";
+    std::string fetchUserType = "SELECT userType FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username=?) and confID=(SELECT confID FROM Conference WHERE name=?))";
     
     // ============================================
     // User Type Update
@@ -2253,13 +2172,13 @@ UserType_t Database::adminFetchUserType(std::string username, std::string confTi
     sql::ResultSet *rs = NULL;
     
     pstmt = dbcon->prepareStatement(fetchUserType.c_str());
-//    pstmt->setString(1, username);
-//    pstmt->setString(2, confTitle);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
     
     rs = pstmt->executeQuery();
-    int rowCount = static_cast<int>(rs->rowsCount());
-    if (rowCount == 0)
-    {// Empty set in database
+    bool haveRecord = rs->next();
+    if (!haveRecord)
+    {
         userType = AUTHOR;
         setUserAsAuthorByNames(username, confTitle);
     }
@@ -2294,4 +2213,4 @@ void Database::adminChangeUserType(std::string username, std::string confTitle,
             setUserAsPCByNames(username, confTitle);
             break;
     }
-}
\ No newline at end of file
+}
diff --git a/CMS/Database.hpp b/CMS/Database.hpp
index 07232b9..92bc034 100644
--- a/CMS/Database.hpp
+++ b/CMS/Database.hpp
@@ -46,12 +46,10 @@ public:
     std::vector<std::string> allUserNames();
     void setUserAsAuthor(int userID, int confID) throw (const char*);
     void updateUserAsAuthor(int userID, int confID) throw (const char*);
-
-    void setUserAsAuthorByNames(std::string username, std::string confTitle) throw (const char*);
     void setUserAsPC(int userID, int confID) throw (const char*);
-    void setUserAsPCByNames(std::string username, std::string confTitle) throw (const char*);
+    void setUserAsPC(int userID, int confID) throw (const char*);
     void setUserAsChair(int userID, int confID) throw (const char*);
-    void setUserAsChairByNames(std::string username, std::string confTitle) throw (const char*);
+    void updateUserAsChair(int userID, int confID) throw (const char*);
 
 	// KEYWORD
     bool existsKeyword(std::string key) throw (const char*);
diff --git a/CMS/main-admin.cpp b/CMS/main-admin.cpp
index 603279f..2b8aee7 100644
--- a/CMS/main-admin.cpp
+++ b/CMS/main-admin.cpp
@@ -642,17 +642,33 @@ void changeUserType()
             std::cout << "PCMember";
     else if (userType == PCCHAIR)
             std::cout << "PCChair";
+    else
+    {
+        std::cout << "Enter new user's access level for this conference (author, pcmember, chair): ";
+        std::cin >> newUT;
+        
+        if (newUT == "author")
+            db.setUserAsAuthor(userID, confID);
+        else if (newUT == "pcmember")
+            db.setUserAsPC(userID, confID);
+        else if (newUT == "chair")
+            db.setUserAsChair(userID, confID);
+        else
+            std::cout << "Error updating user! User not updated!" << std::endl;
+        
+        adminMainMenu();
+    }
     std::cout << " for conference " << confNames[confid-1] << endl;
     
     std::cout << "Enter new user's access level for this conference (author, pcmember, chair): ";
     std::cin >> newUT;
     
     if (newUT == "author")
-        db.adminChangeUserType(userNames[confid-1], confNames[confid-1], AUTHOR);
+        db.updateUserAsAuthor(userID, confID);
     else if (newUT == "pcmember")
-        db.adminChangeUserType(userNames[confid-1], confNames[confid-1], REVIEWER);
+        db.updateUserAsPC(userID, confID);
     else if (newUT == "chair")
-        db.adminChangeUserType(userNames[confid-1], confNames[confid-1], PCCHAIR);
+        db.updateUserAsChair(userID, confID);
     else
         std::cout << "Error updating user! User not updated!" << std::endl;
     

commit 345a03eac077756e66870e399f008ea306aa453a
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 19:18:10 2014 +1100

    delete old main-admin

diff --git a/main-admin.cpp b/main-admin.cpp
deleted file mode 100644
index dfbe078..0000000
--- a/main-admin.cpp
+++ /dev/null
@@ -1,616 +0,0 @@
-#include <cstdlib>
-#include <iostream>
-#include <fstream>
-#include <string>
-
-#include "Database/Database.hpp"
-#include "Server/User.hpp"
-#include "DataAll/Conference.hpp"
-#include "DataAll/Paper.hpp"
-#include "Algorithm/Algo.hpp"
-
-#include <vector>
-
-void adminMainMenu();
-void createUser();
-void createConf();
-void changeUsername();
-void changePassword();
-void changeConf();
-void setPCChair();
-
-Database db;
-
-int main(int arc, char *argv[])
-{
-    std::string AdminUsername = "";
-    std::string AdminPassword = "";
-    std::string AdminUsernameCheck = "admin";
-    std::string AdminPasswordCheck = "admin";
-
-    if (!db.isOK())
-    {
-            std::cout << "Failed to open database file" << std::endl;
-            exit(1);
-    }
-
-    std::cout << "Admin client" << std::endl << std::endl;
-
-    std::cout << "Enter Admin username: ";
-    std::getline(std::cin, AdminUsername);
-    
-    std::cout << std::endl << "Enter Admin password: ";
-    std::getline(std::cin, AdminPassword);
-
-    bool loginSuccess = false;
-    if (AdminUsername == AdminUsernameCheck)
-    {
-        if (AdminPassword == AdminPasswordCheck)
-            loginSuccess = true;
-    }
-    
-    if (loginSuccess)
-        adminMainMenu();
-
-    return 0;
-}
-
-void adminMainMenu()
-{
-    int selection = -1;
-    std::cout << std::endl << std::endl << "ADMIN MAIN MENU" << std::endl << std::endl;
-    
-    std::cout << "Please select option:" << std::endl;
-    std::cout << "1. Create User" << std::endl;
-    std::cout << "2. Create Conference" << std::endl;
-    std::cout << "3. Change a Users username" << std::endl;
-    std::cout << "4. Change a Users password" << std::endl;
-    std::cout << "5. Change a Conference details" << std::endl;
-    std::cout << "6. Set PC Chair for conference" << std::endl;
-    std::cout << "7. Quit" << std::endl;
-    std::cin >> selection;
-    std::cin.ignore();
-
-    if (selection == 1)
-    {
-        std::cout << "Create User selected" << std::endl;
-        createUser();
-    }
-    else if (selection == 2)
-    {
-        std::cout << "Create Conference selected" << std::endl;
-        createConf();
-    }
-    else if (selection == 3)
-    {
-        std::cout << "Change a Users username selected" << std::endl;
-        changeUsername();
-    }
-    else if (selection == 4)
-    {
-        std::cout << "Change a Users password selected" << std::endl;
-        changePassword();
-    }
-    else if (selection == 5)
-    {
-        std::cout << "Change a Conferences details selected" << std::endl;
-        changeConf();
-    }
-    else if (selection == 6)
-    {
-        std::cout << "Set a PC Chair for a conference selected" << std::endl;
-        setPCChair();
-    }
-    else if (selection == 7)
-    {
-        std::cout << "Quit selected, Quitting..." << std::endl;
-        return;
-    }
-    else
-    {
-        std::cout << "Incorrect Input, Quitting..." << std::endl;
-        return;
-    }
-}
-
-void createUser()
-{
-    std::string username;
-    std::string password;
-    std::string name;
-    std::string email;
-    std::string organisation;
-    std::string phone;
-    std::vector<std::string> keywords;
-    UserType_t userType = AUTHOR;
-
-    std::cout << "Enter username: ";
-    std::getline(std::cin, username);
-    std::cout << "Enter password: ";
-    std::getline(std::cin, password);
-    std::cout << "Enter name: ";
-    std::getline(std::cin, name);
-    std::cout << "Enter email: ";
-    std::getline(std::cin, email);
-    std::cout << "Enter organisation: ";
-    std::getline(std::cin, organisation);
-    std::cout << "Enter phone: ";
-    std::getline(std::cin, phone);
-
-    int keywordsInput = 1;
-    while (keywordsInput == 1)
-    {
-        std::cout << "Select: " << std::endl;
-        std::cout << "1. Add keyword" << std::endl;
-        std::cout << "2. No more keywords" << std::endl;
-        std::cin >> keywordsInput;
-        std::cin.ignore();
-
-        if (keywordsInput == 1)
-        {
-            std::string keyword = "";
-            std::cout << "Keyword: ";
-            std::getline(std::cin, keyword);
-            keywords.push_back(keyword);
-        }
-    }
-
-    User user(
-	username,
-	name,
-	email,
-	organisation,
-	phone,
-	password,
-	keywords,
-        userType);
-
-    bool userExists = db.existsUserName(username);
-
-    std::cout << "User was ";
-    if (!userExists)
-    {
-        db.createUser(user);
-        std::cout << "created successfully" << std::endl;
-    }
-    else
-        std::cout << "not created" << std::endl;
-
-    adminMainMenu();
-}
-
-void createConf()
-{
-    bool active;
-    std::string activeInput;
-    std::string title;
-    std::string topic;
-    std::string description;
-    std::string location;
-    std::vector<std::string> keywords;
-    int paperDeadlineD;
-    int paperDeadlineM;
-    int paperDeadlineY;
-    int allocationDateD;
-    int allocationDateM;
-    int allocationDateY;
-    int reviewDeadlineSoftD;
-    int reviewDeadlineSoftM;
-    int reviewDeadlineSoftY;
-    int reviewDeadlineHardD;
-    int reviewDeadlineHardM;
-    int reviewDeadlineHardY;
-    int discussionDeadlineD;
-    int discussionDeadlineM;
-    int discussionDeadlineY;
-    int reviewersPerPaper;
-    int postWordLimit;
-    bool beforeDate = true;
-
-    std::cout << "Is it active? true/false: ";
-    std::getline(std::cin, activeInput);
-    if(activeInput == "true")
-        active = true;
-    else
-        active = false;
-    std::cout << "Enter title: ";
-    std::getline(std::cin, title);
-    std::cout << "Enter topic: "; 
-    std::getline(std::cin, topic);
-    std::cout << "Enter description: "; 
-    std::getline(std::cin, description);
-    std::cout << "Enter location: ";
-    std::getline(std::cin, location);
-
-    int keywordsInput = 1;
-    while (keywordsInput == 1)
-    {
-        std::cout << "Select: " << std::endl;
-        std::cout << "1. Add keyword" << std::endl;
-        std::cout << "2. No more keywords" << std::endl;
-        std::cin >> keywordsInput;
-        std::cin.ignore();
-
-        if (keywordsInput == 1)
-        {
-            std::string keyword = "";
-            std::cout << "Keyword: ";
-            std::getline(std::cin, keyword);
-            keywords.push_back(keyword);
-        }
-    }
-
-    std::cout << "Enter paper deadline day: ";
-    std::cin >> paperDeadlineD;
-    std::cout << "Enter paper deadline month: ";
-    std::cin >> paperDeadlineM;
-    std::cout << "Enter paper deadline year: ";
-    std::cin >> paperDeadlineY;
-    std::cout << "Enter allocation date day: ";
-    std::cin >> allocationDateD;
-    std::cout << "Enter allocation date month: ";
-    std::cin >> allocationDateM;
-    std::cout << "Enter allocation date year: ";
-    std::cin >> allocationDateY;
-    std::cout << "Enter review deadline soft day: ";
-    std::cin >> reviewDeadlineSoftD;
-    std::cout << "Enter review deadline soft month: ";
-    std::cin >> reviewDeadlineSoftM;
-    std::cout << "Enter review deadline soft year: ";
-    std::cin >> reviewDeadlineSoftY;
-    std::cout << "Enter review deadline hard day: ";
-    std::cin >> reviewDeadlineHardD;
-    std::cout << "Enter review deadline hard month: ";
-    std::cin >> reviewDeadlineHardM;
-    std::cout << "Enter review deadline hard year: ";
-    std::cin >> reviewDeadlineHardY;
-    std::cout << "Enter discussion deadline day: ";
-    std::cin >> discussionDeadlineD;
-    std::cout << "Enter discussion deadline month: ";
-    std::cin >> discussionDeadlineM;
-    std::cout << "Enter discussion deadline year: ";
-    std::cin >> discussionDeadlineY;
-    std::cout << "Enter reviewers per paper: ";
-    std::cin >> reviewersPerPaper;
-    std::cout << "Enter post word limit: ";
-    std::cin >> postWordLimit;
-    std::cin.ignore();
-
-    Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
-    Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
-    Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
-    Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
-    Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
-
-    Conference conf(
-        active,
-	title,
-	topic,
-	description,
-	location,
-	keywords,
-	beforeDate,
-	paperDeadline,
-	beforeDate,
-	allocationDate,
-	beforeDate,
-	reviewDeadlineSoft,
-	beforeDate,
-	reviewDeadlineHard,
-	beforeDate,
-	discussionDeadline,
-	reviewersPerPaper,
-	postWordLimit
-	);
-
-
-    bool confExists = db.existsConfName(title);
-
-    std::cout << "Conference was ";
-    if (!confExists)
-    {
-        db.createConf(conf);
-        std::cout << "created successfully" << std::endl;
-    }
-    else
-        std::cout << "not created" << std::endl;
-
-    adminMainMenu();
-}
-
-void changeUsername()
-{
-    std::string currentUN;
-    std::string newUN;
-    std::cout << "Enter username to change: ";
-    std::getline(std::cin, currentUN);
-
-    bool userExists = db.existsUserName(currentUN);
-    
-    if (userExists)
-    {
-        std::cout << "Enter new username: ";
-        std::getline(std::cin, newUN);
-        bool newUserExists = db.existsUserName(currentUN);
-
-        if (!newUserExists)
-        {
-            db.adminChangeUserName(currentUN, newUN);
-            std::cout << "Username changed successfully" << std::endl;
-        }
-        else
-            std::cout << "Username not changed as already existed";
-    }
-    else
-        std::cout << "User doesn't exist" << std::endl;
-
-    adminMainMenu();
-}
-
-void changePassword()
-{
-    std::string username;
-    std::string password;
-    std::cout << "Enter username to change password for: ";
-    std::getline(std::cin, username);
-
-    bool userExists = db.existsUserName(username);
-    
-    if (userExists)
-    {
-        std::cout << "Enter new password: ";
-        std::getline(std::cin, password);
-
-        db.adminChangePassword(username, password);
-
-        std::cout << "Password changed" << std::endl;
-    }
-    else
-        std::cout << "User doesn't exist" << std::endl;
-
-    adminMainMenu();
-}
-
-void changeConf()
-{
-    bool active;
-    std::string activeInput;
-    std::string title;
-    std::string topic;
-    std::string description;
-    std::string location;
-    std::vector<std::string> keywords;
-    int paperDeadlineD;
-    int paperDeadlineM;
-    int paperDeadlineY;
-    int allocationDateD;
-    int allocationDateM;
-    int allocationDateY;
-    int reviewDeadlineSoftD;
-    int reviewDeadlineSoftM;
-    int reviewDeadlineSoftY;
-    int reviewDeadlineHardD;
-    int reviewDeadlineHardM;
-    int reviewDeadlineHardY;
-    int discussionDeadlineD;
-    int discussionDeadlineM;
-    int discussionDeadlineY;
-    int reviewersPerPaper;
-    int postWordLimit;
-    bool beforeDate = true;
-
-    std::cout << "Enter Conference name: " << std::endl;
-    std::getline(std::cin, title);
-
-    bool confExists = db.existsConfName(title);
-    if (confExists)
-    {
-        Conference conf = db.fetchConference(title);
-        std::cout << "Current Conference details are:" << std::endl;
-        std::cout << "Title: " << conf.title << std::endl;
-        std::cout << "Active: ";
-        if (conf.isActive)
-            std::cout << "yes" << std::endl;
-        else
-            std::cout << "no" << std::endl;
-        std::cout << "Topic: " << conf.topic << std::endl;
-        std::cout << "Description: " << conf.description << std::endl;
-        std::cout << "Location: " << conf.location << std::endl;
-
-        std::cout << "Keywords: " << std::endl;
-        std::vector<std::string>::const_iterator it;
-        for(it=conf.keywords.begin(); it!=conf.keywords.end(); it++)
-        {
-            std::cout << "\t" << *it << std::endl; 
-        }
-
-        std::cout << "Before paper deadline? "; 
-        if (conf.isBeforePaperDeadline)
-            std::cout << "yes" << std::endl;
-        else
-            std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.paperDeadline.convertToString() << std::endl; 
-        
-        std::cout << "Before allocation date? ";
-        if (conf.isBeforeAllocationDate)
-            std::cout << "yes" << std::endl;
-        else
-            std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.allocationDate.convertToString() << std::endl; 
-
-        std::cout << "Before soft review deadline? ";
-        if (conf.isBeforeSoftReviewDeadline)
-            std::cout << "yes" << std::endl;
-        else
-            std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.reviewDeadlineSoft.convertToString() << std::endl; 
-
-        std::cout << "Before hard review deadline? ";
-        if (conf.isBeforeHardReviewDeadline)
-            std::cout << "yes" << std::endl;
-        else
-            std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.reviewDeadlineHard.convertToString() << std::endl; 
-
-        std::cout << "Before discussion deadline? ";
-        if (conf.isBeforeDiscussDeadline)
-            std::cout << "yes" << std::endl;
-        else
-            std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.discussDeadline.convertToString() << std::endl; 
-
-        std::cout << "Reviewers per paper: " << conf.reviewersPerPaper << std::endl;
-        std::cout << "Word limit per post: " << conf.postWordLimit << std::endl << std::endl;
-
-        std::cout << "Please enter new Conference details" << std::endl;
-        std::cout << "Must re enter all details that aren't changing also!!" << std::endl << std::endl;
-
-
-        std::cout << "Is it active? true/false: ";
-        std::getline(std::cin, activeInput);
-        if(activeInput == "true")
-            active = true;
-        else
-            active = false;
-        std::cout << "Enter title: ";
-        std::getline(std::cin, title);
-        std::cout << "Enter topic: "; 
-        std::getline(std::cin, topic);
-        std::cout << "Enter description: "; 
-        std::getline(std::cin, description);
-        std::cout << "Enter location: ";
-        std::getline(std::cin, location);
-
-        int keywordsInput = 1;
-        while (keywordsInput == 1)
-        {
-            std::cout << "Select: " << std::endl;
-            std::cout << "1. Add keyword" << std::endl;
-            std::cout << "2. No more keywords" << std::endl;
-            std::cin >> keywordsInput;
-            std::cin.ignore();
-
-            if (keywordsInput == 1)
-            {
-                std::string keyword = "";
-                std::cout << "Keyword: ";
-                std::getline(std::cin, keyword);
-                keywords.push_back(keyword);
-            }
-        }
-
-        std::cout << "Enter paper deadline day: ";
-        std::cin >> paperDeadlineD;
-        std::cout << "Enter paper deadline month: ";
-        std::cin >> paperDeadlineM;
-        std::cout << "Enter paper deadline year: ";
-        std::cin >> paperDeadlineY;
-        std::cout << "Enter allocation date day: ";
-        std::cin >> allocationDateD;
-        std::cout << "Enter allocation date month: ";
-        std::cin >> allocationDateM;
-        std::cout << "Enter allocation date year: ";
-        std::cin >> allocationDateY;
-        std::cout << "Enter review deadline soft day: ";
-        std::cin >> reviewDeadlineSoftD;
-        std::cout << "Enter review deadline soft month: ";
-        std::cin >> reviewDeadlineSoftM;
-        std::cout << "Enter review deadline soft year: ";
-        std::cin >> reviewDeadlineSoftY;
-        std::cout << "Enter review deadline hard day: ";
-        std::cin >> reviewDeadlineHardD;
-        std::cout << "Enter review deadline hard month: ";
-        std::cin >> reviewDeadlineHardM;
-        std::cout << "Enter review deadline hard year: ";
-        std::cin >> reviewDeadlineHardY;
-        std::cout << "Enter discussion deadline day: ";
-        std::cin >> discussionDeadlineD;
-        std::cout << "Enter discussion deadline month: ";
-        std::cin >> discussionDeadlineM;
-        std::cout << "Enter discussion deadline year: ";
-        std::cin >> discussionDeadlineY;
-        std::cout << "Enter reviewers per paper: ";
-        std::cin >> reviewersPerPaper;
-        std::cout << "Enter post word limit: ";
-        std::cin >> postWordLimit;
-        std::cin.ignore();
-
-        Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
-        Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
-        Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
-        Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
-        Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
-
-        Conference confInput(
-            active,
-            title,
-            topic,
-            description,
-            location,
-            keywords,
-            conf.isBeforePaperDeadline,
-            paperDeadline,
-            conf.isBeforeAllocationDate,
-            allocationDate,
-            conf.isBeforeSoftReviewDeadline,
-            reviewDeadlineSoft,
-            conf.isBeforeHardReviewDeadline,
-            reviewDeadlineHard,
-            conf.isBeforeDiscussDeadline,
-            discussionDeadline,
-            reviewersPerPaper,
-            postWordLimit
-            );
-
-        db.updateConf(confInput);
-
-        std::cout << "Conference was created successfully" << std::endl;
-    }
-    else
-        std::cout << "Conference doesn't exist" << std::endl;
-    
-    adminMainMenu();
-}
-
-void setPCChair()
-{
-    std::vector<std::string> confNames = db.activeConfNames();
-    std::vector<int> confIDs = db.activeConfIDs();
-    std::vector<std::string> userNames = db.allUserNames();
-    std::vector<int> userIDs = db.allUserIDs();
-    int confid;
-    int confID;
-    int userid;
-    int userID;
-
-    std::cout << "Active Conferences are: " << std::endl << std::endl;
-
-    int i = 1;
-    std::vector<std::string>::const_iterator it;
-    for(it=confNames.begin(); it!=confNames.end(); it++)
-    {
-        std::cout << i << ". " << *it << std::endl;
-        i++;
-    }
-    std::cout << "Selection: ";
-    std::cin >> confid;
-
-    confID = confIDs[confid-1]; 
-
-
-    std::cout << "Users are: " << std::endl << std::endl;
-
-    i = 1;
-    for(it=userNames.begin(); it!=userNames.end(); it++)
-    {
-        std::cout << i << ". " << *it << std::endl;
-        i++;
-    }
-    std::cout << "Selection: ";
-    std::cin >> userid;
-
-    userID = userIDs[userid-1]; 
-    std::cout << userNames[userid-1] << " is now PC Chair of " << confNames[confid-1] << std::endl;
-    db.setUserAsChair(userID, confID);
-}
-

commit 31f8266404c562814c90ca7b184340d4b2873368
Merge: 59f8392 2d97dd8
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 19:16:53 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 2d97dd856313affec4304bd6612521ae1b33b6f9
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 19:15:48 2014 +1100

    Update MainWindow.cpp

diff --git a/CMS/MainWindow.cpp b/CMS/MainWindow.cpp
index fdc3360..0a0c6d9 100644
--- a/CMS/MainWindow.cpp
+++ b/CMS/MainWindow.cpp
@@ -6,6 +6,7 @@
 #include <QIODevice>
 #include <QBuffer>
 #include <QByteArray>
+#include "PersonalInfo.hpp"
 
 MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 {
@@ -544,7 +545,6 @@ void MainWindow::populate_usersTab()
 
 void MainWindow::on_submit_clicked()
 {
-<<<<<<< Updated upstream
     // get all fields from gui
     // set Paper
     
@@ -561,23 +561,29 @@ void MainWindow::on_submit_clicked()
     int numRows = ui->authorsTable->rowCount();
     for (int row = 0; row < numRows; ++row) {
         anAuth = PersonalInfo();
-        anAuth.name = ui->authorsTable->item(row, 0);
-        anAuth.email = ui->authorsTable->item(row, 1);
-        anAuth.organisation = ui->authorsTable->item(row, 2);
-        anAuth.phone = ui->authorsTable->item(row, 3);
+        anAuth.name = ui->authorsTable->item(row, 0)->text().toStdString();
+        anAuth.email = ui->authorsTable->item(row, 1)->text().toStdString();
+        anAuth.organisation = ui->authorsTable->item(row, 2)->text().toStdString();
+        anAuth.phone = ui->authorsTable->item(row, 3)->text().toStdString();
         aPaper.authors.push_back(anAuth);
     }
     
     //clear current paper keywords and populate with list from gui
-    aPaper.authors.clear();
+    aPaper.keywords.clear();
     int numKwords = ui->paperKeyListAuth->count();
     for (int i = 0; i < numKwords; ++i)
-        aPaper.authors.push_back(ui->paperKeyListAuth->item(i)->text().toStdString());
+        aPaper.keywords.push_back(ui->paperKeyListAuth->item(i)->text().toStdString());
     
     aPaper.abstract = ui->paperAbstract->toPlainText().toStdString();
     
     aPaper.confKeyword = ui->selectMainKey->currentText().toStdString();
     
+    // if new paper upload pdf
+    if (newPaper)
+    {
+        
+    }
+    
 //    //the pdf
 //    QFile file(filename);
 //    if(!file.open(QIODEVICE::ReadOnly)){

commit 59f8392accf13a901f50b795d6dca203200655a8
Merge: d06a4aa d3a611d
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 19:15:47 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit d3a611dd4afe412a22fd7a7990ae3ccf7b91b6d3
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 19:15:20 2014 +1100

    Update MainWindow.hpp

diff --git a/CMS/MainWindow.hpp b/CMS/MainWindow.hpp
index 69f3336..c6be04b 100644
--- a/CMS/MainWindow.hpp
+++ b/CMS/MainWindow.hpp
@@ -10,6 +10,7 @@
 #include <vector>
 #include "PaperSummary.hpp"
 #include "ui_MainWindow.h"
+#include "Paper.hpp"
 
 namespace Ui {
     class MainWindow;

commit d06a4aa0f3570efa6d59a4185e1ecf7b959ca312
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 29 19:15:03 2014 +1100

    admin-client changes

diff --git a/CMS/main-admin.cpp b/CMS/main-admin.cpp
index 0327a6a..603279f 100644
--- a/CMS/main-admin.cpp
+++ b/CMS/main-admin.cpp
@@ -592,51 +592,69 @@ void changeConf()
 
 void changeUserType()
 {
-    std::string username;
-    std::string confTitle;
-    std::string newUT;
+    std::vector<std::string> confNames = db.activeConfNames();
+    std::vector<int> confIDs = db.activeConfIDs();
+    std::vector<std::string> userNames = db.allUserNames();
+    std::vector<int> userIDs = db.allUserIDs();
+    int confid;
+    int confID;
+    int userid;
+    int userID;
     UserType_t userType;
-    std::cout << "Enter username to access for: ";
-    std::getline(std::cin, username);
+    std::string newUT;
 
-    bool userExists = db.existsUserName(username);
-    
-    if (userExists)
+    std::cout << "Active Conferences are: " << std::endl << std::endl;
+
+    int i = 1;
+    std::vector<std::string>::const_iterator it;
+    for(it=confNames.begin(); it!=confNames.end(); it++)
     {
-        std::cout << "Enter Conference name: ";
-        std::getline(std::cin, confTitle);
+        std::cout << i << ". " << *it << std::endl;
+        i++;
+    }
+    std::cout << "Selection: ";
+    std::cin >> confid;
 
-        bool confExists = db.existsConfName(confTitle);
-        if (confExists)
-        {
-            userType = db.adminFetchUserType(username, confTitle);
-            
-            std::cout << username << " is currently a(n) ";
-            if (userType == AUTHOR)
-                    std::cout << "Author";
-            else if (userType == REVIEWER)
-                    std::cout << "PCMember";
-            else if (userType == PCCHAIR)
-                    std::cout << "PCChair";
-            std::cout << " for conference " << confTitle << endl;
-            
-            std::cout << "Enter new user's access level for this conference (author, pcmember, chair): ";
-            std::cin >> newUT;
-            
-            if (newUT == "author")
-                db.adminChangeUserType(username, confTitle, AUTHOR);
-            else if (newUT == "pcmember")
-                db.adminChangeUserType(username, confTitle, REVIEWER);
-            else if (newUT == "chair")
-                db.adminChangeUserType(username, confTitle, PCCHAIR);
-            else
-                std::cout << "Error updating user! User not updated!" << std::endl;
-        }
-        else
-            std::cout << "Conference doesn't exist" << std::endl;
+    confID = confIDs[confid-1]; 
+
+
+    std::cout << "Users are: " << std::endl << std::endl;
+
+    i = 1;
+    for(it=userNames.begin(); it!=userNames.end(); it++)
+    {
+        std::cout << i << ". " << *it << std::endl;
+        i++;
     }
+    std::cout << "Selection: ";
+    std::cin >> userid;
+
+    userID = userIDs[userid-1]; 
+    std::cout << userNames[userid-1] << " is now PC Chair of " << confNames[confid-1] << std::endl;
+    db.setUserAsChair(userID, confID);
+
+    userType = db.adminFetchUserType(userNames[userid-1], confNames[confid-1]);
+            
+    std::cout << userNames[userid-1] << " is currently a(n) ";
+    if (userType == AUTHOR)
+            std::cout << "Author";
+    else if (userType == REVIEWER)
+            std::cout << "PCMember";
+    else if (userType == PCCHAIR)
+            std::cout << "PCChair";
+    std::cout << " for conference " << confNames[confid-1] << endl;
+    
+    std::cout << "Enter new user's access level for this conference (author, pcmember, chair): ";
+    std::cin >> newUT;
+    
+    if (newUT == "author")
+        db.adminChangeUserType(userNames[confid-1], confNames[confid-1], AUTHOR);
+    else if (newUT == "pcmember")
+        db.adminChangeUserType(userNames[confid-1], confNames[confid-1], REVIEWER);
+    else if (newUT == "chair")
+        db.adminChangeUserType(userNames[confid-1], confNames[confid-1], PCCHAIR);
     else
-        std::cout << "User doesn't exist" << std::endl;
+        std::cout << "Error updating user! User not updated!" << std::endl;
     
     adminMainMenu();
-}
\ No newline at end of file
+}
diff --git a/CMS/main-admin2.cpp b/CMS/main-admin2.cpp
new file mode 100644
index 0000000..dfbe078
--- /dev/null
+++ b/CMS/main-admin2.cpp
@@ -0,0 +1,616 @@
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "Database/Database.hpp"
+#include "Server/User.hpp"
+#include "DataAll/Conference.hpp"
+#include "DataAll/Paper.hpp"
+#include "Algorithm/Algo.hpp"
+
+#include <vector>
+
+void adminMainMenu();
+void createUser();
+void createConf();
+void changeUsername();
+void changePassword();
+void changeConf();
+void setPCChair();
+
+Database db;
+
+int main(int arc, char *argv[])
+{
+    std::string AdminUsername = "";
+    std::string AdminPassword = "";
+    std::string AdminUsernameCheck = "admin";
+    std::string AdminPasswordCheck = "admin";
+
+    if (!db.isOK())
+    {
+            std::cout << "Failed to open database file" << std::endl;
+            exit(1);
+    }
+
+    std::cout << "Admin client" << std::endl << std::endl;
+
+    std::cout << "Enter Admin username: ";
+    std::getline(std::cin, AdminUsername);
+    
+    std::cout << std::endl << "Enter Admin password: ";
+    std::getline(std::cin, AdminPassword);
+
+    bool loginSuccess = false;
+    if (AdminUsername == AdminUsernameCheck)
+    {
+        if (AdminPassword == AdminPasswordCheck)
+            loginSuccess = true;
+    }
+    
+    if (loginSuccess)
+        adminMainMenu();
+
+    return 0;
+}
+
+void adminMainMenu()
+{
+    int selection = -1;
+    std::cout << std::endl << std::endl << "ADMIN MAIN MENU" << std::endl << std::endl;
+    
+    std::cout << "Please select option:" << std::endl;
+    std::cout << "1. Create User" << std::endl;
+    std::cout << "2. Create Conference" << std::endl;
+    std::cout << "3. Change a Users username" << std::endl;
+    std::cout << "4. Change a Users password" << std::endl;
+    std::cout << "5. Change a Conference details" << std::endl;
+    std::cout << "6. Set PC Chair for conference" << std::endl;
+    std::cout << "7. Quit" << std::endl;
+    std::cin >> selection;
+    std::cin.ignore();
+
+    if (selection == 1)
+    {
+        std::cout << "Create User selected" << std::endl;
+        createUser();
+    }
+    else if (selection == 2)
+    {
+        std::cout << "Create Conference selected" << std::endl;
+        createConf();
+    }
+    else if (selection == 3)
+    {
+        std::cout << "Change a Users username selected" << std::endl;
+        changeUsername();
+    }
+    else if (selection == 4)
+    {
+        std::cout << "Change a Users password selected" << std::endl;
+        changePassword();
+    }
+    else if (selection == 5)
+    {
+        std::cout << "Change a Conferences details selected" << std::endl;
+        changeConf();
+    }
+    else if (selection == 6)
+    {
+        std::cout << "Set a PC Chair for a conference selected" << std::endl;
+        setPCChair();
+    }
+    else if (selection == 7)
+    {
+        std::cout << "Quit selected, Quitting..." << std::endl;
+        return;
+    }
+    else
+    {
+        std::cout << "Incorrect Input, Quitting..." << std::endl;
+        return;
+    }
+}
+
+void createUser()
+{
+    std::string username;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    std::vector<std::string> keywords;
+    UserType_t userType = AUTHOR;
+
+    std::cout << "Enter username: ";
+    std::getline(std::cin, username);
+    std::cout << "Enter password: ";
+    std::getline(std::cin, password);
+    std::cout << "Enter name: ";
+    std::getline(std::cin, name);
+    std::cout << "Enter email: ";
+    std::getline(std::cin, email);
+    std::cout << "Enter organisation: ";
+    std::getline(std::cin, organisation);
+    std::cout << "Enter phone: ";
+    std::getline(std::cin, phone);
+
+    int keywordsInput = 1;
+    while (keywordsInput == 1)
+    {
+        std::cout << "Select: " << std::endl;
+        std::cout << "1. Add keyword" << std::endl;
+        std::cout << "2. No more keywords" << std::endl;
+        std::cin >> keywordsInput;
+        std::cin.ignore();
+
+        if (keywordsInput == 1)
+        {
+            std::string keyword = "";
+            std::cout << "Keyword: ";
+            std::getline(std::cin, keyword);
+            keywords.push_back(keyword);
+        }
+    }
+
+    User user(
+	username,
+	name,
+	email,
+	organisation,
+	phone,
+	password,
+	keywords,
+        userType);
+
+    bool userExists = db.existsUserName(username);
+
+    std::cout << "User was ";
+    if (!userExists)
+    {
+        db.createUser(user);
+        std::cout << "created successfully" << std::endl;
+    }
+    else
+        std::cout << "not created" << std::endl;
+
+    adminMainMenu();
+}
+
+void createConf()
+{
+    bool active;
+    std::string activeInput;
+    std::string title;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    int paperDeadlineD;
+    int paperDeadlineM;
+    int paperDeadlineY;
+    int allocationDateD;
+    int allocationDateM;
+    int allocationDateY;
+    int reviewDeadlineSoftD;
+    int reviewDeadlineSoftM;
+    int reviewDeadlineSoftY;
+    int reviewDeadlineHardD;
+    int reviewDeadlineHardM;
+    int reviewDeadlineHardY;
+    int discussionDeadlineD;
+    int discussionDeadlineM;
+    int discussionDeadlineY;
+    int reviewersPerPaper;
+    int postWordLimit;
+    bool beforeDate = true;
+
+    std::cout << "Is it active? true/false: ";
+    std::getline(std::cin, activeInput);
+    if(activeInput == "true")
+        active = true;
+    else
+        active = false;
+    std::cout << "Enter title: ";
+    std::getline(std::cin, title);
+    std::cout << "Enter topic: "; 
+    std::getline(std::cin, topic);
+    std::cout << "Enter description: "; 
+    std::getline(std::cin, description);
+    std::cout << "Enter location: ";
+    std::getline(std::cin, location);
+
+    int keywordsInput = 1;
+    while (keywordsInput == 1)
+    {
+        std::cout << "Select: " << std::endl;
+        std::cout << "1. Add keyword" << std::endl;
+        std::cout << "2. No more keywords" << std::endl;
+        std::cin >> keywordsInput;
+        std::cin.ignore();
+
+        if (keywordsInput == 1)
+        {
+            std::string keyword = "";
+            std::cout << "Keyword: ";
+            std::getline(std::cin, keyword);
+            keywords.push_back(keyword);
+        }
+    }
+
+    std::cout << "Enter paper deadline day: ";
+    std::cin >> paperDeadlineD;
+    std::cout << "Enter paper deadline month: ";
+    std::cin >> paperDeadlineM;
+    std::cout << "Enter paper deadline year: ";
+    std::cin >> paperDeadlineY;
+    std::cout << "Enter allocation date day: ";
+    std::cin >> allocationDateD;
+    std::cout << "Enter allocation date month: ";
+    std::cin >> allocationDateM;
+    std::cout << "Enter allocation date year: ";
+    std::cin >> allocationDateY;
+    std::cout << "Enter review deadline soft day: ";
+    std::cin >> reviewDeadlineSoftD;
+    std::cout << "Enter review deadline soft month: ";
+    std::cin >> reviewDeadlineSoftM;
+    std::cout << "Enter review deadline soft year: ";
+    std::cin >> reviewDeadlineSoftY;
+    std::cout << "Enter review deadline hard day: ";
+    std::cin >> reviewDeadlineHardD;
+    std::cout << "Enter review deadline hard month: ";
+    std::cin >> reviewDeadlineHardM;
+    std::cout << "Enter review deadline hard year: ";
+    std::cin >> reviewDeadlineHardY;
+    std::cout << "Enter discussion deadline day: ";
+    std::cin >> discussionDeadlineD;
+    std::cout << "Enter discussion deadline month: ";
+    std::cin >> discussionDeadlineM;
+    std::cout << "Enter discussion deadline year: ";
+    std::cin >> discussionDeadlineY;
+    std::cout << "Enter reviewers per paper: ";
+    std::cin >> reviewersPerPaper;
+    std::cout << "Enter post word limit: ";
+    std::cin >> postWordLimit;
+    std::cin.ignore();
+
+    Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+    Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+    Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
+    Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+    Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
+
+    Conference conf(
+        active,
+	title,
+	topic,
+	description,
+	location,
+	keywords,
+	beforeDate,
+	paperDeadline,
+	beforeDate,
+	allocationDate,
+	beforeDate,
+	reviewDeadlineSoft,
+	beforeDate,
+	reviewDeadlineHard,
+	beforeDate,
+	discussionDeadline,
+	reviewersPerPaper,
+	postWordLimit
+	);
+
+
+    bool confExists = db.existsConfName(title);
+
+    std::cout << "Conference was ";
+    if (!confExists)
+    {
+        db.createConf(conf);
+        std::cout << "created successfully" << std::endl;
+    }
+    else
+        std::cout << "not created" << std::endl;
+
+    adminMainMenu();
+}
+
+void changeUsername()
+{
+    std::string currentUN;
+    std::string newUN;
+    std::cout << "Enter username to change: ";
+    std::getline(std::cin, currentUN);
+
+    bool userExists = db.existsUserName(currentUN);
+    
+    if (userExists)
+    {
+        std::cout << "Enter new username: ";
+        std::getline(std::cin, newUN);
+        bool newUserExists = db.existsUserName(currentUN);
+
+        if (!newUserExists)
+        {
+            db.adminChangeUserName(currentUN, newUN);
+            std::cout << "Username changed successfully" << std::endl;
+        }
+        else
+            std::cout << "Username not changed as already existed";
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+
+    adminMainMenu();
+}
+
+void changePassword()
+{
+    std::string username;
+    std::string password;
+    std::cout << "Enter username to change password for: ";
+    std::getline(std::cin, username);
+
+    bool userExists = db.existsUserName(username);
+    
+    if (userExists)
+    {
+        std::cout << "Enter new password: ";
+        std::getline(std::cin, password);
+
+        db.adminChangePassword(username, password);
+
+        std::cout << "Password changed" << std::endl;
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+
+    adminMainMenu();
+}
+
+void changeConf()
+{
+    bool active;
+    std::string activeInput;
+    std::string title;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    int paperDeadlineD;
+    int paperDeadlineM;
+    int paperDeadlineY;
+    int allocationDateD;
+    int allocationDateM;
+    int allocationDateY;
+    int reviewDeadlineSoftD;
+    int reviewDeadlineSoftM;
+    int reviewDeadlineSoftY;
+    int reviewDeadlineHardD;
+    int reviewDeadlineHardM;
+    int reviewDeadlineHardY;
+    int discussionDeadlineD;
+    int discussionDeadlineM;
+    int discussionDeadlineY;
+    int reviewersPerPaper;
+    int postWordLimit;
+    bool beforeDate = true;
+
+    std::cout << "Enter Conference name: " << std::endl;
+    std::getline(std::cin, title);
+
+    bool confExists = db.existsConfName(title);
+    if (confExists)
+    {
+        Conference conf = db.fetchConference(title);
+        std::cout << "Current Conference details are:" << std::endl;
+        std::cout << "Title: " << conf.title << std::endl;
+        std::cout << "Active: ";
+        if (conf.isActive)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Topic: " << conf.topic << std::endl;
+        std::cout << "Description: " << conf.description << std::endl;
+        std::cout << "Location: " << conf.location << std::endl;
+
+        std::cout << "Keywords: " << std::endl;
+        std::vector<std::string>::const_iterator it;
+        for(it=conf.keywords.begin(); it!=conf.keywords.end(); it++)
+        {
+            std::cout << "\t" << *it << std::endl; 
+        }
+
+        std::cout << "Before paper deadline? "; 
+        if (conf.isBeforePaperDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.paperDeadline.convertToString() << std::endl; 
+        
+        std::cout << "Before allocation date? ";
+        if (conf.isBeforeAllocationDate)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.allocationDate.convertToString() << std::endl; 
+
+        std::cout << "Before soft review deadline? ";
+        if (conf.isBeforeSoftReviewDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.reviewDeadlineSoft.convertToString() << std::endl; 
+
+        std::cout << "Before hard review deadline? ";
+        if (conf.isBeforeHardReviewDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.reviewDeadlineHard.convertToString() << std::endl; 
+
+        std::cout << "Before discussion deadline? ";
+        if (conf.isBeforeDiscussDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.discussDeadline.convertToString() << std::endl; 
+
+        std::cout << "Reviewers per paper: " << conf.reviewersPerPaper << std::endl;
+        std::cout << "Word limit per post: " << conf.postWordLimit << std::endl << std::endl;
+
+        std::cout << "Please enter new Conference details" << std::endl;
+        std::cout << "Must re enter all details that aren't changing also!!" << std::endl << std::endl;
+
+
+        std::cout << "Is it active? true/false: ";
+        std::getline(std::cin, activeInput);
+        if(activeInput == "true")
+            active = true;
+        else
+            active = false;
+        std::cout << "Enter title: ";
+        std::getline(std::cin, title);
+        std::cout << "Enter topic: "; 
+        std::getline(std::cin, topic);
+        std::cout << "Enter description: "; 
+        std::getline(std::cin, description);
+        std::cout << "Enter location: ";
+        std::getline(std::cin, location);
+
+        int keywordsInput = 1;
+        while (keywordsInput == 1)
+        {
+            std::cout << "Select: " << std::endl;
+            std::cout << "1. Add keyword" << std::endl;
+            std::cout << "2. No more keywords" << std::endl;
+            std::cin >> keywordsInput;
+            std::cin.ignore();
+
+            if (keywordsInput == 1)
+            {
+                std::string keyword = "";
+                std::cout << "Keyword: ";
+                std::getline(std::cin, keyword);
+                keywords.push_back(keyword);
+            }
+        }
+
+        std::cout << "Enter paper deadline day: ";
+        std::cin >> paperDeadlineD;
+        std::cout << "Enter paper deadline month: ";
+        std::cin >> paperDeadlineM;
+        std::cout << "Enter paper deadline year: ";
+        std::cin >> paperDeadlineY;
+        std::cout << "Enter allocation date day: ";
+        std::cin >> allocationDateD;
+        std::cout << "Enter allocation date month: ";
+        std::cin >> allocationDateM;
+        std::cout << "Enter allocation date year: ";
+        std::cin >> allocationDateY;
+        std::cout << "Enter review deadline soft day: ";
+        std::cin >> reviewDeadlineSoftD;
+        std::cout << "Enter review deadline soft month: ";
+        std::cin >> reviewDeadlineSoftM;
+        std::cout << "Enter review deadline soft year: ";
+        std::cin >> reviewDeadlineSoftY;
+        std::cout << "Enter review deadline hard day: ";
+        std::cin >> reviewDeadlineHardD;
+        std::cout << "Enter review deadline hard month: ";
+        std::cin >> reviewDeadlineHardM;
+        std::cout << "Enter review deadline hard year: ";
+        std::cin >> reviewDeadlineHardY;
+        std::cout << "Enter discussion deadline day: ";
+        std::cin >> discussionDeadlineD;
+        std::cout << "Enter discussion deadline month: ";
+        std::cin >> discussionDeadlineM;
+        std::cout << "Enter discussion deadline year: ";
+        std::cin >> discussionDeadlineY;
+        std::cout << "Enter reviewers per paper: ";
+        std::cin >> reviewersPerPaper;
+        std::cout << "Enter post word limit: ";
+        std::cin >> postWordLimit;
+        std::cin.ignore();
+
+        Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+        Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+        Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
+        Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+        Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
+
+        Conference confInput(
+            active,
+            title,
+            topic,
+            description,
+            location,
+            keywords,
+            conf.isBeforePaperDeadline,
+            paperDeadline,
+            conf.isBeforeAllocationDate,
+            allocationDate,
+            conf.isBeforeSoftReviewDeadline,
+            reviewDeadlineSoft,
+            conf.isBeforeHardReviewDeadline,
+            reviewDeadlineHard,
+            conf.isBeforeDiscussDeadline,
+            discussionDeadline,
+            reviewersPerPaper,
+            postWordLimit
+            );
+
+        db.updateConf(confInput);
+
+        std::cout << "Conference was created successfully" << std::endl;
+    }
+    else
+        std::cout << "Conference doesn't exist" << std::endl;
+    
+    adminMainMenu();
+}
+
+void setPCChair()
+{
+    std::vector<std::string> confNames = db.activeConfNames();
+    std::vector<int> confIDs = db.activeConfIDs();
+    std::vector<std::string> userNames = db.allUserNames();
+    std::vector<int> userIDs = db.allUserIDs();
+    int confid;
+    int confID;
+    int userid;
+    int userID;
+
+    std::cout << "Active Conferences are: " << std::endl << std::endl;
+
+    int i = 1;
+    std::vector<std::string>::const_iterator it;
+    for(it=confNames.begin(); it!=confNames.end(); it++)
+    {
+        std::cout << i << ". " << *it << std::endl;
+        i++;
+    }
+    std::cout << "Selection: ";
+    std::cin >> confid;
+
+    confID = confIDs[confid-1]; 
+
+
+    std::cout << "Users are: " << std::endl << std::endl;
+
+    i = 1;
+    for(it=userNames.begin(); it!=userNames.end(); it++)
+    {
+        std::cout << i << ". " << *it << std::endl;
+        i++;
+    }
+    std::cout << "Selection: ";
+    std::cin >> userid;
+
+    userID = userIDs[userid-1]; 
+    std::cout << userNames[userid-1] << " is now PC Chair of " << confNames[confid-1] << std::endl;
+    db.setUserAsChair(userID, confID);
+}
+
diff --git a/main-admin.cpp b/main-admin.cpp
index cfa1981..dfbe078 100644
--- a/main-admin.cpp
+++ b/main-admin.cpp
@@ -17,6 +17,7 @@ void createConf();
 void changeUsername();
 void changePassword();
 void changeConf();
+void setPCChair();
 
 Database db;
 
@@ -36,10 +37,10 @@ int main(int arc, char *argv[])
     std::cout << "Admin client" << std::endl << std::endl;
 
     std::cout << "Enter Admin username: ";
-    std::cin >> AdminUsername;
+    std::getline(std::cin, AdminUsername);
     
     std::cout << std::endl << "Enter Admin password: ";
-    std::cin >> AdminPassword;
+    std::getline(std::cin, AdminPassword);
 
     bool loginSuccess = false;
     if (AdminUsername == AdminUsernameCheck)
@@ -65,8 +66,10 @@ void adminMainMenu()
     std::cout << "3. Change a Users username" << std::endl;
     std::cout << "4. Change a Users password" << std::endl;
     std::cout << "5. Change a Conference details" << std::endl;
-    std::cout << "6. Quit" << std::endl;
+    std::cout << "6. Set PC Chair for conference" << std::endl;
+    std::cout << "7. Quit" << std::endl;
     std::cin >> selection;
+    std::cin.ignore();
 
     if (selection == 1)
     {
@@ -95,6 +98,11 @@ void adminMainMenu()
     }
     else if (selection == 6)
     {
+        std::cout << "Set a PC Chair for a conference selected" << std::endl;
+        setPCChair();
+    }
+    else if (selection == 7)
+    {
         std::cout << "Quit selected, Quitting..." << std::endl;
         return;
     }
@@ -117,17 +125,17 @@ void createUser()
     UserType_t userType = AUTHOR;
 
     std::cout << "Enter username: ";
-    std::cin >> username;
+    std::getline(std::cin, username);
     std::cout << "Enter password: ";
-    std::cin >> password;
+    std::getline(std::cin, password);
     std::cout << "Enter name: ";
-    std::cin >> name;
+    std::getline(std::cin, name);
     std::cout << "Enter email: ";
-    std::cin >> email;
+    std::getline(std::cin, email);
     std::cout << "Enter organisation: ";
-    std::cin >> organisation;
+    std::getline(std::cin, organisation);
     std::cout << "Enter phone: ";
-    std::cin >> phone;
+    std::getline(std::cin, phone);
 
     int keywordsInput = 1;
     while (keywordsInput == 1)
@@ -136,12 +144,13 @@ void createUser()
         std::cout << "1. Add keyword" << std::endl;
         std::cout << "2. No more keywords" << std::endl;
         std::cin >> keywordsInput;
+        std::cin.ignore();
 
         if (keywordsInput == 1)
         {
             std::string keyword = "";
             std::cout << "Keyword: ";
-            std::cin >> keyword;
+            std::getline(std::cin, keyword);
             keywords.push_back(keyword);
         }
     }
@@ -173,6 +182,7 @@ void createUser()
 void createConf()
 {
     bool active;
+    std::string activeInput;
     std::string title;
     std::string topic;
     std::string description;
@@ -198,15 +208,19 @@ void createConf()
     bool beforeDate = true;
 
     std::cout << "Is it active? true/false: ";
-    std::cin >> active;
+    std::getline(std::cin, activeInput);
+    if(activeInput == "true")
+        active = true;
+    else
+        active = false;
     std::cout << "Enter title: ";
-    std::cin >> title;
+    std::getline(std::cin, title);
     std::cout << "Enter topic: "; 
-    std::cin >> topic;
+    std::getline(std::cin, topic);
     std::cout << "Enter description: "; 
-    std::cin >> description;
+    std::getline(std::cin, description);
     std::cout << "Enter location: ";
-    std::cin >> location;
+    std::getline(std::cin, location);
 
     int keywordsInput = 1;
     while (keywordsInput == 1)
@@ -215,12 +229,13 @@ void createConf()
         std::cout << "1. Add keyword" << std::endl;
         std::cout << "2. No more keywords" << std::endl;
         std::cin >> keywordsInput;
+        std::cin.ignore();
 
         if (keywordsInput == 1)
         {
             std::string keyword = "";
             std::cout << "Keyword: ";
-            std::cin >> keyword;
+            std::getline(std::cin, keyword);
             keywords.push_back(keyword);
         }
     }
@@ -259,6 +274,7 @@ void createConf()
     std::cin >> reviewersPerPaper;
     std::cout << "Enter post word limit: ";
     std::cin >> postWordLimit;
+    std::cin.ignore();
 
     Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
     Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
@@ -307,14 +323,14 @@ void changeUsername()
     std::string currentUN;
     std::string newUN;
     std::cout << "Enter username to change: ";
-    std::cin >> currentUN;
+    std::getline(std::cin, currentUN);
 
     bool userExists = db.existsUserName(currentUN);
     
     if (userExists)
     {
         std::cout << "Enter new username: ";
-        std::cin >> newUN;
+        std::getline(std::cin, newUN);
         bool newUserExists = db.existsUserName(currentUN);
 
         if (!newUserExists)
@@ -336,14 +352,14 @@ void changePassword()
     std::string username;
     std::string password;
     std::cout << "Enter username to change password for: ";
-    std::cin >> username;
+    std::getline(std::cin, username);
 
     bool userExists = db.existsUserName(username);
     
     if (userExists)
     {
         std::cout << "Enter new password: ";
-        std::cin >> password;
+        std::getline(std::cin, password);
 
         db.adminChangePassword(username, password);
 
@@ -358,6 +374,7 @@ void changePassword()
 void changeConf()
 {
     bool active;
+    std::string activeInput;
     std::string title;
     std::string topic;
     std::string description;
@@ -383,7 +400,7 @@ void changeConf()
     bool beforeDate = true;
 
     std::cout << "Enter Conference name: " << std::endl;
-    std::cin >> title;
+    std::getline(std::cin, title);
 
     bool confExists = db.existsConfName(title);
     if (confExists)
@@ -412,53 +429,57 @@ void changeConf()
             std::cout << "yes" << std::endl;
         else
             std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.paperDeadline.convertToString(); 
+        std::cout << "Date: " << conf.paperDeadline.convertToString() << std::endl; 
         
         std::cout << "Before allocation date? ";
         if (conf.isBeforeAllocationDate)
             std::cout << "yes" << std::endl;
         else
             std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.allocationDate.convertToString(); 
+        std::cout << "Date: " << conf.allocationDate.convertToString() << std::endl; 
 
         std::cout << "Before soft review deadline? ";
         if (conf.isBeforeSoftReviewDeadline)
             std::cout << "yes" << std::endl;
         else
             std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.reviewDeadlineSoft.convertToString(); 
+        std::cout << "Date: " << conf.reviewDeadlineSoft.convertToString() << std::endl; 
 
         std::cout << "Before hard review deadline? ";
         if (conf.isBeforeHardReviewDeadline)
             std::cout << "yes" << std::endl;
         else
             std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.reviewDeadlineHard.convertToString(); 
+        std::cout << "Date: " << conf.reviewDeadlineHard.convertToString() << std::endl; 
 
         std::cout << "Before discussion deadline? ";
         if (conf.isBeforeDiscussDeadline)
             std::cout << "yes" << std::endl;
         else
             std::cout << "no" << std::endl;
-        std::cout << "Date: " << conf.discussDeadline.convertToString(); 
+        std::cout << "Date: " << conf.discussDeadline.convertToString() << std::endl; 
 
-        std::cout << "Reviewers per paper: " << conf.reviewersPerPaper;
-        std::cout << "Word limit per post: " << conf.postWordLimit;
+        std::cout << "Reviewers per paper: " << conf.reviewersPerPaper << std::endl;
+        std::cout << "Word limit per post: " << conf.postWordLimit << std::endl << std::endl;
 
         std::cout << "Please enter new Conference details" << std::endl;
         std::cout << "Must re enter all details that aren't changing also!!" << std::endl << std::endl;
 
 
         std::cout << "Is it active? true/false: ";
-        std::cin >> active;
+        std::getline(std::cin, activeInput);
+        if(activeInput == "true")
+            active = true;
+        else
+            active = false;
         std::cout << "Enter title: ";
-        std::cin >> title;
+        std::getline(std::cin, title);
         std::cout << "Enter topic: "; 
-        std::cin >> topic;
+        std::getline(std::cin, topic);
         std::cout << "Enter description: "; 
-        std::cin >> description;
+        std::getline(std::cin, description);
         std::cout << "Enter location: ";
-        std::cin >> location;
+        std::getline(std::cin, location);
 
         int keywordsInput = 1;
         while (keywordsInput == 1)
@@ -467,12 +488,13 @@ void changeConf()
             std::cout << "1. Add keyword" << std::endl;
             std::cout << "2. No more keywords" << std::endl;
             std::cin >> keywordsInput;
+            std::cin.ignore();
 
             if (keywordsInput == 1)
             {
                 std::string keyword = "";
                 std::cout << "Keyword: ";
-                std::cin >> keyword;
+                std::getline(std::cin, keyword);
                 keywords.push_back(keyword);
             }
         }
@@ -511,6 +533,7 @@ void changeConf()
         std::cin >> reviewersPerPaper;
         std::cout << "Enter post word limit: ";
         std::cin >> postWordLimit;
+        std::cin.ignore();
 
         Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
         Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
@@ -518,11 +541,6 @@ void changeConf()
         Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
         Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
 
-        std::cout << "Enter reviewers per paper: ";
-        std::cin >> reviewersPerPaper;
-        std::cout << "Enter post word limit: ";
-        std::cin >> postWordLimit;
-
         Conference confInput(
             active,
             title,
@@ -554,3 +572,45 @@ void changeConf()
     adminMainMenu();
 }
 
+void setPCChair()
+{
+    std::vector<std::string> confNames = db.activeConfNames();
+    std::vector<int> confIDs = db.activeConfIDs();
+    std::vector<std::string> userNames = db.allUserNames();
+    std::vector<int> userIDs = db.allUserIDs();
+    int confid;
+    int confID;
+    int userid;
+    int userID;
+
+    std::cout << "Active Conferences are: " << std::endl << std::endl;
+
+    int i = 1;
+    std::vector<std::string>::const_iterator it;
+    for(it=confNames.begin(); it!=confNames.end(); it++)
+    {
+        std::cout << i << ". " << *it << std::endl;
+        i++;
+    }
+    std::cout << "Selection: ";
+    std::cin >> confid;
+
+    confID = confIDs[confid-1]; 
+
+
+    std::cout << "Users are: " << std::endl << std::endl;
+
+    i = 1;
+    for(it=userNames.begin(); it!=userNames.end(); it++)
+    {
+        std::cout << i << ". " << *it << std::endl;
+        i++;
+    }
+    std::cout << "Selection: ";
+    std::cin >> userid;
+
+    userID = userIDs[userid-1]; 
+    std::cout << userNames[userid-1] << " is now PC Chair of " << confNames[confid-1] << std::endl;
+    db.setUserAsChair(userID, confID);
+}
+

commit 065255dc62570490b3dc83f0a15479be92c5b9b6
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Wed Oct 29 19:06:16 2014 +1100

    changes - matt

diff --git a/CMS/Database.cpp b/CMS/Database.cpp
index 1a56f8f..b6eea37 100644
--- a/CMS/Database.cpp
+++ b/CMS/Database.cpp
@@ -123,7 +123,6 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 	
 	pstmt = dbcon->prepareStatement(getExpertise);
 	pstmt->setInt(1, userID);
-
 	rs = pstmt->executeQuery();
         
         while (rs->next()) {
@@ -136,10 +135,12 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
         UserType_t userType = AUTHOR;
         
 	pstmt = dbcon->prepareStatement(getUserType);
-        pstmt->setString(1, key);
-	pstmt->setString(1, confName);
-        
+
+        pstmt->setInt(1, userID);
+	pstmt->setString(2, confName);
+
 	rs = pstmt->executeQuery();
+
 	haveRecord = rs->next();
 	if (haveRecord)
 	{
@@ -151,7 +152,6 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
             else if (e = 3)
                 userType = PCCHAIR;
 	}
-
         delete rs;
         delete pstmt;
         
@@ -166,9 +166,6 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 		vec,
                 userType);
 
-        delete rs;
-        delete pstmt;
-        
 	return user;
 }
 
@@ -425,31 +422,39 @@ void Database::setUserAsAuthor(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
-
-    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID='?' and confID='?')";
+    
     const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'author')";
-
-    // =====================================
-    // remove current type(s) for matching userID, confID
-    sql::PreparedStatement *pstmt = NULL;
     
-    pstmt = dbcon->prepareStatement(removeCurrentType);
+    // ======================================
+    // insert new userType
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertChairType);
     pstmt->setInt(1, userID);
     pstmt->setInt(2, confID);
 
     pstmt->executeUpdate();
-    
+
     delete pstmt;
-    
-    // ======================================
-    // insert new userType
-    
-    pstmt = dbcon->prepareStatement(insertChairType);
+}
+
+void Database::updateUserAsAuthor(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* updateCurrentType = "UPDATE UserType SET userType='author' WHERE (userID=? and confID=?)";
+
+    // =====================================
+    // remove current type(s) for matching userID, confID
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(updateCurrentType);
     pstmt->setInt(1, userID);
     pstmt->setInt(2, confID);
 
     pstmt->executeUpdate();
-
+    
     delete pstmt;
 }
 
diff --git a/CMS/Database.hpp b/CMS/Database.hpp
index 2b1ebbe..07232b9 100644
--- a/CMS/Database.hpp
+++ b/CMS/Database.hpp
@@ -45,6 +45,8 @@ public:
     std::vector<int> allUserIDs();
     std::vector<std::string> allUserNames();
     void setUserAsAuthor(int userID, int confID) throw (const char*);
+    void updateUserAsAuthor(int userID, int confID) throw (const char*);
+
     void setUserAsAuthorByNames(std::string username, std::string confTitle) throw (const char*);
     void setUserAsPC(int userID, int confID) throw (const char*);
     void setUserAsPCByNames(std::string username, std::string confTitle) throw (const char*);
diff --git a/CMS/MainWindow.cpp b/CMS/MainWindow.cpp
index 5f04b35..fdc3360 100644
--- a/CMS/MainWindow.cpp
+++ b/CMS/MainWindow.cpp
@@ -3,6 +3,9 @@
 #include <QMessageBox>
 #include <QFileDialog>
 #include "Paper.hpp"
+#include <QIODevice>
+#include <QBuffer>
+#include <QByteArray>
 
 MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 {
@@ -209,17 +212,17 @@ void MainWindow::on_createAccount_clicked() // done (i think)
         theUser.userName = uname.toStdString();
         theUser.password = pword.toStdString();
         theUser.userType = AUTHOR;
-        
+
         // update DB with new user
         theDB->putUser(theUser.userName, theUser);
         theUser = theDB->fetchUser(theUser.userName, confname.toStdString());
-        
+
         // get conference details from DB
         theConf = theDB->fetchConference(confname.toStdString());
         
         // update DB with userType
         theDB->setUserAsAuthor(theUser.userID, theConf.confID);
-        
+
         setUser(theUser.userType);
     }
     
@@ -541,6 +544,7 @@ void MainWindow::populate_usersTab()
 
 void MainWindow::on_submit_clicked()
 {
+<<<<<<< Updated upstream
     // get all fields from gui
     // set Paper
     
@@ -582,6 +586,22 @@ void MainWindow::on_submit_clicked()
 //    }
 //    QTextStream stream(file);
 //    QString string;
+//    QString filename = "";
+////    filename = get filename from guis
+//
+//    //the pdf
+//    QFile file(filename);
+//    if(!file.open(QIODevice::ReadOnly)){
+//        popupBox("Error!", "Error opening file!");
+//        return;
+//    }
+//    QByteArray ba;
+////    QBuffer buf (&ba);
+//    file.read(&ba);
+//    QByteArray hexed = ba.toBase64();
+//    std::string pdfAsString = hexed.data();
+////    QTextStream stream(file);
+////    QString string;
 //    stream >> string;
 }
 

commit 6b518df1b0fb1817b3cc4ef3f1fb5a5a93e2d3d7
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 18:55:51 2014 +1100

    Update MainWindow.cpp

diff --git a/CMS/MainWindow.cpp b/CMS/MainWindow.cpp
index a19ebdb..5f04b35 100644
--- a/CMS/MainWindow.cpp
+++ b/CMS/MainWindow.cpp
@@ -2,6 +2,7 @@
 #include "Review.hpp"
 #include <QMessageBox>
 #include <QFileDialog>
+#include "Paper.hpp"
 
 MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 {
@@ -135,7 +136,6 @@ void MainWindow::setUser(UserType_t userType)
         ui->tabWidget->removeTab(0);
         break;
     }
-
 }
 
 void MainWindow::on_login_clicked()
@@ -206,11 +206,13 @@ void MainWindow::on_createAccount_clicked() // done (i think)
     }
     else
     {
+        theUser.userName = uname.toStdString();
+        theUser.password = pword.toStdString();
         theUser.userType = AUTHOR;
         
         // update DB with new user
-        theDB->putUser(uname.toStdString(), theUser);
-        theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+        theDB->putUser(theUser.userName, theUser);
+        theUser = theDB->fetchUser(theUser.userName, confname.toStdString());
         
         // get conference details from DB
         theConf = theDB->fetchConference(confname.toStdString());
@@ -270,6 +272,7 @@ void MainWindow::on_joinConf_clicked()
     }
     else
     {
+        
         // get conferences from db
         theConf = theDB->fetchConference(confname.toStdString());
         
@@ -381,15 +384,15 @@ void MainWindow::on_rmvAuthKey_clicked()
 
 void MainWindow::on_selectPaperAuthor_activated(int index)
 {
-
+    
 }
 
-//void MainWindow::on_selectPaperAuthor_currentTextChanged(const int &arg1)
-//{
-//    ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
-//    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
-//        ui->selectPaperAuthor->addItem("*NEW*");
-//}
+void MainWindow::on_selectPaperAuthor_currentTextChanged(const int &arg1)
+{
+    ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
+    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
+        ui->selectPaperAuthor->addItem("*NEW*");
+}
 
 void MainWindow::on_tabWidget_currentChanged(int index)
 {//change to current text or something
@@ -538,16 +541,48 @@ void MainWindow::populate_usersTab()
 
 void MainWindow::on_submit_clicked()
 {
-
-    //the pdf
-    QFile file(filename);
-    if(!file.open(QIODEVICE::ReadOnly)){
-        popupBox("Error!", "Error opening file!");
-        return;
+    // get all fields from gui
+    // set Paper
+    
+    PersonalInfo anAuth;
+    bool newPaper;
+    
+    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
+        newPaper = true;
+            
+    aPaper.title = ui->selectPaperAuthor->currentText().toStdString();
+    
+    // clear current auth details and populate list from gui
+    aPaper.authors.clear();
+    int numRows = ui->authorsTable->rowCount();
+    for (int row = 0; row < numRows; ++row) {
+        anAuth = PersonalInfo();
+        anAuth.name = ui->authorsTable->item(row, 0);
+        anAuth.email = ui->authorsTable->item(row, 1);
+        anAuth.organisation = ui->authorsTable->item(row, 2);
+        anAuth.phone = ui->authorsTable->item(row, 3);
+        aPaper.authors.push_back(anAuth);
     }
-    QTextStream stream(file);
-    QString string;
-    stream >> string;
+    
+    //clear current paper keywords and populate with list from gui
+    aPaper.authors.clear();
+    int numKwords = ui->paperKeyListAuth->count();
+    for (int i = 0; i < numKwords; ++i)
+        aPaper.authors.push_back(ui->paperKeyListAuth->item(i)->text().toStdString());
+    
+    aPaper.abstract = ui->paperAbstract->toPlainText().toStdString();
+    
+    aPaper.confKeyword = ui->selectMainKey->currentText().toStdString();
+    
+//    //the pdf
+//    QFile file(filename);
+//    if(!file.open(QIODEVICE::ReadOnly)){
+//        popupBox("Error!", "Error opening file!");
+//        return;
+//    }
+//    QTextStream stream(file);
+//    QString string;
+//    stream >> string;
 }
 
 void MainWindow::on_submitBid_clicked()
@@ -563,24 +598,24 @@ void MainWindow::on_submitBid_clicked()
 
 void MainWindow::downloadPaper()
 {
-    //we should maybe use QDataStreams instead of QTextStreams but theres no ez way to convert them to QStrings
-    QFileDialog dialog(this);
-    QString fname, pdfString;
-
-    dialog.setWindowTitle("Save File...");
-    dialog.setFileMode(QFileDialog::AnyFile);
-    dialog.setNameFilter("Files (.pdf)");
-    if(dialog.exec())
-        fname = dialog.selectedFiles().at(0);
-    else
-        return;
-
-    //fetch pdf string from db into pdfString
-    QFile file(fname);
-    if(file.open(QIODevice::ReadWrite)){
-        QTextStream stream(&file);
-        stream << pdfString;
-    }
+//    //we should maybe use QDataStreams instead of QTextStreams but theres no ez way to convert them to QStrings
+//    QFileDialog dialog(this);
+//    QString fname, pdfString;
+//
+//    dialog.setWindowTitle("Save File...");
+//    dialog.setFileMode(QFileDialog::AnyFile);
+//    dialog.setNameFilter("Files (.pdf)");
+//    if(dialog.exec())
+//        fname = dialog.selectedFiles().at(0);
+//    else
+//        return;
+//
+//    //fetch pdf string from db into pdfString
+//    QFile file(fname);
+//    if(file.open(QIODevice::ReadWrite)){
+//        QTextStream stream(&file);
+//        stream << pdfString;
+//    }
 
 }
 

commit 663a765de2b820ef687ce4a63d85cafe94ad7c5a
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 18:55:22 2014 +1100

    filling functions

diff --git a/CMS/MainWindow.hpp b/CMS/MainWindow.hpp
index 6664386..69f3336 100644
--- a/CMS/MainWindow.hpp
+++ b/CMS/MainWindow.hpp
@@ -34,7 +34,7 @@ private slots:
 
     void on_passwordLogin_returnPressed(); //done
 
-    void on_createAccount_clicked(); // done (i think)
+    void on_createAccount_clicked(); // now done (i think)
 
     void on_joinConf_clicked(); // done (i think)
 
@@ -46,25 +46,25 @@ private slots:
 
     void on_rmvConfKey_clicked(); // already done (i think)
 
-    void on_addAuthor_clicked(); // laurence is up to here, haven't done yet
+    void on_addAuthor_clicked(); // nothing to do
 
-    void on_rmvAuthor_clicked();
+    void on_rmvAuthor_clicked(); // nothing to do
 
-    void on_addPaperKey_clicked();
+    void on_addPaperKey_clicked(); // nothing to do
 
-    void on_rmvPaperKey_clicked();
+    void on_rmvPaperKey_clicked(); // nothing to do
 
-    void on_addAuthKey_clicked();
+    void on_addAuthKey_clicked(); // nothing to do
 
-    void on_rmvAuthKey_clicked();
+    void on_rmvAuthKey_clicked(); // nothing to do
 
-    void on_selectPaperAuthor_activated(int index);
+    void on_selectPaperAuthor_activated(int index); //this needs to do something
 
-//    void on_selectPaperAuthor_currentTextChanged(const int &arg1);
+    void on_selectPaperAuthor_currentTextChanged(const int &arg1); // this needs to do something
 
-    void on_tabWidget_currentChanged(int index);
+    void on_tabWidget_currentChanged(int index); // laurence doesn't know what this does
 
-    void on_submit_clicked();//server stuff here
+    void on_submit_clicked();// laurence is here
 
     void on_submitBid_clicked();//server stuff here
 
@@ -123,6 +123,7 @@ private:
     Database* theDB;
     Conference theConf;
     std::vector<PaperSummary> papers;
+    Paper aPaper;
 };
 
 #endif // MAINWINDOW_H

commit ece3c439824b47b3625b250075cb5770c870e950
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 17:15:02 2014 +1100

    Create DateTest.cpp

diff --git a/CMS/DateTest.cpp b/CMS/DateTest.cpp
new file mode 100644
index 0000000..e352308
--- /dev/null
+++ b/CMS/DateTest.cpp
@@ -0,0 +1,68 @@
+#include "DateTest.hpp"
+#include "Date.hpp"
+
+CPPUNIT_TEST_SUITE_REGISTRATION (DateTest);
+
+void DateTest::setUp()
+{
+	// Put the dates back to standard state
+
+	a.setDay(0);
+	a.setMonth(0);
+	a.setYear(0);
+	b.setDay(0);
+	b.setMonth(0);
+	b.setYear(0);
+}
+
+void DateTest::tearDown()
+{
+	// Nothing to do
+}
+
+void DateTest::testEqualDates()
+{
+	CPPUNIT_ASSERT(a.compare(b)); //compare returns true if b is before or at the same date as a
+	CPPUNIT_ASSERT(!b.compare(a));
+}
+
+void DateTest::testMonthAheadDayBehind() 
+{
+  a.setDay(1);
+  b.setMonth(1);
+  CPPUNIT_ASSERT(!a.compare(b)); //b is after a - should be false
+  CPPUNIT_ASSERT(b.compare(a)); //a is after b - should be true
+}
+
+void DateTest::testYearAheadMonthBehind() {
+  a.setMonth(1);
+  b.setYear(1);
+  CPPUNIT_ASSERT(!a.compare(b));
+  CPPUNIT_ASSERT(b.compare(a));
+}
+
+void DateTest::testYearBehindDayAhead() {
+  a.setYear(1);
+  b.setDay(1);
+  CPPUNIT_ASSERT(a.compare(b));
+  CPPUNIT_ASSERT(!b.compare(a));
+}
+
+
+void DateTest::testYearEqualMonthAhead() {
+  a.setYear(1);
+  b.setMonth(1);
+  b.setYear(1);
+  CPPUNIT_ASSERT(!a.compare(b)); //b is after a
+  CPPUNIT_ASSERT(b.compare(a));
+}
+
+void DateTest::testYearEqualMonthEqualDayAhead() {
+  a.setMonth(1);
+  a.setYear(1);
+  b.setDay(1);
+  b.setMonth(1);
+  b.setYear(1);
+  CPPUNIT_ASSERT(!a.compare(b)); //b is after a
+  CPPUNIT_ASSERT(b.compare(a));
+}

commit 2fb2d365047b17d583ebbb238a12f1da39ccc52d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 17:14:32 2014 +1100

    Create DateTest.hpp

diff --git a/CMS/DateTest.hpp b/CMS/DateTest.hpp
new file mode 100644
index 0000000..26eabf9
--- /dev/null
+++ b/CMS/DateTest.hpp
@@ -0,0 +1,43 @@
+#ifndef DATETEST_HPP
+#define	DATETEST_HPP
+
+#include <cppunit/TestCase.h>
+#include <cppunit/extensions/HelperMacros.h>
+#include "Date.hpp"
+
+class DateTest : public CppUnit::TestFixture
+{
+    CPPUNIT_TEST_SUITE (DateTest);
+    CPPUNIT_TEST (testEqualDates);
+    CPPUNIT_TEST (testMonthAheadDayBehind);
+    CPPUNIT_TEST (testYearAheadMonthBehind);
+    CPPUNIT_TEST (testYearBehindDayAhead);
+    CPPUNIT_TEST (testYearEqualMonthAhead);
+    CPPUNIT_TEST (testYearEqualMonthEqualDayAhead);
+    CPPUNIT_TEST_SUITE_END ();
+private:
+	Date a;
+	Date b;
+public:
+	void setUp();
+	void tearDown();
+protected:
+	void testEqualDates();
+	void testMonthAheadDayBehind();
+	void testYearAheadMonthBehind();
+	void testYearBehindDayAhead();
+	void testYearEqualMonthAhead();
+	void testYearEqualMonthEqualDayAhead();
+
+};
+/*
+ * File:   DateTest.hpp
+ * Author: torchcar
+ *
+ * Created on 26 February 2009, 1:20 PM
+ */
+
+
+
+
+#endif	/* DATETEST_HPP */

commit 56da53254201d52e24b2c1a3c25e106b03d6b750
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 17:08:13 2014 +1100

    Update DateTest.hpp

diff --git a/DataAll/DateTest.hpp b/DataAll/DateTest.hpp
index 759239c..26eabf9 100644
--- a/DataAll/DateTest.hpp
+++ b/DataAll/DateTest.hpp
@@ -12,6 +12,8 @@ class DateTest : public CppUnit::TestFixture
     CPPUNIT_TEST (testMonthAheadDayBehind);
     CPPUNIT_TEST (testYearAheadMonthBehind);
     CPPUNIT_TEST (testYearBehindDayAhead);
+    CPPUNIT_TEST (testYearEqualMonthAhead);
+    CPPUNIT_TEST (testYearEqualMonthEqualDayAhead);
     CPPUNIT_TEST_SUITE_END ();
 private:
 	Date a;
@@ -24,6 +26,8 @@ protected:
 	void testMonthAheadDayBehind();
 	void testYearAheadMonthBehind();
 	void testYearBehindDayAhead();
+	void testYearEqualMonthAhead();
+	void testYearEqualMonthEqualDayAhead();
 
 };
 /*

commit ad466a1449644bf43de26738f3a47f3195097660
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 17:08:12 2014 +1100

    Update DateTest.cpp

diff --git a/DataAll/DateTest.cpp b/DataAll/DateTest.cpp
index ea27bea..e352308 100644
--- a/DataAll/DateTest.cpp
+++ b/DataAll/DateTest.cpp
@@ -1,38 +1,68 @@
-/*
-#define BOOST_TEST_DYN_LINK
-#define BOOST_TEST_MODULE CompareTest
-#include <boost/test/unit_test.hpp>
+#include "DateTest.hpp"
 #include "Date.hpp"
 
-BOOST_AUTO_TEST_SUITE(CompareTest)
-BOOST_AUTO_TEST_CASE(EqualDates) {
-  Date a;
-  Date b;
-  BOOST_CHECK(a.compare(b));
-  BOOST_CHECK(!b.compare(a));
+CPPUNIT_TEST_SUITE_REGISTRATION (DateTest);
+
+void DateTest::setUp()
+{
+	// Put the dates back to standard state
+
+	a.setDay(0);
+	a.setMonth(0);
+	a.setYear(0);
+	b.setDay(0);
+	b.setMonth(0);
+	b.setYear(0);
+}
+
+void DateTest::tearDown()
+{
+	// Nothing to do
+}
+
+void DateTest::testEqualDates()
+{
+	CPPUNIT_ASSERT(a.compare(b)); //compare returns true if b is before or at the same date as a
+	CPPUNIT_ASSERT(!b.compare(a));
 }
 
-BOOST_AUTO_TEST_CASE(MonthAheadDayBehind) {
-  Date a;
-  a.day = 1;
-  Date b(0,1,0);
-  BOOST_CHECK(!a.compare(b));
-  BOOST_CHECK(b.compare(a));
+void DateTest::testMonthAheadDayBehind() 
+{
+  a.setDay(1);
+  b.setMonth(1);
+  CPPUNIT_ASSERT(!a.compare(b)); //b is after a - should be false
+  CPPUNIT_ASSERT(b.compare(a)); //a is after b - should be true
 }
 
-BOOST_AUTO_TEST_CASE(YearAheadMonthBehind) {
-  Date a;
-  a.month = 1;
-  Date b(0,0,1);
-  BOOST_CHECK(!a.compare(b));
-  BOOST_CHECK(b.compare(a));
+void DateTest::testYearAheadMonthBehind() {
+  a.setMonth(1);
+  b.setYear(1);
+  CPPUNIT_ASSERT(!a.compare(b));
+  CPPUNIT_ASSERT(b.compare(a));
+}
+
+void DateTest::testYearBehindDayAhead() {
+  a.setYear(1);
+  b.setDay(1);
+  CPPUNIT_ASSERT(a.compare(b));
+  CPPUNIT_ASSERT(!b.compare(a));
+}
+
+
+void DateTest::testYearEqualMonthAhead() {
+  a.setYear(1);
+  b.setMonth(1);
+  b.setYear(1);
+  CPPUNIT_ASSERT(!a.compare(b)); //b is after a
+  CPPUNIT_ASSERT(b.compare(a));
 }
 
-BOOST_AUTO_TEST_CASE(YearBehindDayAhead) {
-  Date a;
-  a.year = 1;
-  Date b(1,0,0);
-  BOOST_CHECK(a.compare(b));
-  BOOST_CHECK(!b.compare(a));
+void DateTest::testYearEqualMonthEqualDayAhead() {
+  a.setMonth(1);
+  a.setYear(1);
+  b.setDay(1);
+  b.setMonth(1);
+  b.setYear(1);
+  CPPUNIT_ASSERT(!a.compare(b)); //b is after a
+  CPPUNIT_ASSERT(b.compare(a));
 }
-*/

commit e594f8c2d1034d50521c7863ec834c67ada84df3
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 16:54:23 2014 +1100

    Update DateTest.hpp

diff --git a/DataAll/DateTest.hpp b/DataAll/DateTest.hpp
index 31b01f2..759239c 100644
--- a/DataAll/DateTest.hpp
+++ b/DataAll/DateTest.hpp
@@ -8,9 +8,10 @@
 class DateTest : public CppUnit::TestFixture
 {
     CPPUNIT_TEST_SUITE (DateTest);
-    CPPUNIT_TEST (testEquals);
-    CPPUNIT_TEST (testSetBit);
-    CPPUNIT_TEST (testSetBitAndCount);
+    CPPUNIT_TEST (testEqualDates);
+    CPPUNIT_TEST (testMonthAheadDayBehind);
+    CPPUNIT_TEST (testYearAheadMonthBehind);
+    CPPUNIT_TEST (testYearBehindDayAhead);
     CPPUNIT_TEST_SUITE_END ();
 private:
 	Date a;

commit db794a046b40f598290d866f4eda0a4960003d4c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 16:53:10 2014 +1100

    fixed headerguards

diff --git a/DataAll/DateTest.hpp b/DataAll/DateTest.hpp
index 3f1b721..31b01f2 100644
--- a/DataAll/DateTest.hpp
+++ b/DataAll/DateTest.hpp
@@ -1,5 +1,5 @@
-#ifndef _BITMAPTEST_HPP
-#define	_BITMAPTEST_HPP
+#ifndef DATETEST_HPP
+#define	DATETEST_HPP
 
 #include <cppunit/TestCase.h>
 #include <cppunit/extensions/HelperMacros.h>
@@ -35,4 +35,4 @@ protected:
 
 
 
-#endif	/* _BITMAPTEST_H */
+#endif	/* DATETEST_HPP */

commit 33168e84084c91a0118a5412bcf5dcf056cfe71b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 16:51:32 2014 +1100

    Create DateTest.hpp

diff --git a/DataAll/DateTest.hpp b/DataAll/DateTest.hpp
new file mode 100644
index 0000000..3f1b721
--- /dev/null
+++ b/DataAll/DateTest.hpp
@@ -0,0 +1,38 @@
+#ifndef _BITMAPTEST_HPP
+#define	_BITMAPTEST_HPP
+
+#include <cppunit/TestCase.h>
+#include <cppunit/extensions/HelperMacros.h>
+#include "Date.hpp"
+
+class DateTest : public CppUnit::TestFixture
+{
+    CPPUNIT_TEST_SUITE (DateTest);
+    CPPUNIT_TEST (testEquals);
+    CPPUNIT_TEST (testSetBit);
+    CPPUNIT_TEST (testSetBitAndCount);
+    CPPUNIT_TEST_SUITE_END ();
+private:
+	Date a;
+	Date b;
+public:
+	void setUp();
+	void tearDown();
+protected:
+	void testEqualDates();
+	void testMonthAheadDayBehind();
+	void testYearAheadMonthBehind();
+	void testYearBehindDayAhead();
+
+};
+/*
+ * File:   DateTest.hpp
+ * Author: torchcar
+ *
+ * Created on 26 February 2009, 1:20 PM
+ */
+
+
+
+
+#endif	/* _BITMAPTEST_H */

commit b99ddb36665e86968ffcc96d10d864af74a33764
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 29 16:40:20 2014 +1100

    added test for date class
    
    requires boost unit testing - otherwise will need to be changed to cppunit equivalent

diff --git a/DataAll/DateTest.cpp b/DataAll/DateTest.cpp
new file mode 100644
index 0000000..ea27bea
--- /dev/null
+++ b/DataAll/DateTest.cpp
@@ -0,0 +1,38 @@
+/*
+#define BOOST_TEST_DYN_LINK
+#define BOOST_TEST_MODULE CompareTest
+#include <boost/test/unit_test.hpp>
+#include "Date.hpp"
+
+BOOST_AUTO_TEST_SUITE(CompareTest)
+BOOST_AUTO_TEST_CASE(EqualDates) {
+  Date a;
+  Date b;
+  BOOST_CHECK(a.compare(b));
+  BOOST_CHECK(!b.compare(a));
+}
+
+BOOST_AUTO_TEST_CASE(MonthAheadDayBehind) {
+  Date a;
+  a.day = 1;
+  Date b(0,1,0);
+  BOOST_CHECK(!a.compare(b));
+  BOOST_CHECK(b.compare(a));
+}
+
+BOOST_AUTO_TEST_CASE(YearAheadMonthBehind) {
+  Date a;
+  a.month = 1;
+  Date b(0,0,1);
+  BOOST_CHECK(!a.compare(b));
+  BOOST_CHECK(b.compare(a));
+}
+
+BOOST_AUTO_TEST_CASE(YearBehindDayAhead) {
+  Date a;
+  a.year = 1;
+  Date b(1,0,0);
+  BOOST_CHECK(a.compare(b));
+  BOOST_CHECK(!b.compare(a));
+}
+*/

commit 718527651d8427ce8dc0d7bc1362315c18708af0
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Wed Oct 29 13:49:13 2014 +1100

    merged changes between UserClient and CMS

diff --git a/CMS/MainWindow.cpp b/CMS/MainWindow.cpp
index a26221a..a19ebdb 100644
--- a/CMS/MainWindow.cpp
+++ b/CMS/MainWindow.cpp
@@ -538,12 +538,16 @@ void MainWindow::populate_usersTab()
 
 void MainWindow::on_submit_clicked()
 {
-    //paper is the getCurrentPaper()
-
-    //send paper (as in the paper details) as well as the actual paper pdf to server
-    //no response from server
-
 
+    //the pdf
+    QFile file(filename);
+    if(!file.open(QIODEVICE::ReadOnly)){
+        popupBox("Error!", "Error opening file!");
+        return;
+    }
+    QTextStream stream(file);
+    QString string;
+    stream >> string;
 }
 
 void MainWindow::on_submitBid_clicked()
@@ -559,6 +563,24 @@ void MainWindow::on_submitBid_clicked()
 
 void MainWindow::downloadPaper()
 {
+    //we should maybe use QDataStreams instead of QTextStreams but theres no ez way to convert them to QStrings
+    QFileDialog dialog(this);
+    QString fname, pdfString;
+
+    dialog.setWindowTitle("Save File...");
+    dialog.setFileMode(QFileDialog::AnyFile);
+    dialog.setNameFilter("Files (.pdf)");
+    if(dialog.exec())
+        fname = dialog.selectedFiles().at(0);
+    else
+        return;
+
+    //fetch pdf string from db into pdfString
+    QFile file(fname);
+    if(file.open(QIODevice::ReadWrite)){
+        QTextStream stream(&file);
+        stream << pdfString;
+    }
 
 }
 
@@ -693,12 +715,27 @@ void MainWindow::on_selectPaperReviewer_currentIndexChanged(const QString &arg1)
 //    ui->mainKeyReviewer->setText(QString::fromStdString(thePaper.confKeyword));
 }
 
+void MainWindow::on_selectPaperReview_currentIndexChanged(const QString &arg1)
+{
+ //similar to above except also fetch the appropriate review of the paper
+}
 
 void MainWindow::on_updateConfSettings_clicked()
 {
 
 }
 
+void MainWindow::on_reviewersTable_itemActivated(QTableWidgetItem *item)
+{
+    //populate review values with the given reviewers review
+    //the word review was used too many times in that sentence but you know what i mean
+}
+
+void MainWindow::on_papersTable_itemClicked(QTableWidgetItem *item)
+{
+    //populate paper info based upon the id of the paper selected
+}
+
 void MainWindow::clearAllTabs()
 {
     foreach(QLineEdit *widget, this->findChildren<QLineEdit*>())
diff --git a/CMS/MainWindow.hpp b/CMS/MainWindow.hpp
index 6743c0e..6664386 100644
--- a/CMS/MainWindow.hpp
+++ b/CMS/MainWindow.hpp
@@ -95,6 +95,12 @@ private slots:
     void on_selectPaperReviewer_currentIndexChanged(const QString &arg1);
 
     void on_updateConfSettings_clicked();
+    
+    void on_reviewersTable_itemActivated(QTableWidgetItem *item);
+
+    void on_papersTable_itemClicked(QTableWidgetItem *item);
+    
+    void on_selectPaperReview_currentIndexChanged(const QString &arg1);
 
 private:
     void setUser(UserType_t userType);
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 50aad0a..a19ebdb 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,5 +1,5 @@
-#include "mainwindow.hpp"
-#include "../DataAll/Review.hpp"
+#include "MainWindow.hpp"
+#include "Review.hpp"
 #include <QMessageBox>
 #include <QFileDialog>
 
@@ -61,7 +61,7 @@ void MainWindow::login()
     }
     
     QString confname = ui->confList->currentItem()->text(); // get name of conference selected
-   
+    
     theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
     
     if (theUser.userID == -1)
@@ -78,6 +78,7 @@ void MainWindow::login()
     }
     else // get userType and load tab
     {
+        
         theConf = theDB->fetchConference(confname.toStdString());
         // get conferences from db
         
@@ -111,6 +112,8 @@ void MainWindow::logout()
 
 void MainWindow::setUser(UserType_t userType)
 {
+    clearAllTabs();
+    
     switch(userType)
     {
     case AUTHOR://author
@@ -722,6 +725,17 @@ void MainWindow::on_updateConfSettings_clicked()
 
 }
 
+void MainWindow::on_reviewersTable_itemActivated(QTableWidgetItem *item)
+{
+    //populate review values with the given reviewers review
+    //the word review was used too many times in that sentence but you know what i mean
+}
+
+void MainWindow::on_papersTable_itemClicked(QTableWidgetItem *item)
+{
+    //populate paper info based upon the id of the paper selected
+}
+
 void MainWindow::clearAllTabs()
 {
     foreach(QLineEdit *widget, this->findChildren<QLineEdit*>())
@@ -743,16 +757,3 @@ void MainWindow::clearAllTabs()
     
     ui->tabWidget->clear();
 }
-
-void MainWindow::on_reviewersTable_itemActivated(QTableWidgetItem *item)
-{
-    //populate review values with the given reviewers review
-    //the word review was used too many times in that sentence but you know what i mean
-}
-
-void MainWindow::on_papersTable_itemClicked(QTableWidgetItem *item)
-{
-    //populate paper info based upon the id of the paper selected
-}
-
-
diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 5a4fbd8..6664386 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -3,13 +3,13 @@
 
 #include <QMainWindow>
 #include <QModelIndex>
-#include "../Server/User.hpp"
-#include "../Database/Database.hpp"
-#include "../DataAll/Conference.hpp"
+#include "User.hpp"
+#include "Database.hpp"
+#include "Conference.hpp"
 #include <string>
 #include <vector>
-#include "../DataAll/PaperSummary.hpp"
-#include "ui_mainwindow.h"
+#include "PaperSummary.hpp"
+#include "ui_MainWindow.h"
 
 namespace Ui {
     class MainWindow;
@@ -106,7 +106,7 @@ private:
     void setUser(UserType_t userType);
 //    void noUser(); call logout() instead
     void login(); // done (i think)
-    void logout();
+    void logout(); //done (i think)
     void populate_infoTabAuthor();
     void populate_infoTabChair();
     void populate_authorTab();
@@ -114,9 +114,9 @@ private:
     void populate_papersTab();
     void populate_usersTab();
     void populate_reviewTab();
-    void popupBox(QString type, QString msg);
+    void popupBox(QString boxTitle, QString msg); // done
     
-    void clearAllTabs();
+    void clearAllTabs(); //done
     
     Ui::MainWindow *ui;
     User theUser;

commit a00da1bacdfcbb58d75a51a0a341915087ce39f0
Merge: 81b2b8b d626c6a
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Wed Oct 29 13:30:22 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 81b2b8bbb75e35cd16ce590fe28838d529c347e8
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Wed Oct 29 13:30:12 2014 +1100

    added userType database calls

diff --git a/CMS/Database.cpp b/CMS/Database.cpp
index 49b57ae..1a56f8f 100644
--- a/CMS/Database.cpp
+++ b/CMS/Database.cpp
@@ -70,7 +70,7 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 	const char* getUser = "SELECT * FROM UserAccount WHERE username=?";
 	const char* getPersonalInfo = "SELECT * FROM PersonalInfo WHERE userID=?";
 	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
-        const char* getUserType = "SELECT userType FROM UserType WHERE (userID=? and confID=(SELECT confID FROM Conference where name=?))";
+        const char* getUserType = "SELECT userType FROM UserType WHERE (userID=? and confID=(SELECT confID FROM Conference WHERE name=?))";
 
         // =======================================
         // user account
@@ -88,7 +88,7 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 		delete pstmt;
 		return User();
 	}
-
+        
         int userID = rs->getInt(1);
         std::string username = rs->getString(2);
         std::string password = rs->getString(3);
@@ -108,7 +108,7 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 		delete pstmt;
 		return User();
 	}
-
+        
         std::string name = rs->getString(3);
 	std::string email = rs->getString(4);
 	std::string organisation = rs->getString(5);
@@ -125,12 +125,12 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 	pstmt->setInt(1, userID);
 
 	rs = pstmt->executeQuery();
-
+        
         while (rs->next()) {
                 std::string expertise = rs->getString(1);
                 vec.push_back(expertise);
         }
-
+        
         // =======================================
         // user type 
         UserType_t userType = AUTHOR;
@@ -138,12 +138,12 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 	pstmt = dbcon->prepareStatement(getUserType);
         pstmt->setString(1, key);
 	pstmt->setString(1, confName);
-
+        
 	rs = pstmt->executeQuery();
 	haveRecord = rs->next();
 	if (haveRecord)
 	{
-            int e = rs->getInt(1);
+            int e = rs->getInt(1);            
             if (e = 1)
                 userType = AUTHOR;
             else if (e = 2)
@@ -154,7 +154,7 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 
         delete rs;
         delete pstmt;
-
+        
         User user(
 		username,
 		name,
@@ -168,7 +168,7 @@ User Database::fetchUser(std::string key, std::string confName) throw (const cha
 
         delete rs;
         delete pstmt;
-	
+        
 	return user;
 }
 
@@ -426,11 +426,25 @@ void Database::setUserAsAuthor(int userID, int confID) throw (const char*)
     if (invalid)
         throw (noDB);
 
-    const char* insertAuthorType = "INSERT INTO UserType VALUES(?, ?, 'author')";
+    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID='?' and confID='?')";
+    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'author')";
 
+    // =====================================
+    // remove current type(s) for matching userID, confID
     sql::PreparedStatement *pstmt = NULL;
+    
+    pstmt = dbcon->prepareStatement(removeCurrentType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
 
-    pstmt = dbcon->prepareStatement(insertAuthorType);
+    pstmt->executeUpdate();
+    
+    delete pstmt;
+    
+    // ======================================
+    // insert new userType
+    
+    pstmt = dbcon->prepareStatement(insertChairType);
     pstmt->setInt(1, userID);
     pstmt->setInt(2, confID);
 
@@ -439,16 +453,62 @@ void Database::setUserAsAuthor(int userID, int confID) throw (const char*)
     delete pstmt;
 }
 
+void Database::setUserAsAuthorByNames(std::string username, std::string confTitle) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='?') and confID=(SELECT confID FROM Conference WHERE name='?'))";
+    const char* insertAuthorType = "INSERT INTO UserType VALUES((SELECT userID FROM UserAccount WHERE username='?'), (select confID from Conference where name='?'), 'author')";
+
+    // =====================================
+    // remove current type(s) for matching userID, confID
+    sql::PreparedStatement *pstmt = NULL;
+    
+    pstmt = dbcon->prepareStatement(removeCurrentType);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
+
+    pstmt->executeUpdate();
+    
+    delete pstmt;
+    
+    // ======================================
+    // insert new userType
+    
+    pstmt = dbcon->prepareStatement(insertAuthorType);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
 void Database::setUserAsPC(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
 
-    const char* insertPCType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
+    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID='?' and confID='?')";
+    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
 
+    // =====================================
+    // remove current type(s) for matching userID, confID
     sql::PreparedStatement *pstmt = NULL;
+    
+    pstmt = dbcon->prepareStatement(removeCurrentType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+    
+    delete pstmt;
+    
+    // ======================================
+    // insert new userType
 
-    pstmt = dbcon->prepareStatement(insertPCType);
+    pstmt = dbcon->prepareStatement(insertChairType);
     pstmt->setInt(1, userID);
     pstmt->setInt(2, confID);
 
@@ -457,14 +517,60 @@ void Database::setUserAsPC(int userID, int confID) throw (const char*)
     delete pstmt;
 }
 
+void Database::setUserAsPCByNames(std::string username, std::string confTitle) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='?') and confID=(SELECT confID FROM Conference WHERE name='?'))";
+    const char* insertAuthorType = "INSERT INTO UserType VALUES((SELECT userID FROM UserAccount WHERE username='?'), (select confID from Conference where name='?'), 'pc')";
+
+    // =====================================
+    // remove current type(s) for matching userID, confID
+    sql::PreparedStatement *pstmt = NULL;
+    
+    pstmt = dbcon->prepareStatement(removeCurrentType);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
+
+    pstmt->executeUpdate();
+    
+    delete pstmt;
+    
+    // ======================================
+    // insert new userType
+    
+    pstmt = dbcon->prepareStatement(insertAuthorType);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
 void Database::setUserAsChair(int userID, int confID) throw (const char*)
 {
     if (invalid)
         throw (noDB);
 
+    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID='?' and confID='?')";
     const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'chair')";
 
+    // =====================================
+    // remove current type(s) for matching userID, confID
     sql::PreparedStatement *pstmt = NULL;
+    
+    pstmt = dbcon->prepareStatement(removeCurrentType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+    
+    delete pstmt;
+    
+    // ======================================
+    // insert new userType
 
     pstmt = dbcon->prepareStatement(insertChairType);
     pstmt->setInt(1, userID);
@@ -475,6 +581,38 @@ void Database::setUserAsChair(int userID, int confID) throw (const char*)
     delete pstmt;
 }
 
+void Database::setUserAsChairByNames(std::string username, std::string confTitle) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* removeCurrentType = "DELETE FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='?') and confID=(SELECT confID FROM Conference WHERE name='?'))";
+    const char* insertAuthorType = "INSERT INTO UserType VALUES((SELECT userID FROM UserAccount WHERE username='?'), (select confID from Conference where name='?'), 'chair')";
+
+    // =====================================
+    // remove current type(s) for matching userID, confID
+    sql::PreparedStatement *pstmt = NULL;
+    
+    pstmt = dbcon->prepareStatement(removeCurrentType);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
+
+    pstmt->executeUpdate();
+    
+    delete pstmt;
+    
+    // ======================================
+    // insert new userType
+    
+    pstmt = dbcon->prepareStatement(insertAuthorType);
+    pstmt->setString(1, username);
+    pstmt->setString(2, confTitle);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
 bool Database::existsKeyword(std::string key) throw (const char*)
 {
     if (invalid)
@@ -2090,9 +2228,65 @@ void Database::adminChangePassword(std::string username, std::string password) t
 
         pstmt = dbcon->prepareStatement(updatePassword);
         pstmt->setString(1, password);
-        pstmt->setString(1, username);
+        pstmt->setString(2, username);
 
         pstmt->executeUpdate();
 
         delete pstmt;
 }
+
+UserType_t Database::adminFetchUserType(std::string username, std::string confTitle) throw (const char*)
+{
+//    const char* 
+    std::string fetchUserType = "SELECT userType FROM UserType WHERE (userID=(SELECT userID FROM UserAccount WHERE username='"
+            + username + "') and confID=(SELECT confID FROM Conference WHERE name='" + confTitle + "'))";
+    
+    // ============================================
+    // User Type Update
+    UserType_t userType;
+    sql::PreparedStatement *pstmt = NULL;
+    sql::ResultSet *rs = NULL;
+    
+    pstmt = dbcon->prepareStatement(fetchUserType.c_str());
+//    pstmt->setString(1, username);
+//    pstmt->setString(2, confTitle);
+    
+    rs = pstmt->executeQuery();
+    int rowCount = static_cast<int>(rs->rowsCount());
+    if (rowCount == 0)
+    {// Empty set in database
+        userType = AUTHOR;
+        setUserAsAuthorByNames(username, confTitle);
+    }
+    else
+    {
+        int e = rs->getInt(1);           
+        if (e = 1)
+            userType = AUTHOR;
+        else if (e = 2)
+            userType = REVIEWER;
+        else if (e = 3)
+            userType = PCCHAIR;
+    }
+
+    delete pstmt;
+    delete rs;
+    
+    return userType;
+}
+
+void Database::adminChangeUserType(std::string username, std::string confTitle, UserType_t userType) throw (const char*)
+{
+    switch(userType)
+    {
+        case AUTHOR:
+            setUserAsAuthorByNames(username, confTitle);
+            break;
+        case REVIEWER:
+            setUserAsChairByNames(username, confTitle);
+            break;
+        case PCCHAIR:
+            setUserAsPCByNames(username, confTitle);
+            break;
+    }
+}
\ No newline at end of file
diff --git a/CMS/Database.hpp b/CMS/Database.hpp
index 8783cc1..2b1ebbe 100644
--- a/CMS/Database.hpp
+++ b/CMS/Database.hpp
@@ -35,20 +35,25 @@ public:
     // ADMIN
     void adminChangeUserName(std::string currentUN, std::string newUN) throw (const char*);
     void adminChangePassword(std::string username, std::string password) throw (const char*);
+    UserType_t adminFetchUserType(std::string username, std::string confTitle) throw (const char*);
+    void adminChangeUserType(std::string username, std::string confTitle, UserType_t userType) throw (const char*);
 
 	// USER
-	User fetchUser(std::string key, std::string confName) throw (const char*);
-    bool existsUserName(std::string key) throw (const char*);
+    User fetchUser(std::string key, std::string confName) throw (const char*);
+    bool existsUserName(std::string key) throw (const char*); //works
     void putUser(std::string key, User user) throw (const char*);
     std::vector<int> allUserIDs();
     std::vector<std::string> allUserNames();
     void setUserAsAuthor(int userID, int confID) throw (const char*);
+    void setUserAsAuthorByNames(std::string username, std::string confTitle) throw (const char*);
     void setUserAsPC(int userID, int confID) throw (const char*);
+    void setUserAsPCByNames(std::string username, std::string confTitle) throw (const char*);
     void setUserAsChair(int userID, int confID) throw (const char*);
+    void setUserAsChairByNames(std::string username, std::string confTitle) throw (const char*);
 
 	// KEYWORD
     bool existsKeyword(std::string key) throw (const char*);
-	void addKeyword(std::string key) throw (const char*);
+    void addKeyword(std::string key) throw (const char*);
 
 	// CONFERENCE
 	Conference fetchConference(std::string key) throw (const char*);

commit 62f8e25c00616cb72289064cf4b075a788411826
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Wed Oct 29 13:27:56 2014 +1100

    fixed typo

diff --git a/CMS/MainWindow.cpp b/CMS/MainWindow.cpp
index 86cc0ec..a26221a 100644
--- a/CMS/MainWindow.cpp
+++ b/CMS/MainWindow.cpp
@@ -61,7 +61,7 @@ void MainWindow::login()
     }
     
     QString confname = ui->confList->currentItem()->text(); // get name of conference selected
-   
+    
     theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
     
     if (theUser.userID == -1)
@@ -78,6 +78,7 @@ void MainWindow::login()
     }
     else // get userType and load tab
     {
+        
         theConf = theDB->fetchConference(confname.toStdString());
         // get conferences from db
         
@@ -111,6 +112,8 @@ void MainWindow::logout()
 
 void MainWindow::setUser(UserType_t userType)
 {
+    clearAllTabs();
+    
     switch(userType)
     {
     case AUTHOR://author
diff --git a/CMS/MainWindow.hpp b/CMS/MainWindow.hpp
index 8cfde0d..6743c0e 100644
--- a/CMS/MainWindow.hpp
+++ b/CMS/MainWindow.hpp
@@ -100,7 +100,7 @@ private:
     void setUser(UserType_t userType);
 //    void noUser(); call logout() instead
     void login(); // done (i think)
-    void logout();
+    void logout(); //done (i think)
     void populate_infoTabAuthor();
     void populate_infoTabChair();
     void populate_authorTab();
@@ -108,9 +108,9 @@ private:
     void populate_papersTab();
     void populate_usersTab();
     void populate_reviewTab();
-    void popupBox(QString type, QString msg);
+    void popupBox(QString boxTitle, QString msg); // done
     
-    void clearAllTabs();
+    void clearAllTabs(); //done
     
     Ui::MainWindow *ui;
     User theUser;

commit e1ff11f83a138764d9581270dc8308a4e9e7b6fa
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Wed Oct 29 13:27:08 2014 +1100

    implemented changeUserType

diff --git a/CMS/main-admin.cpp b/CMS/main-admin.cpp
index c56e596..0327a6a 100644
--- a/CMS/main-admin.cpp
+++ b/CMS/main-admin.cpp
@@ -17,6 +17,7 @@ void createConf();
 void changeUsername();
 void changePassword();
 void changeConf();
+void changeUserType();
 
 Database db;
 
@@ -65,8 +66,10 @@ void adminMainMenu()
     std::cout << "3. Change a Users username" << std::endl;
     std::cout << "4. Change a Users password" << std::endl;
     std::cout << "5. Change a Conference details" << std::endl;
-    std::cout << "6. Quit" << std::endl;
+    std::cout << "6. Change a Users access level for a Conference" << std::endl;
+    std::cout << "7. Quit" << std::endl;
     std::cin >> selection;
+    std::cin.ignore();
 
     if (selection == 1)
     {
@@ -95,6 +98,11 @@ void adminMainMenu()
     }
     else if (selection == 6)
     {
+        std::cout << "Change a Users access level for a Conference selected" << std::endl;
+        changeUserType();
+    }
+    else if (selection == 7)
+    {
         std::cout << "Quit selected, Quitting..." << std::endl;
         return;
     }
@@ -116,18 +124,19 @@ void createUser()
     std::vector<std::string> keywords;
     UserType_t userType = AUTHOR;
 
+    std::cin.ignore();
     std::cout << "Enter username: ";
-    std::cin >> username;
+    std::getline(std::cin, username);
     std::cout << "Enter password: ";
-    std::cin >> password;
+    std::getline(std::cin, password);
     std::cout << "Enter name: ";
-    std::cin >> name;
+    std::getline(std::cin, name);
     std::cout << "Enter email: ";
-    std::cin >> email;
+    std::getline(std::cin, email);
     std::cout << "Enter organisation: ";
-    std::cin >> organisation;
+    std::getline(std::cin, organisation);
     std::cout << "Enter phone: ";
-    std::cin >> phone;
+    std::getline(std::cin, phone);
 
     int keywordsInput = 1;
     while (keywordsInput == 1)
@@ -136,12 +145,13 @@ void createUser()
         std::cout << "1. Add keyword" << std::endl;
         std::cout << "2. No more keywords" << std::endl;
         std::cin >> keywordsInput;
+        std::cin.ignore();
 
         if (keywordsInput == 1)
         {
             std::string keyword = "";
             std::cout << "Keyword: ";
-            std::cin >> keyword;
+            std::getline(std::cin, keyword);
             keywords.push_back(keyword);
         }
     }
@@ -320,15 +330,15 @@ void changeUsername()
     std::string currentUN;
     std::string newUN;
     std::cout << "Enter username to change: ";
-    std::cin >> currentUN;
+    std::getline(std::cin, currentUN);
 
     bool userExists = db.existsUserName(currentUN);
     
     if (userExists)
     {
         std::cout << "Enter new username: ";
-        std::cin >> newUN;
-        bool newUserExists = db.existsUserName(currentUN);
+        std::getline(std::cin, newUN);
+        bool newUserExists = db.existsUserName(newUN);
 
         if (!newUserExists)
         {
@@ -349,14 +359,14 @@ void changePassword()
     std::string username;
     std::string password;
     std::cout << "Enter username to change password for: ";
-    std::cin >> username;
+    std::getline(std::cin, username);
 
     bool userExists = db.existsUserName(username);
     
     if (userExists)
     {
         std::cout << "Enter new password: ";
-        std::cin >> password;
+        std::getline(std::cin, password);
 
         db.adminChangePassword(username, password);
 
@@ -396,7 +406,7 @@ void changeConf()
     bool beforeDate = true;
 
     std::cout << "Enter Conference name: " << std::endl;
-    std::cin >> title;
+    std::getline(std::cin, title);
 
     bool confExists = db.existsConfName(title);
     if (confExists)
@@ -462,16 +472,28 @@ void changeConf()
         std::cout << "Must re enter all details that aren't changing also!!" << std::endl << std::endl;
 
 
+        std::string tempIn = "";
+
         std::cout << "Is it active? true/false: ";
-        std::cin >> active;
+        std::cin >> tempIn;
+        if (tempIn == "true")
+            active = true;
+        else if (tempIn == "false")
+            active = false;
+        else {
+            std::cout << "Error creating conference!" << std::endl << "Please start again." << std::endl;
+            return;
+        }
+        std::cin.ignore();
+
         std::cout << "Enter title: ";
-        std::cin >> title;
-        std::cout << "Enter topic: "; 
-        std::cin >> topic;
+        std::getline(std::cin, title);
+        std::cout << "Enter topic: ";
+        std::getline(std::cin, topic);
         std::cout << "Enter description: "; 
-        std::cin >> description;
+        std::getline(std::cin, description);
         std::cout << "Enter location: ";
-        std::cin >> location;
+        std::getline(std::cin, location);
 
         int keywordsInput = 1;
         while (keywordsInput == 1)
@@ -480,12 +502,13 @@ void changeConf()
             std::cout << "1. Add keyword" << std::endl;
             std::cout << "2. No more keywords" << std::endl;
             std::cin >> keywordsInput;
+            std::cin.ignore();
 
             if (keywordsInput == 1)
             {
                 std::string keyword = "";
                 std::cout << "Keyword: ";
-                std::cin >> keyword;
+                std::getline(std::cin, keyword);
                 keywords.push_back(keyword);
             }
         }
@@ -567,3 +590,53 @@ void changeConf()
     adminMainMenu();
 }
 
+void changeUserType()
+{
+    std::string username;
+    std::string confTitle;
+    std::string newUT;
+    UserType_t userType;
+    std::cout << "Enter username to access for: ";
+    std::getline(std::cin, username);
+
+    bool userExists = db.existsUserName(username);
+    
+    if (userExists)
+    {
+        std::cout << "Enter Conference name: ";
+        std::getline(std::cin, confTitle);
+
+        bool confExists = db.existsConfName(confTitle);
+        if (confExists)
+        {
+            userType = db.adminFetchUserType(username, confTitle);
+            
+            std::cout << username << " is currently a(n) ";
+            if (userType == AUTHOR)
+                    std::cout << "Author";
+            else if (userType == REVIEWER)
+                    std::cout << "PCMember";
+            else if (userType == PCCHAIR)
+                    std::cout << "PCChair";
+            std::cout << " for conference " << confTitle << endl;
+            
+            std::cout << "Enter new user's access level for this conference (author, pcmember, chair): ";
+            std::cin >> newUT;
+            
+            if (newUT == "author")
+                db.adminChangeUserType(username, confTitle, AUTHOR);
+            else if (newUT == "pcmember")
+                db.adminChangeUserType(username, confTitle, REVIEWER);
+            else if (newUT == "chair")
+                db.adminChangeUserType(username, confTitle, PCCHAIR);
+            else
+                std::cout << "Error updating user! User not updated!" << std::endl;
+        }
+        else
+            std::cout << "Conference doesn't exist" << std::endl;
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+    
+    adminMainMenu();
+}
\ No newline at end of file

commit d626c6aae680a0430b63d4d9dcb1b613b50be53d
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 29 13:22:28 2014 +1100

    missed a stub fn

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 6644220..50aad0a 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -712,6 +712,10 @@ void MainWindow::on_selectPaperReviewer_currentIndexChanged(const QString &arg1)
 //    ui->mainKeyReviewer->setText(QString::fromStdString(thePaper.confKeyword));
 }
 
+void MainWindow::on_selectPaperReview_currentIndexChanged(const QString &arg1)
+{
+ //similar to above except also fetch the appropriate review of the paper
+}
 
 void MainWindow::on_updateConfSettings_clicked()
 {

commit ee62914530f318e790c81e560f365ce49bb696b6
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 29 13:21:23 2014 +1100

    added stub fns for missing slots

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 090e174..5a4fbd8 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -95,6 +95,12 @@ private slots:
     void on_selectPaperReviewer_currentIndexChanged(const QString &arg1);
 
     void on_updateConfSettings_clicked();
+    
+    void on_reviewersTable_itemActivated(QTableWidgetItem *item);
+
+    void on_papersTable_itemClicked(QTableWidgetItem *item);
+    
+    void on_selectPaperReview_currentIndexChanged(const QString &arg1);
 
 private:
     void setUser(UserType_t userType);

commit 24827b63508fea1f1563a41e094432c20c6a1de8
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 29 13:20:27 2014 +1100

    added stub fns for missing slots

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index aabeca0..6644220 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -739,3 +739,16 @@ void MainWindow::clearAllTabs()
     
     ui->tabWidget->clear();
 }
+
+void MainWindow::on_reviewersTable_itemActivated(QTableWidgetItem *item)
+{
+    //populate review values with the given reviewers review
+    //the word review was used too many times in that sentence but you know what i mean
+}
+
+void MainWindow::on_papersTable_itemClicked(QTableWidgetItem *item)
+{
+    //populate paper info based upon the id of the paper selected
+}
+
+

commit dfa62654f07dbccf83d6d2de6c920d63ebdbc49e
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 29 13:12:59 2014 +1100

    fns to read in and write out pdfs (hopefully)

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 7a74cb5..aabeca0 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -535,12 +535,16 @@ void MainWindow::populate_usersTab()
 
 void MainWindow::on_submit_clicked()
 {
-    //paper is the getCurrentPaper()
-
-    //send paper (as in the paper details) as well as the actual paper pdf to server
-    //no response from server
-
 
+    //the pdf
+    QFile file(filename);
+    if(!file.open(QIODEVICE::ReadOnly)){
+        popupBox("Error!", "Error opening file!");
+        return;
+    }
+    QTextStream stream(file);
+    QString string;
+    stream >> string;
 }
 
 void MainWindow::on_submitBid_clicked()
@@ -556,6 +560,24 @@ void MainWindow::on_submitBid_clicked()
 
 void MainWindow::downloadPaper()
 {
+    //we should maybe use QDataStreams instead of QTextStreams but theres no ez way to convert them to QStrings
+    QFileDialog dialog(this);
+    QString fname, pdfString;
+
+    dialog.setWindowTitle("Save File...");
+    dialog.setFileMode(QFileDialog::AnyFile);
+    dialog.setNameFilter("Files (.pdf)");
+    if(dialog.exec())
+        fname = dialog.selectedFiles().at(0);
+    else
+        return;
+
+    //fetch pdf string from db into pdfString
+    QFile file(fname);
+    if(file.open(QIODevice::ReadWrite)){
+        QTextStream stream(&file);
+        stream << pdfString;
+    }
 
 }
 

commit c0b0b39562ac159f3f1f9946dc643b260ab8faed
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Wed Oct 29 08:28:57 2014 +1100

    intergration

diff --git a/CMS/Algo.cpp b/CMS/Algo.cpp
new file mode 100644
index 0000000..13b4963
--- /dev/null
+++ b/CMS/Algo.cpp
@@ -0,0 +1,262 @@
+
+#include "Algo.hpp"
+
+#include <algorithm>
+#include <iostream>
+#include <vector>
+
+PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
+{
+	paperID = newPaperID;
+	conferenceID = confID;
+	db = database;
+	
+	numOfReqReviewrs = numReviewers;
+	
+	reviewerBids.resize(numOfReqReviewrs);
+	
+	for(int i=0; i< numOfReqReviewrs; i++)
+	{
+		reviewerBids[i].score = -1;
+		reviewerBids[i].reviewerID = -1;
+	}
+	
+	fillVectors(paperID);
+	
+	algo(paperID, conferenceID);
+	
+	pushReviewers();
+}
+
+void PaperForReview::pushReviewers()
+{
+	for(int i=0; i < reviewerBids.size(); i++)
+	{
+		if(reviewerBids[i].score > 1)
+		{
+            db->assignPaper(paperID, reviewerBids[i].reviewerID, conferenceID);
+			//Push new Reviewer to the database
+			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
+		}
+	}
+
+}
+
+void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
+{
+    if(reviewerBids.size() < numOfReqReviewrs)
+    {
+        // Add reviewer
+        addNewReviewerUnderReqNum(newScore, newReviewerID);
+    }
+    else if(newScore > minScore)
+	{
+        // Update reviewer
+		setNewReviewer(newScore, newReviewerID);
+	}
+}
+
+void PaperForReview::addNewReviewerUnderReqNum(int newScore, int newReviewer)
+{
+    ReviewerBid bid;
+    bid.score = newScore;
+    bid.reviewerID = newReviewer;
+
+    reviewerBids.push_back(bid);
+    
+    if(newScore < minScore)
+        minScore = newScore;
+}
+
+void PaperForReview::findMinScore()
+{
+	int tempScore = -1;
+	for(int i=0; i<numOfReqReviewrs; i++)
+	{
+        if(tempScore == -1)
+            tempScore = reviewerBids[i].score;
+        else if(reviewerBids[i].score < tempScore)
+			tempScore = reviewerBids[i].score;
+	}
+	minScore = tempScore;
+}
+
+void PaperForReview::setNewReviewer(int newScore, int newReviewer)
+{
+	for(int i=0; i< numOfReqReviewrs; i++)
+	{
+		if(reviewerBids[i].score == minScore)
+		{
+			reviewerBids[i].score = newScore;
+			reviewerBids[i].reviewerID =  newReviewer;
+            findMinScore();
+		}
+	}
+}
+
+PaperForReview::~PaperForReview()
+{
+    db = NULL;
+}
+
+
+//TODO
+//populate clonflicting reviewers vector further from database queries
+void PaperForReview::conflictingReviewers()
+{
+	//authors
+	conflictingReviewersVec.insert(conflictingReviewersVec.end(), authors.begin(), authors.end());
+
+	//(3)usersFromSameOrganisation
+		//ForEachAuthor:   SelectOrganisation
+			//SelectAllUsersFromEachOrganisation
+				//PushBack^
+    std::vector<std::string>::const_iterator it;
+    for(it=involvedOrganisation.begin(); it!=involvedOrganisation.end(); it++)
+    {
+        std::vector<int> reviewersForOrg = db->getReviewersForOrganisation(*it);
+	    conflictingReviewersVec.insert(conflictingReviewersVec.end(), reviewersForOrg.begin(), reviewersForOrg.end());
+    }
+        
+	//pastCoAuthors
+		//(4)ForEachAuthor:   selectAllPapers into papersForAuthor
+			//Select All authors for each paper in papersForAuthor and place into temp
+				//pushBack into conflictingReviewersVec
+    std::vector<int>::const_iterator it2;
+    for(it2=authors.begin(); it2!=authors.end(); it2++)
+    {
+        std::vector<int> papersForAuthor = db->getPapersForAuthor(*it2);
+
+        std::vector<int>::const_iterator iter;
+        for(iter=papersForAuthor.begin(); iter!=papersForAuthor.end(); iter++)
+        {
+            std::vector<int> temp = db->getAuthorsForPaper(*iter);
+	        conflictingReviewersVec.insert(conflictingReviewersVec.end(), temp.begin(), temp.end());
+        }
+    }
+}
+
+
+
+//TODO: matching keywords from database returns
+int PaperForReview::calculateScore(int userID, int paperID)
+{
+	int score = 1;
+
+    std::vector<std::string> keysForPaper = db->getKeywordsForPaper(paperID);
+    std::vector<std::string> keysForUser = db->getKeywordsForUser(userID);
+
+	//(5)&(6)for each keyword match
+    std::vector<std::string>::const_iterator it;
+    for(it=keysForPaper.begin(); it!=keysForPaper.end(); it++)
+    {
+        std::vector<std::string>::const_iterator iter;
+        for(iter=keysForUser.begin(); iter!=keysForUser.end(); iter++)
+        {
+            if (*it == *iter)
+		        ++score;
+        }
+    }
+
+	return score;
+
+}
+
+
+//TODO:get reviewer pref
+void PaperForReview::algo(int paperID, int conferenceID)
+{
+	std::vector<int> userIDs;
+	
+	//(7) fill userIDs with reviewers from conference
+    userIDs = db->getReviewersForConf(conferenceID);
+    int UserID;	
+
+    std::vector<int>::const_iterator it;
+    for(it=userIDs.begin(); it!=userIDs.end(); it++)
+    {
+        UserID = *it;
+     	int score = 0;
+        if (std::find(conflictingReviewersVec.begin(), conflictingReviewersVec.end(), UserID) != conflictingReviewersVec.end())
+        {
+    		int reviewersPreference = 0;
+    				// 1=yes
+    				//2=maybe
+                    //3=no
+    				//4=conflict
+    
+            //(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
+    		reviewersPreference = db->getReviewerPreference(UserID, conferenceID, paperID);			
+    
+    		if(reviewersPreference == 1)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		else if(reviewersPreference == 2)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		else if(reviewersPreference != 3)
+    		{
+    			score = calculateScore(UserID, paperID);
+    			checkNewReviewer(score, UserID);
+    		}
+    	}
+    }
+}
+
+
+//TODO: populate vectors from data base
+//TODO: call conflicting reviewers
+
+void PaperForReview::fillVectors(int paperID)
+{
+
+	// (1)select all Authors where paper==paperID
+		//addAuthors to paper
+    authors = db->getAuthorsForPaper(paperID);
+
+	// (2)select organisation for each author
+		//add involved organisation
+    
+    std::vector<int>::const_iterator it;
+    for(it=authors.begin(); it!=authors.end(); it++)
+    {
+        std::string temp = db->getOrganisationForAuthor(*it);
+        if(!temp.empty())
+            involvedOrganisation.push_back(temp);
+    }
+	
+	//CONFLICTING HERE
+	conflictingReviewers();
+}
+
+
+//MAY NEED TO FILTER FOR CONFERENCE ASWELL
+//(1)select author
+		//Where Paper ID = ?
+		
+//(2)select organisation
+		//where author = ?
+		
+
+//(3) select author
+		//where organisation = ?
+		
+//(4) select paperIDs
+		//where Author =?
+		
+//(5) select keywords
+		//where paperID = ?
+		
+//(6) select keywords
+		//where userID = ?
+		
+//(7) select pcs(reviewrs)
+		//where conferfence = ?
+		
+//(8) select reviewerPreferance
+		//where reviewerID = ? and paperID = ? 
+
diff --git a/CMS/Algo.hpp b/CMS/Algo.hpp
new file mode 100644
index 0000000..0521f10
--- /dev/null
+++ b/CMS/Algo.hpp
@@ -0,0 +1,65 @@
+/*
+	Algo to be run on server side at bool variable change "allocationDateBool"
+	See below for arguments
+	
+	//takes in paperID, conferenceID, and numReqReviewers for paper
+*/
+
+//Algo:
+//PaperForReview Class has a paper and calculates a score for all the potential reviewers. This is then stored in an
+//array (of structs) which has the reviewerID and associated score for that reviewer.
+
+//USE: Create new PaperForReview with consturctor
+//	Use getter function to return reviewers
+//	reviewers with a reviewer ID of -1 => not a reviewer
+
+
+//returns vector of reviewerIDs from getter
+
+#include "Database.hpp"
+
+#include <algorithm>
+#include <iostream>
+#include <vector>
+
+
+struct ReviewerBid
+{
+    ReviewerBid() 
+    { 
+        score = 0; 
+        reviewerID = 0; 
+    }
+	int score;
+	int reviewerID;
+};
+
+class PaperForReview
+{
+public:
+	PaperForReview(int, int, int, Database*);
+	~PaperForReview();
+
+	void findMinScore();
+	void setNewReviewer(int, int);
+    void addNewReviewerUnderReqNum(int, int);
+	void checkNewReviewer(int, int);
+	void addAuthor(int);
+	void conflictingReviewers();
+	void algo(int, int);
+	void fillVectors(int);
+	void pushReviewers();
+    int calculateScore(int, int);
+
+private:
+	Database* db;
+	int paperID;
+	int conferenceID;
+    int minScore;
+	int numOfReqReviewrs;
+	std::vector<ReviewerBid> reviewerBids;
+	std::vector<int> authors;
+	std::vector<std::string> involvedOrganisation;
+	std::vector<int> conflictingReviewersVec;
+};
+
diff --git a/CMS/Conference.hpp b/CMS/Conference.hpp
new file mode 100644
index 0000000..e163f77
--- /dev/null
+++ b/CMS/Conference.hpp
@@ -0,0 +1,138 @@
+#ifndef CONFERENCE_H
+#define CONFERENCE_H
+
+#include "Date.hpp"
+
+#include <string>
+#include <vector>
+
+struct Conference {
+    Conference()
+    {
+        isActive = false;
+        title = "";
+        confID = 0;
+        topic = "";
+        description = "";
+        location = "";
+        //keywords vector
+        isBeforePaperDeadline = false;
+        paperDeadline = Date();
+        isBeforeAllocationDate = false;
+        allocationDate = Date();
+        isBeforeSoftReviewDeadline = false;
+        reviewDeadlineSoft = Date();
+        isBeforeHardReviewDeadline = false;
+        reviewDeadlineHard = Date();
+        isBeforeDiscussDeadline = false;
+        discussDeadline = Date();
+        reviewersPerPaper = 0;
+        postWordLimit = 0;
+    }
+
+    Conference(
+        bool iisActive,
+        std::string& ititle,
+        int& iconfID,
+        std::string& itopic,
+        std::string& idescription,
+        std::string& ilocation,
+        std::vector<std::string>& ikeywords,
+        bool iisBeforePaperDeadline,
+        Date& ipaperDeadline,
+        bool iisBeforeAllocationDate,
+        Date& iallocationDate,
+        bool iisBeforeSoftReviewDeadline,
+        Date& ireviewDeadlineSoft,
+        bool iisBeforeHardReviewDeadline,
+        Date& ireviewDeadlineHard,
+        bool iisBeforeDiscussDeadline,
+        Date& idiscussDeadline,
+        int ireviewersPerPaper,
+        int ipostWordLimit)
+    {
+  	    isActive = iisActive;
+  	    title = ititle;
+  	    confID = iconfID;
+  	    topic = itopic;
+  	    description = idescription;
+  	    location = ilocation;
+  	    keywords = ikeywords;
+  	    isBeforePaperDeadline = iisBeforePaperDeadline;
+  	    paperDeadline = ipaperDeadline;
+  	    isBeforeAllocationDate = iisBeforeAllocationDate;
+  	    allocationDate = iallocationDate;
+  	    isBeforeSoftReviewDeadline = iisBeforeSoftReviewDeadline;
+  	    reviewDeadlineSoft = ireviewDeadlineSoft;
+  	    isBeforeHardReviewDeadline = iisBeforeHardReviewDeadline;
+  	    reviewDeadlineHard = ireviewDeadlineHard;
+  	    isBeforeDiscussDeadline = iisBeforeDiscussDeadline;
+  	    discussDeadline = idiscussDeadline;
+  	    reviewersPerPaper = ireviewersPerPaper;
+  	    postWordLimit = ipostWordLimit;
+    }
+
+// Conference ID not known
+    Conference(
+    const bool iisActive,
+    std::string& ititle,
+    std::string& itopic,
+    std::string& idescription,
+    std::string& ilocation,
+    std::vector<std::string>& ikeywords,
+    const bool iisBeforePaperDeadline,
+    Date& ipaperDeadline,
+    const bool iisBeforeAllocationDate,
+    Date& iallocationDate,
+    const bool iisBeforeSoftReviewDeadline,
+    Date& ireviewDeadlineSoft,
+    const bool iisBeforeHardReviewDeadline,
+    Date& ireviewDeadlineHard,
+    const bool iisBeforeDiscussDeadline,
+    Date& idiscussDeadline,
+    int ireviewersPerPaper,
+    int ipostWordLimit)
+    {
+  	    isActive = iisActive;
+  	    title = ititle;
+  	    topic = itopic;
+  	    description = idescription;
+  	    location = ilocation;
+  	    keywords = ikeywords;
+  	    isBeforePaperDeadline = iisBeforePaperDeadline;
+  	    paperDeadline = ipaperDeadline;
+  	    isBeforeAllocationDate = iisBeforeAllocationDate;
+  	    allocationDate = iallocationDate;
+  	    isBeforeSoftReviewDeadline = iisBeforeSoftReviewDeadline;
+  	    reviewDeadlineSoft = ireviewDeadlineSoft;
+  	    isBeforeHardReviewDeadline = iisBeforeHardReviewDeadline;
+  	    reviewDeadlineHard = ireviewDeadlineHard;
+  	    isBeforeDiscussDeadline = iisBeforeDiscussDeadline;
+  	    discussDeadline = idiscussDeadline;
+  	    reviewersPerPaper = ireviewersPerPaper;
+  	    postWordLimit = ipostWordLimit;
+    }
+
+    bool isActive;
+    std::string title;
+    int confID;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    bool isBeforePaperDeadline;
+    Date paperDeadline;
+    bool isBeforeAllocationDate;
+    Date allocationDate;
+    bool isBeforeSoftReviewDeadline;
+    Date reviewDeadlineSoft;
+    bool isBeforeHardReviewDeadline;
+    Date reviewDeadlineHard;
+    bool isBeforeDiscussDeadline;
+    Date discussDeadline;
+    int reviewersPerPaper;
+    int postWordLimit;
+
+};
+
+#endif
diff --git a/CMS/Database.cpp b/CMS/Database.cpp
new file mode 100644
index 0000000..49b57ae
--- /dev/null
+++ b/CMS/Database.cpp
@@ -0,0 +1,2098 @@
+#include "Database.hpp"
+
+#include "cppconn/driver.h"
+#include "cppconn/exception.h"
+#include "cppconn/resultset.h"
+#include "cppconn/statement.h"
+#include "cppconn/prepared_statement.h"
+
+#include <cstring>
+#include <stdlib.h>
+#include <iostream>
+
+#include <vector>
+#include <map>
+#include <string>
+#include <list>
+
+using namespace sql;
+
+const char* databaseStr = "localhost";
+const char* databaseUserName = "user";
+const char* databaseUserPassword = "user";
+const char* databaseSchema = "csci222";
+
+const char* noDB = "Sorry, but was unable to open database so operation failed";
+
+const char* prepareFailed = "Failure when preparing statement";
+const char* bindFailed = "Failure when binding arguments";
+const char* writeFailed = "Failure when writing to database";
+
+Database::Database()
+{
+        // Constructors should always succeed. But suppose it failed and
+        // the database couldn't be created?
+        invalid = true;
+        driver = get_driver_instance();
+        try {
+                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
+        } catch (sql::SQLException &e) {
+                // Failed
+                return;
+        }
+        dbcon->setSchema(databaseSchema);
+        // It's ok
+        invalid = false;
+}
+
+Database::~Database()
+{
+        if (!invalid) {
+                this->close();
+        }
+}
+
+void Database::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+User Database::fetchUser(std::string key, std::string confName) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	// Add information on user from database to User object
+	const char* getUser = "SELECT * FROM UserAccount WHERE username=?";
+	const char* getPersonalInfo = "SELECT * FROM PersonalInfo WHERE userID=?";
+	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
+        const char* getUserType = "SELECT userType FROM UserType WHERE (userID=? and confID=(SELECT confID FROM Conference where name=?))";
+
+        // =======================================
+        // user account
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUser);
+	pstmt->setString(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return User();
+	}
+
+        int userID = rs->getInt(1);
+        std::string username = rs->getString(2);
+        std::string password = rs->getString(3);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Personal Info
+	pstmt = dbcon->prepareStatement(getPersonalInfo);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+	haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return User();
+	}
+
+        std::string name = rs->getString(3);
+	std::string email = rs->getString(4);
+	std::string organisation = rs->getString(5);
+	std::string phone = rs->getString(6);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise Area
+        std::vector<std::string> vec;
+	
+	pstmt = dbcon->prepareStatement(getExpertise);
+	pstmt->setInt(1, userID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string expertise = rs->getString(1);
+                vec.push_back(expertise);
+        }
+
+        // =======================================
+        // user type 
+        UserType_t userType = AUTHOR;
+        
+	pstmt = dbcon->prepareStatement(getUserType);
+        pstmt->setString(1, key);
+	pstmt->setString(1, confName);
+
+	rs = pstmt->executeQuery();
+	haveRecord = rs->next();
+	if (haveRecord)
+	{
+            int e = rs->getInt(1);
+            if (e = 1)
+                userType = AUTHOR;
+            else if (e = 2)
+                userType = REVIEWER;
+            else if (e = 3)
+                userType = PCCHAIR;
+	}
+
+        delete rs;
+        delete pstmt;
+
+        User user(
+		username,
+		name,
+		email,
+		organisation,
+		phone,
+		password,
+		userID,
+		vec,
+                userType);
+
+        delete rs;
+        delete pstmt;
+	
+	return user;
+}
+
+bool Database::existsUserName(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countUser = "SELECT COUNT(*) FROM UserAccount WHERE username=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countUser);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::putUser(std::string key, User user) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+        if (this->existsUserName(key))
+	{
+                this->updateUser(user);
+        }
+	else
+	{
+        	this->createUser(user);
+	}
+}
+
+void Database::createUser(User user)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertPersonalInfo = "INSERT INTO PersonalInfo(userID, name, email, organisation, phone) VALUES(NULL, ?, ?, ?, ?)";
+	const char* insertUser = "INSERT INTO UserAccount(username, password, infoID) VALUES(?, ?, LAST_INSERT_ID())";
+	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() WHERE infoID=(SELECT infoID FROM UserAccount WHERE userID=LAST_INSERT_ID())";
+	const char* getUserID = "SELECT LAST_INSERT_ID()";
+	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Personal Info
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertPersonalInfo);
+        pstmt->setString(1, user.name);
+        pstmt->setString(2, user.email);
+        pstmt->setString(3, user.organisation);
+        pstmt->setString(4, user.phone);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // user account
+        pstmt = dbcon->prepareStatement(insertUser);
+        pstmt->setString(1, user.userName);
+        pstmt->setString(2, user.password);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Personal Info Update
+        pstmt = dbcon->prepareStatement(updatePIuserID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store userID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise
+      	if (user.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertExpertise);
+    		std::vector<std::string>::const_iterator it;
+      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
+		    {
+			    std::string word = *it;	
+
+        	    	if (!this->existsKeyword(word))
+			    {
+			    	this->addKeyword(word);
+			    }
+			    
+			    pstmt->setInt(1, userID);
+			    pstmt->setString(2, word);
+
+      		            pstmt->executeUpdate();
+		    }
+      		delete pstmt;
+
+      	}
+}
+
+void Database::updateUser(User user)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserID = "SELECT userID FROM UserAccount WHERE username = ?";
+	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
+	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
+
+        const char* deleteExpertise = "DELETE FROM ExpertiseArea WHERE userID=?";
+	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Store userID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+        pstmt->setString(1, user.userName);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // user account
+        pstmt = dbcon->prepareStatement(updateUser);
+        pstmt->setString(1, user.userName);
+        pstmt->setString(2, user.password);
+        pstmt->setInt(3, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Personal Info
+        pstmt = dbcon->prepareStatement(updatePersonalInfo);
+        pstmt->setString(1, user.name);
+        pstmt->setString(2, user.email);
+        pstmt->setString(3, user.organisation);
+        pstmt->setString(4, user.phone);
+        pstmt->setInt(5, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Expertise Delete
+        pstmt = dbcon->prepareStatement(deleteExpertise);
+        pstmt->setInt(1, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Expertise Insert
+      	if (user.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertExpertise);
+		    std::vector<std::string>::const_iterator it;
+      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
+		    {
+		    	std::string word = *it;	
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	pstmt->setInt(1, userID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
+      		delete pstmt;
+
+      	}
+}
+
+std::vector<int> Database::allUserIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> vptr;
+
+        const char* selectall = "select userID from UserAccount";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr.push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> Database::allUserNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> vptr;
+
+        const char* selectall = "select username from UserAccount";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr.push_back(aname);
+        }
+
+        return vptr;
+}
+
+void Database::setUserAsAuthor(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* insertAuthorType = "INSERT INTO UserType VALUES(?, ?, 'author')";
+
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertAuthorType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
+void Database::setUserAsPC(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* insertPCType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
+
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertPCType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
+void Database::setUserAsChair(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'chair')";
+
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertChairType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
+bool Database::existsKeyword(std::string key) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+	const char* countKeyword = "SELECT COUNT(*) FROM Keywords WHERE keyword=?";
+
+    sql::PreparedStatement *pstmt = NULL;
+    sql::ResultSet * rs = NULL;
+
+    pstmt = dbcon->prepareStatement(countKeyword);
+
+    int count = 0;
+    pstmt->setString(1, key);
+    rs = pstmt->executeQuery();
+
+    if (rs->next()) {
+            count = rs->getInt(1);
+    }
+    delete rs;
+    delete pstmt;
+
+    return count == 1;
+}
+
+void Database::addKeyword(std::string key) throw (const char*)
+{
+	if (invalid)
+		throw (noDB);
+
+	const char* insertKeyword = "INSERT INTO Keywords VALUES(NULL, ?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertKeyword);
+        pstmt->setString(1, key);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+}
+
+Conference Database::fetchConference(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	// Add information on user from database to User object
+	const char* getConference = "SELECT * FROM Conference WHERE name=?";
+	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords WHERE confID=?)";
+
+        // =======================================
+        // Conference 
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getConference);
+	pstmt->setString(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Conference();
+	}
+
+        int confID = rs->getInt(1);
+        std::string title = rs->getString(2);
+        std::string topic = rs->getString(3);
+        std::string description = rs->getString(4);
+        std::string location = rs->getString(5);
+        bool isActive = rs->getBoolean(6);
+        int paperDeadlineD  = rs->getInt(7);
+        int paperDeadlineM  = rs->getInt(8);
+        int paperDeadlineY  = rs->getInt(9);
+	Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+        bool isBeforePaperDeadline = rs->getBoolean(10);
+        int allocationDateD  = rs->getInt(11);
+        int allocationDateM  = rs->getInt(12);
+        int allocationDateY  = rs->getInt(13);
+	Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+        bool isBeforeAllocationDate = rs->getBoolean(14);
+        int reviewDeadlineSoftD  = rs->getInt(15);
+        int reviewDeadlineSoftM  = rs->getInt(16);
+        int reviewDeadlineSoftY  = rs->getInt(17);
+	Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY);
+        bool isBeforeSoftReviewDeadline = rs->getBoolean(18);
+	int reviewDeadlineHardD  = rs->getInt(19);
+        int reviewDeadlineHardM  = rs->getInt(20);
+        int reviewDeadlineHardY  = rs->getInt(21);
+	Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+        bool isBeforeHardReviewDeadline = rs->getBoolean(22);
+        int discussDeadlineD  = rs->getInt(23);
+        int discussDeadlineM  = rs->getInt(24);
+        int discussDeadlineY  = rs->getInt(25);
+	Date discussDeadline(discussDeadlineD, discussDeadlineM, discussDeadlineY);
+        bool isBeforeDiscussDeadline = rs->getBoolean(26);
+	int reviewersPerPaper = rs->getInt(27);
+	int postWordLimit = rs->getInt(28);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise Area
+        std::vector<std::string> vec;
+	
+	pstmt = dbcon->prepareStatement(getConfKeywords);
+	pstmt->setInt(1, confID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                vec.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        Conference conf(
+		isActive,
+		title,
+		confID,
+		topic,
+		description,
+		location,
+		vec,
+		isBeforePaperDeadline,
+		paperDeadline,
+		isBeforeAllocationDate,
+		allocationDate,
+		isBeforeSoftReviewDeadline,
+		reviewDeadlineSoft,
+		isBeforeHardReviewDeadline,
+		reviewDeadlineHard,
+		isBeforeDiscussDeadline,
+		discussDeadline,
+		reviewersPerPaper,
+		postWordLimit
+		);
+	
+	return conf;
+}
+
+bool Database::existsConfName(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countConf = "SELECT COUNT(*) FROM Conference WHERE name=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countConf);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::putConf(std::string key, Conference conf) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+        if (this->existsConfName(key))
+	{
+                this->updateConf(conf);
+        }
+	else
+	{
+        	this->createConf(conf);
+	}
+}
+
+void Database::createConf(Conference conf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadlineD, paperDeadlineM, paperDeadlineY, paperDeadlineBool, allocationDateD, allocationDateM, allocationDateY, allocationDateBool, reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY, reviewDeadlineSoftBool, reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY, reviewDeadlineHardBool, discussDeadlineD, discussDeadlineM, discussDeadlineY, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
+
+	const char* getconfID = "SELECT LAST_INSERT_ID()";
+	const char* insertConfKeyword = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Personal Info
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertConference);
+
+        pstmt->setString(1, conf.title);
+        pstmt->setString(2, conf.topic);
+        pstmt->setString(3, conf.description);
+        pstmt->setString(4, conf.location);
+        pstmt->setBoolean(5, conf.isActive);
+        pstmt->setInt(6, conf.paperDeadline.getDay());
+        pstmt->setInt(7, conf.paperDeadline.getMonth());
+        pstmt->setInt(8, conf.paperDeadline.getYear());
+        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
+        pstmt->setInt(10, conf.allocationDate.getDay());
+        pstmt->setInt(11, conf.allocationDate.getMonth());
+        pstmt->setInt(12, conf.allocationDate.getYear());
+        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
+        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf.discussDeadline.getDay());
+        pstmt->setInt(23, conf.discussDeadline.getMonth());
+        pstmt->setInt(24, conf.discussDeadline.getYear());
+        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf.reviewersPerPaper);
+	pstmt->setInt(27, conf.postWordLimit);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store confID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getconfID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int confID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise
+      	if (conf.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertConfKeyword);
+		    std::vector<std::string>::const_iterator it;
+      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
+		    {
+		    	std::string word = *it;	
+
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	
+		    	pstmt->setInt(1, confID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
+      		delete pstmt;
+
+      	}
+}
+
+void Database::updateConf(Conference conf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getConfID = "SELECT confID FROM Conference WHERE name = ?";
+
+	const char* updateConference = "UPDATE Conference SET name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
+
+        const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
+	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Store confID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getConfID);
+        pstmt->setString(1, conf.title);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int confID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Conference
+        pstmt = dbcon->prepareStatement(updateConference);
+
+        pstmt->setString(1, conf.title);
+        pstmt->setString(2, conf.topic);
+        pstmt->setString(3, conf.description);
+        pstmt->setString(4, conf.location);
+        pstmt->setBoolean(5, conf.isActive);
+	int day = conf.paperDeadline.getDay();
+	int month = conf.paperDeadline.getMonth();
+	int year = conf.paperDeadline.getYear();
+        pstmt->setInt(6, day);
+        pstmt->setInt(7, month);
+        pstmt->setInt(8, year);
+        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
+        pstmt->setInt(10, conf.allocationDate.getDay());
+        pstmt->setInt(11, conf.allocationDate.getMonth());
+        pstmt->setInt(12, conf.allocationDate.getYear());
+        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
+        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf.discussDeadline.getDay());
+        pstmt->setInt(23, conf.discussDeadline.getMonth());
+        pstmt->setInt(24, conf.discussDeadline.getYear());
+        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf.reviewersPerPaper);
+	pstmt->setInt(27, conf.postWordLimit);
+	pstmt->setInt(28, confID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Delete
+        pstmt = dbcon->prepareStatement(deleteKeywords);
+        pstmt->setInt(1, confID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Insert
+      	if (conf.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		    std::vector<std::string>::const_iterator it;
+      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
+		    {
+		    	std::string word = *it;	
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	pstmt->setInt(1, confID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
+      		delete pstmt;
+      	}
+}
+
+std::vector<int> Database::allConfIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> vptr;
+
+        const char* selectall = "select confID from Conference";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr.push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> Database::allConfNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> vptr;
+
+        const char* selectall = "select name from Conference";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr.push_back(aname);
+        }
+
+        return vptr;
+}
+
+std::vector<int> Database::activeConfIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> vptr;
+
+        const char* selectActive = "SELECT confID FROM Conference WHERE active = 1";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectActive);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr.push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> Database::activeConfNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> vptr;
+
+        const char* selectActive = "SELECT name FROM Conference WHERE active = 1";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectActive);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr.push_back(aname);
+        }
+
+        return vptr;
+}
+
+PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperSummary = "SELECT paperName FROM Paper WHERE paperID=?";
+
+        // =======================================
+        // Paper Summary 
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperSummary);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return PaperSummary();
+	}
+
+        std::string paperName = rs->getString(1);
+
+        delete rs;
+        delete pstmt;
+
+        PaperSummary papSum(key, paperName);
+	
+	return papSum;
+}
+
+std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int leadAuthorID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and leadAuthorID=?)";
+
+        // =======================================
+        // Paper Summary 
+	std::vector<PaperSummary> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperSummary);
+	pstmt->setInt(1, confID);
+	pstmt->setInt(2, leadAuthorID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+        	std::string paperName = rs->getString(1);
+        	int paperID = rs->getInt(2);
+        	PaperSummary papSum(paperID, paperName);
+                vec.push_back(papSum);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+Paper Database::fetchPaper(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaper = "SELECT * FROM Paper WHERE paperID=?";
+	const char* getConfKeyword = "SELECT keyword FROM Keywords WHERE keywordID=(SELECT keywordID FROM Paper WHERE paperID=?)";
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords WHERE paperID=?)";
+	
+	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
+
+	const char* getDiscussPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
+
+	const char* getReviews = "SELECT * FROM Review WHERE (paperID=? and confID=?)";
+	
+        // =======================================
+        // Paper
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaper);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Paper();
+	}
+
+    	int paperID = rs->getInt(1);
+	int confID = rs->getInt(3);
+    	int leadAuthorID = rs->getInt(2);
+    	std::string title = rs->getString(5);
+    	std::string abstract = rs->getString(6);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // confKeyword
+	pstmt = dbcon->prepareStatement(getConfKeyword);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+	haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Paper();
+	}
+
+	std::string confKeyword = rs->getString(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Paper Keywords
+        std::vector<std::string> keywords;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Authors 
+        std::vector<PersonalInfo> authors;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int infoID = rs->getInt(1);
+		std::string name = rs->getString(2);
+		std::string email = rs->getString(3);
+		std::string organisation = rs->getString(4);
+		std::string phone = rs->getString(5);
+		PersonalInfo pInfo(name, email, organisation, phone, infoID);
+                authors.push_back(pInfo);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Discussion
+        Discussion discussion;
+	
+	pstmt = dbcon->prepareStatement(getDiscussPost);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string comment = rs->getString(1);
+		int reviewerID = rs->getInt(2);
+		int commentID = rs->getInt(3);
+		DiscussionPost discuss(comment, reviewerID, commentID);
+                discussion.discussion.push_back(discuss);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Reviews
+        std::vector<Review> reviews;
+	
+	pstmt = dbcon->prepareStatement(getReviews);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int reviewerID = rs->getInt(3);
+		int overall = rs->getInt(5);
+		int confidence = rs->getInt(6);
+		int relevance = rs->getInt(7);
+		int originality = rs->getInt(8);
+		int significance = rs->getInt(9);
+		int presentation = rs->getInt(10);
+		int techQuality = rs->getInt(11);
+		int evaluation = rs->getInt(12);
+  		std::string commentsStrength = rs->getString(13);
+  		std::string commentsWeakness = rs->getString(14);
+  		std::string commentsSuggestions = rs->getString(15);
+  		std::string commentsShortPaper = rs->getString(16);
+  		std::string commentsBestAward = rs->getString(17);
+
+		Review review(paperID, 
+			reviewerID, 
+			overall, 
+			confidence, 
+			relevance, 
+			originality, 
+			significance, 
+			presentation, 
+			techQuality, 
+			evaluation, 
+			commentsStrength, 
+			commentsWeakness, 
+			commentsSuggestions, 
+			commentsShortPaper, 
+			commentsBestAward);
+		reviews.push_back(review);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	Paper paper(
+		paperID,
+		confID,
+		leadAuthorID,
+		title,
+		abstract,
+		authors,
+		keywords,
+		confKeyword,
+		reviews,
+		discussion);
+
+	return paper;
+}
+
+bool Database::existsPaperTitleConf(Paper paper) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countPaper = "SELECT COUNT(*) FROM Paper WHERE (paperTitle=? and confID=?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countPaper);
+
+        int count = 0;
+        pstmt->setString(1, paper.title);
+        pstmt->setInt(2, paper.confID);
+
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+void Database::createPaper(Paper paper, std::string pdf) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertPaper = "INSERT IGNORE INTO Paper(leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?), ?, ?, ?)";
+	const char* getPaperID = "SELECT LAST_INSERT_ID()";
+	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
+
+	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Paper
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertPaper);
+        pstmt->setInt(1, paper.leadAuthorID);
+        pstmt->setInt(2, paper.confID);
+        pstmt->setString(3, paper.confKeyword);
+        pstmt->setString(4, paper.title);
+        pstmt->setString(5, paper.abstract);
+        pstmt->setString(6, pdf);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store paperID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int paperID = rs->getInt(1);
+
+	if( paperID == 0)
+		return;
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Paper Authors
+        pstmt = dbcon->prepareStatement(insertAuthors);
+
+	std::vector<PersonalInfo>::const_iterator it;
+	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
+	{
+		PersonalInfo pInfo = *it;	
+
+		pstmt->setInt(1, paperID);
+		pstmt->setInt(2, pInfo.infoID);
+
+	        pstmt->executeUpdate();
+	}
+	delete pstmt;
+
+        // =======================================
+        // Keywords
+      	if (paper.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		    std::vector<std::string>::const_iterator it;
+      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
+		    {
+		    	std::string word = *it;	
+
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	
+		    	pstmt->setInt(1, paperID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
+      		delete pstmt;
+
+      	}
+
+}
+
+void Database::updatePaper(Paper paper) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* updatePaper = "UPDATE Paper SET leadAuthorID=?, confID=?, keywordID=(SELECT keywordID FROM Keywords WHERE keyword=?), paperTitle=?, paperAbstract=? WHERE paperID=?";
+        const char* deleteAuthors = "DELETE FROM paperAuthors WHERE paperID=?";
+	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
+
+        const char* deleteKeywords = "DELETE FROM PaperKeywords WHERE paperID=?";
+	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Paper
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(updatePaper);
+        pstmt->setInt(1, paper.leadAuthorID);
+        pstmt->setInt(2, paper.confID);
+        pstmt->setString(3, paper.confKeyword);
+        pstmt->setString(4, paper.title);
+        pstmt->setString(5, paper.abstract);
+        pstmt->setInt(6, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Authors Delete
+        pstmt = dbcon->prepareStatement(deleteAuthors);
+        pstmt->setInt(1, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Paper Authors
+        pstmt = dbcon->prepareStatement(insertAuthors);
+
+	std::vector<PersonalInfo>::const_iterator it;
+	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
+	{
+		PersonalInfo pInfo = *it;	
+
+		pstmt->setInt(1, paper.paperID);
+		pstmt->setInt(2, pInfo.infoID);
+
+	        pstmt->executeUpdate();
+	}
+	delete pstmt;
+
+        // =======================================
+        // Keywords Delete
+        pstmt = dbcon->prepareStatement(deleteKeywords);
+        pstmt->setInt(1, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Insert
+      	if (paper.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		    std::vector<std::string>::const_iterator it;
+      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
+		    {
+		    	std::string word = *it;	
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	pstmt->setInt(1, paper.paperID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
+      		delete pstmt;
+      	}
+}
+
+void Database::addPaperAccepted(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertAccepted = "INSERT INTO AcceptedPapers VALUES(?, ?)";
+
+        // =======================================
+        // Paper Accepted
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertAccepted);
+        pstmt->setInt(1, confID);
+        pstmt->setInt(2, paperID);
+
+        pstmt->executeUpdate();
+
+	delete pstmt;
+}
+
+std::vector<int> Database::fetchPaperAccepted(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAccepted = "SELECT paperID FROM AcceptedPapers WHERE confID=?";
+
+        // =======================================
+        // Paper Accepted
+	std::vector<int> vec;
+
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+
+	pstmt = dbcon->prepareStatement(getAccepted);
+        pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+	delete pstmt;
+	delete rs;
+}
+
+Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReview = "SELECT * FROM Review WHERE (paperID=? and reviewerID=? and confID=?)";
+        // =======================================
+        // Review
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReview);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, reviewerID);
+	pstmt->setInt(3, confID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Review();
+	}
+
+        int reportID = rs->getInt(1);
+        int overall = rs->getInt(5);
+        int confidence = rs->getInt(6);
+        int relevance = rs->getInt(7);
+        int originality = rs->getInt(8);
+        int significance = rs->getInt(9);
+        int presentation = rs->getInt(10);
+        int techQuality = rs->getInt(11);
+        int evaluation = rs->getInt(12);
+        std::string commentsStrength = rs->getString(13);
+        std::string commentsWeakness = rs->getString(14);
+        std::string commentsSuggestions = rs->getString(15);
+        std::string commentsShortPaper = rs->getString(16);
+        std::string commentsBestAward = rs->getString(17);
+
+	Review review(reportID,
+		paperID, 
+		reviewerID, 
+		overall, 
+		confidence, 
+		relevance, 
+		originality, 
+		significance, 
+		presentation, 
+		techQuality, 
+		evaluation, 
+		commentsStrength, 
+		commentsWeakness, 
+		commentsSuggestions, 
+		commentsShortPaper, 
+		commentsBestAward);
+
+        delete rs;
+        delete pstmt;
+
+	return review;
+}
+
+void Database::modifyReview(Review review, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertReview = "INSERT INTO Review(paperID, reviewerID, confID, overall, confidence, relevance, originality, significance, presentation, techQuality, evaluation, commentsStrength, commentsWeakness, commentsSuggestions, commentsShortPaper, commentsBestAward) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 
+	const char* updateReview = "UPDATE Review SET paperID=?, reviewerID=?, confID=?, overall=?, confidence=?, relevance=?, originality=?, significance=?, presentation=?, techQuality=?, evaluation=?, commentsStrength=?, commentsWeakness=?, commentsSuggestions=?, commentsShortPaper=?, commentsBestAward=? WHERE reportID=?"; 
+        // =======================================
+        // Reviews
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertReview);
+
+	if (review.reportID==0)
+	{
+		pstmt = dbcon->prepareStatement(insertReview);
+
+		pstmt->setInt(1, review.paperID);
+		pstmt->setInt(2, review.reviewerID);
+		pstmt->setInt(3, confID);
+		pstmt->setInt(4, review.overall);
+		pstmt->setInt(5, review.confidence);
+		pstmt->setInt(6, review.relevance);
+		pstmt->setInt(7, review.originality);
+		pstmt->setInt(8, review.significance);
+		pstmt->setInt(9, review.presentation);
+		pstmt->setInt(10, review.techQuality);
+		pstmt->setInt(11, review.evaluation);
+		pstmt->setString(12, review.commentsStrength);
+		pstmt->setString(13, review.commentsWeakness);
+		pstmt->setString(14, review.commentsSuggestions);
+		pstmt->setString(15, review.commentsShortPaper);
+		pstmt->setString(16, review.commentsBestAward);
+
+		pstmt->executeUpdate();
+	}
+	else
+	{
+		pstmt = dbcon->prepareStatement(updateReview);
+
+		pstmt->setInt(1, review.paperID);
+		pstmt->setInt(2, review.reviewerID);
+		pstmt->setInt(3, confID);
+		pstmt->setInt(4, review.overall);
+		pstmt->setInt(5, review.confidence);
+		pstmt->setInt(6, review.relevance);
+		pstmt->setInt(7, review.originality);
+		pstmt->setInt(8, review.significance);
+		pstmt->setInt(9, review.presentation);
+		pstmt->setInt(10, review.techQuality);
+		pstmt->setInt(11, review.evaluation);
+		pstmt->setString(12, review.commentsStrength);
+		pstmt->setString(13, review.commentsWeakness);
+		pstmt->setString(14, review.commentsSuggestions);
+		pstmt->setString(15, review.commentsShortPaper);
+		pstmt->setString(16, review.commentsBestAward);
+		pstmt->setInt(17, review.reportID);
+
+		pstmt->executeUpdate();
+	}
+	delete pstmt;
+}
+
+Discussion Database::fetchDiscussion(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getDiscussion = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
+        // =======================================
+        // Discussion
+        std::list<DiscussionPost> discussion;
+	
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+
+	pstmt = dbcon->prepareStatement(getDiscussion);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string comment = rs->getString(1);
+		int reviewerID = rs->getInt(2);
+		int commentID = rs->getInt(3);
+		DiscussionPost discuss(comment, reviewerID, commentID);
+                discussion.push_back(discuss);
+        }
+
+        delete rs;
+        delete pstmt;
+}
+
+DiscussionPost Database::fetchRebuttal(int paperID, int userID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getDiscussionPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and reviewerID=? and confID=?)";
+
+        // =======================================
+        // Discussion Post
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getDiscussionPost);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, userID);
+	pstmt->setInt(3, confID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return DiscussionPost();
+	}
+
+	std::string comment = rs->getString(1);
+	int reviewerID = rs->getInt(2);
+	int commentID = rs->getInt(3);
+	DiscussionPost discuss(comment, reviewerID, commentID);
+
+        delete rs;
+        delete pstmt;
+	
+	return discuss;
+}
+
+void Database::createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertDiscussPost = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
+        // =======================================
+        // Discussion
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertDiscussPost);
+	
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+	pstmt->setInt(3, discussionPost.reviewerID);
+	pstmt->setString(4, discussionPost.comment);
+
+	pstmt->executeUpdate();
+
+	delete pstmt;
+}
+
+std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAuthors = "SELECT authorID FROM paperAuthors WHERE paperID=?";
+
+        // =======================================
+        // Authors
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setInt(1, paperID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int authorID = rs->getInt(1);
+                vec.push_back(authorID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::string Database::getOrganisationForAuthor(int infoID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getOrg = "SELECT organisation FROM PersonalInfo WHERE infoID=?";
+
+        // =======================================
+        // Org
+	std::vector<std::string> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getOrg);
+	pstmt->setInt(1, infoID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return std::string();
+	}
+
+	std::string org = rs->getString(1);
+
+    delete rs;
+    delete pstmt;
+	
+	return org;
+}
+
+std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType = 'pc' and userID IN (SELECT userID FROM PersonalInfo WHERE (userID IS NOT NULL and organisation=?)))";
+
+        // =======================================
+        // Reviewers
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewers);
+	pstmt->setString(1, org);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int reviewerID = rs->getInt(1);
+                vec.push_back(reviewerID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<int> Database::getPapersForAuthor(int authorID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPapers = "SELECT paperID FROM paperAuthors WHERE authorID=?";
+
+        // =======================================
+        // Papers
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPapers);
+	pstmt->setInt(1, authorID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<std::string> Database::getKeywordsForPaper(int paperID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords WHERE paperID=?)";
+
+        // =======================================
+        // Paper Keywords
+        std::vector<std::string> keywords;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, paperID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return keywords;
+}
+
+std::vector<std::string> Database::getKeywordsForUser(int userID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
+
+        // =======================================
+        // Expertise Keywords
+        std::vector<std::string> keywords;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserKeywords);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return keywords;
+}
+
+std::vector<int> Database::getReviewersForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and confID=?)";
+
+        // =======================================
+        // Reviewers
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewers);
+	pstmt->setInt(1, confID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int userID = rs->getInt(1);
+                vec.push_back(userID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+int Database::getReviewerPreference(int userID, int confID, int paperID) throw (const char*)
+{
+	const char* getReviewerPreference = "SELECT preference FROM ReviewerPreference WHERE (userID=? and confID=? and paperID=?)";
+
+        // =======================================
+        // Reviewer Preference
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewerPreference);
+	pstmt->setInt(1, userID);
+	pstmt->setInt(2, confID);
+	pstmt->setInt(3, paperID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return -1;
+	}
+
+    	int preference = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+	
+	return preference;
+}
+
+void Database::assignPaper(int paperID, int reviewerID, int confID) throw (const char*)
+{
+    if (invalid)
+            throw (noDB);
+
+	const char* insertPaperAssigned = "INSERT INTO PaperAssigned(paperID, reviewerID, confID) VALUES(?, ?, ?)";
+
+    // =======================================
+    // Paper Assigned
+    sql::PreparedStatement *pstmt = NULL;
+    pstmt = dbcon->prepareStatement(insertPaperAssigned);
+    pstmt->setInt(1, paperID);
+    pstmt->setInt(2, reviewerID);
+    pstmt->setInt(3, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
+std::vector<int> Database::fetchReviewersAssigned(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewersIDs = "SELECT reviewerID FROM PaperAssigned WHERE (paperID=? and confID=?)";
+
+        // =======================================
+        // Reviewer ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewersIDs);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int reviewerID = rs->getInt(1);
+                vec.push_back(reviewerID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getPaperIDsForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE confID=?";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM PaperAssigned WHERE (reviewerID=? and confID)";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, reviewerID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE (leadAuthorID=? and confID=?)";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, leadAuthorID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserIDs = "SELECT userID FROM UserType WHERE confID=?";
+
+        // =======================================
+        // User ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserIDs);
+	pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+
+void Database::adminChangeUserName(std::string currentUN, std::string newUN) throw (const char*)
+{
+	const char* getUserID = "SELECT userID FROM UserAccount WHERE username = ?";
+        const char* updateUserName = "UPDATE UserAccount SET username = ? WHERE userID=?";
+
+        // =======================================
+        // Store userID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+        pstmt->setString(1, currentUN);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Personal Info Update
+
+        pstmt = dbcon->prepareStatement(updateUserName);
+        pstmt->setString(1, newUN);
+        pstmt->setInt(2, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+}
+
+void Database::adminChangePassword(std::string username, std::string password) throw (const char*)
+{
+        const char* updatePassword = "UPDATE UserAccount SET password = ? WHERE username=?";
+
+        // =======================================
+        // Personal Info Update
+        sql::PreparedStatement *pstmt = NULL;
+
+        pstmt = dbcon->prepareStatement(updatePassword);
+        pstmt->setString(1, password);
+        pstmt->setString(1, username);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+}
diff --git a/CMS/Database.hpp b/CMS/Database.hpp
new file mode 100644
index 0000000..8783cc1
--- /dev/null
+++ b/CMS/Database.hpp
@@ -0,0 +1,128 @@
+#ifndef DATABASE_H
+#define DATABASE_H
+
+#include "Exception.hpp"
+#include "User.hpp"
+#include "Conference.hpp"
+#include "Date.hpp"
+#include "PersonalInfo.hpp"
+#include "Paper.hpp"
+#include "PaperSummary.hpp"
+#include "Review.hpp"
+#include "Discussion.hpp"
+#include "DiscussionPost.hpp"
+
+#include "mysql_connection.h"
+#include "mysql_driver.h"
+
+#include <string>
+#include <vector>
+
+class Database {
+public:
+    Database();
+    
+    ~Database();
+    
+    void close();
+    
+    // CREATE/UPDATE
+    void createUser(User user);
+    void updateUser(User user);
+    void createConf(Conference conf);
+    void updateConf(Conference conf);
+
+    // ADMIN
+    void adminChangeUserName(std::string currentUN, std::string newUN) throw (const char*);
+    void adminChangePassword(std::string username, std::string password) throw (const char*);
+
+	// USER
+	User fetchUser(std::string key, std::string confName) throw (const char*);
+    bool existsUserName(std::string key) throw (const char*);
+    void putUser(std::string key, User user) throw (const char*);
+    std::vector<int> allUserIDs();
+    std::vector<std::string> allUserNames();
+    void setUserAsAuthor(int userID, int confID) throw (const char*);
+    void setUserAsPC(int userID, int confID) throw (const char*);
+    void setUserAsChair(int userID, int confID) throw (const char*);
+
+	// KEYWORD
+    bool existsKeyword(std::string key) throw (const char*);
+	void addKeyword(std::string key) throw (const char*);
+
+	// CONFERENCE
+	Conference fetchConference(std::string key) throw (const char*);
+    bool existsConfName(std::string key) throw (const char*);
+    void putConf(std::string key, Conference conf) throw (const char*);
+    std::vector<int> allConfIDs();
+    std::vector<std::string> allConfNames();
+    std::vector<int> activeConfIDs();
+    std::vector<std::string> activeConfNames();
+
+	// PAPER
+	PaperSummary fetchPaperSummary(int key) throw (const char*);
+    std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int leadAuthorID) throw (const char*);
+    Paper fetchPaper(int key) throw (const char*);
+	bool existsPaperTitleConf(Paper paper) throw (const char*);
+    void createPaper(Paper paper, std::string pdf) throw (const char*);
+    void updatePaper(Paper paper) throw (const char*);
+	void addPaperAccepted(int paperID, int confID) throw (const char*);
+	std::vector<int> fetchPaperAccepted(int confID) throw (const char*);
+
+	// REVIEW
+	Review fetchReview(int paperID, int reviewerID, int confID) throw (const char*);
+	void modifyReview(Review review, int confID) throw (const char*);
+
+	// DISCUSSION
+	Discussion fetchDiscussion(int paperID, int confID) throw (const char*);
+	DiscussionPost fetchRebuttal(int paperID, int userID, int confID) throw (const char*);
+	void createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*);
+
+	// ALGO
+	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);
+	std::string getOrganisationForAuthor(int infoID) throw (const char*);
+	std::vector<int> getReviewersForOrganisation(std::string org) throw (const char*);
+	std::vector<int> getPapersForAuthor(int authorID) throw (const char*);
+	std::vector<std::string> getKeywordsForPaper(int paperID) throw (const char*);
+	std::vector<std::string> getKeywordsForUser(int userID) throw (const char*);
+	std::vector<int> getReviewersForConf(int confID) throw (const char*);
+	int getReviewerPreference(int userID, int confID, int paperID) throw (const char*);
+	void assignPaper(int paperID, int reviewerID, int confID) throw (const char*);
+
+	std::vector<int> fetchReviewersAssigned(int paperID, int confID) throw (const char*);
+	
+	std::vector<int> getPaperIDsForConf(int confID) throw (const char*);	
+	std::vector<int> getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*);
+	std::vector<int> getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*);
+	std::vector<int> getUserIDsForConf(int confID) throw (const char*);
+	
+//        // Delete - returns false if there wasn't a record with that key
+//        bool deleteRecord(const char* key) throw (const char*);
+//        // Put - insert/replace a record; returns false if failed
+//        // (In this example, key is actually the same as name field in data record)
+//        void put(const char* key, const MyRecord *data) throw (const char*);
+//        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
+//        MyRecord *get(const char*key) throw (const char*);
+//
+//        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+//
+//
+
+    bool isOK()
+    {
+        return !(this->invalid);
+    }
+
+private:
+    bool invalid;
+    const char* dbname;
+    sql::Connection *dbcon;
+    sql::Driver *driver;
+    Database(const Database& orig);
+    Database& operator=(const Database);
+
+//        void recordToTables(const MyRecord *data);
+
+
+};
+#endif
diff --git a/CMS/Date.hpp b/CMS/Date.hpp
new file mode 100644
index 0000000..d8b5572
--- /dev/null
+++ b/CMS/Date.hpp
@@ -0,0 +1,67 @@
+#ifndef DATE_H
+#define DATE_H
+
+#include <sstream>
+
+class Date 
+{
+public:
+    Date()
+    {
+        day = 0;
+        month = 0;
+        year = 0;
+    }
+
+    Date(int iday, int imonth, int iyear)
+    {
+        day = iday;
+        month = imonth;
+        year = iyear;
+    }
+    
+    Date(const Date& in)
+    {
+        day = in.day;
+        month = in.month;
+        year = in.year;
+    }
+    
+    void setDay(int iday) {day = iday;}
+    void setMonth(int imonth) {month = imonth;}
+    void setYear(int iyear) {year = iyear;}
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    
+    bool compare(const Date& idate)
+    { //returns true if idate is before or on the same day as this
+        if(idate.year != year) {
+            return idate.year < year;
+        } else {
+            if(idate.month != month) {
+                return idate.month < month;
+            } else {
+                if(idate.day != day) {
+                    return idate.day < day;
+                }
+            }
+        }
+        return true;
+    }
+
+    std::string convertToString()
+    {
+        std::stringstream temp;
+        temp << day << "/" << month << "/" << year; 
+
+        return temp.str();
+    } 
+    
+private:
+    int day;
+    int month;
+    int year;
+};
+
+#endif
diff --git a/CMS/Discussion.hpp b/CMS/Discussion.hpp
new file mode 100644
index 0000000..a6fef7f
--- /dev/null
+++ b/CMS/Discussion.hpp
@@ -0,0 +1,28 @@
+#ifndef DISCUSSION_H
+#define DISCUSSION_H
+
+#include "../DataAll/DiscussionPost.hpp"
+
+#include <list>
+
+struct Discussion 
+{
+    Discussion()
+    {
+        //discussion list
+    }
+
+    Discussion(const std::list<DiscussionPost>& idiscussion)
+    {
+        discussion = idiscussion;
+    }
+
+    Discussion(const Discussion& in) 
+    {
+        discussion = in.discussion;
+    }
+
+    std::list<DiscussionPost> discussion;
+};
+
+#endif
diff --git a/CMS/DiscussionPost.hpp b/CMS/DiscussionPost.hpp
new file mode 100644
index 0000000..0b4381b
--- /dev/null
+++ b/CMS/DiscussionPost.hpp
@@ -0,0 +1,37 @@
+#ifndef DISCUSSION_POST_H
+#define DISCUSSION_POST_H
+
+#include <string>
+
+struct DiscussionPost 
+{
+    DiscussionPost()
+    {
+        comment = "";
+        reviewerID = 0;
+        postID = 0;
+    }
+    
+    DiscussionPost(const std::string& icomment,
+        int ireviewerID,
+        int ipostID)
+    {
+        comment = icomment;
+        reviewerID = ireviewerID;
+        postID = ipostID;
+    }
+    
+// No postID
+    DiscussionPost(const std::string& icomment,
+        int ireviewerID)
+    {
+        comment = icomment;
+        reviewerID = ireviewerID;
+    }
+    
+    std::string comment;
+    int reviewerID;
+    int postID;
+};
+
+#endif
diff --git a/CMS/Exception.hpp b/CMS/Exception.hpp
new file mode 100644
index 0000000..216cca4
--- /dev/null
+++ b/CMS/Exception.hpp
@@ -0,0 +1,25 @@
+/*
+ * File:        MyException.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:20 AM
+ */
+
+#ifndef MYEXCEPTION_H
+#define MYEXCEPTION_H
+
+#include <string>
+#include <exception>
+using namespace std;
+
+class MyException : public exception {
+public:
+    MyException(string& whatsup) : message(whatsup) {  }
+    ~MyException() throw() {}
+    const char* what(){return message.c_str();}
+private:
+    string message;
+};
+
+#endif  /* MYEXCEPTION_H */
+
diff --git a/CMS/MainWindow.cpp b/CMS/MainWindow.cpp
new file mode 100644
index 0000000..86cc0ec
--- /dev/null
+++ b/CMS/MainWindow.cpp
@@ -0,0 +1,719 @@
+#include "MainWindow.hpp"
+#include "Review.hpp"
+#include <QMessageBox>
+#include <QFileDialog>
+
+MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
+{
+        theUser = User();//    theUser = NULL;
+        theConf = Conference();//    theConf = NULL;
+    theDB = db;
+    ui = new Ui::MainWindow;
+    ui->setupUi(this);
+    ui->passwordLogin->setEchoMode(QLineEdit::Password);
+    logout();
+}
+
+MainWindow::~MainWindow()
+{
+//    delete theUser;
+//    delete theConf;
+    delete ui;
+}
+
+void MainWindow::popupBox(QString boxTitle, QString msg)
+{ // first input: window title; second input: box message
+        QMessageBox msgBox;
+        msgBox.setWindowTitle(boxTitle);
+        msgBox.setText(msg);
+        msgBox.exec();
+}
+
+void MainWindow::login()
+{
+    // get username password from gui and grabs user from db, checks pw updates gui
+    
+    QString msg;
+    QString errorBox = "Error!";
+    bool error = false;
+
+    QString uname = ui->usernameLogin->text().trimmed();
+    QString pword = ui->passwordLogin->text().trimmed();
+    
+    if (ui->confList->currentRow() == -1) {
+        msg.append("Please select a conference!\n");
+        error = true;
+    }
+    if (uname.isEmpty()) {
+        msg.append("Please input a username!\n");
+        error = true;
+    }
+    if (pword.isEmpty()) {
+        msg.append("Please input a password!\n");
+        error = true;
+    }
+    ui->usernameLogin->clear();
+    ui->passwordLogin->clear();
+    ui->confList->clearSelection();
+    if (error) {
+        popupBox(errorBox, msg);
+        return;
+    }
+    
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
+   
+    theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+    
+    if (theUser.userID == -1)
+    {
+        msg = "User does not exist!";
+        popupBox(errorBox, msg);
+        logout();
+    }
+    else if (theUser.password != pword.toStdString())
+    {
+        msg = "Incorrect password!";
+        popupBox(errorBox, msg);
+        logout();
+    }
+    else // get userType and load tab
+    {
+        theConf = theDB->fetchConference(confname.toStdString());
+        // get conferences from db
+        
+        setUser(theUser.userType);
+    }
+}
+
+
+void MainWindow::logout()
+{
+    clearAllTabs();
+//    delete theUser;
+//    theUser = NULL;
+//    delete theConf;
+//    theConf = NULL;
+    theUser = User();
+    theConf = Conference();
+    papers.clear();
+    
+    //return to login screen
+    
+    // populate conference list ui->confList
+    // get current conferences from db
+    std::vector<std::string> activeConfs = theDB->activeConfNames();
+    
+    for (unsigned int i = 0; i < activeConfs.size(); ++i)
+        ui->confList->addItem(QString::fromStdString(activeConfs[i]));
+    
+    ui->tabWidget->addTab(ui->loginTab, "Login");
+}
+
+void MainWindow::setUser(UserType_t userType)
+{
+    switch(userType)
+    {
+    case AUTHOR://author
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
+        ui->tabWidget->addTab(ui->authorTab, "Author");
+        //ui->tabWidget->removeTab(0);
+        break;
+    case REVIEWER://reviewer
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
+        ui->tabWidget->addTab(ui->authorTab, "Author");
+        ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
+        ui->tabWidget->addTab(ui->reviewTab, "Review");
+        ui->tabWidget->removeTab(0);
+        break;
+    case PCCHAIR://pcchair
+        ui->tabWidget->addTab(ui->infoTabChair, "Information");
+        ui->tabWidget->addTab(ui->usersTab, "User Management");
+        ui->tabWidget->addTab(ui->papersTab, "Paper Management");
+        ui->tabWidget->removeTab(0);
+        break;
+    }
+
+}
+
+void MainWindow::on_login_clicked()
+{
+    login();
+}
+
+void MainWindow::on_quit_clicked()
+{
+    qApp->quit();
+}
+
+void MainWindow::on_logout_clicked()
+{
+    logout();
+}
+
+void MainWindow::on_logout_2_clicked()
+{
+    logout();
+}
+
+void MainWindow::on_passwordLogin_returnPressed()
+{
+    login();
+}
+
+void MainWindow::on_createAccount_clicked() // done (i think)
+{
+    theUser = User();
+    QString msg;
+    QString errorBox = "Error!";
+    bool userExists;
+    bool error = false;
+    
+    QString uname = ui->usernameLogin->text().trimmed();
+    QString pword = ui->passwordLogin->text().trimmed();
+    
+    if (ui->confList->currentRow() == -1) {
+        msg.append("Please select a conference!\n");
+        error = true;
+    }
+    if (uname.isEmpty()) {
+        msg.append("Please input a username!\n");
+        error = true;
+    }
+    if (pword.isEmpty()) {
+        msg.append("Please input a password!\n");
+        error = true;
+    }
+    ui->usernameLogin->clear();
+    ui->passwordLogin->clear();
+    ui->confList->clearSelection();
+    if (error) {
+        popupBox(errorBox, msg);
+        return;
+    }
+    
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
+    
+    // check if user exists
+    userExists = theDB->existsUserName(uname.toStdString());
+    
+    if (userExists)
+    {
+        msg = "Username already taken!";
+        popupBox(errorBox, msg);
+    }
+    else
+    {
+        theUser.userType = AUTHOR;
+        
+        // update DB with new user
+        theDB->putUser(uname.toStdString(), theUser);
+        theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+        
+        // get conference details from DB
+        theConf = theDB->fetchConference(confname.toStdString());
+        
+        // update DB with userType
+        theDB->setUserAsAuthor(theUser.userID, theConf.confID);
+        
+        setUser(theUser.userType);
+    }
+    
+}
+
+void MainWindow::on_joinConf_clicked()
+{
+    QString msg;
+    QString errorBox = "Error!";
+    bool error = false;
+
+    QString uname = ui->usernameLogin->text().trimmed();
+    QString pword = ui->passwordLogin->text().trimmed();
+    
+    if (ui->confList->currentRow() == -1) {
+        msg.append("Please select a conference!\n");
+        error = true;
+    }
+    if (uname.isEmpty()) {
+        msg.append("Please input a username!\n");
+        error = true;
+    }
+    if (pword.isEmpty()) {
+        msg.append("Please input a password!\n");
+        error = true;
+    }
+    ui->usernameLogin->clear();
+    ui->passwordLogin->clear();
+    ui->confList->clearSelection();
+    if (error) {
+        popupBox(errorBox, msg);
+        return;
+    }
+    
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
+   
+    theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+    
+    if (theUser.userID == -1)
+    {
+        msg = "User does not exist!";
+        popupBox(errorBox, msg);
+        logout();
+    }
+    else if (theUser.password != pword.toStdString())
+    {
+        msg = "Incorrect password!";
+        popupBox(errorBox, msg);
+        logout();
+    }
+    else
+    {
+        // get conferences from db
+        theConf = theDB->fetchConference(confname.toStdString());
+        
+        theUser.userType = AUTHOR;
+        //update db with usertype
+        theDB->setUserAsAuthor(theUser.userID, theConf.confID);
+        
+        setUser(theUser.userType);
+    }
+}
+
+void MainWindow::on_apply_clicked() // done (i think)
+{
+    //update user from gui
+    theUser.name = ui->name->text().toStdString();
+    theUser.email = ui->email->text().toStdString();
+    theUser.phone = ui->phone->text().toStdString();
+    theUser.organisation = ui->organisation->text().toStdString();
+    
+    //clear current users keywords and populate with list from gui
+    theUser.keywords.clear();
+    for (int i = 0; i < ui->authKeyList->count(); ++i)
+        theUser.keywords.push_back(ui->authKeyList->item(i)->text().toStdString());
+    
+    // send update user to db
+    theDB->putUser(theUser.name, theUser);
+}
+
+void MainWindow::on_applyChair_clicked()
+{
+    //send user details to db
+    //update user from gui
+    theUser.name = ui->name_2->text().toStdString();
+    theUser.email = ui->email_2->text().toStdString();
+    theUser.phone = ui->phone_2->text().toStdString();
+    theUser.organisation = ui->organisation_2->text().toStdString();
+        
+    // send updated user to db
+    theDB->putUser(theUser.name, theUser);
+    
+    //send conference details to db
+    //update conf from gui
+    std::string confTitleOld = theConf.title;
+    theConf.title = ui->confNameMng->text().toStdString();
+    theConf.topic = ui->confTopicMng->text().toStdString();
+    theConf.location = ui->confLocMng->text().toStdString();
+    theConf.description = ui->confDescMng->toPlainText().toStdString();
+    QDate tempQdate = ui->subDateEdit->date();
+    theConf.paperDeadline = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->allocDateEdit->date();
+    theConf.allocationDate = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->sReviewDateEdit->date();
+    theConf.reviewDeadlineSoft = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->hReviewDateEdit->date();
+    theConf.reviewDeadlineHard = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->discDateEdit->date();
+    theConf.discussDeadline = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    
+    //clear current conference keywords and populate with list from gui
+    theConf.keywords.clear();
+    for (int i = 0; i < ui->confKeyList->count(); ++i)
+        theConf.keywords.push_back(ui->confKeyList->item(i)->text().toStdString());
+    
+    // send updated conf to db
+    theDB->putConf(confTitleOld, theConf);
+}
+
+void MainWindow::on_addConfKey_clicked()
+{
+    ui->confKeyList->addItem(ui->confKeyEntry->text());
+}
+
+void MainWindow::on_rmvConfKey_clicked()
+{
+    delete ui->confKeyList->currentItem();
+}
+
+void MainWindow::on_addAuthor_clicked()
+{
+    int row = ui->authorsTable->rowCount();
+    ui->authorsTable->insertRow(row);
+}
+
+void MainWindow::on_rmvAuthor_clicked()
+{
+    ui->authorsTable->removeRow(ui->authorsTable->currentRow());
+    ui->authorsTable->clearSelection();
+}
+
+void MainWindow::on_addPaperKey_clicked()
+{
+    ui->paperKeyListAuth->addItem(ui->paperKeyEntry->text());
+}
+
+void MainWindow::on_rmvPaperKey_clicked()
+{
+    delete ui->paperKeyListAuth->currentItem();
+}
+
+void MainWindow::on_addAuthKey_clicked()
+{
+    ui->authKeyList->addItem(ui->authKeyEntry->text());
+}
+
+void MainWindow::on_rmvAuthKey_clicked()
+{
+    delete ui->authKeyList->currentItem();
+}
+
+void MainWindow::on_selectPaperAuthor_activated(int index)
+{
+
+}
+
+//void MainWindow::on_selectPaperAuthor_currentTextChanged(const int &arg1)
+//{
+//    ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
+//    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
+//        ui->selectPaperAuthor->addItem("*NEW*");
+//}
+
+void MainWindow::on_tabWidget_currentChanged(int index)
+{//change to current text or something
+    if (index < 1)
+        return;
+    
+    QString text = ui->tabWidget->tabText(index);
+    if(text == "Info")
+        populate_infoTabAuthor();
+    else if(text == "Information")
+        populate_infoTabChair();
+//    else if(text == "Author")
+//        populate_authorTab();
+//    else if(text == "Reviewer")
+//        populate_reviewerTab();
+//    else if(text == "Paper Management")
+//        populate_papersTab();
+//    else if(text == "User Management")
+//        populate_usersTab();
+//    else if(text == "Review")
+//        populate_reviewTab();
+}
+
+void MainWindow::populate_infoTabAuthor()
+{
+    ui->username->setText(QString::fromStdString(theUser.userName));
+    ui->userid->setText(QString::number(theUser.userID));
+    ui->name->setText(QString::fromStdString(theUser.name));
+    ui->email->setText(QString::fromStdString(theUser.email));
+    ui->organisation->setText(QString::fromStdString(theUser.organisation));
+    ui->phone->setText(QString::fromStdString(theUser.phone));
+
+    for(std::vector<std::string>::iterator it = theUser.keywords.begin(); it != theUser.keywords.end(); ++it)
+        ui->authKeyList->addItem(QString::fromStdString(*it));
+
+    ui->conferenceName->setText(QString::fromStdString(theConf.title));
+    ui->confTopic->setText(QString::fromStdString(theConf.topic));
+    ui->confLocation->setText(QString::fromStdString(theConf.location));
+    ui->confDesc->append(QString::fromStdString(theConf.description));
+    for(std::vector<std::string>::iterator it = theConf.keywords.begin(); it != theConf.keywords.end(); ++it)
+        ui->confKeyListNoEdit->addItem(QString::fromStdString(*it));
+    ui->subDate->setText(QString::fromStdString(theConf.paperDeadline.convertToString()));
+    ui->discDate->setText(QString::fromStdString(theConf.discussDeadline.convertToString()));
+    ui->hReviewDate->setText(QString::fromStdString(theConf.reviewDeadlineHard.convertToString()));
+    ui->sReviewDate->setText(QString::fromStdString(theConf.reviewDeadlineSoft.convertToString()));
+    ui->allocDate->setText(QString::fromStdString((theConf.allocationDate.convertToString())));
+}
+
+void MainWindow::populate_infoTabChair()
+{
+    ui->name_2->setText(QString::fromStdString(theUser.name));
+    ui->email_2->setText(QString::fromStdString(theUser.email));
+    ui->organisation_2->setText(QString::fromStdString(theUser.organisation));
+    ui->phone_2->setText(QString::fromStdString(theUser.phone));
+    ui->confNameMng->setText(QString::fromStdString(theConf.title));
+    ui->confTopicMng->setText(QString::fromStdString(theConf.topic));
+    ui->confLocMng->setText(QString::fromStdString(theConf.location));
+    ui->confDescMng->setText(QString::fromStdString(theConf.description));
+
+    for(std::vector<std::string>::iterator it = theConf.keywords.begin(); it != theConf.keywords.end(); ++it)
+        ui->confKeyList->addItem(QString::fromStdString(*it));
+
+    ui->subDateEdit->date().setDate(theConf.paperDeadline.getDay(), theConf.paperDeadline.getMonth(), theConf.paperDeadline.getYear());
+    ui->allocDateEdit->date().setDate(theConf.allocationDate.getDay(), theConf.allocationDate.getMonth(), theConf.allocationDate.getYear());
+    ui->sReviewDateEdit->date().setDate(theConf.reviewDeadlineSoft.getDay(), theConf.reviewDeadlineSoft.getMonth(), theConf.reviewDeadlineSoft.getYear());
+    ui->hReviewDateEdit->date().setDate(theConf.reviewDeadlineHard.getDay(), theConf.reviewDeadlineHard.getMonth(), theConf.reviewDeadlineHard.getYear());
+    ui->discDateEdit->date().setDate(theConf.discussDeadline.getDay(), theConf.discussDeadline.getMonth(), theConf.discussDeadline.getYear());
+}
+
+void MainWindow::populate_authorTab()
+{
+    papers.clear();
+    //paper = fetch papersummaries
+
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperAuthor->addItem(QString::fromStdString(it->paperName));
+}
+
+void MainWindow::populate_papersTab()
+{
+//    Paper* paper = &theUser.getCurrentPaper();
+//    std::vector<Review>* reviews = &paper->reviews;
+//    std::vector<PersonalInfo>* authors = theUser.getCurrentPaper().authors;
+//    std::vector<PersonalInfo> reviewers;
+
+//    std::vector<std::string> keys = theUser.getCurrentPaper().keywords;
+
+//    ui->paperNameMng->setText(QString::fromStdString(paper->title));
+//    ui->mainKeyMng->setText(QString::fromStdString(paper->confKeyword));
+
+//    ui->paperAbstractMng->append(QString::fromStdString(theUser.getCurrentPaper().abstract));
+//    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListMng->addItem(QString::fromStdString(*it));
+
+//    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+//        int rows = ui->authorsTableMng->rowCount();
+//        ui->authorsTableMng->insertRow(rows);
+//        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+//        ui->authorsTableMng->setItem(rows, 0, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+//        ui->authorsTableMng->setItem(rows, 1, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+//        ui->authorsTableMng->setItem(rows, 2, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+//        ui->authorsTableMng->setItem(rows, 3, newItem);
+//    }
+}
+
+void MainWindow::populate_reviewerTab()
+{
+    papers.clear();
+    //paper = fetch papersummaries
+
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperReviewer->addItem(QString::fromStdString(it->paperName));
+}
+
+void MainWindow::populate_reviewTab()
+{
+
+//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+//        ui->selectPaperReview->addItem(QString::fromStdString(it->paperName));
+
+//    ui->paperAbstractReviewer->setText(QString::fromStdString(theUser.getCurrentPaper().abstract));
+//    ui->mainKey->setText(QString::fromStdString(theUser.getCurrentPaper().confKeyword));
+//    for(std::vector<std::string>::iterator it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListReview->addItem(QString::fromStdString(*it));
+
+//    for(std::vector<Review>::iterator it = reviews.begin(); it != reviews.end(); ++it){
+//        if(it->paperID == theUser.getCurrentPaper().paperID){
+//            ui->commentsBestAward->setText(QString::fromStdString(it->commentsBestAward));
+//            ui->commentsShortPaper->setText(QString::fromStdString(it->commentsShortPaper));
+//            ui->commentsStrengths->setText(QString::fromStdString(it->commentsStrength));
+//            ui->commentsWeaknesses->setText(QString::fromStdString(it->commentsWeakness));
+//            ui->commentsSuggestions->setText(QString::fromStdString(it->commentsSuggestions));
+//        }
+
+//    }
+}
+
+void MainWindow::populate_usersTab()
+{
+
+
+}
+
+void MainWindow::on_submit_clicked()
+{
+    //paper is the getCurrentPaper()
+
+    //send paper (as in the paper details) as well as the actual paper pdf to server
+    //no response from server
+
+
+}
+
+void MainWindow::on_submitBid_clicked()
+{
+    int bid = ui->selectBid->currentText().toInt();
+    int userId = theUser.userID;
+    int paperId;
+    //paperId = theUser.getCurrentPaper();
+
+    //send users bid on a paper to the server
+    //no response from server
+}
+
+void MainWindow::downloadPaper()
+{
+
+}
+
+void MainWindow::on_downloadReviewer_clicked()
+{
+    downloadPaper();
+}
+
+void MainWindow::on_downloadChair_clicked()
+{
+    downloadPaper();
+}
+
+void MainWindow::on_submitPosts_clicked()
+{
+    QString post = ui->postBody->toPlainText();
+
+    //send discussion post data to server
+    //no response from server
+}
+
+
+
+void MainWindow::on_acceptPaper_clicked()
+{
+//    int paperId = theUser.getCurrentPaper().paperID;
+//    int confId  = theConf.confID;
+
+    //send paper id, conf id to server
+    //no response from server
+}
+
+void MainWindow::on_rejectPaper_clicked()
+{
+    //this probably does dick all
+}
+void MainWindow::on_submitReview_clicked()
+{
+//    Review rev;
+//    rev.confidence = ui->confidence->text().toInt();
+//    rev.evaluation = ui->evaluation->text().toInt();
+//    rev.originality = ui->originality->text().toInt();
+//    rev.overall = ui->overall->text().toInt();
+//    rev.presentation = ui->presentation->text().toInt();
+//    rev.relevance = ui->relevance->text().toInt();
+//    rev.significance = ui->significance->text().toInt();
+//    rev.techQuality = ui->techQuality->text().toInt();
+//    rev.commentsBestAward = ui->commentsBestAward->toPlainText();
+//    rev.commentsShortPaper = ui->commentsShortPaper->toPlainText();
+//    rev.commentsStrength = ui->commentsStrengths->toPlainText();
+//    rev.commentsSuggestions = ui->commentsSuggestions->toPlainText();
+//    rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
+//    rev.paperID = theUser.getCurrentPaper.paperID;
+//    rev.reviewerID = theUser.getUserID();
+
+    //submit review to the server
+    //no response from server
+}
+
+//void MainWindow::on_addAsReviewer_clicked()
+//{
+//    int paperId = ui->toReview()->text().toInt();
+//    int userId = ui->usersTable->item(ui->usersTable->currentRow(), 2)->text().toInt();
+//
+//    //send paper id and user id to server to add a paper assigned table entry
+//    //no response from server
+//}
+
+void MainWindow::on_addAsReviewer_2_clicked()
+{
+    int paperId = ui->toReview_2->text().toInt();
+    //int userId = ui->reviewersTable->item(ui->usersTable->currentRow(), 2)->text().toInt();
+    //above doesnt quite work may add uid field to table
+
+    //send paper id and user id to server to add a paper assigned table entry
+    //no response from server
+}
+
+void MainWindow::on_papersTable_itemSelectionChanged()
+{
+
+//    std::vector<PersonalInfo> authors = theUser.getCurrentPaper().authors;
+
+//    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+//        int rows = ui->reviewersTable->rowCount();
+//        ui->reviewersTable->insertRow(rows);
+//        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+//        ui->reviewersTable->setItem(rows, 0, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+//        ui->reviewersTable->setItem(rows, 1, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+//        ui->reviewersTable->setItem(rows, 2, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+//        ui->reviewersTable->setItem(rows, 3, newItem);
+//    }
+
+}
+
+void MainWindow::on_selectPaperAuthor_currentIndexChanged(const QString &arg1)
+{
+    Paper thePaper;
+    //thePaper = fetchPaper(   );
+    ui->paperAbstract->append(QString::fromStdString(thePaper.abstract));
+    for(std::vector<std::string>::iterator it = thePaper.keywords.begin(); it != thePaper.keywords.end(); ++it)
+        ui->paperKeyListAuth->addItem(QString::fromStdString(*it));
+
+    for(std::vector<PersonalInfo>::iterator it = thePaper.authors.begin(); it != thePaper.authors.end(); ++it){
+        int rows = ui->authorsTable->rowCount();
+        ui->authorsTable->insertRow(rows);
+        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+        ui->authorsTable->setItem(rows, 0, newItem);
+        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+        ui->authorsTable->setItem(rows, 1, newItem);
+        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+        ui->authorsTable->setItem(rows, 2, newItem);
+        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+        ui->authorsTable->setItem(rows, 3, newItem);
+    }
+    for(std::vector<std::string>::iterator it = theConf.keywords.begin(); it != theConf.keywords.end(); ++it){
+        ui->selectMainKey->addItem(QString::fromStdString(*it));
+    }
+}
+
+void MainWindow::on_selectPaperReviewer_currentIndexChanged(const QString &arg1)
+{
+//    Paper thePaper;
+//    //thePaper = fetchPaper(  );
+//
+//    ui->paperAbstractReviewer->append(QString::fromStdString(thePaper.abstract));
+//    for(std::vector<std::string> it = thePaper.keywords.begin(); it != thePaper.keywords.end(); ++it)
+//        ui->paperKeyListReviewer->addItem(QString::fromStdString(*it));
+//    ui->mainKeyReviewer->setText(QString::fromStdString(thePaper.confKeyword));
+}
+
+
+void MainWindow::on_updateConfSettings_clicked()
+{
+
+}
+
+void MainWindow::clearAllTabs()
+{
+    foreach(QLineEdit *widget, this->findChildren<QLineEdit*>())
+        widget->clear();
+    foreach(QListWidget *widget, this->findChildren<QListWidget*>())
+        widget->clear();
+    foreach(QTextBrowser *widget, this->findChildren<QTextBrowser*>())
+        widget->clear();
+    foreach(QDateEdit *widget, this->findChildren<QDateEdit*>())
+        widget->clear();
+    foreach(QTextEdit *widget, this->findChildren<QTextEdit*>())
+        widget->clear();
+    foreach(QComboBox *widget, this->findChildren<QComboBox*>())
+        widget->clear();
+    foreach(QTableWidget *widget, this->findChildren<QTableWidget*>())
+        widget->clear();
+    foreach(QSpinBox *widget, this->findChildren<QSpinBox*>())
+        widget->clear();
+    
+    ui->tabWidget->clear();
+}
diff --git a/CMS/MainWindow.hpp b/CMS/MainWindow.hpp
new file mode 100644
index 0000000..8cfde0d
--- /dev/null
+++ b/CMS/MainWindow.hpp
@@ -0,0 +1,122 @@
+#ifndef MAINWINDOW_H
+#define MAINWINDOW_H
+
+#include <QMainWindow>
+#include <QModelIndex>
+#include "User.hpp"
+#include "Database.hpp"
+#include "Conference.hpp"
+#include <string>
+#include <vector>
+#include "PaperSummary.hpp"
+#include "ui_MainWindow.h"
+
+namespace Ui {
+    class MainWindow;
+}
+
+class MainWindow : public QMainWindow
+{
+    Q_OBJECT
+
+public:
+    explicit MainWindow(Database *db, QWidget *parent = 0);
+    ~MainWindow();
+    
+private slots:
+    void on_login_clicked(); //done
+
+    void on_quit_clicked(); //done
+
+    void on_logout_clicked(); //done
+
+    void on_logout_2_clicked(); //done
+
+    void on_passwordLogin_returnPressed(); //done
+
+    void on_createAccount_clicked(); // done (i think)
+
+    void on_joinConf_clicked(); // done (i think)
+
+    void on_apply_clicked();// done (i think)
+    
+    void on_applyChair_clicked();// done (i think)
+
+    void on_addConfKey_clicked(); // already done (i think)
+
+    void on_rmvConfKey_clicked(); // already done (i think)
+
+    void on_addAuthor_clicked(); // laurence is up to here, haven't done yet
+
+    void on_rmvAuthor_clicked();
+
+    void on_addPaperKey_clicked();
+
+    void on_rmvPaperKey_clicked();
+
+    void on_addAuthKey_clicked();
+
+    void on_rmvAuthKey_clicked();
+
+    void on_selectPaperAuthor_activated(int index);
+
+//    void on_selectPaperAuthor_currentTextChanged(const int &arg1);
+
+    void on_tabWidget_currentChanged(int index);
+
+    void on_submit_clicked();//server stuff here
+
+    void on_submitBid_clicked();//server stuff here
+
+    void on_downloadReviewer_clicked();//see downloadPaper()
+
+    void on_submitPosts_clicked();//server stuff here
+
+    void on_downloadChair_clicked(); //see downloadPaper()
+
+    void on_acceptPaper_clicked();//server stuff here
+
+    void on_rejectPaper_clicked();//probably are faking this part
+
+    void downloadPaper();//server stuff here
+
+    void on_submitReview_clicked();//server shit here
+
+//    void on_addAsReviewer_clicked();//server shit here
+
+    void on_addAsReviewer_2_clicked();//server shit here
+
+//    void on_reviewersTable_activated(const QModelIndex &index);
+
+    void on_papersTable_itemSelectionChanged();
+
+    void on_selectPaperAuthor_currentIndexChanged(const QString &arg1);
+
+    void on_selectPaperReviewer_currentIndexChanged(const QString &arg1);
+
+    void on_updateConfSettings_clicked();
+
+private:
+    void setUser(UserType_t userType);
+//    void noUser(); call logout() instead
+    void login(); // done (i think)
+    void logout();
+    void populate_infoTabAuthor();
+    void populate_infoTabChair();
+    void populate_authorTab();
+    void populate_reviewerTab();
+    void populate_papersTab();
+    void populate_usersTab();
+    void populate_reviewTab();
+    void popupBox(QString type, QString msg);
+    
+    void clearAllTabs();
+    
+    Ui::MainWindow *ui;
+    User theUser;
+    Database* theDB;
+    Conference theConf;
+    std::vector<PaperSummary> papers;
+};
+
+#endif // MAINWINDOW_H
diff --git a/CMS/MainWindow.ui b/CMS/MainWindow.ui
new file mode 100644
index 0000000..770e111
--- /dev/null
+++ b/CMS/MainWindow.ui
@@ -0,0 +1,1743 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>791</width>
+    <height>603</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralWidget">
+   <widget class="QWidget" name="centralWidget_4" native="true">
+    <property name="geometry">
+     <rect>
+      <x>0</x>
+      <y>0</y>
+      <width>801</width>
+      <height>601</height>
+     </rect>
+    </property>
+    <widget class="QWidget" name="centralwidget_2" native="true">
+     <property name="geometry">
+      <rect>
+       <x>0</x>
+       <y>0</y>
+       <width>801</width>
+       <height>601</height>
+      </rect>
+     </property>
+     <widget class="QTabWidget" name="tabWidget">
+      <property name="geometry">
+       <rect>
+        <x>0</x>
+        <y>0</y>
+        <width>871</width>
+        <height>651</height>
+       </rect>
+      </property>
+      <property name="currentIndex">
+       <number>0</number>
+      </property>
+      <widget class="QWidget" name="loginTab">
+       <attribute name="title">
+        <string>Login</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>260</x>
+          <y>150</y>
+          <width>353</width>
+          <height>211</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_2">
+         <item>
+          <widget class="QLabel" name="label_7">
+           <property name="font">
+            <font>
+             <pointsize>18</pointsize>
+            </font>
+           </property>
+           <property name="text">
+            <string>Conference Management System</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_7">
+           <item>
+            <spacer name="horizontalSpacer_4">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_9">
+             <property name="text">
+              <string>UserName</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="usernameLogin"/>
+           </item>
+           <item>
+            <spacer name="horizontalSpacer_5">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout">
+           <item>
+            <spacer name="horizontalSpacer_2">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_8">
+             <property name="text">
+              <string>Password</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="passwordLogin"/>
+           </item>
+           <item>
+            <spacer name="horizontalSpacer_3">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_10">
+           <item>
+            <widget class="QPushButton" name="login">
+             <property name="text">
+              <string>Login to Conference</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="joinConf">
+             <property name="text">
+              <string>Join Conference</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="createAccount">
+             <property name="text">
+              <string>Create New Account</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QPushButton" name="quit">
+           <property name="text">
+            <string>Quit</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QListWidget" name="confList">
+        <property name="geometry">
+         <rect>
+          <x>60</x>
+          <y>40</y>
+          <width>191</width>
+          <height>491</height>
+         </rect>
+        </property>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="infoTabAuthor">
+       <attribute name="title">
+        <string>Info</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_2">
+           <item>
+            <widget class="QLabel" name="username">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_21">
+           <item>
+            <widget class="QListWidget" name="authKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_15">
+             <item>
+              <widget class="QLineEdit" name="authKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addAuthKey">
+               <property name="text">
+                <string>Add Keyword</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvAuthKey">
+               <property name="text">
+                <string>Remove Keyword</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_8">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="apply">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_14">
+        <property name="geometry">
+         <rect>
+          <x>270</x>
+          <y>10</y>
+          <width>501</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_16">
+         <item>
+          <widget class="QLabel" name="conferenceName">
+           <property name="font">
+            <font>
+             <pointsize>16</pointsize>
+             <weight>75</weight>
+             <italic>true</italic>
+             <bold>true</bold>
+            </font>
+           </property>
+           <property name="text">
+            <string>CONFERENCENAME</string>
+           </property>
+           <property name="scaledContents">
+            <bool>false</bool>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confTopic">
+           <property name="text">
+            <string>CONFERENCETOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confLocation">
+           <property name="text">
+            <string>CONFERENCELOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_22">
+           <item>
+            <widget class="QLabel" name="label_26">
+             <property name="text">
+              <string>Keywords</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QListWidget" name="confKeyListNoEdit"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_28">
+           <item>
+            <widget class="QLabel" name="label_47">
+             <property name="text">
+              <string>Submission</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_48">
+             <property name="text">
+              <string>Allocation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_49">
+             <property name="text">
+              <string>Soft Review</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_50">
+             <property name="text">
+              <string>Hard Review</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_51">
+             <property name="text">
+              <string>Discussion</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_25">
+           <item>
+            <widget class="QLabel" name="subDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="allocDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="sReviewDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="hReviewDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="discDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QTextBrowser" name="confDesc">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="infoTabChair">
+       <attribute name="title">
+        <string>Information</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_3">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_3">
+           <item>
+            <widget class="QLabel" name="username_2">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_2">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name_2">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email_2">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation_2">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone_2">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_9">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="applyChair">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout_2">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>280</x>
+          <y>10</y>
+          <width>481</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_4">
+         <item>
+          <widget class="QLineEdit" name="confNameMng">
+           <property name="text">
+            <string>CONFERENCE NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="confTopicMng">
+           <property name="text">
+            <string>CONFERENCE TOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="confLocMng">
+           <property name="text">
+            <string>CONFERENCE LOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QTextEdit" name="confDescMng">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QVBoxLayout" name="verticalLayout_9">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_26">
+             <item>
+              <widget class="QLabel" name="label_44">
+               <property name="text">
+                <string>Submission</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_45">
+               <property name="text">
+                <string>Allocation</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_46">
+               <property name="text">
+                <string>Soft Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_43">
+               <property name="text">
+                <string>Hard Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_42">
+               <property name="text">
+                <string>Discussion</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_27">
+             <item>
+              <widget class="QDateEdit" name="subDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="allocDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="sReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="hReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="discDateEdit"/>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_25">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_20">
+           <item>
+            <widget class="QListWidget" name="confKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_11">
+             <item>
+              <widget class="QLineEdit" name="confKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addConfKey">
+               <property name="text">
+                <string>Add Keyword</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvConfKey">
+               <property name="text">
+                <string>Remove Keyword</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="authorTab">
+       <attribute name="title">
+        <string>Author</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_3">
+         <item row="2" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_8">
+           <item>
+            <widget class="QTableWidget" name="authorsTable">
+             <column>
+              <property name="text">
+               <string>Name</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Email</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Org</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Phone</string>
+              </property>
+             </column>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item row="1" column="1">
+          <widget class="QComboBox" name="selectMainKey"/>
+         </item>
+         <item row="1" column="0">
+          <widget class="QComboBox" name="selectPaperAuthor">
+           <property name="editable">
+            <bool>true</bool>
+           </property>
+           <item>
+            <property name="text">
+             <string>*NEW*</string>
+            </property>
+           </item>
+          </widget>
+         </item>
+         <item row="5" column="1">
+          <widget class="QTextEdit" name="paperAbstract">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <layout class="QVBoxLayout" name="verticalLayout_14">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_4">
+             <item>
+              <widget class="QLineEdit" name="paperKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addPaperKey">
+               <property name="text">
+                <string>Add Key</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvPaperKey">
+               <property name="text">
+                <string>Remove Key</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <widget class="QListWidget" name="paperKeyListAuth"/>
+           </item>
+          </layout>
+         </item>
+         <item row="5" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_10">
+           <item>
+            <widget class="QPushButton" name="addAuthor">
+             <property name="text">
+              <string>Add Author</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="rmvAuthor">
+             <property name="text">
+              <string>Remove Author</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_32">
+             <property name="text">
+              <string>Rebuttal</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="rebuttalEntry"/>
+           </item>
+           <item>
+            <widget class="QPushButton" name="selectFile">
+             <property name="text">
+              <string>Select File</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="submit">
+             <property name="text">
+              <string>Submit</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewerTab">
+       <attribute name="title">
+        <string>Reviewer</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>200</y>
+          <width>741</width>
+          <height>351</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_4">
+         <item row="0" column="0">
+          <widget class="QLabel" name="discussionLabel_2">
+           <property name="text">
+            <string>Discussion</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="submitPosts">
+           <property name="text">
+            <string>Submit Post</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QTextEdit" name="postBody">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="discussionBodyReviewer">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="horizontalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>160</y>
+          <width>741</width>
+          <height>31</height>
+         </rect>
+        </property>
+        <layout class="QHBoxLayout" name="horizontalLayout_5">
+         <item>
+          <spacer name="horizontalSpacer">
+           <property name="orientation">
+            <enum>Qt::Horizontal</enum>
+           </property>
+           <property name="sizeType">
+            <enum>QSizePolicy::Ignored</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>40</width>
+             <height>20</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QLabel" name="bidlabel">
+           <property name="text">
+            <string>Bid:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QComboBox" name="selectBid"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="submitBid">
+           <property name="text">
+            <string>Submit Bid</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>151</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_5">
+         <item row="1" column="2">
+          <widget class="QTextBrowser" name="paperAbstractReviewer"/>
+         </item>
+         <item row="1" column="3">
+          <widget class="QListWidget" name="paperKeyListReviewer"/>
+         </item>
+         <item row="0" column="3">
+          <widget class="QLabel" name="mainKeyReviewer">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="2">
+          <widget class="QComboBox" name="selectPaperReviewer"/>
+         </item>
+         <item row="2" column="3">
+          <widget class="QPushButton" name="downloadReviewer">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="papersTab">
+       <attribute name="title">
+        <string>Paper Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="papersTable">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>20</y>
+          <width>211</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Title</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string notr="true">id</string>
+         </property>
+         <property name="toolTip">
+          <string notr="true"/>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>20</y>
+          <width>511</width>
+          <height>171</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_6">
+         <item row="0" column="0">
+          <widget class="QLabel" name="paperNameMng">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="downloadChair">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="mainKeyMng">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTableWidget" name="authorsTableMng">
+           <column>
+            <property name="text">
+             <string>Name</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Email</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Org</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Phone</string>
+            </property>
+           </column>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListMng"/>
+         </item>
+         <item row="2" column="0">
+          <widget class="QTextBrowser" name="paperAbstractMng"/>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_11">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>190</y>
+          <width>511</width>
+          <height>361</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_12">
+         <item>
+          <layout class="QGridLayout" name="gridLayout_7">
+           <item row="0" column="0">
+            <widget class="QLabel" name="discussionLabel_3">
+             <property name="text">
+              <string>Discussion</string>
+             </property>
+            </widget>
+           </item>
+           <item row="1" column="0">
+            <widget class="QTextBrowser" name="discussionBodyMng">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+             </property>
+            </widget>
+           </item>
+           <item row="1" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_5">
+             <item>
+              <widget class="QTableWidget" name="reviewersTable">
+               <column>
+                <property name="text">
+                 <string>Name</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Email</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Org</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Phone</string>
+                </property>
+               </column>
+              </widget>
+             </item>
+             <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_9">
+               <item>
+                <widget class="QLabel" name="label_5">
+                 <property name="text">
+                  <string>User:</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLineEdit" name="toReview_2"/>
+               </item>
+               <item>
+                <widget class="QPushButton" name="addAsReviewer_2">
+                 <property name="text">
+                  <string>Add as Reviewer</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
+           </item>
+           <item row="0" column="1">
+            <widget class="QLabel" name="label_6">
+             <property name="text">
+              <string>Reviewers</string>
+             </property>
+            </widget>
+           </item>
+           <item row="2" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_13">
+             <item>
+              <widget class="QLabel" name="label_41">
+               <property name="text">
+                <string>Comments</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QTextBrowser" name="commentsBrowser"/>
+             </item>
+            </layout>
+           </item>
+           <item row="2" column="0">
+            <layout class="QFormLayout" name="formLayout">
+             <property name="fieldGrowthPolicy">
+              <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+             </property>
+             <item row="0" column="0">
+              <widget class="QLabel" name="label_24">
+               <property name="text">
+                <string>Overall</string>
+               </property>
+              </widget>
+             </item>
+             <item row="0" column="1">
+              <widget class="QLabel" name="overallScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="1" column="0">
+              <widget class="QLabel" name="label_27">
+               <property name="text">
+                <string>Confidence</string>
+               </property>
+              </widget>
+             </item>
+             <item row="1" column="1">
+              <widget class="QLabel" name="confidenceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="0">
+              <widget class="QLabel" name="label_29">
+               <property name="text">
+                <string>Relevance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="1">
+              <widget class="QLabel" name="relevanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="3" column="0">
+              <widget class="QLabel" name="label_31">
+               <property name="text">
+                <string>Originality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="3" column="1">
+              <widget class="QLabel" name="originalityScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="0">
+              <widget class="QLabel" name="label_33">
+               <property name="text">
+                <string>Significance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="1">
+              <widget class="QLabel" name="significanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="0">
+              <widget class="QLabel" name="label_35">
+               <property name="text">
+                <string>Presentation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="1">
+              <widget class="QLabel" name="presentationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="0">
+              <widget class="QLabel" name="label_37">
+               <property name="text">
+                <string>Technical Quality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="1">
+              <widget class="QLabel" name="techqualScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="0">
+              <widget class="QLabel" name="label_39">
+               <property name="text">
+                <string>Evaluation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="1">
+              <widget class="QLabel" name="evaluationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="0">
+              <widget class="QPushButton" name="acceptPaper">
+               <property name="text">
+                <string>Accept Paper</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="1">
+              <widget class="QPushButton" name="rejectPaper">
+               <property name="text">
+                <string>Reject Paper</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="usersTab">
+       <attribute name="title">
+        <string>User Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="usersTable">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>311</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>User Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>Type</string>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>10</y>
+          <width>291</width>
+          <height>321</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_6">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_8">
+           <item>
+            <widget class="QLabel" name="username_5">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_5">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="name_5">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="email_5">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="organisation_5">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="phone_5">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_10">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QListWidget" name="userKeyList"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="changeReviewer">
+           <property name="text">
+            <string>Add/Remove Reviewer</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_15">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>340</y>
+          <width>291</width>
+          <height>141</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_17">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_23">
+           <item>
+            <widget class="QLabel" name="label_30">
+             <property name="text">
+              <string>Authored Papers</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_28">
+             <property name="text">
+              <string>Assigned to Review</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_24">
+           <item>
+            <widget class="QListWidget" name="authoredPapers"/>
+           </item>
+           <item>
+            <widget class="QListWidget" name="assignedPapers"/>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>490</y>
+          <width>291</width>
+          <height>71</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_18">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_29">
+           <item>
+            <widget class="QLabel" name="label_3">
+             <property name="text">
+              <string>Words per Post</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_2">
+             <property name="text">
+              <string>Reviewers per Paper</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_30">
+           <item>
+            <widget class="QLineEdit" name="wordsPerPost">
+             <property name="text">
+              <string>100</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="reviewersPerPaper">
+             <property name="text">
+              <string>5</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QPushButton" name="updateConfSettings">
+           <property name="text">
+            <string>Update Conference Settings</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewTab">
+       <attribute name="title">
+        <string>Review</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_7">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>150</y>
+          <width>761</width>
+          <height>416</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_7">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_11">
+           <item>
+            <widget class="QLabel" name="label_11">
+             <property name="text">
+              <string>Overall</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="overall"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_12">
+             <property name="text">
+              <string>Confidence</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="confidence"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_12">
+           <item>
+            <widget class="QLabel" name="label_13">
+             <property name="text">
+              <string>Relevance</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="relevance"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_14">
+             <property name="text">
+              <string>Originality</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="originality"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_13">
+           <item>
+            <widget class="QLabel" name="label_15">
+             <property name="text">
+              <string>Significance</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="significance"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_16">
+             <property name="text">
+              <string>Presentation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="presentation"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_14">
+           <item>
+            <widget class="QLabel" name="label_17">
+             <property name="text">
+              <string>Technical Quality</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="techQuality"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_18">
+             <property name="text">
+              <string>Evaluation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="evaluation"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_15">
+           <item>
+            <widget class="QLabel" name="label_19">
+             <property name="text">
+              <string>Strengths of the paper</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_20">
+             <property name="text">
+              <string>Weaknesses of the paper</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_16">
+           <item>
+            <widget class="QTextEdit" name="commentsStrengths"/>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsWeaknesses"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_17">
+           <item>
+            <widget class="QLabel" name="label_21">
+             <property name="text">
+              <string>Would this paper be suitable as a short paper?</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_22">
+             <property name="text">
+              <string>Should this paper be considered for a best paper award?</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_18">
+           <item>
+            <widget class="QTextEdit" name="commentsShortPaper"/>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsBestAward"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_19">
+           <item>
+            <widget class="QLabel" name="label_23">
+             <property name="text">
+              <string>Detailed comments and suggestions</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsSuggestions">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>20</y>
+          <width>761</width>
+          <height>130</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout">
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReview"/>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListReview"/>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="paperAbstractReview"/>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="mainKey">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QPushButton" name="submitReview">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>550</y>
+          <width>75</width>
+          <height>23</height>
+         </rect>
+        </property>
+        <property name="text">
+         <string>Submit</string>
+        </property>
+       </widget>
+      </widget>
+     </widget>
+    </widget>
+   </widget>
+  </widget>
+ </widget>
+ <layoutdefault spacing="6" margin="11"/>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/CMS/Paper.hpp b/CMS/Paper.hpp
new file mode 100644
index 0000000..56a4d0c
--- /dev/null
+++ b/CMS/Paper.hpp
@@ -0,0 +1,80 @@
+//incomplete
+#ifndef PAPER_H
+#define PAPER_H
+
+#include "Discussion.hpp"
+#include "Review.hpp"
+#include "PersonalInfo.hpp"
+
+#include <vector>
+
+struct Paper 
+{
+    Paper()
+    {
+        paperID = 0;
+        confID = 0;
+        leadAuthorID = 0;
+        title = "";
+        abstract = "";
+        //authors;
+        //keywords;
+        confKeyword = "";
+        discussion = Discussion();
+        //reviews;
+    }
+
+    Paper(int &ipaperID,
+        int &iconfID,
+        int &ileadAuthorID,
+        std::string& ititle,
+        std::string& iabstract,
+        std::vector<PersonalInfo>& iauthors,
+        std::vector<std::string>& ikeywords,
+        std::string& iconfKeyword,
+        std::vector<Review>& ireviews,
+        Discussion& idiscussion)
+    { 
+        paperID = ipaperID;
+        confID = iconfID;
+        leadAuthorID = ileadAuthorID;
+        title = ititle;
+        abstract = iabstract;
+        authors = iauthors;
+        keywords = ikeywords;
+        confKeyword = iconfKeyword;
+        reviews = ireviews;
+        discussion = idiscussion;
+    }
+
+    Paper(
+        int &iconfID,
+        int &ileadAuthorID,
+        std::string& ititle,
+        std::string& iabstract,
+        std::vector<PersonalInfo>& iauthors,
+        std::vector<std::string>& ikeywords,
+        std::string& iconfKeyword)
+    {
+        confID = iconfID;
+        leadAuthorID = ileadAuthorID;
+        title = ititle;
+        abstract = iabstract;
+        authors = iauthors;
+        keywords = ikeywords;
+        confKeyword = iconfKeyword;
+    }
+
+    int paperID;
+    int confID;
+    int leadAuthorID;
+    std::string title;
+    std::string abstract;
+    std::vector<PersonalInfo> authors;
+    std::vector<std::string> keywords;
+    std::string confKeyword;
+    Discussion discussion;
+    std::vector<Review> reviews;
+};
+
+#endif
diff --git a/CMS/PaperSummary.hpp b/CMS/PaperSummary.hpp
new file mode 100644
index 0000000..b612a2e
--- /dev/null
+++ b/CMS/PaperSummary.hpp
@@ -0,0 +1,24 @@
+#ifndef PAPER_SUMMARY_H
+#define PAPER_SUMMARY_H
+
+#include <string>
+
+struct PaperSummary 
+{
+    PaperSummary()
+    {
+        paperID = 0;
+        paperName = "";
+    }
+
+    PaperSummary(int ipaperID, const std::string& ipaperName)
+    {
+        paperID = ipaperID;
+    paperName = ipaperName;
+    }
+
+    int paperID;
+    std::string paperName;
+};
+
+#endif
diff --git a/CMS/PersonalInfo.hpp b/CMS/PersonalInfo.hpp
new file mode 100644
index 0000000..19bc368
--- /dev/null
+++ b/CMS/PersonalInfo.hpp
@@ -0,0 +1,51 @@
+#ifndef PERSONAL_INFO_H 
+#define PERSONAL_INFO_H
+
+#include <vector>
+
+
+struct PersonalInfo
+{
+    PersonalInfo()
+    {
+        infoID = 0;
+        name = "";
+        email = "";
+        organisation = "";
+        phone = "";
+    }
+    
+    PersonalInfo(
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        int iinfoID)
+    {
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        infoID = iinfoID;
+    }
+    
+    PersonalInfo(
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone)
+    {
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+    }
+
+    int infoID;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+};
+
+#endif
diff --git a/CMS/Review.hpp b/CMS/Review.hpp
new file mode 100644
index 0000000..ed7384d
--- /dev/null
+++ b/CMS/Review.hpp
@@ -0,0 +1,112 @@
+#ifndef REVIEW_H
+#define REVIEW_H
+
+struct Review 
+{
+    Review()
+    {
+        reportID = 0;
+        paperID = 0;
+        reviewerID = 0;
+        overall = 0;
+        confidence = 0;
+        relevance = 0;
+        originality = 0;
+        significance = 0;
+        presentation = 0;
+        techQuality = 0;
+        evaluation = 0;
+        commentsStrength = "";
+        commentsWeakness = "";
+        commentsSuggestions = "";
+        commentsShortPaper = "";
+        commentsBestAward = "";
+    }
+    
+    Review(int ipaperID,
+        int ireviewerID,
+        int ioverall,
+        int iconfidence,
+        int irelevance,
+        int ioriginality,
+        int isignificance,
+        int ipresentation,
+        int itechQuality,
+        int ievaluation,
+        const std::string& icommentsStrength,
+        const std::string& icommentsWeakness,
+        const std::string& icommentsSuggestions,
+        const std::string& icommentsShortPaper,
+        const std::string& icommentsBestAward)
+    {
+        paperID = ipaperID;
+        reviewerID = ireviewerID;
+        overall = ioverall;
+        confidence = iconfidence;
+        relevance = irelevance;
+        originality = ioriginality;
+        significance = isignificance;
+        presentation = ipresentation;
+        techQuality = itechQuality;
+        evaluation = ievaluation;
+        commentsStrength = icommentsStrength;
+        commentsWeakness = icommentsWeakness;
+        commentsSuggestions = icommentsSuggestions;
+        commentsShortPaper = icommentsShortPaper;
+        commentsBestAward = icommentsBestAward;
+    }
+    
+    Review(int ireportID,
+        int ipaperID,
+        int ireviewerID,
+        int ioverall,
+        int iconfidence,
+        int irelevance,
+        int ioriginality,
+        int isignificance,
+        int ipresentation,
+        int itechQuality,
+        int ievaluation,
+        const std::string& icommentsStrength,
+        const std::string& icommentsWeakness,
+        const std::string& icommentsSuggestions,
+        const std::string& icommentsShortPaper,
+        const std::string& icommentsBestAward)
+    {
+        reportID = ireportID;
+        paperID = ipaperID;
+        reviewerID = ireviewerID;
+        overall = ioverall;
+        confidence = iconfidence;
+        relevance = irelevance;
+        originality = ioriginality;
+        significance = isignificance;
+        presentation = ipresentation;
+        techQuality = itechQuality;
+        evaluation = ievaluation;
+        commentsStrength = icommentsStrength;
+        commentsWeakness = icommentsWeakness;
+        commentsSuggestions = icommentsSuggestions;
+        commentsShortPaper = icommentsShortPaper;
+        commentsBestAward = icommentsBestAward;
+    }
+
+    int reportID;
+    int paperID;
+    int reviewerID;
+    int overall;
+    int confidence;
+    int relevance;
+    int originality;
+    int significance;
+    int presentation;
+    int techQuality;
+    int evaluation;
+    std::string commentsStrength;
+    std::string commentsWeakness;
+    std::string commentsSuggestions;
+    std::string commentsShortPaper;
+    std::string commentsBestAward;
+
+};
+#endif
diff --git a/CMS/User.hpp b/CMS/User.hpp
new file mode 100644
index 0000000..f568917
--- /dev/null
+++ b/CMS/User.hpp
@@ -0,0 +1,76 @@
+#ifndef USER_H
+#define USER_H
+
+#include <string>
+#include <vector>
+
+enum UserType_t {NOUSER, AUTHOR, REVIEWER, PCCHAIR, ADMIN};
+
+struct User 
+{
+    User()
+    {
+        password = "";
+        name = "";
+        email = "";
+        organisation = "";
+        phone = "";
+        userID = -1;
+        userType = NOUSER;
+//        currentPaper = Paper();
+    }
+    
+    User(std::string& iuserName,
+        std::string& iname,
+        std::string& iemail,
+        std::string& iorganisation,
+        std::string& iphone,
+        std::string& ipassword,
+        int iuserID,
+        std::vector<std::string>& ikeywords,
+        UserType_t iUserType)
+    {
+        userName = iuserName;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        password = ipassword;
+        userID = iuserID;
+        keywords = ikeywords;
+        userType = iUserType;
+    }
+    
+    //no userID
+    User(const std::string& iuserName,
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        const std::string& ipassword,
+        const std::vector<std::string>& ikeywords,
+        UserType_t iUserType)
+    {
+        userName = iuserName;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        password = ipassword;
+        keywords = ikeywords;
+        userType = iUserType;
+        userID = -1;
+    }
+
+    std::string userName;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    std::vector<std::string> keywords;
+    int userID;
+    UserType_t userType;
+};
+#endif
+
diff --git a/CMS/create_tables.txt b/CMS/create_tables.txt
new file mode 100644
index 0000000..c2b6545
--- /dev/null
+++ b/CMS/create_tables.txt
@@ -0,0 +1,200 @@
+USE csci222;
+
+SET foreign_key_checks = 0;
+
+CREATE TABLE `UserType` (
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `UserAccount` (
+	`userID` int NOT NULL AUTO_INCREMENT,
+	`username` varchar(32) NOT NULL UNIQUE,
+	`password` varchar(32) NOT NULL,
+	`infoID` int NOT NULL,
+	PRIMARY KEY(`userID`),
+	FOREIGN KEY(`infoID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PersonalInfo` (
+	`infoID` int NOT NULL AUTO_INCREMENT,
+	`userID` int,
+	`name` varchar(128) NOT NULL,
+	`email` varchar(128),
+	`organisation` varchar(256) NOT NULL,
+	`phone` varchar(32), 
+	PRIMARY KEY(`infoID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Emails` (
+	`emailID` int NOT NULL AUTO_INCREMENT,
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`emailType` ENUM('accountCreation', 'accountModified', 'paperSubmitted', 'paperAssigned', 'paperReviewed', 'rebuttalNeeded', 'rebuttalSubmitted', 'biddingOpen', 'paperAccepted', 'paperRejected', 'ReviewersNeeded', 'AllPapersReviewed', 'invitationCommitte', 'invitationChair', 'softDeadline', 'hardDeadline'),
+	PRIMARY KEY(`emailID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ExpertiseArea` (
+	`userID` int NOT NULL,
+	`expertiseID` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `ExpertiseArea` ADD UNIQUE `unique_index`(`userID`, `expertiseID`);
+
+CREATE TABLE `Keywords` (
+	`keywordID` int NOT NULL AUTO_INCREMENT,
+	`keyword` varchar(64) NOT NULL UNIQUE,
+	PRIMARY KEY(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Conference` (
+	`confID` int NOT NULL AUTO_INCREMENT,
+	`name` varchar(255) NOT NULL UNIQUE,
+	`topic` TEXT NOT NULL,
+	`description` TEXT NOT NULL,
+	`location` varchar(255) NOT NULL,
+	`active` boolean NOT NULL DEFAULT 1,
+	`paperDeadlineD` int,
+	`paperDeadlineM` int,
+	`paperDeadlineY` int,
+	`paperDeadlineBool` bool,
+	`allocationDateD` int,
+	`allocationDateM` int,
+	`allocationDateY` int,
+	`allocationDateBool` bool,
+	`reviewDeadlineSoftD` int,
+	`reviewDeadlineSoftM` int,
+	`reviewDeadlineSoftY` int,
+	`reviewDeadlineSoftBool` bool,
+	`reviewDeadlineHardD` int,
+	`reviewDeadlineHardM` int,
+	`reviewDeadlineHardY` int,
+	`reviewDeadlineHardBool` bool,
+	`discussDeadlineD` int,
+	`discussDeadlineM` int,
+	`discussDeadlineY` int,
+	`discussDeadlineBool` bool,
+	`reviewersPerPaper` int NOT NULL,
+	`postWordLimit` int NOT NULL,
+	PRIMARY KEY(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ConferenceKeywords` (
+	`confID` int,
+	`keywordID` int,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `ConferenceKeywords` ADD UNIQUE `unique_index`(`confID`, `keywordID`);
+
+CREATE TABLE `Paper` (
+	`paperID` int NOT NULL AUTO_INCREMENT,
+	`leadAuthorID` int NOT NULL,
+	`confID` int NOT NULL,
+	`keywordID` int NOT NULL,
+	`paperTitle` varchar(255) NOT NULL,
+	`paperAbstract` TEXT NOT NULL,
+	`paper` blob NOT NULL,
+	PRIMARY KEY(`paperID`),
+	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `Paper` ADD UNIQUE `unique_index`(`confID`, `paperTitle`);
+
+CREATE TABLE `AcceptedPapers` (
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `AcceptedPapers` ADD UNIQUE `unique_index`(`paperID`, `confID`);
+
+CREATE TABLE `paperAuthors` (
+	`paperID` int NOT NULL,
+	`authorID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `paperAuthors` ADD UNIQUE `unique_index`(`paperID`, `authorID`);
+
+CREATE TABLE `PaperKeywords` (
+	`paperID` int NOT NULL,
+	`keywordID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `PaperKeywords` ADD UNIQUE `unique_index`(`paperID`, `keywordID`);
+
+CREATE TABLE `PaperAssigned` (
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
+	`reviewed` boolean NOT NULL DEFAULT 0,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `PaperAssigned` ADD UNIQUE `unique_index`(`paperID`, `reviewerID`, `confID`);
+	
+CREATE TABLE `Review` (
+	`reportID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
+	`overall` int,
+	`confidence` int,
+	`relevance` int,
+	`originality` int,
+	`significance` int,
+	`presentation` int,
+	`techQuality` int,
+	`evaluation` int,
+	`commentsStrength` text,
+	`commentsWeakness` text,
+	`commentsSuggestions` text,
+	`commentsShortPaper` text,
+	`commentsBestAward` text,
+	PRIMARY KEY(`reportID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ReviewerDiscussion` (
+	`commentID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`confID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`comment` varchar(4096),
+	PRIMARY KEY(`commentID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ReviewerPreference`(
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	`preference` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+SET foreign_key_checks = 1;
diff --git a/CMS/main-admin.cpp b/CMS/main-admin.cpp
new file mode 100644
index 0000000..c56e596
--- /dev/null
+++ b/CMS/main-admin.cpp
@@ -0,0 +1,569 @@
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "Database.hpp"
+#include "User.hpp"
+#include "Conference.hpp"
+#include "Paper.hpp"
+#include "Algo.hpp"
+
+#include <vector>
+
+void adminMainMenu();
+void createUser();
+void createConf();
+void changeUsername();
+void changePassword();
+void changeConf();
+
+Database db;
+
+int main(int arc, char *argv[])
+{
+    std::string AdminUsername = "";
+    std::string AdminPassword = "";
+    std::string AdminUsernameCheck = "admin";
+    std::string AdminPasswordCheck = "admin";
+
+    if (!db.isOK())
+    {
+            std::cout << "Failed to open database file" << std::endl;
+            exit(1);
+    }
+
+    std::cout << "Admin client" << std::endl << std::endl;
+
+    std::cout << "Enter Admin username: ";
+    std::cin >> AdminUsername;
+    
+    std::cout << std::endl << "Enter Admin password: ";
+    std::cin >> AdminPassword;
+
+    bool loginSuccess = false;
+    if (AdminUsername == AdminUsernameCheck)
+    {
+        if (AdminPassword == AdminPasswordCheck)
+            loginSuccess = true;
+    }
+    
+    if (loginSuccess)
+        adminMainMenu();
+
+    return 0;
+}
+
+void adminMainMenu()
+{
+    int selection = -1;
+    std::cout << std::endl << std::endl << "ADMIN MAIN MENU" << std::endl << std::endl;
+    
+    std::cout << "Please select option:" << std::endl;
+    std::cout << "1. Create User" << std::endl;
+    std::cout << "2. Create Conference" << std::endl;
+    std::cout << "3. Change a Users username" << std::endl;
+    std::cout << "4. Change a Users password" << std::endl;
+    std::cout << "5. Change a Conference details" << std::endl;
+    std::cout << "6. Quit" << std::endl;
+    std::cin >> selection;
+
+    if (selection == 1)
+    {
+        std::cout << "Create User selected" << std::endl;
+        createUser();
+    }
+    else if (selection == 2)
+    {
+        std::cout << "Create Conference selected" << std::endl;
+        createConf();
+    }
+    else if (selection == 3)
+    {
+        std::cout << "Change a Users username selected" << std::endl;
+        changeUsername();
+    }
+    else if (selection == 4)
+    {
+        std::cout << "Change a Users password selected" << std::endl;
+        changePassword();
+    }
+    else if (selection == 5)
+    {
+        std::cout << "Change a Conferences details selected" << std::endl;
+        changeConf();
+    }
+    else if (selection == 6)
+    {
+        std::cout << "Quit selected, Quitting..." << std::endl;
+        return;
+    }
+    else
+    {
+        std::cout << "Incorrect Input, Quitting..." << std::endl;
+        return;
+    }
+}
+
+void createUser()
+{
+    std::string username;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    std::vector<std::string> keywords;
+    UserType_t userType = AUTHOR;
+
+    std::cout << "Enter username: ";
+    std::cin >> username;
+    std::cout << "Enter password: ";
+    std::cin >> password;
+    std::cout << "Enter name: ";
+    std::cin >> name;
+    std::cout << "Enter email: ";
+    std::cin >> email;
+    std::cout << "Enter organisation: ";
+    std::cin >> organisation;
+    std::cout << "Enter phone: ";
+    std::cin >> phone;
+
+    int keywordsInput = 1;
+    while (keywordsInput == 1)
+    {
+        std::cout << "Select: " << std::endl;
+        std::cout << "1. Add keyword" << std::endl;
+        std::cout << "2. No more keywords" << std::endl;
+        std::cin >> keywordsInput;
+
+        if (keywordsInput == 1)
+        {
+            std::string keyword = "";
+            std::cout << "Keyword: ";
+            std::cin >> keyword;
+            keywords.push_back(keyword);
+        }
+    }
+
+    User user(
+	username,
+	name,
+	email,
+	organisation,
+	phone,
+	password,
+	keywords,
+        userType);
+
+    bool userExists = db.existsUserName(username);
+
+    std::cout << "User was ";
+    if (!userExists)
+    {
+        db.createUser(user);
+        std::cout << "created successfully" << std::endl;
+    }
+    else
+        std::cout << "not created" << std::endl;
+
+    adminMainMenu();
+}
+
+void createConf()
+{
+    bool active;
+    std::string title;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    int paperDeadlineD;
+    int paperDeadlineM;
+    int paperDeadlineY;
+    int allocationDateD;
+    int allocationDateM;
+    int allocationDateY;
+    int reviewDeadlineSoftD;
+    int reviewDeadlineSoftM;
+    int reviewDeadlineSoftY;
+    int reviewDeadlineHardD;
+    int reviewDeadlineHardM;
+    int reviewDeadlineHardY;
+    int discussionDeadlineD;
+    int discussionDeadlineM;
+    int discussionDeadlineY;
+    int reviewersPerPaper;
+    int postWordLimit;
+    bool beforeDate = true;
+
+    std::string tempIn = "";
+    std::string error = "Error creating conference!\nPlease start again.";
+    
+    std::cout << "Is it active? true/false: ";
+    std::cin >> tempIn;
+    if (tempIn == "true")
+        active = true;
+    else if (tempIn == "false")
+        active = false;
+    else {
+        std::cout << error << std::endl;
+        return;
+    }
+    std::cin.ignore();
+    
+    std::cout << "Enter title: ";
+    std::getline(std::cin, title);
+    std::cout << "Enter topic: ";
+    std::getline(std::cin, topic);
+    std::cout << "Enter description: "; 
+    std::getline(std::cin, description);
+    std::cout << "Enter location: ";
+    std::getline(std::cin, location);
+
+    int keywordsInput = 1;
+    while (keywordsInput == 1)
+    {
+        std::cout << "Select: " << std::endl;
+        std::cout << "1. Add keyword" << std::endl;
+        std::cout << "2. No more keywords" << std::endl;
+        std::cin >> keywordsInput;
+        std::cin.ignore();
+
+        if (keywordsInput == 1)
+        {
+            std::string keyword = "";
+            std::cout << "Keyword: ";
+            std::getline(std::cin, keyword);
+            keywords.push_back(keyword);
+        }
+    }
+
+    std::cout << "Enter paper deadline day: ";
+    std::cin >> paperDeadlineD;
+    std::cout << "Enter paper deadline month: ";
+    std::cin >> paperDeadlineM;
+    std::cout << "Enter paper deadline year: ";
+    std::cin >> paperDeadlineY;
+    std::cout << "Enter allocation date day: ";
+    std::cin >> allocationDateD;
+    std::cout << "Enter allocation date month: ";
+    std::cin >> allocationDateM;
+    std::cout << "Enter allocation date year: ";
+    std::cin >> allocationDateY;
+    std::cout << "Enter review deadline soft day: ";
+    std::cin >> reviewDeadlineSoftD;
+    std::cout << "Enter review deadline soft month: ";
+    std::cin >> reviewDeadlineSoftM;
+    std::cout << "Enter review deadline soft year: ";
+    std::cin >> reviewDeadlineSoftY;
+    std::cout << "Enter review deadline hard day: ";
+    std::cin >> reviewDeadlineHardD;
+    std::cout << "Enter review deadline hard month: ";
+    std::cin >> reviewDeadlineHardM;
+    std::cout << "Enter review deadline hard year: ";
+    std::cin >> reviewDeadlineHardY;
+    std::cout << "Enter discussion deadline day: ";
+    std::cin >> discussionDeadlineD;
+    std::cout << "Enter discussion deadline month: ";
+    std::cin >> discussionDeadlineM;
+    std::cout << "Enter discussion deadline year: ";
+    std::cin >> discussionDeadlineY;
+    std::cout << "Enter reviewers per paper: ";
+    std::cin >> reviewersPerPaper;
+    std::cout << "Enter post word limit: ";
+    std::cin >> postWordLimit;
+
+    Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+    Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+    Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
+    Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+    Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
+
+    Conference conf(
+        active,
+	title,
+	topic,
+	description,
+	location,
+	keywords,
+	beforeDate,
+	paperDeadline,
+	beforeDate,
+	allocationDate,
+	beforeDate,
+	reviewDeadlineSoft,
+	beforeDate,
+	reviewDeadlineHard,
+	beforeDate,
+	discussionDeadline,
+	reviewersPerPaper,
+	postWordLimit
+	);
+
+    bool confExists = db.existsConfName(title);
+
+    std::cout << "Conference was ";
+    if (!confExists)
+    {
+        db.createConf(conf);
+        std::cout << "created successfully" << std::endl;
+    }
+    else
+        std::cout << "not created" << std::endl;
+
+    adminMainMenu();
+}
+
+void changeUsername()
+{
+    std::string currentUN;
+    std::string newUN;
+    std::cout << "Enter username to change: ";
+    std::cin >> currentUN;
+
+    bool userExists = db.existsUserName(currentUN);
+    
+    if (userExists)
+    {
+        std::cout << "Enter new username: ";
+        std::cin >> newUN;
+        bool newUserExists = db.existsUserName(currentUN);
+
+        if (!newUserExists)
+        {
+            db.adminChangeUserName(currentUN, newUN);
+            std::cout << "Username changed successfully" << std::endl;
+        }
+        else
+            std::cout << "Username not changed as already existed";
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+
+    adminMainMenu();
+}
+
+void changePassword()
+{
+    std::string username;
+    std::string password;
+    std::cout << "Enter username to change password for: ";
+    std::cin >> username;
+
+    bool userExists = db.existsUserName(username);
+    
+    if (userExists)
+    {
+        std::cout << "Enter new password: ";
+        std::cin >> password;
+
+        db.adminChangePassword(username, password);
+
+        std::cout << "Password changed" << std::endl;
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+
+    adminMainMenu();
+}
+
+void changeConf()
+{
+    bool active;
+    std::string title;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    int paperDeadlineD;
+    int paperDeadlineM;
+    int paperDeadlineY;
+    int allocationDateD;
+    int allocationDateM;
+    int allocationDateY;
+    int reviewDeadlineSoftD;
+    int reviewDeadlineSoftM;
+    int reviewDeadlineSoftY;
+    int reviewDeadlineHardD;
+    int reviewDeadlineHardM;
+    int reviewDeadlineHardY;
+    int discussionDeadlineD;
+    int discussionDeadlineM;
+    int discussionDeadlineY;
+    int reviewersPerPaper;
+    int postWordLimit;
+    bool beforeDate = true;
+
+    std::cout << "Enter Conference name: " << std::endl;
+    std::cin >> title;
+
+    bool confExists = db.existsConfName(title);
+    if (confExists)
+    {
+        Conference conf = db.fetchConference(title);
+        std::cout << "Current Conference details are:" << std::endl;
+        std::cout << "Title: " << conf.title << std::endl;
+        std::cout << "Active: ";
+        if (conf.isActive)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Topic: " << conf.topic << std::endl;
+        std::cout << "Description: " << conf.description << std::endl;
+        std::cout << "Location: " << conf.location << std::endl;
+
+        std::cout << "Keywords: " << std::endl;
+        std::vector<std::string>::const_iterator it;
+        for(it=conf.keywords.begin(); it!=conf.keywords.end(); it++)
+        {
+            std::cout << "\t" << *it << std::endl; 
+        }
+
+        std::cout << "Before paper deadline? "; 
+        if (conf.isBeforePaperDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.paperDeadline.convertToString(); 
+        
+        std::cout << "Before allocation date? ";
+        if (conf.isBeforeAllocationDate)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.allocationDate.convertToString(); 
+
+        std::cout << "Before soft review deadline? ";
+        if (conf.isBeforeSoftReviewDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.reviewDeadlineSoft.convertToString(); 
+
+        std::cout << "Before hard review deadline? ";
+        if (conf.isBeforeHardReviewDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.reviewDeadlineHard.convertToString(); 
+
+        std::cout << "Before discussion deadline? ";
+        if (conf.isBeforeDiscussDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.discussDeadline.convertToString(); 
+
+        std::cout << "Reviewers per paper: " << conf.reviewersPerPaper;
+        std::cout << "Word limit per post: " << conf.postWordLimit;
+
+        std::cout << "Please enter new Conference details" << std::endl;
+        std::cout << "Must re enter all details that aren't changing also!!" << std::endl << std::endl;
+
+
+        std::cout << "Is it active? true/false: ";
+        std::cin >> active;
+        std::cout << "Enter title: ";
+        std::cin >> title;
+        std::cout << "Enter topic: "; 
+        std::cin >> topic;
+        std::cout << "Enter description: "; 
+        std::cin >> description;
+        std::cout << "Enter location: ";
+        std::cin >> location;
+
+        int keywordsInput = 1;
+        while (keywordsInput == 1)
+        {
+            std::cout << "Select: " << std::endl;
+            std::cout << "1. Add keyword" << std::endl;
+            std::cout << "2. No more keywords" << std::endl;
+            std::cin >> keywordsInput;
+
+            if (keywordsInput == 1)
+            {
+                std::string keyword = "";
+                std::cout << "Keyword: ";
+                std::cin >> keyword;
+                keywords.push_back(keyword);
+            }
+        }
+
+        std::cout << "Enter paper deadline day: ";
+        std::cin >> paperDeadlineD;
+        std::cout << "Enter paper deadline month: ";
+        std::cin >> paperDeadlineM;
+        std::cout << "Enter paper deadline year: ";
+        std::cin >> paperDeadlineY;
+        std::cout << "Enter allocation date day: ";
+        std::cin >> allocationDateD;
+        std::cout << "Enter allocation date month: ";
+        std::cin >> allocationDateM;
+        std::cout << "Enter allocation date year: ";
+        std::cin >> allocationDateY;
+        std::cout << "Enter review deadline soft day: ";
+        std::cin >> reviewDeadlineSoftD;
+        std::cout << "Enter review deadline soft month: ";
+        std::cin >> reviewDeadlineSoftM;
+        std::cout << "Enter review deadline soft year: ";
+        std::cin >> reviewDeadlineSoftY;
+        std::cout << "Enter review deadline hard day: ";
+        std::cin >> reviewDeadlineHardD;
+        std::cout << "Enter review deadline hard month: ";
+        std::cin >> reviewDeadlineHardM;
+        std::cout << "Enter review deadline hard year: ";
+        std::cin >> reviewDeadlineHardY;
+        std::cout << "Enter discussion deadline day: ";
+        std::cin >> discussionDeadlineD;
+        std::cout << "Enter discussion deadline month: ";
+        std::cin >> discussionDeadlineM;
+        std::cout << "Enter discussion deadline year: ";
+        std::cin >> discussionDeadlineY;
+        std::cout << "Enter reviewers per paper: ";
+        std::cin >> reviewersPerPaper;
+        std::cout << "Enter post word limit: ";
+        std::cin >> postWordLimit;
+
+        Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+        Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+        Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
+        Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+        Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
+
+        std::cout << "Enter reviewers per paper: ";
+        std::cin >> reviewersPerPaper;
+        std::cout << "Enter post word limit: ";
+        std::cin >> postWordLimit;
+
+        Conference confInput(
+            active,
+            title,
+            topic,
+            description,
+            location,
+            keywords,
+            conf.isBeforePaperDeadline,
+            paperDeadline,
+            conf.isBeforeAllocationDate,
+            allocationDate,
+            conf.isBeforeSoftReviewDeadline,
+            reviewDeadlineSoft,
+            conf.isBeforeHardReviewDeadline,
+            reviewDeadlineHard,
+            conf.isBeforeDiscussDeadline,
+            discussionDeadline,
+            reviewersPerPaper,
+            postWordLimit
+            );
+
+        db.updateConf(confInput);
+
+        std::cout << "Conference was created successfully" << std::endl;
+    }
+    else
+        std::cout << "Conference doesn't exist" << std::endl;
+    
+    adminMainMenu();
+}
+
diff --git a/CMS/main-user.cpp b/CMS/main-user.cpp
new file mode 100644
index 0000000..426a753
--- /dev/null
+++ b/CMS/main-user.cpp
@@ -0,0 +1,236 @@
+/*
+ * File:   main.cpp
+ * Author: ubuntu
+ *
+ * Created on 29 October 2014, 6:13 AM
+ */
+
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+#include <QApplication>
+
+#include "Database.hpp"
+#include "User.hpp"
+#include "Conference.hpp"
+#include "Paper.hpp"
+#include "Algo.hpp"
+#include "MainWindow.hpp"
+
+#include <vector>
+
+std::vector<User> g_theUsers;
+std::vector<Conference> g_theConfs;
+std::vector<Paper> g_thePapers;
+
+//static void createUsers();
+//static void createConf();
+//static void createPaper();
+
+int main(int argc, char *argv[])
+{
+//    createUsers();
+//    createConf();
+//    createPaper();
+    
+    QApplication app(argc, argv);
+    
+    Database db;
+
+    if (!db.isOK())
+    {
+            std::cout << "Failed to open database file" << std::endl;
+            exit(EXIT_FAILURE);
+    }
+    
+    MainWindow mWindow(&db);
+    mWindow.show();
+    
+    int rtnVal = app.exec();
+/*
+    std::vector<User>::const_iterator it;
+    for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
+    {
+            User ptr = *it;
+            std::string key = ptr.userName;
+            db.putUser(key, ptr);
+            std::cout << "Wrote user: " << key << std::endl;
+    }
+
+    std::vector<Conference>::const_iterator it2;
+    for(it2=g_theConfs.begin(); it2!=g_theConfs.end(); it2++)
+    {
+        Conference ptr = *it2;
+        std::string key = ptr.title;
+	    db.putConf(key, ptr);
+        std::cout << "Wrote conference: " << key << std::endl;
+    }
+
+    std::vector<Paper>::const_iterator it3;
+    for(it3=g_thePapers.begin(); it3!=g_thePapers.end(); it3++)
+    {
+        Paper ptr = *it3;
+	    std::string pdf = "whyyougoanddothesethings";
+	    if(!db.existsPaperTitleConf(ptr))
+	    {
+	    	db.createPaper(ptr, pdf);
+           	std::cout << "Wrote paper: " << ptr.title << std::endl;
+	    }
+    }
+
+	std::vector<std::string> Names = db.allUserNames();
+	std::vector<std::string>::iterator iter;
+
+    for(iter=Names.begin(); iter!=Names.end(); iter++)
+    {
+        std::string key = (*iter);
+        User user = db.fetchUser(key);
+        std::cout << "fetch username: " << user.userName << " name: " << user.name << " first expertise: " <<  user.keywords[0] << " email: " << user.email << std::endl;
+    }
+    
+    std::vector<int> ConfIDs = db.activeConfIDs();
+    std::vector<int>::iterator confiter;
+    for(confiter=ConfIDs.begin(); confiter!=ConfIDs.end(); confiter++)
+    {
+    	int key = (*confiter);
+    	Conference conference = db.fetchConference(key);
+    	std::cout << "fetch conference: " << conference.title << " first keyword: " << conference.keywords[0] << std::endl;
+    }
+    
+    std::vector<int> PaperIDs(db.getPaperIDsForConf(1));
+    std::vector<int>::iterator paperiter;
+    for(paperiter=PaperIDs.begin(); paperiter!=PaperIDs.end(); paperiter++)
+    {
+    	int key = (*paperiter);
+    	Paper paper = db.fetchPaper(key);
+    	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword: " << paper.keywords[0] << std::endl;
+    }
+*/
+    int PFR = 1;
+    PaperForReview pfr(PFR, PFR, PFR, &db);
+
+    return rtnVal;
+}
+/*
+static void createUsers()
+{
+    std::string username;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+	std::string phone;
+    {
+	    std::vector<std::string> keywords;
+        username = "tom";
+	    password = "fake";
+        name = "Thomas";
+        email = "boos_tom@ourcompany.com.au";
+	    organisation = "University of Wollongong";
+        phone = "04666666666";
+	    keywords.push_back("mathematics");
+	    keywords.push_back("science");
+	    User user(
+	    	username,
+	    	name,
+	    	email,
+	    	organisation,
+	    	phone,
+	    	password,
+	    	keywords);
+
+        g_theUsers.push_back(user);
+    }
+    {
+	    std::vector<std::string> keywords;
+        username = "dick";
+	    password = "wrong";
+        name = "Dick";
+        email = "clever_dick@ourcompany.com.au";
+        email = "boos_m@ourcompany.com.au";
+	    organisation = "University of Wollongong";
+        phone = "04666667666";
+	    keywords.push_back("geographyt");
+	    keywords.push_back("english");
+	    User user(
+	    	username,
+	    	name,
+	    	email,
+	    	organisation,
+	    	phone,
+	    	password,
+	    	keywords);
+
+        g_theUsers.push_back(user);
+    }
+}
+
+static void createConf()
+{
+	bool active = true;
+	std::string title = "maths conference";
+	std::string topic = "linear algebra";
+	std::string description = "exciting LA and MORE!!";
+	std::string location = "UoW";
+	std::vector<std::string> keywords;
+	keywords.push_back("maths");
+	keywords.push_back("linear algebra");
+	Date date(1,12,30);
+	bool open = true;
+	int reviewersPerPaper = 10;
+	int postWordLimit = 250;
+	Conference conferencetemp(
+		active,
+		title,
+		topic,
+		description,
+		location,
+		keywords,
+		open,
+		date,
+		open,
+		date,
+		open,
+		date,
+		open,
+		date,
+		open,
+		date,
+		reviewersPerPaper,
+		postWordLimit);
+	
+    g_theConfs.push_back(conferencetemp);
+}
+
+static void createPaper()
+{
+	PersonalInfo infotemp(
+        "Dick",
+        "clever_dick@ourcompany.com.au",
+		"University of Wollongong",
+        "04666667666",
+		2);
+	
+	std::vector<PersonalInfo> authors;
+	authors.push_back(infotemp);
+	std::vector<std::string> keywords;
+	keywords.push_back("linear algebra");
+	std::string title("LA");
+	std::string abstract("amazing!");
+	std::string confKeyword("linear algebra");
+	int CONFID = 1;
+	int leadAuthorID = 2;
+
+	Paper papertemp(
+	CONFID,
+	leadAuthorID,
+	title,
+	abstract,
+	authors,
+	keywords,
+	confKeyword);
+
+    g_thePapers.push_back(papertemp);
+}
+*/

commit 742ebd3a6fe4c1ea0497317f7fd65364dbc8d854
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 05:32:09 2014 +1100

    added definitions

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index c1b04c0..7a74cb5 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -297,9 +297,41 @@ void MainWindow::on_apply_clicked() // done (i think)
 
 void MainWindow::on_applyChair_clicked()
 {
-    //send user details to server
-    //send conference details to  server
-    //no response needed from server
+    //send user details to db
+    //update user from gui
+    theUser.name = ui->name_2->text().toStdString();
+    theUser.email = ui->email_2->text().toStdString();
+    theUser.phone = ui->phone_2->text().toStdString();
+    theUser.organisation = ui->organisation_2->text().toStdString();
+        
+    // send updated user to db
+    theDB->putUser(theUser.name, theUser);
+    
+    //send conference details to db
+    //update conf from gui
+    std::string confTitleOld = theConf.title;
+    theConf.title = ui->confNameMng->text().toStdString();
+    theConf.topic = ui->confTopicMng->text().toStdString();
+    theConf.location = ui->confLocMng->text().toStdString();
+    theConf.description = ui->confDescMng->toPlainText().toStdString();
+    QDate tempQdate = ui->subDateEdit->date();
+    theConf.paperDeadline = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->allocDateEdit->date();
+    theConf.allocationDate = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->sReviewDateEdit->date();
+    theConf.reviewDeadlineSoft = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->hReviewDateEdit->date();
+    theConf.reviewDeadlineHard = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    tempQdate = ui->discDateEdit->date();
+    theConf.discussDeadline = Date(tempQdate.day(), tempQdate.month(), tempQdate.year());
+    
+    //clear current conference keywords and populate with list from gui
+    theConf.keywords.clear();
+    for (int i = 0; i < ui->confKeyList->count(); ++i)
+        theConf.keywords.push_back(ui->confKeyList->item(i)->text().toStdString());
+    
+    // send updated conf to db
+    theDB->putConf(confTitleOld, theConf);
 }
 
 void MainWindow::on_addConfKey_clicked()

commit 9485f18db7c9578e78ea093abb5764023ff268d0
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 05:30:52 2014 +1100

    updated progress

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index c6d25b1..090e174 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -40,13 +40,13 @@ private slots:
 
     void on_apply_clicked();// done (i think)
     
-    void on_applyChair_clicked();// laurence is here
+    void on_applyChair_clicked();// done (i think)
 
-    void on_addConfKey_clicked();
+    void on_addConfKey_clicked(); // already done (i think)
 
-    void on_rmvConfKey_clicked();
+    void on_rmvConfKey_clicked(); // already done (i think)
 
-    void on_addAuthor_clicked();
+    void on_addAuthor_clicked(); // laurence is up to here, haven't done yet
 
     void on_rmvAuthor_clicked();
 

commit b3a37bbf232434b01e233234232f7d0ee7f6fb31
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 05:07:31 2014 +1100

    added definitions

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index fa501de..c1b04c0 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,23 +1,23 @@
 #include "mainwindow.hpp"
-#include "ui_mainwindow.h"
 #include "../DataAll/Review.hpp"
 #include <QMessageBox>
 #include <QFileDialog>
 
 MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 {
+        theUser = User();//    theUser = NULL;
+        theConf = Conference();//    theConf = NULL;
     theDB = db;
     ui = new Ui::MainWindow;
     ui->setupUi(this);
     ui->passwordLogin->setEchoMode(QLineEdit::Password);
-    noUser();
+    logout();
 }
 
 MainWindow::~MainWindow()
 {
-    delete theUser;
-    delete theDB;
-    delete theConf;
+//    delete theUser;
+//    delete theConf;
     delete ui;
 }
 
@@ -35,55 +35,76 @@ void MainWindow::login()
     
     QString msg;
     QString errorBox = "Error!";
+    bool error = false;
+
+    QString uname = ui->usernameLogin->text().trimmed();
+    QString pword = ui->passwordLogin->text().trimmed();
     
-    QString uname = ui->usernameLogin->text();
-    QString pword = ui->usernameLogin->text();
-    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
-    
+    if (ui->confList->currentRow() == -1) {
+        msg.append("Please select a conference!\n");
+        error = true;
+    }
+    if (uname.isEmpty()) {
+        msg.append("Please input a username!\n");
+        error = true;
+    }
+    if (pword.isEmpty()) {
+        msg.append("Please input a password!\n");
+        error = true;
+    }
     ui->usernameLogin->clear();
     ui->passwordLogin->clear();
     ui->confList->clearSelection();
+    if (error) {
+        popupBox(errorBox, msg);
+        return;
+    }
     
-    theUser = new User;
-    (*theUser) = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
+   
+    theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
     
-    if (theUser->userID == -1)
+    if (theUser.userID == -1)
     {
-        msg = "User does not exist for !";
+        msg = "User does not exist!";
         popupBox(errorBox, msg);
-        noUser();
+        logout();
     }
-    else if (theUser->password != pword)
+    else if (theUser.password != pword.toStdString())
     {
         msg = "Incorrect password!";
         popupBox(errorBox, msg);
-        noUser();
+        logout();
     }
     else // get userType and load tab
     {
-        // fetch conferences
-        setUser(theUser->userType)
+        theConf = theDB->fetchConference(confname.toStdString());
+        // get conferences from db
+        
+        setUser(theUser.userType);
     }
 }
 
 
 void MainWindow::logout()
 {
-    delete theUser;
-    theUser = NULL;
-    noUser();
-}
-
-void MainWindow::noUser()
-{// clears all tabs, populates conference list, returns to login screen
-    ui->tabWidget->clear();
+    clearAllTabs();
+//    delete theUser;
+//    theUser = NULL;
+//    delete theConf;
+//    theConf = NULL;
+    theUser = User();
+    theConf = Conference();
+    papers.clear();
+    
+    //return to login screen
     
     // populate conference list ui->confList
     // get current conferences from db
     std::vector<std::string> activeConfs = theDB->activeConfNames();
-    // for numOfCurrConfs ui->confList->addItem(QString)
-    for (int i = 0; i < activeConfs.size(); ++i)
-        ui->confList->addItems(QString::fromStdString(activeConfs[i]));
+    
+    for (unsigned int i = 0; i < activeConfs.size(); ++i)
+        ui->confList->addItem(QString::fromStdString(activeConfs[i]));
     
     ui->tabWidget->addTab(ui->loginTab, "Login");
 }
@@ -93,13 +114,11 @@ void MainWindow::setUser(UserType_t userType)
     switch(userType)
     {
     case AUTHOR://author
-        ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
         ui->tabWidget->addTab(ui->authorTab, "Author");
-        //ui->tabWidget->removeTab(0); //TEST
+        //ui->tabWidget->removeTab(0);
         break;
     case REVIEWER://reviewer
-        ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
         ui->tabWidget->addTab(ui->authorTab, "Author");
         ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
@@ -107,7 +126,6 @@ void MainWindow::setUser(UserType_t userType)
         ui->tabWidget->removeTab(0);
         break;
     case PCCHAIR://pcchair
-        ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->infoTabChair, "Information");
         ui->tabWidget->addTab(ui->usersTab, "User Management");
         ui->tabWidget->addTab(ui->papersTab, "Paper Management");
@@ -142,19 +160,41 @@ void MainWindow::on_passwordLogin_returnPressed()
     login();
 }
 
-void MainWindow::on_createAccount_clicked() // laurence needs work
+void MainWindow::on_createAccount_clicked() // done (i think)
 {
-    theUser = new User();
+    theUser = User();
     QString msg;
     QString errorBox = "Error!";
     bool userExists;
+    bool error = false;
     
-    QString uname = ui->usernameLogin->text();
-    QString pword = ui->usernameLogin->text();
+    QString uname = ui->usernameLogin->text().trimmed();
+    QString pword = ui->passwordLogin->text().trimmed();
+    
+    if (ui->confList->currentRow() == -1) {
+        msg.append("Please select a conference!\n");
+        error = true;
+    }
+    if (uname.isEmpty()) {
+        msg.append("Please input a username!\n");
+        error = true;
+    }
+    if (pword.isEmpty()) {
+        msg.append("Please input a password!\n");
+        error = true;
+    }
     ui->usernameLogin->clear();
     ui->passwordLogin->clear();
+    ui->confList->clearSelection();
+    if (error) {
+        popupBox(errorBox, msg);
+        return;
+    }
     
-    userExists = theDB->existsUserName(uname);
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
+    
+    // check if user exists
+    userExists = theDB->existsUserName(uname.toStdString());
     
     if (userExists)
     {
@@ -163,30 +203,96 @@ void MainWindow::on_createAccount_clicked() // laurence needs work
     }
     else
     {
-        theUser->userType = AUTHOR;
+        theUser.userType = AUTHOR;
         
         // update DB with new user
-        theDB->putUser(uname, *theUser);
-        setUser(theUser->userType);
+        theDB->putUser(uname.toStdString(), theUser);
+        theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+        
+        // get conference details from DB
+        theConf = theDB->fetchConference(confname.toStdString());
+        
+        // update DB with userType
+        theDB->setUserAsAuthor(theUser.userID, theConf.confID);
+        
+        setUser(theUser.userType);
+    }
+    
+}
+
+void MainWindow::on_joinConf_clicked()
+{
+    QString msg;
+    QString errorBox = "Error!";
+    bool error = false;
+
+    QString uname = ui->usernameLogin->text().trimmed();
+    QString pword = ui->passwordLogin->text().trimmed();
+    
+    if (ui->confList->currentRow() == -1) {
+        msg.append("Please select a conference!\n");
+        error = true;
+    }
+    if (uname.isEmpty()) {
+        msg.append("Please input a username!\n");
+        error = true;
+    }
+    if (pword.isEmpty()) {
+        msg.append("Please input a password!\n");
+        error = true;
+    }
+    ui->usernameLogin->clear();
+    ui->passwordLogin->clear();
+    ui->confList->clearSelection();
+    if (error) {
+        popupBox(errorBox, msg);
+        return;
     }
     
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
+   
+    theUser = theDB->fetchUser(uname.toStdString(), confname.toStdString());
+    
+    if (theUser.userID == -1)
+    {
+        msg = "User does not exist!";
+        popupBox(errorBox, msg);
+        logout();
+    }
+    else if (theUser.password != pword.toStdString())
+    {
+        msg = "Incorrect password!";
+        popupBox(errorBox, msg);
+        logout();
+    }
+    else
+    {
+        // get conferences from db
+        theConf = theDB->fetchConference(confname.toStdString());
+        
+        theUser.userType = AUTHOR;
+        //update db with usertype
+        theDB->setUserAsAuthor(theUser.userID, theConf.confID);
+        
+        setUser(theUser.userType);
+    }
 }
 
-void MainWindow::on_apply_clicked() //laurence is here
+void MainWindow::on_apply_clicked() // done (i think)
 {
     //update user from gui
-    theUser->name = ui->name->text().toStdString();
-    theUser->email = ui->email->text().toStdString();
-    theUser->phone = ui->phone->text().toStdString();
-    theUser->organisation = ui->organisation->text().toStdString();
+    theUser.name = ui->name->text().toStdString();
+    theUser.email = ui->email->text().toStdString();
+    theUser.phone = ui->phone->text().toStdString();
+    theUser.organisation = ui->organisation->text().toStdString();
     
     //clear current users keywords and populate with list from gui
-    theUser->keywords.clear();
+    theUser.keywords.clear();
     for (int i = 0; i < ui->authKeyList->count(); ++i)
-        theUser->keywords.push_back(ui->authKeyList->item(i)->text());
+        theUser.keywords.push_back(ui->authKeyList->item(i)->text().toStdString());
     
     // send update user to db
-     
+    theDB->putUser(theUser.name, theUser);
 }
 
 void MainWindow::on_applyChair_clicked()
@@ -243,15 +349,18 @@ void MainWindow::on_selectPaperAuthor_activated(int index)
 
 }
 
-void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
-{
-    ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
-    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
-        ui->selectPaperAuthor->addItem("*NEW*");
-}
+//void MainWindow::on_selectPaperAuthor_currentTextChanged(const int &arg1)
+//{
+//    ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
+//    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
+//        ui->selectPaperAuthor->addItem("*NEW*");
+//}
 
 void MainWindow::on_tabWidget_currentChanged(int index)
 {//change to current text or something
+    if (index < 1)
+        return;
+    
     QString text = ui->tabWidget->tabText(index);
     if(text == "Info")
         populate_infoTabAuthor();
@@ -271,48 +380,48 @@ void MainWindow::on_tabWidget_currentChanged(int index)
 
 void MainWindow::populate_infoTabAuthor()
 {
-    ui->username->setText(QString::fromStdString(theUser->userName));
-    ui->userid->setText(QString::number(theUser->userID));
-    ui->name->setText(QString::fromStdString(theUser->name));
-    ui->email->setText(QString::fromStdString(theUser->email));
-    ui->organisation->setText(QString::fromStdString(theUser->organisation));
-    ui->phone->setText(QString::fromStdString(theUser->phone));
+    ui->username->setText(QString::fromStdString(theUser.userName));
+    ui->userid->setText(QString::number(theUser.userID));
+    ui->name->setText(QString::fromStdString(theUser.name));
+    ui->email->setText(QString::fromStdString(theUser.email));
+    ui->organisation->setText(QString::fromStdString(theUser.organisation));
+    ui->phone->setText(QString::fromStdString(theUser.phone));
 
-    for(std::vector<std::string>::iterator it = theUser->keywords.begin(); it != theUser->keywords.end(); ++it)
+    for(std::vector<std::string>::iterator it = theUser.keywords.begin(); it != theUser.keywords.end(); ++it)
         ui->authKeyList->addItem(QString::fromStdString(*it));
 
-    ui->conferenceName->setText(QString::fromStdString(theConf->title));
-    ui->confTopic->setText(QString::fromStdString(theConf->topic));
-    ui->confLocation->setText(QString::fromStdString(theConf->location));
-    ui->confDesc->append(QString::fromStdString(theConf->description));
-    for(std::vector<std::string>::iterator it = theConf->keywords.begin(); it != theConf->keywords.end(); ++it)
+    ui->conferenceName->setText(QString::fromStdString(theConf.title));
+    ui->confTopic->setText(QString::fromStdString(theConf.topic));
+    ui->confLocation->setText(QString::fromStdString(theConf.location));
+    ui->confDesc->append(QString::fromStdString(theConf.description));
+    for(std::vector<std::string>::iterator it = theConf.keywords.begin(); it != theConf.keywords.end(); ++it)
         ui->confKeyListNoEdit->addItem(QString::fromStdString(*it));
-    ui->subDate->setText(QString::fromStdString(theConf->paperDeadline.convertToString()));
-    ui->discDate->setText(QString::fromStdString(theConf->discussDeadline.convertToString()));
-    ui->hReviewDate->setText(QString::fromStdString(theConf->reviewDeadlineHard.convertToString()));
-    ui->sReviewDate->setText(QString::fromStdString(theConf->reviewDeadlineSoft.convertToString()));
-    ui->allocDate->setText(QString::fromStdString((theConf->allocationDate.convertToString())));
+    ui->subDate->setText(QString::fromStdString(theConf.paperDeadline.convertToString()));
+    ui->discDate->setText(QString::fromStdString(theConf.discussDeadline.convertToString()));
+    ui->hReviewDate->setText(QString::fromStdString(theConf.reviewDeadlineHard.convertToString()));
+    ui->sReviewDate->setText(QString::fromStdString(theConf.reviewDeadlineSoft.convertToString()));
+    ui->allocDate->setText(QString::fromStdString((theConf.allocationDate.convertToString())));
 }
 
 void MainWindow::populate_infoTabChair()
 {
-    ui->name_2->setText(QString::fromStdString(theUser->name));
-    ui->email_2->setText(QString::fromStdString(theUser->email));
-    ui->organisation_2->setText(QString::fromStdString(theUser->organisation));
-    ui->phone_2->setText(QString::fromStdString(theUser->phone));
-    ui->confNameMng->setText(QString::fromStdString(theConf->title));
-    ui->confTopicMng->setText(QString::fromStdString(theConf->topic));
-    ui->confLocMng->setText(QString::fromStdString(theConf->location));
-    ui->confDescMng->setText(QString::fromStdString(theConf->description));
+    ui->name_2->setText(QString::fromStdString(theUser.name));
+    ui->email_2->setText(QString::fromStdString(theUser.email));
+    ui->organisation_2->setText(QString::fromStdString(theUser.organisation));
+    ui->phone_2->setText(QString::fromStdString(theUser.phone));
+    ui->confNameMng->setText(QString::fromStdString(theConf.title));
+    ui->confTopicMng->setText(QString::fromStdString(theConf.topic));
+    ui->confLocMng->setText(QString::fromStdString(theConf.location));
+    ui->confDescMng->setText(QString::fromStdString(theConf.description));
 
-    for(std::vector<std::string>::iterator it = theConf->keywords.begin(); it != theConf->keywords.end(); ++it)
+    for(std::vector<std::string>::iterator it = theConf.keywords.begin(); it != theConf.keywords.end(); ++it)
         ui->confKeyList->addItem(QString::fromStdString(*it));
 
-    ui->subDateEdit->date().setDate(theConf->paperDeadline.getDay(), theConf->paperDeadline.getMonth(), theConf->paperDeadline.getYear());
-    ui->allocDateEdit->date().setDate(theConf->allocationDate.getDay(), theConf->allocationDate.getMonth(), theConf->allocationDate.getYear());
-    ui->sReviewDateEdit->date().setDate(theConf->reviewDeadlineSoft.getDay(), theConf->reviewDeadlineSoft.getMonth(), theConf->reviewDeadlineSoft.getYear());
-    ui->hReviewDateEdit->date().setDate(theConf->reviewDeadlineHard.getDay(), theConf->reviewDeadlineHard.getMonth(), theConf->reviewDeadlineHard.getYear());
-    ui->discDateEdit->date().setDate(theConf->discussDeadline.getDay(), theConf->discussDeadline.getMonth(), theConf->discussDeadline.getYear());
+    ui->subDateEdit->date().setDate(theConf.paperDeadline.getDay(), theConf.paperDeadline.getMonth(), theConf.paperDeadline.getYear());
+    ui->allocDateEdit->date().setDate(theConf.allocationDate.getDay(), theConf.allocationDate.getMonth(), theConf.allocationDate.getYear());
+    ui->sReviewDateEdit->date().setDate(theConf.reviewDeadlineSoft.getDay(), theConf.reviewDeadlineSoft.getMonth(), theConf.reviewDeadlineSoft.getYear());
+    ui->hReviewDateEdit->date().setDate(theConf.reviewDeadlineHard.getDay(), theConf.reviewDeadlineHard.getMonth(), theConf.reviewDeadlineHard.getYear());
+    ui->discDateEdit->date().setDate(theConf.discussDeadline.getDay(), theConf.discussDeadline.getMonth(), theConf.discussDeadline.getYear());
 }
 
 void MainWindow::populate_authorTab()
@@ -326,17 +435,17 @@ void MainWindow::populate_authorTab()
 
 void MainWindow::populate_papersTab()
 {
-//    Paper* paper = &theUser->getCurrentPaper();
+//    Paper* paper = &theUser.getCurrentPaper();
 //    std::vector<Review>* reviews = &paper->reviews;
-//    std::vector<PersonalInfo>* authors = theUser->getCurrentPaper().authors;
+//    std::vector<PersonalInfo>* authors = theUser.getCurrentPaper().authors;
 //    std::vector<PersonalInfo> reviewers;
 
-//    std::vector<std::string> keys = theUser->getCurrentPaper().keywords;
+//    std::vector<std::string> keys = theUser.getCurrentPaper().keywords;
 
 //    ui->paperNameMng->setText(QString::fromStdString(paper->title));
 //    ui->mainKeyMng->setText(QString::fromStdString(paper->confKeyword));
 
-//    ui->paperAbstractMng->append(QString::fromStdString(theUser->getCurrentPaper().abstract));
+//    ui->paperAbstractMng->append(QString::fromStdString(theUser.getCurrentPaper().abstract));
 //    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
 //        ui->paperKeyListMng->addItem(QString::fromStdString(*it));
 
@@ -369,13 +478,13 @@ void MainWindow::populate_reviewTab()
 //    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
 //        ui->selectPaperReview->addItem(QString::fromStdString(it->paperName));
 
-//    ui->paperAbstractReviewer->setText(QString::fromStdString(theUser->getCurrentPaper().abstract));
-//    ui->mainKey->setText(QString::fromStdString(theUser->getCurrentPaper().confKeyword));
+//    ui->paperAbstractReviewer->setText(QString::fromStdString(theUser.getCurrentPaper().abstract));
+//    ui->mainKey->setText(QString::fromStdString(theUser.getCurrentPaper().confKeyword));
 //    for(std::vector<std::string>::iterator it = keys.begin(); it != keys.end(); ++it)
 //        ui->paperKeyListReview->addItem(QString::fromStdString(*it));
 
 //    for(std::vector<Review>::iterator it = reviews.begin(); it != reviews.end(); ++it){
-//        if(it->paperID == theUser->getCurrentPaper().paperID){
+//        if(it->paperID == theUser.getCurrentPaper().paperID){
 //            ui->commentsBestAward->setText(QString::fromStdString(it->commentsBestAward));
 //            ui->commentsShortPaper->setText(QString::fromStdString(it->commentsShortPaper));
 //            ui->commentsStrengths->setText(QString::fromStdString(it->commentsStrength));
@@ -405,9 +514,9 @@ void MainWindow::on_submit_clicked()
 void MainWindow::on_submitBid_clicked()
 {
     int bid = ui->selectBid->currentText().toInt();
-    int userId = theUser->userID;
+    int userId = theUser.userID;
     int paperId;
-    //paperId = theUser->getCurrentPaper();
+    //paperId = theUser.getCurrentPaper();
 
     //send users bid on a paper to the server
     //no response from server
@@ -440,8 +549,8 @@ void MainWindow::on_submitPosts_clicked()
 
 void MainWindow::on_acceptPaper_clicked()
 {
-    int paperId = theUser->getCurrentPaper().paperID;
-    int confId  = theConf->confID;
+//    int paperId = theUser.getCurrentPaper().paperID;
+//    int confId  = theConf.confID;
 
     //send paper id, conf id to server
     //no response from server
@@ -467,21 +576,21 @@ void MainWindow::on_submitReview_clicked()
 //    rev.commentsStrength = ui->commentsStrengths->toPlainText();
 //    rev.commentsSuggestions = ui->commentsSuggestions->toPlainText();
 //    rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
-//    rev.paperID = theUser->getCurrentPaper.paperID;
-//    rev.reviewerID = theUser->getUserID();
+//    rev.paperID = theUser.getCurrentPaper.paperID;
+//    rev.reviewerID = theUser.getUserID();
 
     //submit review to the server
     //no response from server
 }
 
-void MainWindow::on_addAsReviewer_clicked()
-{
-    int paperId = ui->toReview->text().toInt();
-    int userId = ui->usersTable->item(ui->usersTable->currentRow(), 2)->text().toInt();
-
-    //send paper id and user id to server to add a paper assigned table entry
-    //no response from server
-}
+//void MainWindow::on_addAsReviewer_clicked()
+//{
+//    int paperId = ui->toReview()->text().toInt();
+//    int userId = ui->usersTable->item(ui->usersTable->currentRow(), 2)->text().toInt();
+//
+//    //send paper id and user id to server to add a paper assigned table entry
+//    //no response from server
+//}
 
 void MainWindow::on_addAsReviewer_2_clicked()
 {
@@ -496,7 +605,7 @@ void MainWindow::on_addAsReviewer_2_clicked()
 void MainWindow::on_papersTable_itemSelectionChanged()
 {
 
-//    std::vector<PersonalInfo> authors = theUser->getCurrentPaper().authors;
+//    std::vector<PersonalInfo> authors = theUser.getCurrentPaper().authors;
 
 //    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
 //        int rows = ui->reviewersTable->rowCount();
@@ -533,20 +642,20 @@ void MainWindow::on_selectPaperAuthor_currentIndexChanged(const QString &arg1)
         newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
         ui->authorsTable->setItem(rows, 3, newItem);
     }
-    for(std::vector<std::string>::iterator it = theConf->keywords.begin(); it != theConf->keywords.end(); ++it){
+    for(std::vector<std::string>::iterator it = theConf.keywords.begin(); it != theConf.keywords.end(); ++it){
         ui->selectMainKey->addItem(QString::fromStdString(*it));
     }
 }
 
 void MainWindow::on_selectPaperReviewer_currentIndexChanged(const QString &arg1)
 {
-    Paper thePaper;
-    //thePaper = fetchPaper(  );
-
-    ui->paperAbstractReviewer->append(QString::fromStdString(thePaper.abstract));
-    for(std::vector<std::string> it = thePaper.keywords.begin(); it != thePaper.keywords.end(); ++it)
-        ui->paperKeyListReviewer->addItem(QString::fromStdString(*it));
-    ui->mainKeyReviewer->setText(QString::fromStdString(thePaper.confKeyword));
+//    Paper thePaper;
+//    //thePaper = fetchPaper(  );
+//
+//    ui->paperAbstractReviewer->append(QString::fromStdString(thePaper.abstract));
+//    for(std::vector<std::string> it = thePaper.keywords.begin(); it != thePaper.keywords.end(); ++it)
+//        ui->paperKeyListReviewer->addItem(QString::fromStdString(*it));
+//    ui->mainKeyReviewer->setText(QString::fromStdString(thePaper.confKeyword));
 }
 
 
@@ -554,3 +663,25 @@ void MainWindow::on_updateConfSettings_clicked()
 {
 
 }
+
+void MainWindow::clearAllTabs()
+{
+    foreach(QLineEdit *widget, this->findChildren<QLineEdit*>())
+        widget->clear();
+    foreach(QListWidget *widget, this->findChildren<QListWidget*>())
+        widget->clear();
+    foreach(QTextBrowser *widget, this->findChildren<QTextBrowser*>())
+        widget->clear();
+    foreach(QDateEdit *widget, this->findChildren<QDateEdit*>())
+        widget->clear();
+    foreach(QTextEdit *widget, this->findChildren<QTextEdit*>())
+        widget->clear();
+    foreach(QComboBox *widget, this->findChildren<QComboBox*>())
+        widget->clear();
+    foreach(QTableWidget *widget, this->findChildren<QTableWidget*>())
+        widget->clear();
+    foreach(QSpinBox *widget, this->findChildren<QSpinBox*>())
+        widget->clear();
+    
+    ui->tabWidget->clear();
+}

commit b89495e549f8b1c0b195576f4cb585a1e63e8289
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Wed Oct 29 05:06:45 2014 +1100

    added more functions

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 292e129..c6d25b1 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -2,16 +2,19 @@
 #define MAINWINDOW_H
 
 #include <QMainWindow>
+#include <QModelIndex>
 #include "../Server/User.hpp"
 #include "../Database/Database.hpp"
 #include "../DataAll/Conference.hpp"
+#include <string>
+#include <vector>
+#include "../DataAll/PaperSummary.hpp"
+#include "ui_mainwindow.h"
 
 namespace Ui {
     class MainWindow;
 }
 
-class LoginManager;
-
 class MainWindow : public QMainWindow
 {
     Q_OBJECT
@@ -21,21 +24,23 @@ public:
     ~MainWindow();
     
 private slots:
-    void on_login_clicked();
+    void on_login_clicked(); //done
 
-    void on_quit_clicked();
+    void on_quit_clicked(); //done
 
-    void on_logout_clicked();
+    void on_logout_clicked(); //done
 
-    void on_logout_2_clicked();
+    void on_logout_2_clicked(); //done
 
-    void on_passwordLogin_returnPressed();
+    void on_passwordLogin_returnPressed(); //done
 
-    void on_createAccount_clicked();// laurence needs work
+    void on_createAccount_clicked(); // done (i think)
 
-    void on_apply_clicked();//laurence is here
+    void on_joinConf_clicked(); // done (i think)
 
-    void on_applyChair_clicked();//server things here
+    void on_apply_clicked();// done (i think)
+    
+    void on_applyChair_clicked();// laurence is here
 
     void on_addConfKey_clicked();
 
@@ -55,7 +60,7 @@ private slots:
 
     void on_selectPaperAuthor_activated(int index);
 
-    void on_selectPaperAuthor_currentTextChanged(const QString &arg1);
+//    void on_selectPaperAuthor_currentTextChanged(const int &arg1);
 
     void on_tabWidget_currentChanged(int index);
 
@@ -77,11 +82,11 @@ private slots:
 
     void on_submitReview_clicked();//server shit here
 
-    void on_addAsReviewer_clicked();//server shit here
+//    void on_addAsReviewer_clicked();//server shit here
 
     void on_addAsReviewer_2_clicked();//server shit here
 
-    void on_reviewersTable_activated(const QModelIndex &index);
+//    void on_reviewersTable_activated(const QModelIndex &index);
 
     void on_papersTable_itemSelectionChanged();
 
@@ -93,7 +98,7 @@ private slots:
 
 private:
     void setUser(UserType_t userType);
-    void noUser(); // done (i think)
+//    void noUser(); call logout() instead
     void login(); // done (i think)
     void logout();
     void populate_infoTabAuthor();
@@ -104,11 +109,13 @@ private:
     void populate_usersTab();
     void populate_reviewTab();
     void popupBox(QString type, QString msg);
-
+    
+    void clearAllTabs();
+    
     Ui::MainWindow *ui;
-    User* theUser;
+    User theUser;
     Database* theDB;
-    Conference* theConf;
+    Conference theConf;
     std::vector<PaperSummary> papers;
 };
 

commit 4e7657a5288fb9d4226eeaa4ff8798e142a8c342
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 23:57:51 2014 +1100

    updated login functions

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 31a577b..fa501de 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -22,7 +22,7 @@ MainWindow::~MainWindow()
 }
 
 void MainWindow::popupBox(QString boxTitle, QString msg)
-{ // 
+{ // first input: window title; second input: box message
         QMessageBox msgBox;
         msgBox.setWindowTitle(boxTitle);
         msgBox.setText(msg);
@@ -45,7 +45,7 @@ void MainWindow::login()
     ui->confList->clearSelection();
     
     theUser = new User;
-    (*theUser) = theDB->fetchUser(uname.toStdString()/*, confname.toStdString()*/); // need to change to send confname as well
+    (*theUser) = theDB->fetchUser(uname.toStdString(), confname.toStdString());
     
     if (theUser->userID == -1)
     {
@@ -61,10 +61,12 @@ void MainWindow::login()
     }
     else // get userType and load tab
     {
+        // fetch conferences
         setUser(theUser->userType)
     }
 }
 
+
 void MainWindow::logout()
 {
     delete theUser;

commit 1844384aaf7bae37ddcd60ae8624dca1fa530b77
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Tue Oct 28 23:51:27 2014 +1100

    Update queries.txt

diff --git a/queries.txt b/queries.txt
index 605deef..6833d20 100644
--- a/queries.txt
+++ b/queries.txt
@@ -28,7 +28,6 @@ db->fetchUser
 	to take 2 inputs (username, confname)
 	get user's userType for that conf
 	sets userType for User
-	
 Matt - DONE!
 
 describe algo in report!!!!!!!!!
@@ -36,13 +35,12 @@ describe algo in report!!!!!!!!!
 db needs call
 	inputs confname (or confID, don't implement both)
 	returns vector of paper summeries for every paper in that conferences
-
 Matt - getPaperIDsForConf -> for loop -> fetchPaperSumamry
 
 put/get pdf into database as std::string
 
 add userType to UserTypeTable in database
-	already there db->setUserAs...
+Matt - already there db->setUserAs...
 	
 fetchUserName(int userID)
 

commit faa7e2af4fd3e9c49290d0b7685eb4c14a3cb2e9
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Tue Oct 28 23:50:42 2014 +1100

    Update queries.txt

diff --git a/queries.txt b/queries.txt
index eefc798..605deef 100644
--- a/queries.txt
+++ b/queries.txt
@@ -28,6 +28,8 @@ db->fetchUser
 	to take 2 inputs (username, confname)
 	get user's userType for that conf
 	sets userType for User
+	
+Matt - DONE!
 
 describe algo in report!!!!!!!!!
 

commit 79104c375d10b5f1706c7226beacef90294bd383
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Tue Oct 28 23:49:43 2014 +1100

    Update queries.txt

diff --git a/queries.txt b/queries.txt
index 5db0b7a..eefc798 100644
--- a/queries.txt
+++ b/queries.txt
@@ -15,7 +15,7 @@ return vector of users
   essentially the above function but in reverse
 for PCChairs seeing people allocated to review a paper
 
-Matt - fetchReviewersAssigned -> fetchUser
+Matt - fetchReviewersAssigned -> fetchUserName
 
 
 

commit 9b22ee47ae1e6d01b5f0b576c8dbf39d7b868b5b
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Tue Oct 28 23:48:58 2014 +1100

    Update queries.txt

diff --git a/queries.txt b/queries.txt
index cdc460f..5db0b7a 100644
--- a/queries.txt
+++ b/queries.txt
@@ -2,15 +2,21 @@ return vector of PaperSummaries
   get PaperSummary for each Paper in a given Conference
 this is for Reviewer seeing what papers he can bid on as well as PCChair getting all papers for a conference
 
+Matt - getPaperIDsForConf  ->  For loop -> fetchPaperSummary
+
 return vector of PaperSummaries
   get Paper Summary for each Paper that a given user is allocated as a reviewer for in a given conference
 for reviewers
 
+Matt - getPaperIDsForAllocatedReviewer  ->  fetchPaperSummary for each id
+
 return vector of users
   get users for a given paper id that they are allocated to review
   essentially the above function but in reverse
 for PCChairs seeing people allocated to review a paper
 
+Matt - fetchReviewersAssigned -> fetchUser
+
 
 
 
@@ -29,8 +35,12 @@ db needs call
 	inputs confname (or confID, don't implement both)
 	returns vector of paper summeries for every paper in that conferences
 
-put pdf into database as std::string
+Matt - getPaperIDsForConf -> for loop -> fetchPaperSumamry
+
+put/get pdf into database as std::string
 
 add userType to UserTypeTable in database
 	already there db->setUserAs...
+	
+fetchUserName(int userID)
 

commit 72eb4bcb9220b882ce6911c73f36ad34001b0644
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 23:48:52 2014 +1100

    Update mainwindow.hpp

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 5bb9ce8..292e129 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -21,7 +21,7 @@ public:
     ~MainWindow();
     
 private slots:
-    void on_login_clicked();//done (i think)
+    void on_login_clicked();
 
     void on_quit_clicked();
 
@@ -31,9 +31,9 @@ private slots:
 
     void on_passwordLogin_returnPressed();
 
-    void on_createAccount_clicked();// working on
+    void on_createAccount_clicked();// laurence needs work
 
-    void on_apply_clicked();//server things here
+    void on_apply_clicked();//laurence is here
 
     void on_applyChair_clicked();//server things here
 
@@ -90,12 +90,11 @@ private slots:
     void on_selectPaperReviewer_currentIndexChanged(const QString &arg1);
 
     void on_updateConfSettings_clicked();
-    
 
 private:
     void setUser(UserType_t userType);
-    void noUser(); // laurence is here
-    void login(); // laurence is here
+    void noUser(); // done (i think)
+    void login(); // done (i think)
     void logout();
     void populate_infoTabAuthor();
     void populate_infoTabChair();

commit 6522ab04ecf6a7dcb00407e4cd65a94c8be7eaf2
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 23:35:26 2014 +1100

    Update mainwindow.hpp

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 5f163da..5bb9ce8 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -21,7 +21,7 @@ public:
     ~MainWindow();
     
 private slots:
-    void on_login_clicked();
+    void on_login_clicked();//done (i think)
 
     void on_quit_clicked();
 
@@ -31,9 +31,9 @@ private slots:
 
     void on_passwordLogin_returnPressed();
 
-    void on_createAccount_clicked();// laurence needs work
+    void on_createAccount_clicked();// working on
 
-    void on_apply_clicked();//laurence is here
+    void on_apply_clicked();//server things here
 
     void on_applyChair_clicked();//server things here
 
@@ -85,6 +85,13 @@ private slots:
 
     void on_papersTable_itemSelectionChanged();
 
+    void on_selectPaperAuthor_currentIndexChanged(const QString &arg1);
+
+    void on_selectPaperReviewer_currentIndexChanged(const QString &arg1);
+
+    void on_updateConfSettings_clicked();
+    
+
 private:
     void setUser(UserType_t userType);
     void noUser(); // laurence is here

commit b1583a81a21d01bf4d22350f8c0f6f0c9f51eab3
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 23:30:50 2014 +1100

    joinConf button, minor changes and cleaning

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index 19b8ea5..770e111 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -6,15 +6,15 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>790</width>
-    <height>606</height>
+    <width>791</width>
+    <height>603</height>
    </rect>
   </property>
   <property name="windowTitle">
    <string>MainWindow</string>
   </property>
   <widget class="QWidget" name="centralWidget">
-   <widget class="QWidget" name="centralwidget" native="true">
+   <widget class="QWidget" name="centralWidget_4" native="true">
     <property name="geometry">
      <rect>
       <x>0</x>
@@ -23,7 +23,7 @@
       <height>601</height>
      </rect>
     </property>
-    <widget class="QWidget" name="centralWidget_2" native="true">
+    <widget class="QWidget" name="centralwidget_2" native="true">
      <property name="geometry">
       <rect>
        <x>0</x>
@@ -32,1724 +32,1704 @@
        <height>601</height>
       </rect>
      </property>
-     <widget class="QWidget" name="centralWidget_3" native="true">
+     <widget class="QTabWidget" name="tabWidget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
-        <width>801</width>
-        <height>601</height>
+        <width>871</width>
+        <height>651</height>
        </rect>
       </property>
-      <widget class="QWidget" name="centralwidget_2" native="true">
-       <property name="geometry">
-        <rect>
-         <x>0</x>
-         <y>0</y>
-         <width>801</width>
-         <height>601</height>
-        </rect>
-       </property>
-       <widget class="QTabWidget" name="tabWidget">
+      <property name="currentIndex">
+       <number>0</number>
+      </property>
+      <widget class="QWidget" name="loginTab">
+       <attribute name="title">
+        <string>Login</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_2">
         <property name="geometry">
          <rect>
-          <x>0</x>
-          <y>0</y>
-          <width>871</width>
-          <height>651</height>
+          <x>260</x>
+          <y>150</y>
+          <width>353</width>
+          <height>211</height>
          </rect>
         </property>
-        <property name="currentIndex">
-         <number>2</number>
-        </property>
-        <widget class="QWidget" name="loginTab">
-         <attribute name="title">
-          <string>Login</string>
-         </attribute>
-         <widget class="QWidget" name="verticalLayoutWidget_2">
-          <property name="geometry">
-           <rect>
-            <x>260</x>
-            <y>150</y>
-            <width>353</width>
-            <height>211</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_2">
-           <item>
-            <widget class="QLabel" name="label_7">
-             <property name="font">
-              <font>
-               <pointsize>18</pointsize>
-              </font>
+        <layout class="QVBoxLayout" name="verticalLayout_2">
+         <item>
+          <widget class="QLabel" name="label_7">
+           <property name="font">
+            <font>
+             <pointsize>18</pointsize>
+            </font>
+           </property>
+           <property name="text">
+            <string>Conference Management System</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_7">
+           <item>
+            <spacer name="horizontalSpacer_4">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
              </property>
-             <property name="text">
-              <string>Conference Management System</string>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
              </property>
-            </widget>
-           </item>
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_7">
-             <item>
-              <spacer name="horizontalSpacer_4">
-               <property name="orientation">
-                <enum>Qt::Horizontal</enum>
-               </property>
-               <property name="sizeHint" stdset="0">
-                <size>
-                 <width>40</width>
-                 <height>20</height>
-                </size>
-               </property>
-              </spacer>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_9">
-               <property name="text">
-                <string>UserName</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLineEdit" name="usernameLogin"/>
-             </item>
-             <item>
-              <spacer name="horizontalSpacer_5">
-               <property name="orientation">
-                <enum>Qt::Horizontal</enum>
-               </property>
-               <property name="sizeHint" stdset="0">
-                <size>
-                 <width>40</width>
-                 <height>20</height>
-                </size>
-               </property>
-              </spacer>
-             </item>
-            </layout>
-           </item>
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout">
-             <item>
-              <spacer name="horizontalSpacer_2">
-               <property name="orientation">
-                <enum>Qt::Horizontal</enum>
-               </property>
-               <property name="sizeHint" stdset="0">
-                <size>
-                 <width>40</width>
-                 <height>20</height>
-                </size>
-               </property>
-              </spacer>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_8">
-               <property name="text">
-                <string>Password</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLineEdit" name="passwordLogin"/>
-             </item>
-             <item>
-              <spacer name="horizontalSpacer_3">
-               <property name="orientation">
-                <enum>Qt::Horizontal</enum>
-               </property>
-               <property name="sizeHint" stdset="0">
-                <size>
-                 <width>40</width>
-                 <height>20</height>
-                </size>
-               </property>
-              </spacer>
-             </item>
-            </layout>
-           </item>
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_10">
-             <item>
-              <widget class="QPushButton" name="login">
-               <property name="text">
-                <string>Login</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QPushButton" name="createAccount">
-               <property name="text">
-                <string>Create Account</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+            </spacer>
            </item>
            <item>
-            <widget class="QPushButton" name="quit">
+            <widget class="QLabel" name="label_9">
              <property name="text">
-              <string>Quit</string>
+              <string>UserName</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </widget>
-         <widget class="QListWidget" name="confList">
-          <property name="geometry">
-           <rect>
-            <x>60</x>
-            <y>40</y>
-            <width>191</width>
-            <height>491</height>
-           </rect>
-          </property>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="infoTabAuthor">
-         <attribute name="title">
-          <string>Info</string>
-         </attribute>
-         <widget class="QWidget" name="verticalLayoutWidget">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>10</y>
-            <width>233</width>
-            <height>551</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_2">
-             <item>
-              <widget class="QLabel" name="username">
-               <property name="text">
-                <string>USERNAME</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="userid">
-               <property name="text">
-                <string>USERID</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
-           </item>
            <item>
-            <widget class="QLineEdit" name="name">
-             <property name="text">
-              <string>NAME</string>
-             </property>
-            </widget>
+            <widget class="QLineEdit" name="usernameLogin"/>
            </item>
            <item>
-            <widget class="QLineEdit" name="email">
-             <property name="text">
-              <string>EMAIL</string>
+            <spacer name="horizontalSpacer_5">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
              </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QLineEdit" name="organisation">
-             <property name="text">
-              <string>ORGANISATION</string>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
              </property>
-            </widget>
+            </spacer>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout">
            <item>
-            <widget class="QLineEdit" name="phone">
-             <property name="text">
-              <string>PHONE</string>
+            <spacer name="horizontalSpacer_2">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
              </property>
-            </widget>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
            </item>
            <item>
-            <widget class="QLabel" name="label">
+            <widget class="QLabel" name="label_8">
              <property name="text">
-              <string>Keywords</string>
+              <string>Password</string>
              </property>
             </widget>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_21">
-             <item>
-              <widget class="QListWidget" name="authKeyList"/>
-             </item>
-             <item>
-              <layout class="QVBoxLayout" name="verticalLayout_15">
-               <item>
-                <widget class="QLineEdit" name="authKeyEntry"/>
-               </item>
-               <item>
-                <widget class="QPushButton" name="addAuthKey">
-                 <property name="text">
-                  <string>Add Keyword</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QPushButton" name="rmvAuthKey">
-                 <property name="text">
-                  <string>Remove Keyword</string>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </item>
-            </layout>
+            <widget class="QLineEdit" name="passwordLogin"/>
            </item>
            <item>
-            <spacer name="verticalSpacer_8">
+            <spacer name="horizontalSpacer_3">
              <property name="orientation">
-              <enum>Qt::Vertical</enum>
+              <enum>Qt::Horizontal</enum>
              </property>
              <property name="sizeHint" stdset="0">
               <size>
-               <width>20</width>
-               <height>40</height>
+               <width>40</width>
+               <height>20</height>
               </size>
              </property>
             </spacer>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_10">
            <item>
-            <widget class="QPushButton" name="apply">
+            <widget class="QPushButton" name="login">
              <property name="text">
-              <string>Apply</string>
+              <string>Login to Conference</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QPushButton" name="logout">
+            <widget class="QPushButton" name="joinConf">
              <property name="text">
-              <string>Logout</string>
+              <string>Join Conference</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="verticalLayoutWidget_14">
-          <property name="geometry">
-           <rect>
-            <x>270</x>
-            <y>10</y>
-            <width>501</width>
-            <height>551</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_16">
-           <item>
-            <widget class="QLabel" name="conferenceName">
-             <property name="font">
-              <font>
-               <pointsize>16</pointsize>
-               <weight>75</weight>
-               <italic>true</italic>
-               <bold>true</bold>
-              </font>
-             </property>
+           <item>
+            <widget class="QPushButton" name="createAccount">
              <property name="text">
-              <string>CONFERENCENAME</string>
-             </property>
-             <property name="scaledContents">
-              <bool>false</bool>
+              <string>Create New Account</string>
              </property>
             </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QPushButton" name="quit">
+           <property name="text">
+            <string>Quit</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QListWidget" name="confList">
+        <property name="geometry">
+         <rect>
+          <x>60</x>
+          <y>40</y>
+          <width>191</width>
+          <height>491</height>
+         </rect>
+        </property>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="infoTabAuthor">
+       <attribute name="title">
+        <string>Info</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_2">
            <item>
-            <widget class="QLabel" name="confTopic">
+            <widget class="QLabel" name="username">
              <property name="text">
-              <string>CONFERENCETOPIC</string>
+              <string>USERNAME</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="confLocation">
+            <widget class="QLabel" name="userid">
              <property name="text">
-              <string>CONFERENCELOCATION</string>
+              <string>USERID</string>
              </property>
             </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_21">
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_22">
-             <item>
-              <widget class="QLabel" name="label_26">
-               <property name="text">
-                <string>Keywords</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QListWidget" name="confKeyListNoEdit"/>
-             </item>
-            </layout>
-           </item>
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_28">
-             <item>
-              <widget class="QLabel" name="label_47">
-               <property name="text">
-                <string>Submission</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_48">
-               <property name="text">
-                <string>Allocation</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_49">
-               <property name="text">
-                <string>Soft Review</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_50">
-               <property name="text">
-                <string>Hard Review</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_51">
-               <property name="text">
-                <string>Discussion</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+            <widget class="QListWidget" name="authKeyList"/>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_25">
-             <item>
-              <widget class="QLabel" name="subDate">
-               <property name="text">
-                <string>DATE</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="allocDate">
-               <property name="text">
-                <string>DATE</string>
-               </property>
-              </widget>
-             </item>
+            <layout class="QVBoxLayout" name="verticalLayout_15">
              <item>
-              <widget class="QLabel" name="sReviewDate">
-               <property name="text">
-                <string>DATE</string>
-               </property>
-              </widget>
+              <widget class="QLineEdit" name="authKeyEntry"/>
              </item>
              <item>
-              <widget class="QLabel" name="hReviewDate">
+              <widget class="QPushButton" name="addAuthKey">
                <property name="text">
-                <string>DATE</string>
+                <string>Add Keyword</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QLabel" name="discDate">
+              <widget class="QPushButton" name="rmvAuthKey">
                <property name="text">
-                <string>DATE</string>
+                <string>Remove Keyword</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
+          </layout>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_8">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="apply">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_14">
+        <property name="geometry">
+         <rect>
+          <x>270</x>
+          <y>10</y>
+          <width>501</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_16">
+         <item>
+          <widget class="QLabel" name="conferenceName">
+           <property name="font">
+            <font>
+             <pointsize>16</pointsize>
+             <weight>75</weight>
+             <italic>true</italic>
+             <bold>true</bold>
+            </font>
+           </property>
+           <property name="text">
+            <string>CONFERENCENAME</string>
+           </property>
+           <property name="scaledContents">
+            <bool>false</bool>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confTopic">
+           <property name="text">
+            <string>CONFERENCETOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confLocation">
+           <property name="text">
+            <string>CONFERENCELOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_22">
            <item>
-            <widget class="QTextBrowser" name="confDesc">
-             <property name="html">
-              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+            <widget class="QLabel" name="label_26">
+             <property name="text">
+              <string>Keywords</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="infoTabChair">
-         <attribute name="title">
-          <string>Information</string>
-         </attribute>
-         <widget class="QWidget" name="verticalLayoutWidget_3">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>10</y>
-            <width>233</width>
-            <height>551</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_3">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_3">
-             <item>
-              <widget class="QLabel" name="username_2">
-               <property name="text">
-                <string>USERNAME</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="userid_2">
-               <property name="text">
-                <string>USERID</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+           <item>
+            <widget class="QListWidget" name="confKeyListNoEdit"/>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_28">
            <item>
-            <widget class="QLineEdit" name="name_2">
+            <widget class="QLabel" name="label_47">
              <property name="text">
-              <string>NAME</string>
+              <string>Submission</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="email_2">
+            <widget class="QLabel" name="label_48">
              <property name="text">
-              <string>EMAIL</string>
+              <string>Allocation</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="organisation_2">
+            <widget class="QLabel" name="label_49">
              <property name="text">
-              <string>ORGANISATION</string>
+              <string>Soft Review</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="phone_2">
+            <widget class="QLabel" name="label_50">
              <property name="text">
-              <string>PHONE</string>
+              <string>Hard Review</string>
              </property>
             </widget>
            </item>
            <item>
-            <spacer name="verticalSpacer_9">
-             <property name="orientation">
-              <enum>Qt::Vertical</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>20</width>
-               <height>40</height>
-              </size>
+            <widget class="QLabel" name="label_51">
+             <property name="text">
+              <string>Discussion</string>
              </property>
-            </spacer>
+            </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_25">
            <item>
-            <widget class="QPushButton" name="applyChair">
+            <widget class="QLabel" name="subDate">
              <property name="text">
-              <string>Apply</string>
+              <string>DATE</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QPushButton" name="logout_2">
+            <widget class="QLabel" name="allocDate">
              <property name="text">
-              <string>Logout</string>
+              <string>DATE</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="verticalLayoutWidget_4">
-          <property name="geometry">
-           <rect>
-            <x>280</x>
-            <y>10</y>
-            <width>481</width>
-            <height>551</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_4">
-           <item>
-            <widget class="QLineEdit" name="confNameMng">
+           <item>
+            <widget class="QLabel" name="sReviewDate">
              <property name="text">
-              <string>CONFERENCE NAME</string>
+              <string>DATE</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="confTopicMng">
+            <widget class="QLabel" name="hReviewDate">
              <property name="text">
-              <string>CONFERENCE TOPIC</string>
+              <string>DATE</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="confLocMng">
+            <widget class="QLabel" name="discDate">
              <property name="text">
-              <string>CONFERENCE LOCATION</string>
+              <string>DATE</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QTextEdit" name="confDescMng">
-             <property name="html">
-              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+          </layout>
+         </item>
+         <item>
+          <widget class="QTextBrowser" name="confDesc">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="infoTabChair">
+       <attribute name="title">
+        <string>Information</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_3">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_3">
+           <item>
+            <widget class="QLabel" name="username_2">
+             <property name="text">
+              <string>USERNAME</string>
              </property>
             </widget>
            </item>
            <item>
-            <layout class="QVBoxLayout" name="verticalLayout_9">
-             <item>
-              <layout class="QHBoxLayout" name="horizontalLayout_26">
-               <item>
-                <widget class="QLabel" name="label_44">
-                 <property name="text">
-                  <string>Submission</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QLabel" name="label_45">
-                 <property name="text">
-                  <string>Allocation</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QLabel" name="label_46">
-                 <property name="text">
-                  <string>Soft Review</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QLabel" name="label_43">
-                 <property name="text">
-                  <string>Hard Review</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QLabel" name="label_42">
-                 <property name="text">
-                  <string>Discussion</string>
-                 </property>
-                </widget>
-               </item>
-              </layout>
-             </item>
-             <item>
-              <layout class="QHBoxLayout" name="horizontalLayout_27">
-               <item>
-                <widget class="QDateEdit" name="subDateEdit"/>
-               </item>
-               <item>
-                <widget class="QDateEdit" name="allocDateEdit"/>
-               </item>
-               <item>
-                <widget class="QDateEdit" name="sReviewDateEdit"/>
-               </item>
-               <item>
-                <widget class="QDateEdit" name="hReviewDateEdit"/>
-               </item>
-               <item>
-                <widget class="QDateEdit" name="discDateEdit"/>
-               </item>
-              </layout>
-             </item>
-            </layout>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_25">
+            <widget class="QLabel" name="userid_2">
              <property name="text">
-              <string>Keywords</string>
+              <string>USERID</string>
              </property>
             </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name_2">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email_2">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation_2">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone_2">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_9">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="applyChair">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout_2">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>280</x>
+          <y>10</y>
+          <width>481</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_4">
+         <item>
+          <widget class="QLineEdit" name="confNameMng">
+           <property name="text">
+            <string>CONFERENCE NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="confTopicMng">
+           <property name="text">
+            <string>CONFERENCE TOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="confLocMng">
+           <property name="text">
+            <string>CONFERENCE LOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QTextEdit" name="confDescMng">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QVBoxLayout" name="verticalLayout_9">
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_20">
+            <layout class="QHBoxLayout" name="horizontalLayout_26">
              <item>
-              <widget class="QListWidget" name="confKeyList"/>
+              <widget class="QLabel" name="label_44">
+               <property name="text">
+                <string>Submission</string>
+               </property>
+              </widget>
              </item>
              <item>
-              <layout class="QVBoxLayout" name="verticalLayout_11">
-               <item>
-                <widget class="QLineEdit" name="confKeyEntry"/>
-               </item>
-               <item>
-                <widget class="QPushButton" name="addConfKey">
-                 <property name="text">
-                  <string>Add Keyword</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QPushButton" name="rmvConfKey">
-                 <property name="text">
-                  <string>Remove Keyword</string>
-                 </property>
-                </widget>
-               </item>
-              </layout>
+              <widget class="QLabel" name="label_45">
+               <property name="text">
+                <string>Allocation</string>
+               </property>
+              </widget>
              </item>
-            </layout>
-           </item>
-          </layout>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="authorTab">
-         <attribute name="title">
-          <string>Author</string>
-         </attribute>
-         <widget class="QWidget" name="gridLayoutWidget_3">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>10</y>
-            <width>741</width>
-            <height>531</height>
-           </rect>
-          </property>
-          <layout class="QGridLayout" name="gridLayout_3">
-           <item row="2" column="0">
-            <layout class="QVBoxLayout" name="verticalLayout_8">
              <item>
-              <widget class="QTableWidget" name="authorsTable">
-               <column>
-                <property name="text">
-                 <string>Name</string>
-                </property>
-               </column>
-               <column>
-                <property name="text">
-                 <string>Email</string>
-                </property>
-               </column>
-               <column>
-                <property name="text">
-                 <string>Org</string>
-                </property>
-               </column>
-               <column>
-                <property name="text">
-                 <string>Phone</string>
-                </property>
-               </column>
+              <widget class="QLabel" name="label_46">
+               <property name="text">
+                <string>Soft Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_43">
+               <property name="text">
+                <string>Hard Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_42">
+               <property name="text">
+                <string>Discussion</string>
+               </property>
               </widget>
              </item>
             </layout>
            </item>
-           <item row="1" column="1">
-            <widget class="QComboBox" name="selectMainKey"/>
-           </item>
-           <item row="1" column="0">
-            <widget class="QComboBox" name="selectPaperAuthor">
-             <property name="editable">
-              <bool>true</bool>
-             </property>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_27">
              <item>
-              <property name="text">
-               <string>*NEW*</string>
-              </property>
+              <widget class="QDateEdit" name="subDateEdit"/>
              </item>
-            </widget>
-           </item>
-           <item row="5" column="1">
-            <widget class="QTextEdit" name="paperAbstract">
-             <property name="html">
-              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-             </property>
-            </widget>
-           </item>
-           <item row="2" column="1">
-            <layout class="QVBoxLayout" name="verticalLayout_14">
              <item>
-              <layout class="QHBoxLayout" name="horizontalLayout_4">
-               <item>
-                <widget class="QLineEdit" name="paperKeyEntry"/>
-               </item>
-               <item>
-                <widget class="QPushButton" name="addPaperKey">
-                 <property name="text">
-                  <string>Add Key</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QPushButton" name="rmvPaperKey">
-                 <property name="text">
-                  <string>Remove Key</string>
-                 </property>
-                </widget>
-               </item>
-              </layout>
+              <widget class="QDateEdit" name="allocDateEdit"/>
              </item>
              <item>
-              <widget class="QListWidget" name="paperKeyListAuth"/>
+              <widget class="QDateEdit" name="sReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="hReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="discDateEdit"/>
              </item>
             </layout>
            </item>
-           <item row="5" column="0">
-            <layout class="QVBoxLayout" name="verticalLayout_10">
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_25">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_20">
+           <item>
+            <widget class="QListWidget" name="confKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_11">
              <item>
-              <widget class="QPushButton" name="addAuthor">
-               <property name="text">
-                <string>Add Author</string>
-               </property>
-              </widget>
+              <widget class="QLineEdit" name="confKeyEntry"/>
              </item>
              <item>
-              <widget class="QPushButton" name="rmvAuthor">
+              <widget class="QPushButton" name="addConfKey">
                <property name="text">
-                <string>Remove Author</string>
+                <string>Add Keyword</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QLabel" name="label_32">
+              <widget class="QPushButton" name="rmvConfKey">
                <property name="text">
-                <string>Rebuttal</string>
+                <string>Remove Keyword</string>
                </property>
               </widget>
              </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="authorTab">
+       <attribute name="title">
+        <string>Author</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_3">
+         <item row="2" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_8">
+           <item>
+            <widget class="QTableWidget" name="authorsTable">
+             <column>
+              <property name="text">
+               <string>Name</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Email</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Org</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Phone</string>
+              </property>
+             </column>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item row="1" column="1">
+          <widget class="QComboBox" name="selectMainKey"/>
+         </item>
+         <item row="1" column="0">
+          <widget class="QComboBox" name="selectPaperAuthor">
+           <property name="editable">
+            <bool>true</bool>
+           </property>
+           <item>
+            <property name="text">
+             <string>*NEW*</string>
+            </property>
+           </item>
+          </widget>
+         </item>
+         <item row="5" column="1">
+          <widget class="QTextEdit" name="paperAbstract">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <layout class="QVBoxLayout" name="verticalLayout_14">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_4">
              <item>
-              <widget class="QTextEdit" name="rebuttalEntry"/>
+              <widget class="QLineEdit" name="paperKeyEntry"/>
              </item>
              <item>
-              <widget class="QPushButton" name="selectFile">
+              <widget class="QPushButton" name="addPaperKey">
                <property name="text">
-                <string>Select File</string>
+                <string>Add Key</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QPushButton" name="submit">
+              <widget class="QPushButton" name="rmvPaperKey">
                <property name="text">
-                <string>Submit</string>
+                <string>Remove Key</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
+           <item>
+            <widget class="QListWidget" name="paperKeyListAuth"/>
+           </item>
           </layout>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="reviewerTab">
-         <attribute name="title">
-          <string>Reviewer</string>
-         </attribute>
-         <widget class="QWidget" name="gridLayoutWidget_4">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>200</y>
-            <width>741</width>
-            <height>351</height>
-           </rect>
-          </property>
-          <layout class="QGridLayout" name="gridLayout_4">
-           <item row="0" column="0">
-            <widget class="QLabel" name="discussionLabel_2">
+         </item>
+         <item row="5" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_10">
+           <item>
+            <widget class="QPushButton" name="addAuthor">
              <property name="text">
-              <string>Discussion</string>
+              <string>Add Author</string>
              </property>
             </widget>
            </item>
-           <item row="2" column="1">
-            <widget class="QPushButton" name="submitPosts">
+           <item>
+            <widget class="QPushButton" name="rmvAuthor">
              <property name="text">
-              <string>Submit Post</string>
+              <string>Remove Author</string>
              </property>
             </widget>
            </item>
-           <item row="1" column="1">
-            <widget class="QTextEdit" name="postBody">
-             <property name="html">
-              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-             </property>
-            </widget>
-           </item>
-           <item row="1" column="0">
-            <widget class="QTextBrowser" name="discussionBodyReviewer">
-             <property name="html">
-              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-             </property>
-            </widget>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="horizontalLayoutWidget">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>160</y>
-            <width>741</width>
-            <height>31</height>
-           </rect>
-          </property>
-          <layout class="QHBoxLayout" name="horizontalLayout_5">
-           <item>
-            <spacer name="horizontalSpacer">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-             <property name="sizeType">
-              <enum>QSizePolicy::Ignored</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>40</width>
-               <height>20</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
            <item>
-            <widget class="QLabel" name="bidlabel">
+            <widget class="QLabel" name="label_32">
              <property name="text">
-              <string>Bid:</string>
+              <string>Rebuttal</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QComboBox" name="selectBid"/>
+            <widget class="QTextEdit" name="rebuttalEntry"/>
            </item>
            <item>
-            <widget class="QPushButton" name="submitBid">
+            <widget class="QPushButton" name="selectFile">
              <property name="text">
-              <string>Submit Bid</string>
+              <string>Select File</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="gridLayoutWidget_5">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>10</y>
-            <width>741</width>
-            <height>151</height>
-           </rect>
-          </property>
-          <layout class="QGridLayout" name="gridLayout_5">
-           <item row="1" column="2">
-            <widget class="QTextBrowser" name="paperAbstractReviewer"/>
-           </item>
-           <item row="1" column="3">
-            <widget class="QListWidget" name="paperKeyListReviewer"/>
-           </item>
-           <item row="0" column="3">
-            <widget class="QLabel" name="mainKeyReviewer">
-             <property name="text">
-              <string>MAINKEY</string>
-             </property>
-            </widget>
-           </item>
-           <item row="0" column="2">
-            <widget class="QComboBox" name="selectPaperReviewer"/>
-           </item>
-           <item row="2" column="3">
-            <widget class="QPushButton" name="downloadReviewer">
+           <item>
+            <widget class="QPushButton" name="submit">
              <property name="text">
-              <string>Download</string>
+              <string>Submit</string>
              </property>
             </widget>
            </item>
           </layout>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="papersTab">
-         <attribute name="title">
-          <string>Paper Management</string>
-         </attribute>
-         <widget class="QTableWidget" name="papersTable">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>20</y>
-            <width>211</width>
-            <height>531</height>
-           </rect>
-          </property>
-          <column>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewerTab">
+       <attribute name="title">
+        <string>Reviewer</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>200</y>
+          <width>741</width>
+          <height>351</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_4">
+         <item row="0" column="0">
+          <widget class="QLabel" name="discussionLabel_2">
            <property name="text">
-            <string>Title</string>
+            <string>Discussion</string>
            </property>
-          </column>
-          <column>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="submitPosts">
            <property name="text">
-            <string notr="true">id</string>
+            <string>Submit Post</string>
            </property>
-           <property name="toolTip">
-            <string notr="true"/>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QTextEdit" name="postBody">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
-          </column>
-         </widget>
-         <widget class="QWidget" name="gridLayoutWidget_6">
-          <property name="geometry">
-           <rect>
-            <x>250</x>
-            <y>20</y>
-            <width>511</width>
-            <height>171</height>
-           </rect>
-          </property>
-          <layout class="QGridLayout" name="gridLayout_6">
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="discussionBodyReviewer">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="horizontalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>160</y>
+          <width>741</width>
+          <height>31</height>
+         </rect>
+        </property>
+        <layout class="QHBoxLayout" name="horizontalLayout_5">
+         <item>
+          <spacer name="horizontalSpacer">
+           <property name="orientation">
+            <enum>Qt::Horizontal</enum>
+           </property>
+           <property name="sizeType">
+            <enum>QSizePolicy::Ignored</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>40</width>
+             <height>20</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QLabel" name="bidlabel">
+           <property name="text">
+            <string>Bid:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QComboBox" name="selectBid"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="submitBid">
+           <property name="text">
+            <string>Submit Bid</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>151</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_5">
+         <item row="1" column="2">
+          <widget class="QTextBrowser" name="paperAbstractReviewer"/>
+         </item>
+         <item row="1" column="3">
+          <widget class="QListWidget" name="paperKeyListReviewer"/>
+         </item>
+         <item row="0" column="3">
+          <widget class="QLabel" name="mainKeyReviewer">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="2">
+          <widget class="QComboBox" name="selectPaperReviewer"/>
+         </item>
+         <item row="2" column="3">
+          <widget class="QPushButton" name="downloadReviewer">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="papersTab">
+       <attribute name="title">
+        <string>Paper Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="papersTable">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>20</y>
+          <width>211</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Title</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string notr="true">id</string>
+         </property>
+         <property name="toolTip">
+          <string notr="true"/>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>20</y>
+          <width>511</width>
+          <height>171</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_6">
+         <item row="0" column="0">
+          <widget class="QLabel" name="paperNameMng">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="downloadChair">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="mainKeyMng">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTableWidget" name="authorsTableMng">
+           <column>
+            <property name="text">
+             <string>Name</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Email</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Org</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Phone</string>
+            </property>
+           </column>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListMng"/>
+         </item>
+         <item row="2" column="0">
+          <widget class="QTextBrowser" name="paperAbstractMng"/>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_11">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>190</y>
+          <width>511</width>
+          <height>361</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_12">
+         <item>
+          <layout class="QGridLayout" name="gridLayout_7">
            <item row="0" column="0">
-            <widget class="QLabel" name="paperNameMng">
+            <widget class="QLabel" name="discussionLabel_3">
              <property name="text">
-              <string>PAPERNAME</string>
+              <string>Discussion</string>
              </property>
             </widget>
            </item>
-           <item row="2" column="1">
-            <widget class="QPushButton" name="downloadChair">
-             <property name="text">
-              <string>Download</string>
+           <item row="1" column="0">
+            <widget class="QTextBrowser" name="discussionBodyMng">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
              </property>
             </widget>
            </item>
+           <item row="1" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_5">
+             <item>
+              <widget class="QTableWidget" name="reviewersTable">
+               <column>
+                <property name="text">
+                 <string>Name</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Email</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Org</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Phone</string>
+                </property>
+               </column>
+              </widget>
+             </item>
+             <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_9">
+               <item>
+                <widget class="QLabel" name="label_5">
+                 <property name="text">
+                  <string>User:</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLineEdit" name="toReview_2"/>
+               </item>
+               <item>
+                <widget class="QPushButton" name="addAsReviewer_2">
+                 <property name="text">
+                  <string>Add as Reviewer</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
+           </item>
            <item row="0" column="1">
-            <widget class="QLabel" name="mainKeyMng">
+            <widget class="QLabel" name="label_6">
              <property name="text">
-              <string>MAINKEY</string>
+              <string>Reviewers</string>
              </property>
             </widget>
            </item>
-           <item row="1" column="0">
-            <widget class="QTableWidget" name="authorsTableMng">
-             <column>
-              <property name="text">
-               <string>Name</string>
-              </property>
-             </column>
-             <column>
-              <property name="text">
-               <string>Email</string>
-              </property>
-             </column>
-             <column>
-              <property name="text">
-               <string>Org</string>
-              </property>
-             </column>
-             <column>
-              <property name="text">
-               <string>Phone</string>
-              </property>
-             </column>
-            </widget>
-           </item>
-           <item row="1" column="1">
-            <widget class="QListWidget" name="paperKeyListMng"/>
+           <item row="2" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_13">
+             <item>
+              <widget class="QLabel" name="label_41">
+               <property name="text">
+                <string>Comments</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QTextBrowser" name="commentsBrowser"/>
+             </item>
+            </layout>
            </item>
            <item row="2" column="0">
-            <widget class="QTextBrowser" name="paperAbstractMng"/>
-           </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="verticalLayoutWidget_11">
-          <property name="geometry">
-           <rect>
-            <x>250</x>
-            <y>190</y>
-            <width>511</width>
-            <height>361</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_12">
-           <item>
-            <layout class="QGridLayout" name="gridLayout_7">
+            <layout class="QFormLayout" name="formLayout">
+             <property name="fieldGrowthPolicy">
+              <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+             </property>
              <item row="0" column="0">
-              <widget class="QLabel" name="discussionLabel_3">
+              <widget class="QLabel" name="label_24">
                <property name="text">
-                <string>Discussion</string>
+                <string>Overall</string>
+               </property>
+              </widget>
+             </item>
+             <item row="0" column="1">
+              <widget class="QLabel" name="overallScore">
+               <property name="text">
+                <string>-</string>
                </property>
               </widget>
              </item>
              <item row="1" column="0">
-              <widget class="QTextBrowser" name="discussionBodyMng">
-               <property name="html">
-                <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+              <widget class="QLabel" name="label_27">
+               <property name="text">
+                <string>Confidence</string>
                </property>
               </widget>
              </item>
              <item row="1" column="1">
-              <layout class="QVBoxLayout" name="verticalLayout_5">
-               <item>
-                <widget class="QTableWidget" name="reviewersTable">
-                 <column>
-                  <property name="text">
-                   <string>Name</string>
-                  </property>
-                 </column>
-                 <column>
-                  <property name="text">
-                   <string>Email</string>
-                  </property>
-                 </column>
-                 <column>
-                  <property name="text">
-                   <string>Org</string>
-                  </property>
-                 </column>
-                 <column>
-                  <property name="text">
-                   <string>Phone</string>
-                  </property>
-                 </column>
-                </widget>
-               </item>
-               <item>
-                <layout class="QHBoxLayout" name="horizontalLayout_9">
-                 <item>
-                  <widget class="QLabel" name="label_5">
-                   <property name="text">
-                    <string>User:</string>
-                   </property>
-                  </widget>
-                 </item>
-                 <item>
-                  <widget class="QLineEdit" name="toReview_2"/>
-                 </item>
-                 <item>
-                  <widget class="QPushButton" name="addAsReviewer_2">
-                   <property name="text">
-                    <string>Add as Reviewer</string>
-                   </property>
-                  </widget>
-                 </item>
-                </layout>
-               </item>
-              </layout>
+              <widget class="QLabel" name="confidenceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
              </item>
-             <item row="0" column="1">
-              <widget class="QLabel" name="label_6">
+             <item row="2" column="0">
+              <widget class="QLabel" name="label_29">
                <property name="text">
-                <string>Reviewers</string>
+                <string>Relevance</string>
                </property>
               </widget>
              </item>
              <item row="2" column="1">
-              <layout class="QVBoxLayout" name="verticalLayout_13">
-               <item>
-                <widget class="QLabel" name="label_41">
-                 <property name="text">
-                  <string>Comments</string>
-                 </property>
-                </widget>
-               </item>
-               <item>
-                <widget class="QTextBrowser" name="commentsBrowser"/>
-               </item>
-              </layout>
+              <widget class="QLabel" name="relevanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
              </item>
-             <item row="2" column="0">
-              <layout class="QFormLayout" name="formLayout">
-               <property name="fieldGrowthPolicy">
-                <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+             <item row="3" column="0">
+              <widget class="QLabel" name="label_31">
+               <property name="text">
+                <string>Originality</string>
                </property>
-               <item row="0" column="0">
-                <widget class="QLabel" name="label_24">
-                 <property name="text">
-                  <string>Overall</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="0" column="1">
-                <widget class="QLabel" name="overallScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="0">
-                <widget class="QLabel" name="label_27">
-                 <property name="text">
-                  <string>Confidence</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="1" column="1">
-                <widget class="QLabel" name="confidenceScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="0">
-                <widget class="QLabel" name="label_29">
-                 <property name="text">
-                  <string>Relevance</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="2" column="1">
-                <widget class="QLabel" name="relevanceScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="3" column="0">
-                <widget class="QLabel" name="label_31">
-                 <property name="text">
-                  <string>Originality</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="3" column="1">
-                <widget class="QLabel" name="originalityScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="4" column="0">
-                <widget class="QLabel" name="label_33">
-                 <property name="text">
-                  <string>Significance</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="4" column="1">
-                <widget class="QLabel" name="significanceScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="5" column="0">
-                <widget class="QLabel" name="label_35">
-                 <property name="text">
-                  <string>Presentation</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="5" column="1">
-                <widget class="QLabel" name="presentationScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="6" column="0">
-                <widget class="QLabel" name="label_37">
-                 <property name="text">
-                  <string>Technical Quality</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="6" column="1">
-                <widget class="QLabel" name="techqualScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="7" column="0">
-                <widget class="QLabel" name="label_39">
-                 <property name="text">
-                  <string>Evaluation</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="7" column="1">
-                <widget class="QLabel" name="evaluationScore">
-                 <property name="text">
-                  <string>-</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="8" column="0">
-                <widget class="QPushButton" name="acceptPaper">
-                 <property name="text">
-                  <string>Accept Paper</string>
-                 </property>
-                </widget>
-               </item>
-               <item row="8" column="1">
-                <widget class="QPushButton" name="rejectPaper">
-                 <property name="text">
-                  <string>Reject Paper</string>
-                 </property>
-                </widget>
-               </item>
-              </layout>
+              </widget>
+             </item>
+             <item row="3" column="1">
+              <widget class="QLabel" name="originalityScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="0">
+              <widget class="QLabel" name="label_33">
+               <property name="text">
+                <string>Significance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="1">
+              <widget class="QLabel" name="significanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="0">
+              <widget class="QLabel" name="label_35">
+               <property name="text">
+                <string>Presentation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="1">
+              <widget class="QLabel" name="presentationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="0">
+              <widget class="QLabel" name="label_37">
+               <property name="text">
+                <string>Technical Quality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="1">
+              <widget class="QLabel" name="techqualScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="0">
+              <widget class="QLabel" name="label_39">
+               <property name="text">
+                <string>Evaluation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="1">
+              <widget class="QLabel" name="evaluationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="0">
+              <widget class="QPushButton" name="acceptPaper">
+               <property name="text">
+                <string>Accept Paper</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="1">
+              <widget class="QPushButton" name="rejectPaper">
+               <property name="text">
+                <string>Reject Paper</string>
+               </property>
+              </widget>
              </item>
             </layout>
            </item>
           </layout>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="usersTab">
-         <attribute name="title">
-          <string>User Management</string>
-         </attribute>
-         <widget class="QTableWidget" name="usersTable">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>10</y>
-            <width>311</width>
-            <height>531</height>
-           </rect>
-          </property>
-          <column>
-           <property name="text">
-            <string>Name</string>
-           </property>
-          </column>
-          <column>
-           <property name="text">
-            <string>User Name</string>
-           </property>
-          </column>
-          <column>
-           <property name="text">
-            <string>id</string>
-           </property>
-          </column>
-         </widget>
-         <widget class="QWidget" name="verticalLayoutWidget_6">
-          <property name="geometry">
-           <rect>
-            <x>370</x>
-            <y>10</y>
-            <width>291</width>
-            <height>321</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_6">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_8">
-             <item>
-              <widget class="QLabel" name="username_5">
-               <property name="text">
-                <string>USERNAME</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="userid_5">
-               <property name="text">
-                <string>USERID</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="usersTab">
+       <attribute name="title">
+        <string>User Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="usersTable">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>311</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>User Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>Type</string>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>10</y>
+          <width>291</width>
+          <height>321</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_6">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_8">
+           <item>
+            <widget class="QLabel" name="username_5">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_5">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="name_5">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="email_5">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="organisation_5">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="phone_5">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_10">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QListWidget" name="userKeyList"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="changeReviewer">
+           <property name="text">
+            <string>Add/Remove Reviewer</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_15">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>340</y>
+          <width>291</width>
+          <height>141</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_17">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_23">
+           <item>
+            <widget class="QLabel" name="label_30">
+             <property name="text">
+              <string>Authored Papers</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_28">
+             <property name="text">
+              <string>Assigned to Review</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_24">
+           <item>
+            <widget class="QListWidget" name="authoredPapers"/>
+           </item>
+           <item>
+            <widget class="QListWidget" name="assignedPapers"/>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>490</y>
+          <width>291</width>
+          <height>71</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_18">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_29">
+           <item>
+            <widget class="QLabel" name="label_3">
+             <property name="text">
+              <string>Words per Post</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <widget class="QLabel" name="name_5">
+            <widget class="QLabel" name="label_2">
              <property name="text">
-              <string>NAME</string>
+              <string>Reviewers per Paper</string>
              </property>
             </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_30">
            <item>
-            <widget class="QLabel" name="email_5">
+            <widget class="QLineEdit" name="wordsPerPost">
              <property name="text">
-              <string>EMAIL</string>
+              <string>100</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="organisation_5">
+            <widget class="QLineEdit" name="reviewersPerPaper">
              <property name="text">
-              <string>ORGANISATION</string>
+              <string>5</string>
              </property>
             </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QPushButton" name="updateConfSettings">
+           <property name="text">
+            <string>Update Conference Settings</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewTab">
+       <attribute name="title">
+        <string>Review</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_7">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>150</y>
+          <width>761</width>
+          <height>416</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_7">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_11">
            <item>
-            <widget class="QLabel" name="phone_5">
+            <widget class="QLabel" name="label_11">
              <property name="text">
-              <string>PHONE</string>
+              <string>Overall</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="label_10">
+            <widget class="QSpinBox" name="overall"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_12">
              <property name="text">
-              <string>Keywords</string>
+              <string>Confidence</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QListWidget" name="userKeyList"/>
+            <widget class="QSpinBox" name="confidence"/>
            </item>
           </layout>
-         </widget>
-         <widget class="QWidget" name="horizontalLayoutWidget_2">
-          <property name="geometry">
-           <rect>
-            <x>370</x>
-            <y>500</y>
-            <width>291</width>
-            <height>41</height>
-           </rect>
-          </property>
-          <layout class="QHBoxLayout" name="horizontalLayout_6">
-           <item>
-            <widget class="QLabel" name="label_4">
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_12">
+           <item>
+            <widget class="QLabel" name="label_13">
              <property name="text">
-              <string>Paper:</string>
+              <string>Relevance</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="toReview"/>
+            <widget class="QSpinBox" name="relevance"/>
            </item>
            <item>
-            <widget class="QPushButton" name="addAsReviewer">
+            <widget class="QLabel" name="label_14">
              <property name="text">
-              <string>Add to Review</string>
+              <string>Originality</string>
              </property>
             </widget>
            </item>
+           <item>
+            <widget class="QSpinBox" name="originality"/>
+           </item>
           </layout>
-         </widget>
-         <widget class="QWidget" name="verticalLayoutWidget_15">
-          <property name="geometry">
-           <rect>
-            <x>370</x>
-            <y>400</y>
-            <width>291</width>
-            <height>101</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_17">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_23">
-             <item>
-              <widget class="QLabel" name="label_30">
-               <property name="text">
-                <string>Authored Papers</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_28">
-               <property name="text">
-                <string>Assigned to Review</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_13">
+           <item>
+            <widget class="QLabel" name="label_15">
+             <property name="text">
+              <string>Significance</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_24">
-             <item>
-              <widget class="QListWidget" name="authoredPapers"/>
-             </item>
-             <item>
-              <widget class="QListWidget" name="assignedPapers"/>
-             </item>
-            </layout>
+            <widget class="QSpinBox" name="significance"/>
            </item>
-          </layout>
-         </widget>
-         <widget class="QWidget" name="verticalLayoutWidget_5">
-          <property name="geometry">
-           <rect>
-            <x>370</x>
-            <y>340</y>
-            <width>291</width>
-            <height>51</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_18">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_29">
-             <item>
-              <widget class="QLabel" name="label_3">
-               <property name="text">
-                <string>Words per Post</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_2">
-               <property name="text">
-                <string>Reviewers per Paper</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+           <item>
+            <widget class="QLabel" name="label_16">
+             <property name="text">
+              <string>Presentation</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_30">
-             <item>
-              <widget class="QLineEdit" name="lineEdit_5"/>
-             </item>
-             <item>
-              <widget class="QLineEdit" name="lineEdit_4"/>
-             </item>
-            </layout>
+            <widget class="QSpinBox" name="presentation"/>
            </item>
           </layout>
-         </widget>
-        </widget>
-        <widget class="QWidget" name="reviewTab">
-         <attribute name="title">
-          <string>Review</string>
-         </attribute>
-         <widget class="QWidget" name="verticalLayoutWidget_7">
-          <property name="geometry">
-           <rect>
-            <x>10</x>
-            <y>150</y>
-            <width>761</width>
-            <height>416</height>
-           </rect>
-          </property>
-          <layout class="QVBoxLayout" name="verticalLayout_7">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_11">
-             <item>
-              <widget class="QLabel" name="label_11">
-               <property name="text">
-                <string>Overall</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="overall"/>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_12">
-               <property name="text">
-                <string>Confidence</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="confidence"/>
-             </item>
-            </layout>
-           </item>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_14">
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_12">
-             <item>
-              <widget class="QLabel" name="label_13">
-               <property name="text">
-                <string>Relevance</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="relevance"/>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_14">
-               <property name="text">
-                <string>Originality</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="originality"/>
-             </item>
-            </layout>
+            <widget class="QLabel" name="label_17">
+             <property name="text">
+              <string>Technical Quality</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_13">
-             <item>
-              <widget class="QLabel" name="label_15">
-               <property name="text">
-                <string>Significance</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="significance"/>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_16">
-               <property name="text">
-                <string>Presentation</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="presentation"/>
-             </item>
-            </layout>
+            <widget class="QSpinBox" name="techQuality"/>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_14">
-             <item>
-              <widget class="QLabel" name="label_17">
-               <property name="text">
-                <string>Technical Quality</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="techQuality"/>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_18">
-               <property name="text">
-                <string>Evaluation</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QSpinBox" name="evaluation"/>
-             </item>
-            </layout>
+            <widget class="QLabel" name="label_18">
+             <property name="text">
+              <string>Evaluation</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_15">
-             <item>
-              <widget class="QLabel" name="label_19">
-               <property name="text">
-                <string>Strengths of the paper</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_20">
-               <property name="text">
-                <string>Weaknesses of the paper</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+            <widget class="QSpinBox" name="evaluation"/>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_15">
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_16">
-             <item>
-              <widget class="QTextEdit" name="commentsStrengths"/>
-             </item>
-             <item>
-              <widget class="QTextEdit" name="commentsWeaknesses"/>
-             </item>
-            </layout>
+            <widget class="QLabel" name="label_19">
+             <property name="text">
+              <string>Strengths of the paper</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_17">
-             <item>
-              <widget class="QLabel" name="label_21">
-               <property name="text">
-                <string>Would this paper be suitable as a short paper?</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QLabel" name="label_22">
-               <property name="text">
-                <string>Should this paper be considered for a best paper award?</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+            <widget class="QLabel" name="label_20">
+             <property name="text">
+              <string>Weaknesses of the paper</string>
+             </property>
+            </widget>
            </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_16">
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_18">
-             <item>
-              <widget class="QTextEdit" name="commentsShortPaper"/>
-             </item>
-             <item>
-              <widget class="QTextEdit" name="commentsBestAward"/>
-             </item>
-            </layout>
+            <widget class="QTextEdit" name="commentsStrengths"/>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_19">
-             <item>
-              <widget class="QLabel" name="label_23">
-               <property name="text">
-                <string>Detailed comments and suggestions</string>
-               </property>
-              </widget>
-             </item>
-             <item>
-              <widget class="QTextEdit" name="commentsSuggestions">
-               <property name="html">
-                <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-               </property>
-              </widget>
-             </item>
-            </layout>
+            <widget class="QTextEdit" name="commentsWeaknesses"/>
            </item>
           </layout>
-         </widget>
-         <widget class="QWidget" name="gridLayoutWidget">
-          <property name="geometry">
-           <rect>
-            <x>10</x>
-            <y>20</y>
-            <width>761</width>
-            <height>130</height>
-           </rect>
-          </property>
-          <layout class="QGridLayout" name="gridLayout">
-           <item row="0" column="0">
-            <widget class="QComboBox" name="selectPaperReview"/>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_17">
+           <item>
+            <widget class="QLabel" name="label_21">
+             <property name="text">
+              <string>Would this paper be suitable as a short paper?</string>
+             </property>
+            </widget>
            </item>
-           <item row="1" column="1">
-            <widget class="QListWidget" name="paperKeyListReview"/>
+           <item>
+            <widget class="QLabel" name="label_22">
+             <property name="text">
+              <string>Should this paper be considered for a best paper award?</string>
+             </property>
+            </widget>
            </item>
-           <item row="1" column="0">
-            <widget class="QTextBrowser" name="paperAbstractReview"/>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_18">
+           <item>
+            <widget class="QTextEdit" name="commentsShortPaper"/>
            </item>
-           <item row="0" column="1">
-            <widget class="QLabel" name="mainKey">
+           <item>
+            <widget class="QTextEdit" name="commentsBestAward"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_19">
+           <item>
+            <widget class="QLabel" name="label_23">
              <property name="text">
-              <string>MAINKEY</string>
+              <string>Detailed comments and suggestions</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsSuggestions">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
              </property>
             </widget>
            </item>
           </layout>
-         </widget>
-         <widget class="QPushButton" name="submitReview">
-          <property name="geometry">
-           <rect>
-            <x>20</x>
-            <y>550</y>
-            <width>75</width>
-            <height>23</height>
-           </rect>
-          </property>
-          <property name="text">
-           <string>Submit</string>
-          </property>
-         </widget>
-        </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>20</y>
+          <width>761</width>
+          <height>130</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout">
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReview"/>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListReview"/>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="paperAbstractReview"/>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="mainKey">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QPushButton" name="submitReview">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>550</y>
+          <width>75</width>
+          <height>23</height>
+         </rect>
+        </property>
+        <property name="text">
+         <string>Submit</string>
+        </property>
        </widget>
       </widget>
      </widget>

commit d7d91fe97ef95668f79d34aed1d6071b684cb360
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 23:27:41 2014 +1100

    Update queries.txt

diff --git a/queries.txt b/queries.txt
index 6d8e96c..cdc460f 100644
--- a/queries.txt
+++ b/queries.txt
@@ -10,3 +10,27 @@ return vector of users
   get users for a given paper id that they are allocated to review
   essentially the above function but in reverse
 for PCChairs seeing people allocated to review a paper
+
+
+
+
+changes to make
+---------------
+
+
+db->fetchUser
+	to take 2 inputs (username, confname)
+	get user's userType for that conf
+	sets userType for User
+
+describe algo in report!!!!!!!!!
+
+db needs call
+	inputs confname (or confID, don't implement both)
+	returns vector of paper summeries for every paper in that conferences
+
+put pdf into database as std::string
+
+add userType to UserTypeTable in database
+	already there db->setUserAs...
+

commit b3635eef083b4d1dc25ca15386dedae8771a8fd1
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Tue Oct 28 23:27:08 2014 +1100

    main-admin.cpp createdgit status

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index b8b64c9..9ef8ff8 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -74,21 +74,21 @@ struct Conference {
 
 // Conference ID not known
     Conference(
-    bool iisActive,
+    const bool iisActive,
     std::string& ititle,
     std::string& itopic,
     std::string& idescription,
     std::string& ilocation,
     std::vector<std::string>& ikeywords,
-    bool iisBeforePaperDeadline,
+    const bool iisBeforePaperDeadline,
     Date& ipaperDeadline,
-    bool iisBeforeAllocationDate,
+    const bool iisBeforeAllocationDate,
     Date& iallocationDate,
-    bool iisBeforeSoftReviewDeadline,
+    const bool iisBeforeSoftReviewDeadline,
     Date& ireviewDeadlineSoft,
-    bool iisBeforeHardReviewDeadline,
+    const bool iisBeforeHardReviewDeadline,
     Date& ireviewDeadlineHard,
-    bool iisBeforeDiscussDeadline,
+    const bool iisBeforeDiscussDeadline,
     Date& idiscussDeadline,
     int ireviewersPerPaper,
     int ipostWordLimit)
diff --git a/Database/Database.cpp b/Database/Database.cpp
index 1e40cb3..49b57ae 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -61,7 +61,7 @@ void Database::close()
         invalid = true;
 }
 
-User Database::fetchUser(std::string key) throw (const char*)
+User Database::fetchUser(std::string key, std::string confName) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -70,6 +70,7 @@ User Database::fetchUser(std::string key) throw (const char*)
 	const char* getUser = "SELECT * FROM UserAccount WHERE username=?";
 	const char* getPersonalInfo = "SELECT * FROM PersonalInfo WHERE userID=?";
 	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
+        const char* getUserType = "SELECT userType FROM UserType WHERE (userID=? and confID=(SELECT confID FROM Conference where name=?))";
 
         // =======================================
         // user account
@@ -130,6 +131,30 @@ User Database::fetchUser(std::string key) throw (const char*)
                 vec.push_back(expertise);
         }
 
+        // =======================================
+        // user type 
+        UserType_t userType = AUTHOR;
+        
+	pstmt = dbcon->prepareStatement(getUserType);
+        pstmt->setString(1, key);
+	pstmt->setString(1, confName);
+
+	rs = pstmt->executeQuery();
+	haveRecord = rs->next();
+	if (haveRecord)
+	{
+            int e = rs->getInt(1);
+            if (e = 1)
+                userType = AUTHOR;
+            else if (e = 2)
+                userType = REVIEWER;
+            else if (e = 3)
+                userType = PCCHAIR;
+	}
+
+        delete rs;
+        delete pstmt;
+
         User user(
 		username,
 		name,
@@ -138,7 +163,8 @@ User Database::fetchUser(std::string key) throw (const char*)
 		phone,
 		password,
 		userID,
-		vec);
+		vec,
+                userType);
 
         delete rs;
         delete pstmt;
@@ -490,13 +516,13 @@ void Database::addKeyword(std::string key) throw (const char*)
         delete pstmt;
 }
 
-Conference Database::fetchConference(int key) throw (const char*)
+Conference Database::fetchConference(std::string key) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
 
 	// Add information on user from database to User object
-	const char* getConference = "SELECT * FROM Conference WHERE confID=?";
+	const char* getConference = "SELECT * FROM Conference WHERE name=?";
 	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords WHERE confID=?)";
 
         // =======================================
@@ -505,7 +531,7 @@ Conference Database::fetchConference(int key) throw (const char*)
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getConference);
-	pstmt->setInt(1, key);
+	pstmt->setString(1, key);
 
 	rs = pstmt->executeQuery();
 	bool haveRecord = rs->next();
@@ -558,7 +584,7 @@ Conference Database::fetchConference(int key) throw (const char*)
         std::vector<std::string> vec;
 	
 	pstmt = dbcon->prepareStatement(getConfKeywords);
-	pstmt->setInt(1, key);
+	pstmt->setInt(1, confID);
 	rs = pstmt->executeQuery();
 
         while (rs->next()) {
@@ -942,12 +968,12 @@ PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
 	return papSum;
 }
 
-std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int authorID) throw (const char*)
+std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int leadAuthorID) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
 
-	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and paperID IN (SELECT paperID FROM paperAuthors WHERE authorID=?))";
+	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and leadAuthorID=?)";
 
         // =======================================
         // Paper Summary 
@@ -957,7 +983,7 @@ std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int autho
 	
 	pstmt = dbcon->prepareStatement(getPaperSummary);
 	pstmt->setInt(1, confID);
-	pstmt->setInt(2, authorID);
+	pstmt->setInt(2, leadAuthorID);
 
 	rs = pstmt->executeQuery();
 
@@ -2021,220 +2047,52 @@ std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
 }
 
 
+void Database::adminChangeUserName(std::string currentUN, std::string newUN) throw (const char*)
+{
+	const char* getUserID = "SELECT userID FROM UserAccount WHERE username = ?";
+        const char* updateUserName = "UPDATE UserAccount SET username = ? WHERE userID=?";
 
-//
-//std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//        // Laboured
-//        // First get a list of the ids with the role, then one by one get the
-//        // complete records.
-//        const char* getrolepersons = "selects personid from roles WHERE _role=?";
-//
-//        sql::PreparedStatement *pstmt = NULL;
-//        sql::ResultSet * rs = NULL;
-//
-//        pstmt = dbcon->prepareStatement(getrolepersons);
-//        pstmt->setString(1, role);
-//        rs = pstmt->executeQuery();
-//
-//        bool haveRecord = rs->next();
-//        if (!haveRecord)
-//        {
-//                delete rs;
-//                delete pstmt;
-//                return NULL;
-//        }
-//
-//        std::vector<std::string> people;
-//
-//        // rc = sqlite3_step(stmt);
-//
-//        while (rs->next()) {
-//                std::string apersonid = std::string(rs->getString(1));
-////              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
-//                people.push_back(apersonid);
-//        }
-//
-//        // Maybe there weren't any
-//        if (people.size() == 0)
-//                return NULL;
-//
-//        // Build collection by getting each record
-//        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-//
-//        std::vector<std::string>::const_iterator it;
-//        for (it = people.begin(); it != people.end(); it++) {
-//                std::string aperson = *it;
-//                MyRecord* rec = this->get(aperson.c_str());
-//                roleholders->push_back(rec);
-//        }
-//
-//        return roleholders;
-//}
-//
-
-//bool Database::deleteUser(int* key) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//        // explicitly delete subordinate records in Phones, Address, others and Roles
-//        // then delete the myrecord entry
-//        // recreating the prepared statements for each operation - costly
-//        const char* deletephones = "delete from phones WHERE personid=?";
-//        const char* deleteaddress = "delete from addresses WHERE personid=?";
-//        const char* deleteother = "delete from other WHERE personid=?";
-//        const char* deleteroles = "delete from roles WHERE personid=?";
-//        const char* deletemyrecord = "delete from myrecord WHERE _id=?";
-//        const char* unused; // Pointer to unused part of sql string (?)
-//        sql::PreparedStatement *pstmt = NULL;
-//        // Phones
-//        pstmt = dbcon->prepareStatement(deletephones);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        // Addresses
-//        pstmt = dbcon->prepareStatement(deleteaddress);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        //Other
-//        pstmt = dbcon->prepareStatement(deleteother);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        // Roles
-//        pstmt = dbcon->prepareStatement(deleteroles);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        // Finally
-//        pstmt = dbcon->prepareStatement(deletemyrecord);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        return true;
-//}
-//
-//
-//MyRecord *Database::get(const char* key) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//        // Again laborious
-//        // Load the MyRecord from its table, then add data from Other tables.
-//        const char* getrecord = "select * from myrecord WHERE _id=?";
-//        const char* getroles = "select role from roles WHERE personid=?";
-//        const char* getphones = "select type, number from phones WHERE personid=?";
-//        const char* getaddress = "select type, address from addresses WHERE personid=?";
-//        const char* getother = "select key, valyue from other WHERE personid=?";
-//
-//        sql::PreparedStatement *pstmt = NULL;
-//        sql::ResultSet *rs = NULL;
-//
-//        pstmt = dbcon->prepareStatement(getrecord);
-//        pstmt->setString(1, key);
-//        rs = pstmt->executeQuery();
-//        bool haveRecord = rs->next();
-//        if (!haveRecord)
-//        {
-//                delete rs;
-//                delete pstmt;
-//                return NULL;
-//        }
-//
-//        std::string id = rs->getString(1);
-//        std::string name = rs->getString(2);
-//        std::string email = rs->getString(3);
-//        std::string info = rs->getString(4);
-//        std::string image = rs->getString(5);
-//
-//        MyRecord *arec = new MyRecord(id);
-//        arec->setName(name);
-//        arec->setEmail(email);
-//        arec->setInfo(info);
-//        arec->setImage(image);
-//
-//        delete rs;
-//        delete pstmt;
-//        // =======================================
-//        // Now ask about roles
-//        pstmt = dbcon->prepareStatement(getroles);
-//        pstmt->setString(1, key);
-//        rs = pstmt->executeQuery();
-//        while (rs->next())
-//        {
-//                std::string arole = rs->getString(1);
-//                arec->addRole(arole);
-//        }
-//        delete rs;
-//        delete pstmt;
-//}
-//
-//void Database::recordToTables(const MyRecord* data)
-//{
-//        if (invalid)
-//                throw (noDB);
-//
-//        // Insert the myrecord data first, then deal with Other data tables
-//
-//        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
-//        const char* putrole = "insert into roles values(?, ?)";
-//        const char* putphone = "insert into phones values (?, ?, ?)";
-//        const char* putaddress = "insert into addresses values (?, ?, ?)";
-//        const char* putother = "insert into other values (?, ?, ?)";
-//
-//        sql::PreparedStatement *pstmt = NULL;
-//        pstmt = dbcon->prepareStatement(putmyrecord);
-//        pstmt->setString(1, data->getID());
-//        pstmt->setString(2, data->getName());
-//        pstmt->setString(3, data->getEmail());
-//        pstmt->setString(4, data->getInfo());
-//        pstmt->setString(5, data->getImage());
-//
-//        pstmt->executeUpdate();
-//
-//        delete pstmt;
-//
-//        // Role 
-////      if (data->getOtherKV().size() > 0)
-////      {
-////              pstmt = dbcon->prepareStatement(putother);
-////              std::map<std::string, std::string>::const_iterator it;
-////              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
-////              {
-////                      std::string akey = it->first;
-////                      std::string avalue = it->second;
-////                      pstmt->setString(1, data->getID());
-////                      pstmt->setString(2, akey);
-////                      pstmt->setString(3, avalue);
-////                      pstmt->executeUpdate();
-////              }
-////              delete pstmt;
-////
-////      }
-//
-////      // Other
-////      if (data->getOtherKV().size() > 0)
-////      {
-////              pstmt = dbcon->prepareStatement(putother);
-////              std::map<std::string, std::string>::const_iterator it;
-////              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-////              {
-////                      std::string akey = it->first;
-////                      std::string avalue = it->second;
-////                      pstmt->setString(1, data->getID());
-////                      pstmt->setString(2, akey);
-////                      pstmt->setString(3, avalue);
-////                      pstmt->executeUpdate();
-////              }
-////              delete pstmt;
-////
-////      }
-//}
+        // =======================================
+        // Store userID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+        pstmt->setString(1, currentUN);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Personal Info Update
+
+        pstmt = dbcon->prepareStatement(updateUserName);
+        pstmt->setString(1, newUN);
+        pstmt->setInt(2, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+}
+
+void Database::adminChangePassword(std::string username, std::string password) throw (const char*)
+{
+        const char* updatePassword = "UPDATE UserAccount SET password = ? WHERE username=?";
+
+        // =======================================
+        // Personal Info Update
+        sql::PreparedStatement *pstmt = NULL;
+
+        pstmt = dbcon->prepareStatement(updatePassword);
+        pstmt->setString(1, password);
+        pstmt->setString(1, username);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+}
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 7c3c135..77e23bb 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -24,9 +24,19 @@ public:
     ~Database();
     
     void close();
+    
+    // CREATE/UPDATE
+    void createUser(User user);
+    void updateUser(User user);
+    void createConf(Conference conf);
+    void updateConf(Conference conf);
+
+    // ADMIN
+    void adminChangeUserName(std::string currentUN, std::string newUN) throw (const char*);
+    void adminChangePassword(std::string username, std::string password) throw (const char*);
 
 	// USER
-	User fetchUser(std::string key) throw (const char*);
+	User fetchUser(std::string key, std::string confName) throw (const char*);
     bool existsUserName(std::string key) throw (const char*);
     void putUser(std::string key, User user) throw (const char*);
     std::vector<int> allUserIDs();
@@ -40,7 +50,7 @@ public:
 	void addKeyword(std::string key) throw (const char*);
 
 	// CONFERENCE
-	Conference fetchConference(int key) throw (const char*);
+	Conference fetchConference(std::string key) throw (const char*);
     bool existsConfName(std::string key) throw (const char*);
     void putConf(std::string key, Conference conf) throw (const char*);
     std::vector<int> allConfIDs();
@@ -50,7 +60,7 @@ public:
 
 	// PAPER
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
-    std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
+    std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int leadAuthorID) throw (const char*);
     Paper fetchPaper(int key) throw (const char*);
 	bool existsPaperTitleConf(Paper paper) throw (const char*);
     void createPaper(Paper paper, std::string pdf) throw (const char*);
@@ -112,13 +122,6 @@ private:
 
 //        void recordToTables(const MyRecord *data);
 
-// USER
-    void createUser(User user);
-    void updateUser(User user);
-
-// CONF
-    void createConf(Conference conf);
-    void updateConf(Conference conf);
 
 };
 #endif
diff --git a/main-admin.cpp b/main-admin.cpp
new file mode 100644
index 0000000..cfa1981
--- /dev/null
+++ b/main-admin.cpp
@@ -0,0 +1,556 @@
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "Database/Database.hpp"
+#include "Server/User.hpp"
+#include "DataAll/Conference.hpp"
+#include "DataAll/Paper.hpp"
+#include "Algorithm/Algo.hpp"
+
+#include <vector>
+
+void adminMainMenu();
+void createUser();
+void createConf();
+void changeUsername();
+void changePassword();
+void changeConf();
+
+Database db;
+
+int main(int arc, char *argv[])
+{
+    std::string AdminUsername = "";
+    std::string AdminPassword = "";
+    std::string AdminUsernameCheck = "admin";
+    std::string AdminPasswordCheck = "admin";
+
+    if (!db.isOK())
+    {
+            std::cout << "Failed to open database file" << std::endl;
+            exit(1);
+    }
+
+    std::cout << "Admin client" << std::endl << std::endl;
+
+    std::cout << "Enter Admin username: ";
+    std::cin >> AdminUsername;
+    
+    std::cout << std::endl << "Enter Admin password: ";
+    std::cin >> AdminPassword;
+
+    bool loginSuccess = false;
+    if (AdminUsername == AdminUsernameCheck)
+    {
+        if (AdminPassword == AdminPasswordCheck)
+            loginSuccess = true;
+    }
+    
+    if (loginSuccess)
+        adminMainMenu();
+
+    return 0;
+}
+
+void adminMainMenu()
+{
+    int selection = -1;
+    std::cout << std::endl << std::endl << "ADMIN MAIN MENU" << std::endl << std::endl;
+    
+    std::cout << "Please select option:" << std::endl;
+    std::cout << "1. Create User" << std::endl;
+    std::cout << "2. Create Conference" << std::endl;
+    std::cout << "3. Change a Users username" << std::endl;
+    std::cout << "4. Change a Users password" << std::endl;
+    std::cout << "5. Change a Conference details" << std::endl;
+    std::cout << "6. Quit" << std::endl;
+    std::cin >> selection;
+
+    if (selection == 1)
+    {
+        std::cout << "Create User selected" << std::endl;
+        createUser();
+    }
+    else if (selection == 2)
+    {
+        std::cout << "Create Conference selected" << std::endl;
+        createConf();
+    }
+    else if (selection == 3)
+    {
+        std::cout << "Change a Users username selected" << std::endl;
+        changeUsername();
+    }
+    else if (selection == 4)
+    {
+        std::cout << "Change a Users password selected" << std::endl;
+        changePassword();
+    }
+    else if (selection == 5)
+    {
+        std::cout << "Change a Conferences details selected" << std::endl;
+        changeConf();
+    }
+    else if (selection == 6)
+    {
+        std::cout << "Quit selected, Quitting..." << std::endl;
+        return;
+    }
+    else
+    {
+        std::cout << "Incorrect Input, Quitting..." << std::endl;
+        return;
+    }
+}
+
+void createUser()
+{
+    std::string username;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    std::vector<std::string> keywords;
+    UserType_t userType = AUTHOR;
+
+    std::cout << "Enter username: ";
+    std::cin >> username;
+    std::cout << "Enter password: ";
+    std::cin >> password;
+    std::cout << "Enter name: ";
+    std::cin >> name;
+    std::cout << "Enter email: ";
+    std::cin >> email;
+    std::cout << "Enter organisation: ";
+    std::cin >> organisation;
+    std::cout << "Enter phone: ";
+    std::cin >> phone;
+
+    int keywordsInput = 1;
+    while (keywordsInput == 1)
+    {
+        std::cout << "Select: " << std::endl;
+        std::cout << "1. Add keyword" << std::endl;
+        std::cout << "2. No more keywords" << std::endl;
+        std::cin >> keywordsInput;
+
+        if (keywordsInput == 1)
+        {
+            std::string keyword = "";
+            std::cout << "Keyword: ";
+            std::cin >> keyword;
+            keywords.push_back(keyword);
+        }
+    }
+
+    User user(
+	username,
+	name,
+	email,
+	organisation,
+	phone,
+	password,
+	keywords,
+        userType);
+
+    bool userExists = db.existsUserName(username);
+
+    std::cout << "User was ";
+    if (!userExists)
+    {
+        db.createUser(user);
+        std::cout << "created successfully" << std::endl;
+    }
+    else
+        std::cout << "not created" << std::endl;
+
+    adminMainMenu();
+}
+
+void createConf()
+{
+    bool active;
+    std::string title;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    int paperDeadlineD;
+    int paperDeadlineM;
+    int paperDeadlineY;
+    int allocationDateD;
+    int allocationDateM;
+    int allocationDateY;
+    int reviewDeadlineSoftD;
+    int reviewDeadlineSoftM;
+    int reviewDeadlineSoftY;
+    int reviewDeadlineHardD;
+    int reviewDeadlineHardM;
+    int reviewDeadlineHardY;
+    int discussionDeadlineD;
+    int discussionDeadlineM;
+    int discussionDeadlineY;
+    int reviewersPerPaper;
+    int postWordLimit;
+    bool beforeDate = true;
+
+    std::cout << "Is it active? true/false: ";
+    std::cin >> active;
+    std::cout << "Enter title: ";
+    std::cin >> title;
+    std::cout << "Enter topic: "; 
+    std::cin >> topic;
+    std::cout << "Enter description: "; 
+    std::cin >> description;
+    std::cout << "Enter location: ";
+    std::cin >> location;
+
+    int keywordsInput = 1;
+    while (keywordsInput == 1)
+    {
+        std::cout << "Select: " << std::endl;
+        std::cout << "1. Add keyword" << std::endl;
+        std::cout << "2. No more keywords" << std::endl;
+        std::cin >> keywordsInput;
+
+        if (keywordsInput == 1)
+        {
+            std::string keyword = "";
+            std::cout << "Keyword: ";
+            std::cin >> keyword;
+            keywords.push_back(keyword);
+        }
+    }
+
+    std::cout << "Enter paper deadline day: ";
+    std::cin >> paperDeadlineD;
+    std::cout << "Enter paper deadline month: ";
+    std::cin >> paperDeadlineM;
+    std::cout << "Enter paper deadline year: ";
+    std::cin >> paperDeadlineY;
+    std::cout << "Enter allocation date day: ";
+    std::cin >> allocationDateD;
+    std::cout << "Enter allocation date month: ";
+    std::cin >> allocationDateM;
+    std::cout << "Enter allocation date year: ";
+    std::cin >> allocationDateY;
+    std::cout << "Enter review deadline soft day: ";
+    std::cin >> reviewDeadlineSoftD;
+    std::cout << "Enter review deadline soft month: ";
+    std::cin >> reviewDeadlineSoftM;
+    std::cout << "Enter review deadline soft year: ";
+    std::cin >> reviewDeadlineSoftY;
+    std::cout << "Enter review deadline hard day: ";
+    std::cin >> reviewDeadlineHardD;
+    std::cout << "Enter review deadline hard month: ";
+    std::cin >> reviewDeadlineHardM;
+    std::cout << "Enter review deadline hard year: ";
+    std::cin >> reviewDeadlineHardY;
+    std::cout << "Enter discussion deadline day: ";
+    std::cin >> discussionDeadlineD;
+    std::cout << "Enter discussion deadline month: ";
+    std::cin >> discussionDeadlineM;
+    std::cout << "Enter discussion deadline year: ";
+    std::cin >> discussionDeadlineY;
+    std::cout << "Enter reviewers per paper: ";
+    std::cin >> reviewersPerPaper;
+    std::cout << "Enter post word limit: ";
+    std::cin >> postWordLimit;
+
+    Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+    Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+    Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
+    Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+    Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
+
+    Conference conf(
+        active,
+	title,
+	topic,
+	description,
+	location,
+	keywords,
+	beforeDate,
+	paperDeadline,
+	beforeDate,
+	allocationDate,
+	beforeDate,
+	reviewDeadlineSoft,
+	beforeDate,
+	reviewDeadlineHard,
+	beforeDate,
+	discussionDeadline,
+	reviewersPerPaper,
+	postWordLimit
+	);
+
+
+    bool confExists = db.existsConfName(title);
+
+    std::cout << "Conference was ";
+    if (!confExists)
+    {
+        db.createConf(conf);
+        std::cout << "created successfully" << std::endl;
+    }
+    else
+        std::cout << "not created" << std::endl;
+
+    adminMainMenu();
+}
+
+void changeUsername()
+{
+    std::string currentUN;
+    std::string newUN;
+    std::cout << "Enter username to change: ";
+    std::cin >> currentUN;
+
+    bool userExists = db.existsUserName(currentUN);
+    
+    if (userExists)
+    {
+        std::cout << "Enter new username: ";
+        std::cin >> newUN;
+        bool newUserExists = db.existsUserName(currentUN);
+
+        if (!newUserExists)
+        {
+            db.adminChangeUserName(currentUN, newUN);
+            std::cout << "Username changed successfully" << std::endl;
+        }
+        else
+            std::cout << "Username not changed as already existed";
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+
+    adminMainMenu();
+}
+
+void changePassword()
+{
+    std::string username;
+    std::string password;
+    std::cout << "Enter username to change password for: ";
+    std::cin >> username;
+
+    bool userExists = db.existsUserName(username);
+    
+    if (userExists)
+    {
+        std::cout << "Enter new password: ";
+        std::cin >> password;
+
+        db.adminChangePassword(username, password);
+
+        std::cout << "Password changed" << std::endl;
+    }
+    else
+        std::cout << "User doesn't exist" << std::endl;
+
+    adminMainMenu();
+}
+
+void changeConf()
+{
+    bool active;
+    std::string title;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    int paperDeadlineD;
+    int paperDeadlineM;
+    int paperDeadlineY;
+    int allocationDateD;
+    int allocationDateM;
+    int allocationDateY;
+    int reviewDeadlineSoftD;
+    int reviewDeadlineSoftM;
+    int reviewDeadlineSoftY;
+    int reviewDeadlineHardD;
+    int reviewDeadlineHardM;
+    int reviewDeadlineHardY;
+    int discussionDeadlineD;
+    int discussionDeadlineM;
+    int discussionDeadlineY;
+    int reviewersPerPaper;
+    int postWordLimit;
+    bool beforeDate = true;
+
+    std::cout << "Enter Conference name: " << std::endl;
+    std::cin >> title;
+
+    bool confExists = db.existsConfName(title);
+    if (confExists)
+    {
+        Conference conf = db.fetchConference(title);
+        std::cout << "Current Conference details are:" << std::endl;
+        std::cout << "Title: " << conf.title << std::endl;
+        std::cout << "Active: ";
+        if (conf.isActive)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Topic: " << conf.topic << std::endl;
+        std::cout << "Description: " << conf.description << std::endl;
+        std::cout << "Location: " << conf.location << std::endl;
+
+        std::cout << "Keywords: " << std::endl;
+        std::vector<std::string>::const_iterator it;
+        for(it=conf.keywords.begin(); it!=conf.keywords.end(); it++)
+        {
+            std::cout << "\t" << *it << std::endl; 
+        }
+
+        std::cout << "Before paper deadline? "; 
+        if (conf.isBeforePaperDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.paperDeadline.convertToString(); 
+        
+        std::cout << "Before allocation date? ";
+        if (conf.isBeforeAllocationDate)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.allocationDate.convertToString(); 
+
+        std::cout << "Before soft review deadline? ";
+        if (conf.isBeforeSoftReviewDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.reviewDeadlineSoft.convertToString(); 
+
+        std::cout << "Before hard review deadline? ";
+        if (conf.isBeforeHardReviewDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.reviewDeadlineHard.convertToString(); 
+
+        std::cout << "Before discussion deadline? ";
+        if (conf.isBeforeDiscussDeadline)
+            std::cout << "yes" << std::endl;
+        else
+            std::cout << "no" << std::endl;
+        std::cout << "Date: " << conf.discussDeadline.convertToString(); 
+
+        std::cout << "Reviewers per paper: " << conf.reviewersPerPaper;
+        std::cout << "Word limit per post: " << conf.postWordLimit;
+
+        std::cout << "Please enter new Conference details" << std::endl;
+        std::cout << "Must re enter all details that aren't changing also!!" << std::endl << std::endl;
+
+
+        std::cout << "Is it active? true/false: ";
+        std::cin >> active;
+        std::cout << "Enter title: ";
+        std::cin >> title;
+        std::cout << "Enter topic: "; 
+        std::cin >> topic;
+        std::cout << "Enter description: "; 
+        std::cin >> description;
+        std::cout << "Enter location: ";
+        std::cin >> location;
+
+        int keywordsInput = 1;
+        while (keywordsInput == 1)
+        {
+            std::cout << "Select: " << std::endl;
+            std::cout << "1. Add keyword" << std::endl;
+            std::cout << "2. No more keywords" << std::endl;
+            std::cin >> keywordsInput;
+
+            if (keywordsInput == 1)
+            {
+                std::string keyword = "";
+                std::cout << "Keyword: ";
+                std::cin >> keyword;
+                keywords.push_back(keyword);
+            }
+        }
+
+        std::cout << "Enter paper deadline day: ";
+        std::cin >> paperDeadlineD;
+        std::cout << "Enter paper deadline month: ";
+        std::cin >> paperDeadlineM;
+        std::cout << "Enter paper deadline year: ";
+        std::cin >> paperDeadlineY;
+        std::cout << "Enter allocation date day: ";
+        std::cin >> allocationDateD;
+        std::cout << "Enter allocation date month: ";
+        std::cin >> allocationDateM;
+        std::cout << "Enter allocation date year: ";
+        std::cin >> allocationDateY;
+        std::cout << "Enter review deadline soft day: ";
+        std::cin >> reviewDeadlineSoftD;
+        std::cout << "Enter review deadline soft month: ";
+        std::cin >> reviewDeadlineSoftM;
+        std::cout << "Enter review deadline soft year: ";
+        std::cin >> reviewDeadlineSoftY;
+        std::cout << "Enter review deadline hard day: ";
+        std::cin >> reviewDeadlineHardD;
+        std::cout << "Enter review deadline hard month: ";
+        std::cin >> reviewDeadlineHardM;
+        std::cout << "Enter review deadline hard year: ";
+        std::cin >> reviewDeadlineHardY;
+        std::cout << "Enter discussion deadline day: ";
+        std::cin >> discussionDeadlineD;
+        std::cout << "Enter discussion deadline month: ";
+        std::cin >> discussionDeadlineM;
+        std::cout << "Enter discussion deadline year: ";
+        std::cin >> discussionDeadlineY;
+        std::cout << "Enter reviewers per paper: ";
+        std::cin >> reviewersPerPaper;
+        std::cout << "Enter post word limit: ";
+        std::cin >> postWordLimit;
+
+        Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+        Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+        Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY); 
+        Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+        Date discussionDeadline(discussionDeadlineD, discussionDeadlineM, discussionDeadlineY);
+
+        std::cout << "Enter reviewers per paper: ";
+        std::cin >> reviewersPerPaper;
+        std::cout << "Enter post word limit: ";
+        std::cin >> postWordLimit;
+
+        Conference confInput(
+            active,
+            title,
+            topic,
+            description,
+            location,
+            keywords,
+            conf.isBeforePaperDeadline,
+            paperDeadline,
+            conf.isBeforeAllocationDate,
+            allocationDate,
+            conf.isBeforeSoftReviewDeadline,
+            reviewDeadlineSoft,
+            conf.isBeforeHardReviewDeadline,
+            reviewDeadlineHard,
+            conf.isBeforeDiscussDeadline,
+            discussionDeadline,
+            reviewersPerPaper,
+            postWordLimit
+            );
+
+        db.updateConf(confInput);
+
+        std::cout << "Conference was created successfully" << std::endl;
+    }
+    else
+        std::cout << "Conference doesn't exist" << std::endl;
+    
+    adminMainMenu();
+}
+

commit 454f0a4b8168e63b15f202d434336be766c81f4f
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 23:21:33 2014 +1100

    populate functions

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index f426e73..31a577b 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -2,6 +2,7 @@
 #include "ui_mainwindow.h"
 #include "../DataAll/Review.hpp"
 #include <QMessageBox>
+#include <QFileDialog>
 
 MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 {
@@ -250,10 +251,10 @@ void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
 void MainWindow::on_tabWidget_currentChanged(int index)
 {//change to current text or something
     QString text = ui->tabWidget->tabText(index);
-//    if(text == "Info")
-//        populate_infoTabAuthor();
-//    else if(text == "Information")
-//        populate_infoTabChair();
+    if(text == "Info")
+        populate_infoTabAuthor();
+    else if(text == "Information")
+        populate_infoTabChair();
 //    else if(text == "Author")
 //        populate_authorTab();
 //    else if(text == "Reviewer")
@@ -268,110 +269,72 @@ void MainWindow::on_tabWidget_currentChanged(int index)
 
 void MainWindow::populate_infoTabAuthor()
 {
-//    User* user;
-//    if(loginMgr->currentAuthor != nullptr)
-//        user = dynamic_cast<User*>(loginMgr->currentAuthor);
-//    if(loginMgr->currentReviewer != nullptr)
-//        user = dynamic_cast<User*>(loginMgr->currentReviewer);
-
-//    ui->username->setText(QString::fromStdString(user->userName));
-//    ui->userid->setText(QString::number(user->getUserID()));
-//    ui->name->setText(QString::fromStdString(user->getName()));
-//    ui->email->setText(QString::fromStdString(user->getEmail()));
-//    ui->organisation->setText(QString::fromStdString(user->getOrganisation()));
-//    ui->phone->setText(QString::fromStdString(user->getPhone()));
-
-//    if(loginMgr->currentAuthor != nullptr)
-//        for(std::vector<std::string>::iterator it = loginMgr->currentAuthor->keywords.begin(); it != loginMgr->currentAuthor->keywords.end(); ++it)
-//            ui->authKeyList->addItem(QString::fromStdString(*it));
-//    else if(loginMgr->currentReviewer != nullptr)
-//        for(std::vector<std::string>::iterator it = loginMgr->currentReviewer->keywords.begin(); it != loginMgr->currentReviewer->keywords.end(); ++it)
-//            ui->authKeyList->addItem(QString::fromStdString(*it));
-
-//    ui->conferenceName->setText(QString::fromStdString(loginMgr->activeConference->title));
-//    ui->confTopic->setText(QString::fromStdString(loginMgr->activeConference->topic));
-//    ui->confLocation->setText(QString::fromStdString(loginMgr->activeConference->location));
-//    ui->confDesc->append(QString::fromStdString(loginMgr->activeConference->description));
-//    for(std::vector<std::string>::iterator it = loginMgr->activeConference->keywords.begin(); it != loginMgr->activeConference->keywords.end(); ++it)
-//        ui->confKeyList->addItem(QString::fromStdString(*it));
-//    ui->subDate->setText(QString::fromStdString(loginMgr->activeConference->paperDeadline.toString()));
-//    ui->discDate->setText(QString::fromStdString(loginMgr->activeConference->discussDeadline.toString()));
-//    ui->hReviewDate->setText(QString::fromStdString(loginMgr->activeConference->reviewDeadlineHard.toString()));
-//    ui->sReviewDate->setText(QString::fromStdString(loginMgr->activeConference->reviewDeadlineSoft.toString()));
-//    ui->allocDate->setText("29/10/14");
+    ui->username->setText(QString::fromStdString(theUser->userName));
+    ui->userid->setText(QString::number(theUser->userID));
+    ui->name->setText(QString::fromStdString(theUser->name));
+    ui->email->setText(QString::fromStdString(theUser->email));
+    ui->organisation->setText(QString::fromStdString(theUser->organisation));
+    ui->phone->setText(QString::fromStdString(theUser->phone));
+
+    for(std::vector<std::string>::iterator it = theUser->keywords.begin(); it != theUser->keywords.end(); ++it)
+        ui->authKeyList->addItem(QString::fromStdString(*it));
+
+    ui->conferenceName->setText(QString::fromStdString(theConf->title));
+    ui->confTopic->setText(QString::fromStdString(theConf->topic));
+    ui->confLocation->setText(QString::fromStdString(theConf->location));
+    ui->confDesc->append(QString::fromStdString(theConf->description));
+    for(std::vector<std::string>::iterator it = theConf->keywords.begin(); it != theConf->keywords.end(); ++it)
+        ui->confKeyListNoEdit->addItem(QString::fromStdString(*it));
+    ui->subDate->setText(QString::fromStdString(theConf->paperDeadline.convertToString()));
+    ui->discDate->setText(QString::fromStdString(theConf->discussDeadline.convertToString()));
+    ui->hReviewDate->setText(QString::fromStdString(theConf->reviewDeadlineHard.convertToString()));
+    ui->sReviewDate->setText(QString::fromStdString(theConf->reviewDeadlineSoft.convertToString()));
+    ui->allocDate->setText(QString::fromStdString((theConf->allocationDate.convertToString())));
 }
 
 void MainWindow::populate_infoTabChair()
-{/*
-    PCChair* user = loginMgr->currentPCChair;
-    Conference* conf = loginMgr->getActiveConference();
-
-    ui->name->setText(QString::fromStdString(user->getName()));
-    ui->email->setText(QString::fromStdString(user->getEmail()));
-    ui->organisation->setText(QString::fromStdString(user->getOrganisation()));
-    ui->phone->setText(QString::fromStdString(user->getPhone()));
-    ui->conferenceName->setText(QString::fromStdString(conf->title));
-    ui->confTopic->setText(QString::fromStdString(conf->topic));
-    ui->confLocation->setText(QString::fromStdString(conf->location));
-    ui->confDesc->setText(QString::fromStdString(conf->description));
-    for(std::vector<std::string>::iterator it = conf->keywords.begin(); it != conf->keywords.end(); ++it)
+{
+    ui->name_2->setText(QString::fromStdString(theUser->name));
+    ui->email_2->setText(QString::fromStdString(theUser->email));
+    ui->organisation_2->setText(QString::fromStdString(theUser->organisation));
+    ui->phone_2->setText(QString::fromStdString(theUser->phone));
+    ui->confNameMng->setText(QString::fromStdString(theConf->title));
+    ui->confTopicMng->setText(QString::fromStdString(theConf->topic));
+    ui->confLocMng->setText(QString::fromStdString(theConf->location));
+    ui->confDescMng->setText(QString::fromStdString(theConf->description));
+
+    for(std::vector<std::string>::iterator it = theConf->keywords.begin(); it != theConf->keywords.end(); ++it)
         ui->confKeyList->addItem(QString::fromStdString(*it));
-    ui->subDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
-    ui->allocDate->setText("29/10/14");
-    ui->sReviewDateEdit->date().setDate(conf->reviewDeadlineSoft.day, conf->reviewDeadlineSoft.month, conf->reviewDeadlineSoft.year);
-    ui->hReviewDateEdit->date().setDate(conf->reviewDeadlineHard.day, conf->reviewDeadlineHard.month, conf->reviewDeadlineHard.year);
-    ui->discDateEdit->date().setDate(conf->discussDeadline.day, conf->discussDeadline.month, conf->discussDeadline.year);*/
+
+    ui->subDateEdit->date().setDate(theConf->paperDeadline.getDay(), theConf->paperDeadline.getMonth(), theConf->paperDeadline.getYear());
+    ui->allocDateEdit->date().setDate(theConf->allocationDate.getDay(), theConf->allocationDate.getMonth(), theConf->allocationDate.getYear());
+    ui->sReviewDateEdit->date().setDate(theConf->reviewDeadlineSoft.getDay(), theConf->reviewDeadlineSoft.getMonth(), theConf->reviewDeadlineSoft.getYear());
+    ui->hReviewDateEdit->date().setDate(theConf->reviewDeadlineHard.getDay(), theConf->reviewDeadlineHard.getMonth(), theConf->reviewDeadlineHard.getYear());
+    ui->discDateEdit->date().setDate(theConf->discussDeadline.getDay(), theConf->discussDeadline.getMonth(), theConf->discussDeadline.getYear());
 }
 
 void MainWindow::populate_authorTab()
 {
-//    Author* user;
-//    if(loginMgr->currentAuthor != nullptr)
-//        user = loginMgr->currentAuthor;
-//    else if(loginMgr->currentReviewer != nullptr)
-//        user = loginMgr->currentReviewer;
-//    std::vector<PaperSummary> papers = user->getOwnPapers();
-//    std::vector<std::string> keys = user->getCurrentPaper().keywords;
-//    std::vector<PersonalInfo> authors = user->getCurrentPaper().authors;
-
-//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
-//        ui->selectPaperAuthor->addItem(QString::fromStdString(it->paperName));
+    papers.clear();
+    //paper = fetch papersummaries
 
-//    ui->paperAbstract->append(QString::fromStdString(user->getCurrentPaper().abstract));
-//    for(std::vector<std::string>::iterator it = keys.begin(); it != keys.end(); ++it)
-//        ui->paperKeyListAuth->addItem(QString::fromStdString(*it));
-
-//    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
-//        int rows = ui->authorsTable->rowCount();
-//        ui->authorsTable->insertRow(rows);
-//        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
-//        ui->authorsTable->setItem(rows, 0, newItem);
-//        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
-//        ui->authorsTable->setItem(rows, 1, newItem);
-//        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
-//        ui->authorsTable->setItem(rows, 2, newItem);
-//        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
-//        ui->authorsTable->setItem(rows, 3, newItem);
-//    }
-//    for(std::vector<std::string>::iterator it = loginMgr->getActiveConference()->keywords.begin(); it != loginMgr->getActiveConference()->keywords.end(); ++it){
-//        ui->selectMainKey->addItem(QString::fromStdString(*it));
-//    }
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperAuthor->addItem(QString::fromStdString(it->paperName));
 }
 
 void MainWindow::populate_papersTab()
 {
-//    PCChair* user = loginMgr->currentPCChair;
-//    Paper* paper = &user->getCurrentPaper();
+//    Paper* paper = &theUser->getCurrentPaper();
 //    std::vector<Review>* reviews = &paper->reviews;
-//    std::vector<PersonalInfo>* authors = user->getCurrentPaper().authors;
+//    std::vector<PersonalInfo>* authors = theUser->getCurrentPaper().authors;
 //    std::vector<PersonalInfo> reviewers;
 
-//    std::vector<std::string> keys = user->getCurrentPaper().keywords;
+//    std::vector<std::string> keys = theUser->getCurrentPaper().keywords;
 
 //    ui->paperNameMng->setText(QString::fromStdString(paper->title));
 //    ui->mainKeyMng->setText(QString::fromStdString(paper->confKeyword));
 
-//    ui->paperAbstractMng->append(QString::fromStdString(user->getCurrentPaper().abstract));
+//    ui->paperAbstractMng->append(QString::fromStdString(theUser->getCurrentPaper().abstract));
 //    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
 //        ui->paperKeyListMng->addItem(QString::fromStdString(*it));
 
@@ -391,43 +354,26 @@ void MainWindow::populate_papersTab()
 
 void MainWindow::populate_reviewerTab()
 {
-//    Reviewer* user = loginMgr->currentReviewer;
-//    std::vector<PaperSummary> papers;
-//    std::vector<std::string> keys;
-//    if(loginMgr->getActiveConference()->isBeforePaperDeadline)
-//        papers = user->getPapersToBid();
-//    else
-//        papers = user->getAllocatedPapers();
-//    if(user->getCurrentPaper() == nullptr && !papers.empty()){
-//        user->setCurrentPaper(papers.at(0));
-//        keys = user->getCurrentPaper().getKeywords();
-//    }
-//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
-//        ui->selectPaperReviewer->addItem(QString::fromStdString(it->paperName));
+    papers.clear();
+    //paper = fetch papersummaries
 
-//    ui->paperAbstractReviewer->append(QString::fromStdString(user->getCurrentPaper().abstract));
-//    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
-//        ui->paperKeyListReviewer->addItem(QString::fromStdString(*it));
-//    ui->mainKeyReviewer->setText(QString::fromStdString(user->getCurrentPaper().confKeyword));
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperReviewer->addItem(QString::fromStdString(it->paperName));
 }
 
 void MainWindow::populate_reviewTab()
 {
-//    Reviewer* user = loginMgr->currentReviewer;
-//    std::vector<PaperSummary> papers = user->getAllocatedPapers();
-//    std::vector<std::string> keys = user->getCurrentPaper().keywords;
-//    std::vector<Review> reviews = user->getReviews();
 
 //    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
 //        ui->selectPaperReview->addItem(QString::fromStdString(it->paperName));
 
-//    ui->paperAbstractReviewer->setText(QString::fromStdString(user->getCurrentPaper().abstract));
-//    ui->mainKey->setText(QString::fromStdString(user->getCurrentPaper().confKeyword));
+//    ui->paperAbstractReviewer->setText(QString::fromStdString(theUser->getCurrentPaper().abstract));
+//    ui->mainKey->setText(QString::fromStdString(theUser->getCurrentPaper().confKeyword));
 //    for(std::vector<std::string>::iterator it = keys.begin(); it != keys.end(); ++it)
 //        ui->paperKeyListReview->addItem(QString::fromStdString(*it));
 
 //    for(std::vector<Review>::iterator it = reviews.begin(); it != reviews.end(); ++it){
-//        if(it->paperID == user->getCurrentPaper().paperID){
+//        if(it->paperID == theUser->getCurrentPaper().paperID){
 //            ui->commentsBestAward->setText(QString::fromStdString(it->commentsBestAward));
 //            ui->commentsShortPaper->setText(QString::fromStdString(it->commentsShortPaper));
 //            ui->commentsStrengths->setText(QString::fromStdString(it->commentsStrength));
@@ -457,9 +403,9 @@ void MainWindow::on_submit_clicked()
 void MainWindow::on_submitBid_clicked()
 {
     int bid = ui->selectBid->currentText().toInt();
-    int userId = loginMgr->getCurrentUser()->getUserID();
+    int userId = theUser->userID;
     int paperId;
-    //paperId = user->getCurrentPaper();
+    //paperId = theUser->getCurrentPaper();
 
     //send users bid on a paper to the server
     //no response from server
@@ -467,12 +413,7 @@ void MainWindow::on_submitBid_clicked()
 
 void MainWindow::downloadPaper()
 {
-    int paperId = loginMgr->getCurrentUser()->getCurrentPaper().paperID;
 
-    //send request to server for paper pdf along with the paper id of the wanted paper
-    //hopes to receive the pdf
-
-    //after receiving pdf will just create the file in the working directory blah blah blah ill do that
 }
 
 void MainWindow::on_downloadReviewer_clicked()
@@ -497,8 +438,8 @@ void MainWindow::on_submitPosts_clicked()
 
 void MainWindow::on_acceptPaper_clicked()
 {
-    int paperId = loginMgr->getCurrentUser()->getCurrentPaper().paperID;
-    int confId  = loginMgr->getActiveConference()->confID;
+    int paperId = theUser->getCurrentPaper().paperID;
+    int confId  = theConf->confID;
 
     //send paper id, conf id to server
     //no response from server
@@ -524,8 +465,8 @@ void MainWindow::on_submitReview_clicked()
 //    rev.commentsStrength = ui->commentsStrengths->toPlainText();
 //    rev.commentsSuggestions = ui->commentsSuggestions->toPlainText();
 //    rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
-//    rev.paperID = loginMgr->getCurrentUser()->getCurrentPaper.paperID;
-//    rev.reviewerID = loginMgr->getCurrentUser()->getUserID();
+//    rev.paperID = theUser->getCurrentPaper.paperID;
+//    rev.reviewerID = theUser->getUserID();
 
     //submit review to the server
     //no response from server
@@ -553,7 +494,7 @@ void MainWindow::on_addAsReviewer_2_clicked()
 void MainWindow::on_papersTable_itemSelectionChanged()
 {
 
-//    std::vector<PersonalInfo> authors = loginMgr->currentPCChair->getCurrentPaper().authors;
+//    std::vector<PersonalInfo> authors = theUser->getCurrentPaper().authors;
 
 //    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
 //        int rows = ui->reviewersTable->rowCount();
@@ -569,3 +510,45 @@ void MainWindow::on_papersTable_itemSelectionChanged()
 //    }
 
 }
+
+void MainWindow::on_selectPaperAuthor_currentIndexChanged(const QString &arg1)
+{
+    Paper thePaper;
+    //thePaper = fetchPaper(   );
+    ui->paperAbstract->append(QString::fromStdString(thePaper.abstract));
+    for(std::vector<std::string>::iterator it = thePaper.keywords.begin(); it != thePaper.keywords.end(); ++it)
+        ui->paperKeyListAuth->addItem(QString::fromStdString(*it));
+
+    for(std::vector<PersonalInfo>::iterator it = thePaper.authors.begin(); it != thePaper.authors.end(); ++it){
+        int rows = ui->authorsTable->rowCount();
+        ui->authorsTable->insertRow(rows);
+        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+        ui->authorsTable->setItem(rows, 0, newItem);
+        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+        ui->authorsTable->setItem(rows, 1, newItem);
+        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+        ui->authorsTable->setItem(rows, 2, newItem);
+        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+        ui->authorsTable->setItem(rows, 3, newItem);
+    }
+    for(std::vector<std::string>::iterator it = theConf->keywords.begin(); it != theConf->keywords.end(); ++it){
+        ui->selectMainKey->addItem(QString::fromStdString(*it));
+    }
+}
+
+void MainWindow::on_selectPaperReviewer_currentIndexChanged(const QString &arg1)
+{
+    Paper thePaper;
+    //thePaper = fetchPaper(  );
+
+    ui->paperAbstractReviewer->append(QString::fromStdString(thePaper.abstract));
+    for(std::vector<std::string> it = thePaper.keywords.begin(); it != thePaper.keywords.end(); ++it)
+        ui->paperKeyListReviewer->addItem(QString::fromStdString(*it));
+    ui->mainKeyReviewer->setText(QString::fromStdString(thePaper.confKeyword));
+}
+
+
+void MainWindow::on_updateConfSettings_clicked()
+{
+
+}

commit a38b338cca881e53ef36d9784d108cf7ec1ccfda
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 22:41:01 2014 +1100

    Create queries.txt

diff --git a/queries.txt b/queries.txt
new file mode 100644
index 0000000..6d8e96c
--- /dev/null
+++ b/queries.txt
@@ -0,0 +1,12 @@
+return vector of PaperSummaries
+  get PaperSummary for each Paper in a given Conference
+this is for Reviewer seeing what papers he can bid on as well as PCChair getting all papers for a conference
+
+return vector of PaperSummaries
+  get Paper Summary for each Paper that a given user is allocated as a reviewer for in a given conference
+for reviewers
+
+return vector of users
+  get users for a given paper id that they are allocated to review
+  essentially the above function but in reverse
+for PCChairs seeing people allocated to review a paper

commit 090d6899f6e10685e3cfe68b97f3a39fc5149e7a
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 22:39:30 2014 +1100

    login fn now checks confList

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 30f1852..f426e73 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -37,13 +37,14 @@ void MainWindow::login()
     
     QString uname = ui->usernameLogin->text();
     QString pword = ui->usernameLogin->text();
-    QString confname; // get name of conference selected
+    QString confname = ui->confList->currentItem()->text(); // get name of conference selected
     
     ui->usernameLogin->clear();
     ui->passwordLogin->clear();
+    ui->confList->clearSelection();
     
     theUser = new User;
-    (*theUser) = theDB->fetchUser(uname.toStdString()); // need to change to send confname as well
+    (*theUser) = theDB->fetchUser(uname.toStdString()/*, confname.toStdString()*/); // need to change to send confname as well
     
     if (theUser->userID == -1)
     {

commit 3cf9c326773aaaa155be4b9384cfa36dba8f22d1
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 22:38:20 2014 +1100

    fixed typo

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 7eb8e90..30f1852 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -92,7 +92,7 @@ void MainWindow::setUser(UserType_t userType)
         ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
         ui->tabWidget->addTab(ui->authorTab, "Author");
-        //ui->tabWidget->removeTab(0);
+        //ui->tabWidget->removeTab(0); //TEST
         break;
     case REVIEWER://reviewer
         ui->tabWidget->clear();

commit 88214239d209cbf2a522e2063500c0e81037e7db
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 22:31:32 2014 +1100

    noUser() now populates list of confs in login tab

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 55c4cc8..7eb8e90 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -75,7 +75,11 @@ void MainWindow::noUser()
     ui->tabWidget->clear();
     
     // populate conference list ui->confList
-    ui->confList
+    // get current conferences from db
+    std::vector<std::string> activeConfs = theDB->activeConfNames();
+    // for numOfCurrConfs ui->confList->addItem(QString)
+    for (int i = 0; i < activeConfs.size(); ++i)
+        ui->confList->addItems(QString::fromStdString(activeConfs[i]));
     
     ui->tabWidget->addTab(ui->loginTab, "Login");
 }

commit 292149fdb2ffdfec5824400bf7b5361d03de7544
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 22:00:17 2014 +1100

    adding database intergration

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 9946273..55c4cc8 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -15,7 +15,8 @@ MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 MainWindow::~MainWindow()
 {
     delete theUser;
-//    delete theDB;
+    delete theDB;
+    delete theConf;
     delete ui;
 }
 
@@ -36,16 +37,17 @@ void MainWindow::login()
     
     QString uname = ui->usernameLogin->text();
     QString pword = ui->usernameLogin->text();
+    QString confname; // get name of conference selected
     
     ui->usernameLogin->clear();
     ui->passwordLogin->clear();
     
     theUser = new User;
-    (*theUser) = theDB->fetchUser(uname.toStdString();
+    (*theUser) = theDB->fetchUser(uname.toStdString()); // need to change to send confname as well
     
     if (theUser->userID == -1)
     {
-        msg = "User does not exist!";
+        msg = "User does not exist for !";
         popupBox(errorBox, msg);
         noUser();
     }
@@ -63,13 +65,18 @@ void MainWindow::login()
 
 void MainWindow::logout()
 {
+    delete theUser;
+    theUser = NULL;
     noUser();
-    loginMgr->logout();
 }
 
 void MainWindow::noUser()
-{
+{// clears all tabs, populates conference list, returns to login screen
     ui->tabWidget->clear();
+    
+    // populate conference list ui->confList
+    ui->confList
+    
     ui->tabWidget->addTab(ui->loginTab, "Login");
 }
 
@@ -79,20 +86,20 @@ void MainWindow::setUser(UserType_t userType)
     {
     case AUTHOR://author
         ui->tabWidget->clear();
-        ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
         ui->tabWidget->addTab(ui->authorTab, "Author");
         //ui->tabWidget->removeTab(0);
         break;
     case REVIEWER://reviewer
-        ui->tableWidget->clear();
-        ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
+        ui->tabWidget->clear();
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Info");
         ui->tabWidget->addTab(ui->authorTab, "Author");
         ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
         ui->tabWidget->addTab(ui->reviewTab, "Review");
         ui->tabWidget->removeTab(0);
         break;
     case PCCHAIR://pcchair
-        ui->tableWidget->clear();
+        ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->infoTabChair, "Information");
         ui->tabWidget->addTab(ui->usersTab, "User Management");
         ui->tabWidget->addTab(ui->papersTab, "Paper Management");
@@ -127,7 +134,7 @@ void MainWindow::on_passwordLogin_returnPressed()
     login();
 }
 
-void MainWindow::on_createAccount_clicked() // done (i think)
+void MainWindow::on_createAccount_clicked() // laurence needs work
 {
     theUser = new User();
     QString msg;
@@ -159,9 +166,6 @@ void MainWindow::on_createAccount_clicked() // done (i think)
 
 void MainWindow::on_apply_clicked() //laurence is here
 {
-    //send user details to server
-    //no response needed from server
-    
     //update user from gui
     theUser->name = ui->name->text().toStdString();
     theUser->email = ui->email->text().toStdString();
@@ -226,12 +230,12 @@ void MainWindow::on_rmvAuthKey_clicked()
     delete ui->authKeyList->currentItem();
 }
 
-void MainWindow::on_selectPaperAuthor_activated(int /*index*/)
+void MainWindow::on_selectPaperAuthor_activated(int index)
 {
 
 }
 
-void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/)
+void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
 {
     ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
     if(ui->selectPaperAuthor->findText("*NEW*") == -1)

commit d33702bb6e9e4746d10ca62f77959f3c09866699
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 21:55:38 2014 +1100

    Update mainwindow.hpp

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 494bdfa..5f163da 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -4,9 +4,10 @@
 #include <QMainWindow>
 #include "../Server/User.hpp"
 #include "../Database/Database.hpp"
+#include "../DataAll/Conference.hpp"
 
 namespace Ui {
-class MainWindow;
+    class MainWindow;
 }
 
 class LoginManager;
@@ -20,7 +21,7 @@ public:
     ~MainWindow();
     
 private slots:
-    void on_login_clicked();//done (i think)
+    void on_login_clicked();
 
     void on_quit_clicked();
 
@@ -30,7 +31,7 @@ private slots:
 
     void on_passwordLogin_returnPressed();
 
-    void on_createAccount_clicked();// done (i think)
+    void on_createAccount_clicked();// laurence needs work
 
     void on_apply_clicked();//laurence is here
 
@@ -86,8 +87,8 @@ private slots:
 
 private:
     void setUser(UserType_t userType);
-    void noUser();
-    void login();
+    void noUser(); // laurence is here
+    void login(); // laurence is here
     void logout();
     void populate_infoTabAuthor();
     void populate_infoTabChair();
@@ -100,8 +101,8 @@ private:
 
     Ui::MainWindow *ui;
     User* theUser;
-    Conference* theConf;
     Database* theDB;
+    Conference* theConf;
     std::vector<PaperSummary> papers;
 };
 

commit ec388c43e7249980b093a220f9fc76e7d3504963
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 21:44:36 2014 +1100

    added userType to User.hpp

diff --git a/Server/User.hpp b/Server/User.hpp
index 35cd984..f568917 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -4,10 +4,21 @@
 #include <string>
 #include <vector>
 
+enum UserType_t {NOUSER, AUTHOR, REVIEWER, PCCHAIR, ADMIN};
 
 struct User 
 {
-    User() {}
+    User()
+    {
+        password = "";
+        name = "";
+        email = "";
+        organisation = "";
+        phone = "";
+        userID = -1;
+        userType = NOUSER;
+//        currentPaper = Paper();
+    }
     
     User(std::string& iuserName,
         std::string& iname,
@@ -16,7 +27,8 @@ struct User
         std::string& iphone,
         std::string& ipassword,
         int iuserID,
-        std::vector<std::string>& ikeywords)
+        std::vector<std::string>& ikeywords,
+        UserType_t iUserType)
     {
         userName = iuserName;
         name = iname;
@@ -26,15 +38,18 @@ struct User
         password = ipassword;
         userID = iuserID;
         keywords = ikeywords;
+        userType = iUserType;
     }
     
+    //no userID
     User(const std::string& iuserName,
         const std::string& iname,
         const std::string& iemail,
         const std::string& iorganisation,
         const std::string& iphone,
         const std::string& ipassword,
-        const std::vector<std::string>& ikeywords)
+        const std::vector<std::string>& ikeywords,
+        UserType_t iUserType)
     {
         userName = iuserName;
         name = iname;
@@ -43,6 +58,8 @@ struct User
         phone = iphone;
         password = ipassword;
         keywords = ikeywords;
+        userType = iUserType;
+        userID = -1;
     }
 
     std::string userName;
@@ -53,5 +70,7 @@ struct User
     std::string phone;
     std::vector<std::string> keywords;
     int userID;
+    UserType_t userType;
 };
 #endif
+

commit f6c11e95ebbe624dd0ceb466e7a91be9a813dfd5
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 21:36:20 2014 +1100

    added variables

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index ead41a1..494bdfa 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -100,9 +100,9 @@ private:
 
     Ui::MainWindow *ui;
     User* theUser;
+    Conference* theConf;
     Database* theDB;
-//    QString username;
-//    QString password;
+    std::vector<PaperSummary> papers;
 };
 
 #endif // MAINWINDOW_H

commit d75f12f5570ccfe13fc63eba1bb493055a4a2ad4
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 20:46:29 2014 +1100

    typo

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 9c5c899..9946273 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -251,7 +251,7 @@ void MainWindow::on_tabWidget_currentChanged(int index)
 //        populate_reviewerTab();
 //    else if(text == "Paper Management")
 //        populate_papersTab();
-//    else if(text == "USer Management")
+//    else if(text == "User Management")
 //        populate_usersTab();
 //    else if(text == "Review")
 //        populate_reviewTab();

commit d9eea5dcdeb1ab5300940bebd9dc5918807ab0b4
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 20:41:02 2014 +1100

    integrating database with gui

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index dc5736f..9c5c899 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -19,10 +19,10 @@ MainWindow::~MainWindow()
     delete ui;
 }
 
-void MainWindow::errorBox(QString msg)
-{
+void MainWindow::popupBox(QString boxTitle, QString msg)
+{ // 
         QMessageBox msgBox;
-        msgBox.setWindowTitle("Error!");
+        msgBox.setWindowTitle(boxTitle);
         msgBox.setText(msg);
         msgBox.exec();
 }
@@ -32,6 +32,7 @@ void MainWindow::login()
     // get username password from gui and grabs user from db, checks pw updates gui
     
     QString msg;
+    QString errorBox = "Error!";
     
     QString uname = ui->usernameLogin->text();
     QString pword = ui->usernameLogin->text();
@@ -45,13 +46,13 @@ void MainWindow::login()
     if (theUser->userID == -1)
     {
         msg = "User does not exist!";
-        errorBox(msg);
+        popupBox(errorBox, msg);
         noUser();
     }
     else if (theUser->password != pword)
     {
         msg = "Incorrect password!";
-        errorBox(msg);
+        popupBox(errorBox, msg);
         noUser();
     }
     else // get userType and load tab
@@ -126,10 +127,11 @@ void MainWindow::on_passwordLogin_returnPressed()
     login();
 }
 
-void MainWindow::on_createAccount_clicked() // laurence is here
+void MainWindow::on_createAccount_clicked() // done (i think)
 {
     theUser = new User();
     QString msg;
+    QString errorBox = "Error!";
     bool userExists;
     
     QString uname = ui->usernameLogin->text();
@@ -142,17 +144,20 @@ void MainWindow::on_createAccount_clicked() // laurence is here
     if (userExists)
     {
         msg = "Username already taken!";
-        errorBox(msg);
-        noUser();
+        popupBox(errorBox, msg);
+    }
+    else
+    {
+        theUser->userType = AUTHOR;
+        
+        // update DB with new user
+        theDB->putUser(uname, *theUser);
+        setUser(theUser->userType);
     }
     
-    theUser->userType = AUTHOR;
-    setUser(theUser->userType);
-    
-    // send to db
 }
 
-void MainWindow::on_apply_clicked()
+void MainWindow::on_apply_clicked() //laurence is here
 {
     //send user details to server
     //no response needed from server

commit 55837ebe021b9695bacf52eec2705f4d601008be
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 20:29:55 2014 +1100

    integrating database with gui

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index f9d7801..ead41a1 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -30,9 +30,9 @@ private slots:
 
     void on_passwordLogin_returnPressed();
 
-    void on_createAccount_clicked();// working on
+    void on_createAccount_clicked();// done (i think)
 
-    void on_apply_clicked();//server things here
+    void on_apply_clicked();//laurence is here
 
     void on_applyChair_clicked();//server things here
 
@@ -96,7 +96,7 @@ private:
     void populate_papersTab();
     void populate_usersTab();
     void populate_reviewTab();
-    void errorBox(QString msg);
+    void popupBox(QString type, QString msg);
 
     Ui::MainWindow *ui;
     User* theUser;

commit 278ea61d7e122a40a38a7eb6b108bd45e0a48096
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 19:51:13 2014 +1100

    deleted User.hpp from UserClient plase use Server/User.hpp

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
deleted file mode 100644
index 265e6e5..0000000
--- a/UserClient/User.hpp
+++ /dev/null
@@ -1,77 +0,0 @@
-#ifndef USER_H
-#define USER_H
-
-#include <string>
-#include <vector>
-
-enum UserType_t {NOUSER, AUTHOR, REVIEWER, PCCHAIR, ADMIN};
-
-struct User 
-{
-    User()
-    {
-        password = "";
-        name = "";
-        email = "";
-        organisation = "";
-        phone = "";
-        userID = -1;
-        userType = NOUSER;
-//        currentPaper = Paper();
-    }
-    
-    User(std::string& iuserName,
-        std::string& iname,
-        std::string& iemail,
-        std::string& iorganisation,
-        std::string& iphone,
-        std::string& ipassword,
-        int iuserID,
-        std::vector<std::string>& ikeywords,
-        UserType_t iUserType)
-    {
-        userName = iuserName;
-        name = iname;
-        email = iemail;
-        organisation = iorganisation;
-        phone = iphone;
-        password = ipassword;
-        userID = iuserID;
-        keywords = ikeywords;
-        userType = iUserType;
-    }
-    
-    //no userID
-    User(const std::string& iuserName,
-        const std::string& iname,
-        const std::string& iemail,
-        const std::string& iorganisation,
-        const std::string& iphone,
-        const std::string& ipassword,
-        const std::vector<std::string>& ikeywords,
-        UserType_t iUserType)
-    {
-        userName = iuserName;
-        name = iname;
-        email = iemail;
-        organisation = iorganisation;
-        phone = iphone;
-        password = ipassword;
-        keywords = ikeywords;
-        userType = iUserType;
-        userID = -1;
-    }
-
-    std::string userName;
-    std::string password;
-    std::string name;
-    std::string email;
-    std::string organisation;
-    std::string phone;
-    std::vector<std::string> keywords;
-    int userID;
-    Paper currectPaper; // don't need this!
-    UserType_t userType;
-};
-#endif
-

commit f046373faa5737bc958d3024a17a1ba3757db6a2
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 19:49:47 2014 +1100

    changed to same as server/

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index 859d21c..265e6e5 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -1,14 +1,13 @@
 #ifndef USER_H
 #define USER_H
 
-#include "../DataAll/Paper.hpp"
-
 #include <string>
+#include <vector>
 
 enum UserType_t {NOUSER, AUTHOR, REVIEWER, PCCHAIR, ADMIN};
 
-class User {
-public:
+struct User 
+{
     User()
     {
         password = "";
@@ -16,62 +15,63 @@ public:
         email = "";
         organisation = "";
         phone = "";
-        userID = 0;
+        userID = -1;
         userType = NOUSER;
-        currentPaper = Paper();
+//        currentPaper = Paper();
     }
-
+    
+    User(std::string& iuserName,
+        std::string& iname,
+        std::string& iemail,
+        std::string& iorganisation,
+        std::string& iphone,
+        std::string& ipassword,
+        int iuserID,
+        std::vector<std::string>& ikeywords,
+        UserType_t iUserType)
+    {
+        userName = iuserName;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        password = ipassword;
+        userID = iuserID;
+        keywords = ikeywords;
+        userType = iUserType;
+    }
+    
+    //no userID
     User(const std::string& iuserName,
-        const std::string& ipassword,
         const std::string& iname,
         const std::string& iemail,
         const std::string& iorganisation,
         const std::string& iphone,
-        int iuserID,
-        UserType_t iuserType)
+        const std::string& ipassword,
+        const std::vector<std::string>& ikeywords,
+        UserType_t iUserType)
     {
         userName = iuserName;
-        password = ipassword;
         name = iname;
         email = iemail;
         organisation = iorganisation;
         phone = iphone;
-        userID = iuserID;
-        userType = iuserType;
+        password = ipassword;
+        keywords = ikeywords;
+        userType = iUserType;
+        userID = -1;
     }
 
-    virtual ~User() {}
-    
-//    virtual void view() = 0;
-    virtual void modifyDetails();
-    void viewConferenceDetails();
-    int getUserID() {return userID;}
-    std::string getPassword() {return password;}
-    std::string getName() {return name;}
-    std::string getEmail() {return email;}
-    std::string getOrganisation() {return organisation;}
-    std::string getPhone() {return phone;}
-    UserType_t getUserType() {return userType;}
-    Paper getCurrentPaper() {return currentPaper;}
-    void setUserID(int iuserID) {userID = iuserID;}
-    void setPassword(const std::string& ipassword) {password = ipassword;}
-    void setName(const std::string& iname) {name = iname;}
-    void setEmail(const std::string& iemail) {email = iemail;}
-    void setOrganisation(const std::string& iorganisation) {organisation = iorganisation;}
-    void setPhone(const std::string& iphone) {phone = iphone;}
-    void setUserType(UserType_t iuserType) {userType = iuserType;}
-    void setCurrentPaper(const Paper& icurrentPaper) {currentPaper = icurrentPaper;}
-
     std::string userName;
-
-protected:
     std::string password;
     std::string name;
     std::string email;
     std::string organisation;
     std::string phone;
+    std::vector<std::string> keywords;
     int userID;
+    Paper currectPaper; // don't need this!
     UserType_t userType;
-    Paper currentPaper;
 };
 #endif
+

commit fa6197740561a40c2d177ce6bc83481923956125
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 19:47:18 2014 +1100

    integrating database with gui

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 6d0d4e5..f9d7801 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -2,7 +2,8 @@
 #define MAINWINDOW_H
 
 #include <QMainWindow>
-#include "LoginManager.hpp"
+#include "../Server/User.hpp"
+#include "../Database/Database.hpp"
 
 namespace Ui {
 class MainWindow;
@@ -15,13 +16,11 @@ class MainWindow : public QMainWindow
     Q_OBJECT
 
 public:
-    explicit MainWindow(QWidget *parent = 0);
+    explicit MainWindow(Database *db, QWidget *parent = 0);
     ~MainWindow();
-
-    void errorBox(QString msg);
     
 private slots:
-    void on_login_clicked();//server stuff here
+    void on_login_clicked();//done (i think)
 
     void on_quit_clicked();
 
@@ -31,7 +30,7 @@ private slots:
 
     void on_passwordLogin_returnPressed();
 
-    void on_createAccount_clicked();//server stuff here
+    void on_createAccount_clicked();// working on
 
     void on_apply_clicked();//server things here
 
@@ -88,7 +87,7 @@ private slots:
 private:
     void setUser(UserType_t userType);
     void noUser();
-    void loginRequest();
+    void login();
     void logout();
     void populate_infoTabAuthor();
     void populate_infoTabChair();
@@ -97,11 +96,13 @@ private:
     void populate_papersTab();
     void populate_usersTab();
     void populate_reviewTab();
+    void errorBox(QString msg);
 
     Ui::MainWindow *ui;
-    LoginManager* loginMgr;
-    QString username;
-    QString password;
+    User* theUser;
+    Database* theDB;
+//    QString username;
+//    QString password;
 };
 
 #endif // MAINWINDOW_H

commit a50985700ffe3f907dfe0d952257ac3829eae299
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 19:46:54 2014 +1100

    integrating database with gui

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index df8f4d8..dc5736f 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,17 +1,21 @@
 #include "mainwindow.hpp"
 #include "ui_mainwindow.h"
-#include "Review.hpp"
+#include "../DataAll/Review.hpp"
+#include <QMessageBox>
 
-MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
+MainWindow::MainWindow(Database* db, QWidget *parent) : QMainWindow(parent)
 {
+    theDB = db;
     ui = new Ui::MainWindow;
     ui->setupUi(this);
-    noUser();
     ui->passwordLogin->setEchoMode(QLineEdit::Password);
+    noUser();
 }
 
 MainWindow::~MainWindow()
 {
+    delete theUser;
+//    delete theDB;
     delete ui;
 }
 
@@ -19,14 +23,41 @@ void MainWindow::errorBox(QString msg)
 {
         QMessageBox msgBox;
         msgBox.setWindowTitle("Error!");
-        msgBox.setDetailedText(msg.c_str());
+        msgBox.setText(msg);
         msgBox.exec();
 }
 
-void MainWindow::loginRequest()
-{
-    loginMgr.loginRequest(ui->usernameLogin->text(), ui->passwordLogin->text());
-//        setUser(loginMgr.getCurrentUser()->getUserType());
+void MainWindow::login()
+{
+    // get username password from gui and grabs user from db, checks pw updates gui
+    
+    QString msg;
+    
+    QString uname = ui->usernameLogin->text();
+    QString pword = ui->usernameLogin->text();
+    
+    ui->usernameLogin->clear();
+    ui->passwordLogin->clear();
+    
+    theUser = new User;
+    (*theUser) = theDB->fetchUser(uname.toStdString();
+    
+    if (theUser->userID == -1)
+    {
+        msg = "User does not exist!";
+        errorBox(msg);
+        noUser();
+    }
+    else if (theUser->password != pword)
+    {
+        msg = "Incorrect password!";
+        errorBox(msg);
+        noUser();
+    }
+    else // get userType and load tab
+    {
+        setUser(theUser->userType)
+    }
 }
 
 void MainWindow::logout()
@@ -95,16 +126,50 @@ void MainWindow::on_passwordLogin_returnPressed()
     login();
 }
 
-void MainWindow::on_createAccount_clicked()
-{
-    if(loginMgr->createAccount(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr->getCurrentUser()->getUserType());
+void MainWindow::on_createAccount_clicked() // laurence is here
+{
+    theUser = new User();
+    QString msg;
+    bool userExists;
+    
+    QString uname = ui->usernameLogin->text();
+    QString pword = ui->usernameLogin->text();
+    ui->usernameLogin->clear();
+    ui->passwordLogin->clear();
+    
+    userExists = theDB->existsUserName(uname);
+    
+    if (userExists)
+    {
+        msg = "Username already taken!";
+        errorBox(msg);
+        noUser();
+    }
+    
+    theUser->userType = AUTHOR;
+    setUser(theUser->userType);
+    
+    // send to db
 }
 
 void MainWindow::on_apply_clicked()
 {
     //send user details to server
     //no response needed from server
+    
+    //update user from gui
+    theUser->name = ui->name->text().toStdString();
+    theUser->email = ui->email->text().toStdString();
+    theUser->phone = ui->phone->text().toStdString();
+    theUser->organisation = ui->organisation->text().toStdString();
+    
+    //clear current users keywords and populate with list from gui
+    theUser->keywords.clear();
+    for (int i = 0; i < ui->authKeyList->count(); ++i)
+        theUser->keywords.push_back(ui->authKeyList->item(i)->text());
+    
+    // send update user to db
+     
 }
 
 void MainWindow::on_applyChair_clicked()

commit ed8c68fd980b40af7a5cf42b8e46033faf71a6e2
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Tue Oct 28 17:51:55 2014 +1100

    Update mainwindow.ui

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index 5f254d9..19b8ea5 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -1,4 +1,4 @@
-<	?xml version="1.0" encoding="UTF-8"?>
+<?xml version="1.0" encoding="UTF-8"?>
 <ui version="4.0">
  <class>MainWindow</class>
  <widget class="QMainWindow" name="MainWindow">

commit dbeefecffed5f0eea3a11a40f218c8c29dbea2a0
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 17:31:10 2014 +1100

    added conf selection field

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index a463a7a..5f254d9 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -1,4 +1,4 @@
-<?xml version="1.0" encoding="UTF-8"?>
+<	?xml version="1.0" encoding="UTF-8"?>
 <ui version="4.0">
  <class>MainWindow</class>
  <widget class="QMainWindow" name="MainWindow">
@@ -6,15 +6,15 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>787</width>
-    <height>642</height>
+    <width>790</width>
+    <height>606</height>
    </rect>
   </property>
   <property name="windowTitle">
    <string>MainWindow</string>
   </property>
   <widget class="QWidget" name="centralWidget">
-   <widget class="QWidget" name="centralWidget_2" native="true">
+   <widget class="QWidget" name="centralwidget" native="true">
     <property name="geometry">
      <rect>
       <x>0</x>
@@ -23,7 +23,7 @@
       <height>601</height>
      </rect>
     </property>
-    <widget class="QWidget" name="centralwidget" native="true">
+    <widget class="QWidget" name="centralWidget_2" native="true">
      <property name="geometry">
       <rect>
        <x>0</x>
@@ -32,589 +32,392 @@
        <height>601</height>
       </rect>
      </property>
-     <widget class="QTabWidget" name="tabWidget">
+     <widget class="QWidget" name="centralWidget_3" native="true">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
-        <width>871</width>
-        <height>651</height>
+        <width>801</width>
+        <height>601</height>
        </rect>
       </property>
-      <property name="currentIndex">
-       <number>1</number>
-      </property>
-      <widget class="QWidget" name="loginTab">
-       <attribute name="title">
-        <string>Login</string>
-       </attribute>
-       <widget class="QWidget" name="verticalLayoutWidget_2">
+      <widget class="QWidget" name="centralwidget_2" native="true">
+       <property name="geometry">
+        <rect>
+         <x>0</x>
+         <y>0</y>
+         <width>801</width>
+         <height>601</height>
+        </rect>
+       </property>
+       <widget class="QTabWidget" name="tabWidget">
         <property name="geometry">
          <rect>
-          <x>210</x>
-          <y>150</y>
-          <width>353</width>
-          <height>211</height>
+          <x>0</x>
+          <y>0</y>
+          <width>871</width>
+          <height>651</height>
          </rect>
         </property>
-        <layout class="QVBoxLayout" name="verticalLayout_2">
-         <item>
-          <widget class="QLabel" name="label_7">
-           <property name="font">
-            <font>
-             <pointsize>18</pointsize>
-            </font>
-           </property>
-           <property name="text">
-            <string>Conference Management System</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_7">
-           <item>
-            <spacer name="horizontalSpacer_4">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>40</width>
-               <height>20</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_9">
-             <property name="text">
-              <string>UserName</string>
-             </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QLineEdit" name="usernameLogin"/>
-           </item>
-           <item>
-            <spacer name="horizontalSpacer_5">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>40</width>
-               <height>20</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout">
-           <item>
-            <spacer name="horizontalSpacer_2">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>40</width>
-               <height>20</height>
-              </size>
+        <property name="currentIndex">
+         <number>2</number>
+        </property>
+        <widget class="QWidget" name="loginTab">
+         <attribute name="title">
+          <string>Login</string>
+         </attribute>
+         <widget class="QWidget" name="verticalLayoutWidget_2">
+          <property name="geometry">
+           <rect>
+            <x>260</x>
+            <y>150</y>
+            <width>353</width>
+            <height>211</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_2">
+           <item>
+            <widget class="QLabel" name="label_7">
+             <property name="font">
+              <font>
+               <pointsize>18</pointsize>
+              </font>
              </property>
-            </spacer>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_8">
              <property name="text">
-              <string>Password</string>
+              <string>Conference Management System</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="passwordLogin"/>
-           </item>
-           <item>
-            <spacer name="horizontalSpacer_3">
-             <property name="orientation">
-              <enum>Qt::Horizontal</enum>
-             </property>
-             <property name="sizeHint" stdset="0">
-              <size>
-               <width>40</width>
-               <height>20</height>
-              </size>
-             </property>
-            </spacer>
-           </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_10">
-           <item>
-            <widget class="QPushButton" name="login">
-             <property name="text">
-              <string>Login</string>
-             </property>
-            </widget>
+            <layout class="QHBoxLayout" name="horizontalLayout_7">
+             <item>
+              <spacer name="horizontalSpacer_4">
+               <property name="orientation">
+                <enum>Qt::Horizontal</enum>
+               </property>
+               <property name="sizeHint" stdset="0">
+                <size>
+                 <width>40</width>
+                 <height>20</height>
+                </size>
+               </property>
+              </spacer>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_9">
+               <property name="text">
+                <string>UserName</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLineEdit" name="usernameLogin"/>
+             </item>
+             <item>
+              <spacer name="horizontalSpacer_5">
+               <property name="orientation">
+                <enum>Qt::Horizontal</enum>
+               </property>
+               <property name="sizeHint" stdset="0">
+                <size>
+                 <width>40</width>
+                 <height>20</height>
+                </size>
+               </property>
+              </spacer>
+             </item>
+            </layout>
            </item>
            <item>
-            <widget class="QPushButton" name="createAccount">
-             <property name="text">
-              <string>Create Account</string>
-             </property>
-            </widget>
+            <layout class="QHBoxLayout" name="horizontalLayout">
+             <item>
+              <spacer name="horizontalSpacer_2">
+               <property name="orientation">
+                <enum>Qt::Horizontal</enum>
+               </property>
+               <property name="sizeHint" stdset="0">
+                <size>
+                 <width>40</width>
+                 <height>20</height>
+                </size>
+               </property>
+              </spacer>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_8">
+               <property name="text">
+                <string>Password</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLineEdit" name="passwordLogin"/>
+             </item>
+             <item>
+              <spacer name="horizontalSpacer_3">
+               <property name="orientation">
+                <enum>Qt::Horizontal</enum>
+               </property>
+               <property name="sizeHint" stdset="0">
+                <size>
+                 <width>40</width>
+                 <height>20</height>
+                </size>
+               </property>
+              </spacer>
+             </item>
+            </layout>
            </item>
-          </layout>
-         </item>
-         <item>
-          <widget class="QPushButton" name="quit">
-           <property name="text">
-            <string>Quit</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="infoTabAuthor">
-       <attribute name="title">
-        <string>Info</string>
-       </attribute>
-       <widget class="QWidget" name="verticalLayoutWidget">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>10</y>
-          <width>233</width>
-          <height>551</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout">
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_2">
            <item>
-            <widget class="QLabel" name="username">
-             <property name="text">
-              <string>USERNAME</string>
-             </property>
-            </widget>
+            <layout class="QHBoxLayout" name="horizontalLayout_10">
+             <item>
+              <widget class="QPushButton" name="login">
+               <property name="text">
+                <string>Login</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="createAccount">
+               <property name="text">
+                <string>Create Account</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
            </item>
            <item>
-            <widget class="QLabel" name="userid">
+            <widget class="QPushButton" name="quit">
              <property name="text">
-              <string>USERID</string>
+              <string>Quit</string>
              </property>
             </widget>
            </item>
           </layout>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="name">
-           <property name="text">
-            <string>NAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="email">
-           <property name="text">
-            <string>EMAIL</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="organisation">
-           <property name="text">
-            <string>ORGANISATION</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="phone">
-           <property name="text">
-            <string>PHONE</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="label">
-           <property name="text">
-            <string>Keywords</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_21">
-           <item>
-            <widget class="QListWidget" name="authKeyList"/>
-           </item>
-           <item>
-            <layout class="QVBoxLayout" name="verticalLayout_15">
-             <item>
-              <widget class="QLineEdit" name="authKeyEntry"/>
-             </item>
+         </widget>
+         <widget class="QListWidget" name="confList">
+          <property name="geometry">
+           <rect>
+            <x>60</x>
+            <y>40</y>
+            <width>191</width>
+            <height>491</height>
+           </rect>
+          </property>
+         </widget>
+        </widget>
+        <widget class="QWidget" name="infoTabAuthor">
+         <attribute name="title">
+          <string>Info</string>
+         </attribute>
+         <widget class="QWidget" name="verticalLayoutWidget">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>10</y>
+            <width>233</width>
+            <height>551</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_2">
              <item>
-              <widget class="QPushButton" name="addAuthKey">
+              <widget class="QLabel" name="username">
                <property name="text">
-                <string>Add Keyword</string>
+                <string>USERNAME</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QPushButton" name="rmvAuthKey">
+              <widget class="QLabel" name="userid">
                <property name="text">
-                <string>Remove Keyword</string>
+                <string>USERID</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
-          </layout>
-         </item>
-         <item>
-          <spacer name="verticalSpacer_8">
-           <property name="orientation">
-            <enum>Qt::Vertical</enum>
-           </property>
-           <property name="sizeHint" stdset="0">
-            <size>
-             <width>20</width>
-             <height>40</height>
-            </size>
-           </property>
-          </spacer>
-         </item>
-         <item>
-          <widget class="QPushButton" name="apply">
-           <property name="text">
-            <string>Apply</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QPushButton" name="logout">
-           <property name="text">
-            <string>Logout</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="verticalLayoutWidget_14">
-        <property name="geometry">
-         <rect>
-          <x>270</x>
-          <y>10</y>
-          <width>501</width>
-          <height>551</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_16">
-         <item>
-          <widget class="QLabel" name="conferenceName">
-           <property name="font">
-            <font>
-             <pointsize>16</pointsize>
-             <weight>75</weight>
-             <italic>true</italic>
-             <bold>true</bold>
-            </font>
-           </property>
-           <property name="text">
-            <string>CONFERENCENAME</string>
-           </property>
-           <property name="scaledContents">
-            <bool>false</bool>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="confTopic">
-           <property name="text">
-            <string>CONFERENCETOPIC</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="confLocation">
-           <property name="text">
-            <string>CONFERENCELOCATION</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_22">
            <item>
-            <widget class="QLabel" name="label_26">
+            <widget class="QLineEdit" name="name">
              <property name="text">
-              <string>Keywords</string>
+              <string>NAME</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QListWidget" name="confKeyListNoEdit"/>
-           </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_28">
-           <item>
-            <widget class="QLabel" name="label_47">
+            <widget class="QLineEdit" name="email">
              <property name="text">
-              <string>Submission</string>
+              <string>EMAIL</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="label_48">
+            <widget class="QLineEdit" name="organisation">
              <property name="text">
-              <string>Allocation</string>
+              <string>ORGANISATION</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="label_49">
+            <widget class="QLineEdit" name="phone">
              <property name="text">
-              <string>Soft Review</string>
+              <string>PHONE</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="label_50">
+            <widget class="QLabel" name="label">
              <property name="text">
-              <string>Hard Review</string>
+              <string>Keywords</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="label_51">
-             <property name="text">
-              <string>Discussion</string>
-             </property>
-            </widget>
+            <layout class="QHBoxLayout" name="horizontalLayout_21">
+             <item>
+              <widget class="QListWidget" name="authKeyList"/>
+             </item>
+             <item>
+              <layout class="QVBoxLayout" name="verticalLayout_15">
+               <item>
+                <widget class="QLineEdit" name="authKeyEntry"/>
+               </item>
+               <item>
+                <widget class="QPushButton" name="addAuthKey">
+                 <property name="text">
+                  <string>Add Keyword</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QPushButton" name="rmvAuthKey">
+                 <property name="text">
+                  <string>Remove Keyword</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
            </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_25">
            <item>
-            <widget class="QLabel" name="subDate">
-             <property name="text">
-              <string>DATE</string>
+            <spacer name="verticalSpacer_8">
+             <property name="orientation">
+              <enum>Qt::Vertical</enum>
              </property>
-            </widget>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>20</width>
+               <height>40</height>
+              </size>
+             </property>
+            </spacer>
            </item>
            <item>
-            <widget class="QLabel" name="allocDate">
+            <widget class="QPushButton" name="apply">
              <property name="text">
-              <string>DATE</string>
+              <string>Apply</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="sReviewDate">
+            <widget class="QPushButton" name="logout">
              <property name="text">
-              <string>DATE</string>
+              <string>Logout</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QLabel" name="hReviewDate">
+          </layout>
+         </widget>
+         <widget class="QWidget" name="verticalLayoutWidget_14">
+          <property name="geometry">
+           <rect>
+            <x>270</x>
+            <y>10</y>
+            <width>501</width>
+            <height>551</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_16">
+           <item>
+            <widget class="QLabel" name="conferenceName">
+             <property name="font">
+              <font>
+               <pointsize>16</pointsize>
+               <weight>75</weight>
+               <italic>true</italic>
+               <bold>true</bold>
+              </font>
+             </property>
              <property name="text">
-              <string>DATE</string>
+              <string>CONFERENCENAME</string>
+             </property>
+             <property name="scaledContents">
+              <bool>false</bool>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="discDate">
+            <widget class="QLabel" name="confTopic">
              <property name="text">
-              <string>DATE</string>
+              <string>CONFERENCETOPIC</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </item>
-         <item>
-          <widget class="QTextBrowser" name="confDesc">
-           <property name="html">
-            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="infoTabChair">
-       <attribute name="title">
-        <string>Information</string>
-       </attribute>
-       <widget class="QWidget" name="verticalLayoutWidget_3">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>10</y>
-          <width>233</width>
-          <height>551</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_3">
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_3">
            <item>
-            <widget class="QLabel" name="username_2">
+            <widget class="QLabel" name="confLocation">
              <property name="text">
-              <string>USERNAME</string>
+              <string>CONFERENCELOCATION</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="userid_2">
-             <property name="text">
-              <string>USERID</string>
-             </property>
-            </widget>
+            <layout class="QHBoxLayout" name="horizontalLayout_22">
+             <item>
+              <widget class="QLabel" name="label_26">
+               <property name="text">
+                <string>Keywords</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QListWidget" name="confKeyListNoEdit"/>
+             </item>
+            </layout>
            </item>
-          </layout>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="name_2">
-           <property name="text">
-            <string>NAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="email_2">
-           <property name="text">
-            <string>EMAIL</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="organisation_2">
-           <property name="text">
-            <string>ORGANISATION</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="phone_2">
-           <property name="text">
-            <string>PHONE</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <spacer name="verticalSpacer_9">
-           <property name="orientation">
-            <enum>Qt::Vertical</enum>
-           </property>
-           <property name="sizeHint" stdset="0">
-            <size>
-             <width>20</width>
-             <height>40</height>
-            </size>
-           </property>
-          </spacer>
-         </item>
-         <item>
-          <widget class="QPushButton" name="applyChair">
-           <property name="text">
-            <string>Apply</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QPushButton" name="logout_2">
-           <property name="text">
-            <string>Logout</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="verticalLayoutWidget_4">
-        <property name="geometry">
-         <rect>
-          <x>280</x>
-          <y>10</y>
-          <width>481</width>
-          <height>551</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_4">
-         <item>
-          <widget class="QLineEdit" name="lineEdit">
-           <property name="text">
-            <string>CONFERENCE NAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="lineEdit_2">
-           <property name="text">
-            <string>CONFERENCE TOPIC</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="lineEdit_3">
-           <property name="text">
-            <string>CONFERENCE LOCATION</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QTextEdit" name="textEdit_2">
-           <property name="html">
-            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <layout class="QVBoxLayout" name="verticalLayout_9">
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_26">
+            <layout class="QHBoxLayout" name="horizontalLayout_28">
              <item>
-              <widget class="QLabel" name="label_44">
+              <widget class="QLabel" name="label_47">
                <property name="text">
                 <string>Submission</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QLabel" name="label_45">
+              <widget class="QLabel" name="label_48">
                <property name="text">
                 <string>Allocation</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QLabel" name="label_46">
+              <widget class="QLabel" name="label_49">
                <property name="text">
                 <string>Soft Review</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QLabel" name="label_43">
+              <widget class="QLabel" name="label_50">
                <property name="text">
                 <string>Hard Review</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QLabel" name="label_42">
+              <widget class="QLabel" name="label_51">
                <property name="text">
                 <string>Discussion</string>
                </property>
@@ -623,462 +426,307 @@ p, li { white-space: pre-wrap; }
             </layout>
            </item>
            <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_27">
-             <item>
-              <widget class="QDateEdit" name="subDateEdit"/>
-             </item>
+            <layout class="QHBoxLayout" name="horizontalLayout_25">
              <item>
-              <widget class="QDateEdit" name="allocDateEdit"/>
-             </item>
-             <item>
-              <widget class="QDateEdit" name="sReviewDateEdit"/>
-             </item>
-             <item>
-              <widget class="QDateEdit" name="hReviewDateEdit"/>
+              <widget class="QLabel" name="subDate">
+               <property name="text">
+                <string>DATE</string>
+               </property>
+              </widget>
              </item>
              <item>
-              <widget class="QDateEdit" name="discDateEdit"/>
+              <widget class="QLabel" name="allocDate">
+               <property name="text">
+                <string>DATE</string>
+               </property>
+              </widget>
              </item>
-            </layout>
-           </item>
-          </layout>
-         </item>
-         <item>
-          <widget class="QLabel" name="label_25">
-           <property name="text">
-            <string>Keywords</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_20">
-           <item>
-            <widget class="QListWidget" name="confKeyList"/>
-           </item>
-           <item>
-            <layout class="QVBoxLayout" name="verticalLayout_11">
              <item>
-              <widget class="QLineEdit" name="confKeyEntry"/>
+              <widget class="QLabel" name="sReviewDate">
+               <property name="text">
+                <string>DATE</string>
+               </property>
+              </widget>
              </item>
              <item>
-              <widget class="QPushButton" name="addConfKey">
+              <widget class="QLabel" name="hReviewDate">
                <property name="text">
-                <string>Add Keyword</string>
+                <string>DATE</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QPushButton" name="rmvConfKey">
+              <widget class="QLabel" name="discDate">
                <property name="text">
-                <string>Remove Keyword</string>
+                <string>DATE</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
-          </layout>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="authorTab">
-       <attribute name="title">
-        <string>Author</string>
-       </attribute>
-       <widget class="QWidget" name="gridLayoutWidget_3">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>10</y>
-          <width>741</width>
-          <height>531</height>
-         </rect>
-        </property>
-        <layout class="QGridLayout" name="gridLayout_3">
-         <item row="2" column="0">
-          <layout class="QVBoxLayout" name="verticalLayout_8">
-           <item>
-            <widget class="QTableWidget" name="authorsTable">
-             <column>
-              <property name="text">
-               <string>Name</string>
-              </property>
-             </column>
-             <column>
-              <property name="text">
-               <string>Email</string>
-              </property>
-             </column>
-             <column>
-              <property name="text">
-               <string>Org</string>
-              </property>
-             </column>
-             <column>
-              <property name="text">
-               <string>Phone</string>
-              </property>
-             </column>
-            </widget>
-           </item>
-          </layout>
-         </item>
-         <item row="1" column="1">
-          <widget class="QComboBox" name="selectMainKey"/>
-         </item>
-         <item row="1" column="0">
-          <widget class="QComboBox" name="selectPaperAuthor">
-           <property name="editable">
-            <bool>true</bool>
-           </property>
            <item>
-            <property name="text">
-             <string>*NEW*</string>
-            </property>
-           </item>
-          </widget>
-         </item>
-         <item row="5" column="1">
-          <widget class="QTextEdit" name="paperAbstract">
-           <property name="html">
-            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+            <widget class="QTextBrowser" name="confDesc">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-           </property>
-          </widget>
-         </item>
-         <item row="2" column="1">
-          <layout class="QVBoxLayout" name="verticalLayout_14">
-           <item>
-            <layout class="QHBoxLayout" name="horizontalLayout_4">
-             <item>
-              <widget class="QLineEdit" name="paperKeyEntry"/>
-             </item>
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </widget>
+        </widget>
+        <widget class="QWidget" name="infoTabChair">
+         <attribute name="title">
+          <string>Information</string>
+         </attribute>
+         <widget class="QWidget" name="verticalLayoutWidget_3">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>10</y>
+            <width>233</width>
+            <height>551</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_3">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_3">
              <item>
-              <widget class="QPushButton" name="addPaperKey">
+              <widget class="QLabel" name="username_2">
                <property name="text">
-                <string>Add Key</string>
+                <string>USERNAME</string>
                </property>
               </widget>
              </item>
              <item>
-              <widget class="QPushButton" name="rmvPaperKey">
+              <widget class="QLabel" name="userid_2">
                <property name="text">
-                <string>Remove Key</string>
+                <string>USERID</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
            <item>
-            <widget class="QListWidget" name="paperKeyListAuth"/>
+            <widget class="QLineEdit" name="name_2">
+             <property name="text">
+              <string>NAME</string>
+             </property>
+            </widget>
            </item>
-          </layout>
-         </item>
-         <item row="5" column="0">
-          <layout class="QVBoxLayout" name="verticalLayout_10">
            <item>
-            <widget class="QPushButton" name="addAuthor">
+            <widget class="QLineEdit" name="email_2">
              <property name="text">
-              <string>Add Author</string>
+              <string>EMAIL</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QPushButton" name="rmvAuthor">
+            <widget class="QLineEdit" name="organisation_2">
              <property name="text">
-              <string>Remove Author</string>
+              <string>ORGANISATION</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QLabel" name="label_32">
+            <widget class="QLineEdit" name="phone_2">
              <property name="text">
-              <string>Rebuttal</string>
+              <string>PHONE</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QTextEdit" name="rebuttalEntry"/>
+            <spacer name="verticalSpacer_9">
+             <property name="orientation">
+              <enum>Qt::Vertical</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>20</width>
+               <height>40</height>
+              </size>
+             </property>
+            </spacer>
            </item>
            <item>
-            <widget class="QPushButton" name="selectFile">
+            <widget class="QPushButton" name="applyChair">
              <property name="text">
-              <string>Select File</string>
+              <string>Apply</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QPushButton" name="submit">
+            <widget class="QPushButton" name="logout_2">
              <property name="text">
-              <string>Submit</string>
+              <string>Logout</string>
              </property>
             </widget>
            </item>
           </layout>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="reviewerTab">
-       <attribute name="title">
-        <string>Reviewer</string>
-       </attribute>
-       <widget class="QWidget" name="gridLayoutWidget_4">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>200</y>
-          <width>741</width>
-          <height>351</height>
-         </rect>
-        </property>
-        <layout class="QGridLayout" name="gridLayout_4">
-         <item row="0" column="0">
-          <widget class="QLabel" name="discussionLabel_2">
-           <property name="text">
-            <string>Discussion</string>
-           </property>
-          </widget>
-         </item>
-         <item row="2" column="1">
-          <widget class="QPushButton" name="submitPosts">
-           <property name="text">
-            <string>Submit Post</string>
-           </property>
-          </widget>
-         </item>
-         <item row="1" column="1">
-          <widget class="QTextEdit" name="postBody">
-           <property name="html">
-            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-           </property>
-          </widget>
-         </item>
-         <item row="1" column="0">
-          <widget class="QTextBrowser" name="discussionBodyReviewer">
-           <property name="html">
-            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="horizontalLayoutWidget">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>160</y>
-          <width>741</width>
-          <height>31</height>
-         </rect>
-        </property>
-        <layout class="QHBoxLayout" name="horizontalLayout_5">
-         <item>
-          <spacer name="horizontalSpacer">
-           <property name="orientation">
-            <enum>Qt::Horizontal</enum>
-           </property>
-           <property name="sizeType">
-            <enum>QSizePolicy::Ignored</enum>
-           </property>
-           <property name="sizeHint" stdset="0">
-            <size>
-             <width>40</width>
-             <height>20</height>
-            </size>
-           </property>
-          </spacer>
-         </item>
-         <item>
-          <widget class="QLabel" name="bidlabel">
-           <property name="text">
-            <string>Bid:</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QComboBox" name="selectBid"/>
-         </item>
-         <item>
-          <widget class="QPushButton" name="submitBid">
-           <property name="text">
-            <string>Submit Bid</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="gridLayoutWidget_5">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>10</y>
-          <width>741</width>
-          <height>151</height>
-         </rect>
-        </property>
-        <layout class="QGridLayout" name="gridLayout_5">
-         <item row="1" column="2">
-          <widget class="QTextBrowser" name="paperAbstractReviewer"/>
-         </item>
-         <item row="1" column="3">
-          <widget class="QListWidget" name="paperKeyListReviewer"/>
-         </item>
-         <item row="0" column="3">
-          <widget class="QLabel" name="mainKeyReviewer">
-           <property name="text">
-            <string>MAINKEY</string>
-           </property>
-          </widget>
-         </item>
-         <item row="0" column="2">
-          <widget class="QComboBox" name="selectPaperReviewer"/>
-         </item>
-         <item row="2" column="3">
-          <widget class="QPushButton" name="downloadReviewer">
-           <property name="text">
-            <string>Download</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="papersTab">
-       <attribute name="title">
-        <string>Paper Management</string>
-       </attribute>
-       <widget class="QTableWidget" name="papersTable">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>20</y>
-          <width>211</width>
-          <height>531</height>
-         </rect>
-        </property>
-        <column>
-         <property name="text">
-          <string>Title</string>
-         </property>
-        </column>
-        <column>
-         <property name="text">
-          <string notr="true">id</string>
-         </property>
-         <property name="toolTip">
-          <string notr="true"/>
-         </property>
-        </column>
-       </widget>
-       <widget class="QWidget" name="gridLayoutWidget_6">
-        <property name="geometry">
-         <rect>
-          <x>250</x>
-          <y>20</y>
-          <width>511</width>
-          <height>171</height>
-         </rect>
-        </property>
-        <layout class="QGridLayout" name="gridLayout_6">
-         <item row="0" column="0">
-          <widget class="QLabel" name="paperNameMng">
-           <property name="text">
-            <string>PAPERNAME</string>
-           </property>
-          </widget>
-         </item>
-         <item row="2" column="1">
-          <widget class="QPushButton" name="downloadChair">
-           <property name="text">
-            <string>Download</string>
-           </property>
-          </widget>
-         </item>
-         <item row="0" column="1">
-          <widget class="QLabel" name="mainKeyMng">
-           <property name="text">
-            <string>MAINKEY</string>
-           </property>
-          </widget>
-         </item>
-         <item row="1" column="0">
-          <widget class="QTableWidget" name="authorsTableMng">
-           <column>
-            <property name="text">
-             <string>Name</string>
-            </property>
-           </column>
-           <column>
-            <property name="text">
-             <string>Email</string>
-            </property>
-           </column>
-           <column>
-            <property name="text">
-             <string>Org</string>
-            </property>
-           </column>
-           <column>
-            <property name="text">
-             <string>Phone</string>
-            </property>
-           </column>
-          </widget>
-         </item>
-         <item row="1" column="1">
-          <widget class="QListWidget" name="paperKeyListMng"/>
-         </item>
-         <item row="2" column="0">
-          <widget class="QTextBrowser" name="paperAbstractMng"/>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="verticalLayoutWidget_11">
-        <property name="geometry">
-         <rect>
-          <x>250</x>
-          <y>190</y>
-          <width>511</width>
-          <height>361</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_12">
-         <item>
-          <layout class="QGridLayout" name="gridLayout_7">
-           <item row="0" column="0">
-            <widget class="QLabel" name="discussionLabel_3">
+         </widget>
+         <widget class="QWidget" name="verticalLayoutWidget_4">
+          <property name="geometry">
+           <rect>
+            <x>280</x>
+            <y>10</y>
+            <width>481</width>
+            <height>551</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_4">
+           <item>
+            <widget class="QLineEdit" name="confNameMng">
              <property name="text">
-              <string>Discussion</string>
+              <string>CONFERENCE NAME</string>
              </property>
             </widget>
            </item>
-           <item row="1" column="0">
-            <widget class="QTextBrowser" name="discussionBodyMng">
+           <item>
+            <widget class="QLineEdit" name="confTopicMng">
+             <property name="text">
+              <string>CONFERENCE TOPIC</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="confLocMng">
+             <property name="text">
+              <string>CONFERENCE LOCATION</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="confDescMng">
              <property name="html">
               <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
              </property>
             </widget>
            </item>
-           <item row="1" column="1">
-            <layout class="QVBoxLayout" name="verticalLayout_5">
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_9">
+             <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_26">
+               <item>
+                <widget class="QLabel" name="label_44">
+                 <property name="text">
+                  <string>Submission</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLabel" name="label_45">
+                 <property name="text">
+                  <string>Allocation</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLabel" name="label_46">
+                 <property name="text">
+                  <string>Soft Review</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLabel" name="label_43">
+                 <property name="text">
+                  <string>Hard Review</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLabel" name="label_42">
+                 <property name="text">
+                  <string>Discussion</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+             <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_27">
+               <item>
+                <widget class="QDateEdit" name="subDateEdit"/>
+               </item>
+               <item>
+                <widget class="QDateEdit" name="allocDateEdit"/>
+               </item>
+               <item>
+                <widget class="QDateEdit" name="sReviewDateEdit"/>
+               </item>
+               <item>
+                <widget class="QDateEdit" name="hReviewDateEdit"/>
+               </item>
+               <item>
+                <widget class="QDateEdit" name="discDateEdit"/>
+               </item>
+              </layout>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_25">
+             <property name="text">
+              <string>Keywords</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_20">
+             <item>
+              <widget class="QListWidget" name="confKeyList"/>
+             </item>
+             <item>
+              <layout class="QVBoxLayout" name="verticalLayout_11">
+               <item>
+                <widget class="QLineEdit" name="confKeyEntry"/>
+               </item>
+               <item>
+                <widget class="QPushButton" name="addConfKey">
+                 <property name="text">
+                  <string>Add Keyword</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QPushButton" name="rmvConfKey">
+                 <property name="text">
+                  <string>Remove Keyword</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </widget>
+        </widget>
+        <widget class="QWidget" name="authorTab">
+         <attribute name="title">
+          <string>Author</string>
+         </attribute>
+         <widget class="QWidget" name="gridLayoutWidget_3">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>10</y>
+            <width>741</width>
+            <height>531</height>
+           </rect>
+          </property>
+          <layout class="QGridLayout" name="gridLayout_3">
+           <item row="2" column="0">
+            <layout class="QVBoxLayout" name="verticalLayout_8">
              <item>
-              <widget class="QTableWidget" name="reviewersTable">
+              <widget class="QTableWidget" name="authorsTable">
                <column>
                 <property name="text">
                  <string>Name</string>
@@ -1101,625 +749,1007 @@ p, li { white-space: pre-wrap; }
                </column>
               </widget>
              </item>
+            </layout>
+           </item>
+           <item row="1" column="1">
+            <widget class="QComboBox" name="selectMainKey"/>
+           </item>
+           <item row="1" column="0">
+            <widget class="QComboBox" name="selectPaperAuthor">
+             <property name="editable">
+              <bool>true</bool>
+             </property>
+             <item>
+              <property name="text">
+               <string>*NEW*</string>
+              </property>
+             </item>
+            </widget>
+           </item>
+           <item row="5" column="1">
+            <widget class="QTextEdit" name="paperAbstract">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+             </property>
+            </widget>
+           </item>
+           <item row="2" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_14">
              <item>
-              <layout class="QHBoxLayout" name="horizontalLayout_9">
+              <layout class="QHBoxLayout" name="horizontalLayout_4">
+               <item>
+                <widget class="QLineEdit" name="paperKeyEntry"/>
+               </item>
                <item>
-                <widget class="QLabel" name="label_5">
+                <widget class="QPushButton" name="addPaperKey">
                  <property name="text">
-                  <string>User:</string>
+                  <string>Add Key</string>
                  </property>
                 </widget>
                </item>
                <item>
-                <widget class="QLineEdit" name="toReview_2"/>
-               </item>
-               <item>
-                <widget class="QPushButton" name="addAsReviewer_2">
+                <widget class="QPushButton" name="rmvPaperKey">
                  <property name="text">
-                  <string>Add as Reviewer</string>
+                  <string>Remove Key</string>
                  </property>
                 </widget>
                </item>
               </layout>
              </item>
-            </layout>
-           </item>
-           <item row="0" column="1">
-            <widget class="QLabel" name="label_6">
-             <property name="text">
-              <string>Reviewers</string>
-             </property>
-            </widget>
-           </item>
-           <item row="2" column="1">
-            <layout class="QVBoxLayout" name="verticalLayout_13">
-             <item>
-              <widget class="QLabel" name="label_41">
-               <property name="text">
-                <string>Comments</string>
-               </property>
-              </widget>
-             </item>
              <item>
-              <widget class="QTextBrowser" name="commentsBrowser"/>
+              <widget class="QListWidget" name="paperKeyListAuth"/>
              </item>
             </layout>
            </item>
-           <item row="2" column="0">
-            <layout class="QFormLayout" name="formLayout">
-             <property name="fieldGrowthPolicy">
-              <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
-             </property>
-             <item row="0" column="0">
-              <widget class="QLabel" name="label_24">
-               <property name="text">
-                <string>Overall</string>
-               </property>
-              </widget>
-             </item>
-             <item row="0" column="1">
-              <widget class="QLabel" name="overallScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
-             </item>
-             <item row="1" column="0">
-              <widget class="QLabel" name="label_27">
-               <property name="text">
-                <string>Confidence</string>
-               </property>
-              </widget>
-             </item>
-             <item row="1" column="1">
-              <widget class="QLabel" name="confidenceScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
-             </item>
-             <item row="2" column="0">
-              <widget class="QLabel" name="label_29">
-               <property name="text">
-                <string>Relevance</string>
-               </property>
-              </widget>
-             </item>
-             <item row="2" column="1">
-              <widget class="QLabel" name="relevanceScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
-             </item>
-             <item row="3" column="0">
-              <widget class="QLabel" name="label_31">
-               <property name="text">
-                <string>Originality</string>
-               </property>
-              </widget>
-             </item>
-             <item row="3" column="1">
-              <widget class="QLabel" name="originalityScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
-             </item>
-             <item row="4" column="0">
-              <widget class="QLabel" name="label_33">
-               <property name="text">
-                <string>Significance</string>
-               </property>
-              </widget>
-             </item>
-             <item row="4" column="1">
-              <widget class="QLabel" name="significanceScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
-             </item>
-             <item row="5" column="0">
-              <widget class="QLabel" name="label_35">
-               <property name="text">
-                <string>Presentation</string>
-               </property>
-              </widget>
-             </item>
-             <item row="5" column="1">
-              <widget class="QLabel" name="presentationScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
-             </item>
-             <item row="6" column="0">
-              <widget class="QLabel" name="label_37">
+           <item row="5" column="0">
+            <layout class="QVBoxLayout" name="verticalLayout_10">
+             <item>
+              <widget class="QPushButton" name="addAuthor">
                <property name="text">
-                <string>Technical Quality</string>
+                <string>Add Author</string>
                </property>
               </widget>
              </item>
-             <item row="6" column="1">
-              <widget class="QLabel" name="techqualScore">
+             <item>
+              <widget class="QPushButton" name="rmvAuthor">
                <property name="text">
-                <string>-</string>
+                <string>Remove Author</string>
                </property>
               </widget>
              </item>
-             <item row="7" column="0">
-              <widget class="QLabel" name="label_39">
+             <item>
+              <widget class="QLabel" name="label_32">
                <property name="text">
-                <string>Evaluation</string>
+                <string>Rebuttal</string>
                </property>
               </widget>
              </item>
-             <item row="7" column="1">
-              <widget class="QLabel" name="evaluationScore">
-               <property name="text">
-                <string>-</string>
-               </property>
-              </widget>
+             <item>
+              <widget class="QTextEdit" name="rebuttalEntry"/>
              </item>
-             <item row="8" column="0">
-              <widget class="QPushButton" name="acceptPaper">
+             <item>
+              <widget class="QPushButton" name="selectFile">
                <property name="text">
-                <string>Accept Paper</string>
+                <string>Select File</string>
                </property>
               </widget>
              </item>
-             <item row="8" column="1">
-              <widget class="QPushButton" name="rejectPaper">
+             <item>
+              <widget class="QPushButton" name="submit">
                <property name="text">
-                <string>Reject Paper</string>
+                <string>Submit</string>
                </property>
               </widget>
              </item>
             </layout>
            </item>
           </layout>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="usersTab">
-       <attribute name="title">
-        <string>User Management</string>
-       </attribute>
-       <widget class="QTableWidget" name="usersTable">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>10</y>
-          <width>311</width>
-          <height>531</height>
-         </rect>
-        </property>
-        <column>
-         <property name="text">
-          <string>Name</string>
-         </property>
-        </column>
-        <column>
-         <property name="text">
-          <string>User Name</string>
-         </property>
-        </column>
-        <column>
-         <property name="text">
-          <string>id</string>
-         </property>
-        </column>
-       </widget>
-       <widget class="QWidget" name="verticalLayoutWidget_6">
-        <property name="geometry">
-         <rect>
-          <x>370</x>
-          <y>10</y>
-          <width>291</width>
-          <height>321</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_6">
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_8">
-           <item>
-            <widget class="QLabel" name="username_5">
+         </widget>
+        </widget>
+        <widget class="QWidget" name="reviewerTab">
+         <attribute name="title">
+          <string>Reviewer</string>
+         </attribute>
+         <widget class="QWidget" name="gridLayoutWidget_4">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>200</y>
+            <width>741</width>
+            <height>351</height>
+           </rect>
+          </property>
+          <layout class="QGridLayout" name="gridLayout_4">
+           <item row="0" column="0">
+            <widget class="QLabel" name="discussionLabel_2">
              <property name="text">
-              <string>USERNAME</string>
+              <string>Discussion</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QLabel" name="userid_5">
+           <item row="2" column="1">
+            <widget class="QPushButton" name="submitPosts">
              <property name="text">
-              <string>USERID</string>
+              <string>Submit Post</string>
              </property>
             </widget>
            </item>
-          </layout>
-         </item>
-         <item>
-          <widget class="QLabel" name="name_5">
-           <property name="text">
-            <string>NAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="email_5">
-           <property name="text">
-            <string>EMAIL</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="organisation_5">
-           <property name="text">
-            <string>ORGANISATION</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="phone_5">
-           <property name="text">
-            <string>PHONE</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="label_10">
-           <property name="text">
-            <string>Keywords</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QListWidget" name="userKeyList"/>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="horizontalLayoutWidget_2">
-        <property name="geometry">
-         <rect>
-          <x>370</x>
-          <y>500</y>
-          <width>291</width>
-          <height>41</height>
-         </rect>
-        </property>
-        <layout class="QHBoxLayout" name="horizontalLayout_6">
-         <item>
-          <widget class="QLabel" name="label_4">
-           <property name="text">
-            <string>Paper:</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="toReview"/>
-         </item>
-         <item>
-          <widget class="QPushButton" name="addAsReviewer">
-           <property name="text">
-            <string>Add to Review</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="verticalLayoutWidget_15">
-        <property name="geometry">
-         <rect>
-          <x>370</x>
-          <y>400</y>
-          <width>291</width>
-          <height>101</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_17">
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_23">
-           <item>
-            <widget class="QLabel" name="label_30">
-             <property name="text">
-              <string>Authored Papers</string>
+           <item row="1" column="1">
+            <widget class="QTextEdit" name="postBody">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QLabel" name="label_28">
-             <property name="text">
-              <string>Assigned to Review</string>
+           <item row="1" column="0">
+            <widget class="QTextBrowser" name="discussionBodyReviewer">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
              </property>
             </widget>
            </item>
           </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_24">
-           <item>
-            <widget class="QListWidget" name="authoredPapers"/>
-           </item>
-           <item>
-            <widget class="QListWidget" name="assignedPapers"/>
-           </item>
-          </layout>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="verticalLayoutWidget_5">
-        <property name="geometry">
-         <rect>
-          <x>370</x>
-          <y>340</y>
-          <width>291</width>
-          <height>51</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_18">
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_29">
-           <item>
-            <widget class="QLabel" name="label_3">
-             <property name="text">
-              <string>Words per Post</string>
-             </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_2">
-             <property name="text">
-              <string>Reviewers per Paper</string>
+         </widget>
+         <widget class="QWidget" name="horizontalLayoutWidget">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>160</y>
+            <width>741</width>
+            <height>31</height>
+           </rect>
+          </property>
+          <layout class="QHBoxLayout" name="horizontalLayout_5">
+           <item>
+            <spacer name="horizontalSpacer">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
              </property>
-            </widget>
-           </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_30">
-           <item>
-            <widget class="QLineEdit" name="lineEdit_5"/>
-           </item>
-           <item>
-            <widget class="QLineEdit" name="lineEdit_4"/>
-           </item>
-          </layout>
-         </item>
-        </layout>
-       </widget>
-      </widget>
-      <widget class="QWidget" name="reviewTab">
-       <attribute name="title">
-        <string>Review</string>
-       </attribute>
-       <widget class="QWidget" name="verticalLayoutWidget_7">
-        <property name="geometry">
-         <rect>
-          <x>10</x>
-          <y>150</y>
-          <width>761</width>
-          <height>416</height>
-         </rect>
-        </property>
-        <layout class="QVBoxLayout" name="verticalLayout_7">
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_11">
-           <item>
-            <widget class="QLabel" name="label_11">
-             <property name="text">
-              <string>Overall</string>
+             <property name="sizeType">
+              <enum>QSizePolicy::Ignored</enum>
              </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QSpinBox" name="overall"/>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_12">
-             <property name="text">
-              <string>Confidence</string>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
              </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QSpinBox" name="confidence"/>
+            </spacer>
            </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_12">
            <item>
-            <widget class="QLabel" name="label_13">
+            <widget class="QLabel" name="bidlabel">
              <property name="text">
-              <string>Relevance</string>
+              <string>Bid:</string>
              </property>
             </widget>
            </item>
            <item>
-            <widget class="QSpinBox" name="relevance"/>
+            <widget class="QComboBox" name="selectBid"/>
            </item>
            <item>
-            <widget class="QLabel" name="label_14">
+            <widget class="QPushButton" name="submitBid">
              <property name="text">
-              <string>Originality</string>
+              <string>Submit Bid</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QSpinBox" name="originality"/>
-           </item>
           </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_13">
-           <item>
-            <widget class="QLabel" name="label_15">
+         </widget>
+         <widget class="QWidget" name="gridLayoutWidget_5">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>10</y>
+            <width>741</width>
+            <height>151</height>
+           </rect>
+          </property>
+          <layout class="QGridLayout" name="gridLayout_5">
+           <item row="1" column="2">
+            <widget class="QTextBrowser" name="paperAbstractReviewer"/>
+           </item>
+           <item row="1" column="3">
+            <widget class="QListWidget" name="paperKeyListReviewer"/>
+           </item>
+           <item row="0" column="3">
+            <widget class="QLabel" name="mainKeyReviewer">
              <property name="text">
-              <string>Significance</string>
+              <string>MAINKEY</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QSpinBox" name="significance"/>
+           <item row="0" column="2">
+            <widget class="QComboBox" name="selectPaperReviewer"/>
            </item>
-           <item>
-            <widget class="QLabel" name="label_16">
+           <item row="2" column="3">
+            <widget class="QPushButton" name="downloadReviewer">
              <property name="text">
-              <string>Presentation</string>
+              <string>Download</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QSpinBox" name="presentation"/>
-           </item>
           </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_14">
-           <item>
-            <widget class="QLabel" name="label_17">
+         </widget>
+        </widget>
+        <widget class="QWidget" name="papersTab">
+         <attribute name="title">
+          <string>Paper Management</string>
+         </attribute>
+         <widget class="QTableWidget" name="papersTable">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>20</y>
+            <width>211</width>
+            <height>531</height>
+           </rect>
+          </property>
+          <column>
+           <property name="text">
+            <string>Title</string>
+           </property>
+          </column>
+          <column>
+           <property name="text">
+            <string notr="true">id</string>
+           </property>
+           <property name="toolTip">
+            <string notr="true"/>
+           </property>
+          </column>
+         </widget>
+         <widget class="QWidget" name="gridLayoutWidget_6">
+          <property name="geometry">
+           <rect>
+            <x>250</x>
+            <y>20</y>
+            <width>511</width>
+            <height>171</height>
+           </rect>
+          </property>
+          <layout class="QGridLayout" name="gridLayout_6">
+           <item row="0" column="0">
+            <widget class="QLabel" name="paperNameMng">
              <property name="text">
-              <string>Technical Quality</string>
+              <string>PAPERNAME</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QSpinBox" name="techQuality"/>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_18">
+           <item row="2" column="1">
+            <widget class="QPushButton" name="downloadChair">
              <property name="text">
-              <string>Evaluation</string>
+              <string>Download</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QSpinBox" name="evaluation"/>
-           </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_15">
-           <item>
-            <widget class="QLabel" name="label_19">
+           <item row="0" column="1">
+            <widget class="QLabel" name="mainKeyMng">
              <property name="text">
-              <string>Strengths of the paper</string>
+              <string>MAINKEY</string>
              </property>
             </widget>
            </item>
-           <item>
-            <widget class="QLabel" name="label_20">
-             <property name="text">
-              <string>Weaknesses of the paper</string>
-             </property>
+           <item row="1" column="0">
+            <widget class="QTableWidget" name="authorsTableMng">
+             <column>
+              <property name="text">
+               <string>Name</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Email</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Org</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Phone</string>
+              </property>
+             </column>
             </widget>
            </item>
-          </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_16">
-           <item>
-            <widget class="QTextEdit" name="commentsStrengths"/>
+           <item row="1" column="1">
+            <widget class="QListWidget" name="paperKeyListMng"/>
            </item>
-           <item>
-            <widget class="QTextEdit" name="commentsWeaknesses"/>
+           <item row="2" column="0">
+            <widget class="QTextBrowser" name="paperAbstractMng"/>
            </item>
           </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_17">
-           <item>
-            <widget class="QLabel" name="label_21">
-             <property name="text">
-              <string>Would this paper be suitable as a short paper?</string>
-             </property>
-            </widget>
-           </item>
-           <item>
-            <widget class="QLabel" name="label_22">
-             <property name="text">
-              <string>Should this paper be considered for a best paper award?</string>
-             </property>
-            </widget>
+         </widget>
+         <widget class="QWidget" name="verticalLayoutWidget_11">
+          <property name="geometry">
+           <rect>
+            <x>250</x>
+            <y>190</y>
+            <width>511</width>
+            <height>361</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_12">
+           <item>
+            <layout class="QGridLayout" name="gridLayout_7">
+             <item row="0" column="0">
+              <widget class="QLabel" name="discussionLabel_3">
+               <property name="text">
+                <string>Discussion</string>
+               </property>
+              </widget>
+             </item>
+             <item row="1" column="0">
+              <widget class="QTextBrowser" name="discussionBodyMng">
+               <property name="html">
+                <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+               </property>
+              </widget>
+             </item>
+             <item row="1" column="1">
+              <layout class="QVBoxLayout" name="verticalLayout_5">
+               <item>
+                <widget class="QTableWidget" name="reviewersTable">
+                 <column>
+                  <property name="text">
+                   <string>Name</string>
+                  </property>
+                 </column>
+                 <column>
+                  <property name="text">
+                   <string>Email</string>
+                  </property>
+                 </column>
+                 <column>
+                  <property name="text">
+                   <string>Org</string>
+                  </property>
+                 </column>
+                 <column>
+                  <property name="text">
+                   <string>Phone</string>
+                  </property>
+                 </column>
+                </widget>
+               </item>
+               <item>
+                <layout class="QHBoxLayout" name="horizontalLayout_9">
+                 <item>
+                  <widget class="QLabel" name="label_5">
+                   <property name="text">
+                    <string>User:</string>
+                   </property>
+                  </widget>
+                 </item>
+                 <item>
+                  <widget class="QLineEdit" name="toReview_2"/>
+                 </item>
+                 <item>
+                  <widget class="QPushButton" name="addAsReviewer_2">
+                   <property name="text">
+                    <string>Add as Reviewer</string>
+                   </property>
+                  </widget>
+                 </item>
+                </layout>
+               </item>
+              </layout>
+             </item>
+             <item row="0" column="1">
+              <widget class="QLabel" name="label_6">
+               <property name="text">
+                <string>Reviewers</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="1">
+              <layout class="QVBoxLayout" name="verticalLayout_13">
+               <item>
+                <widget class="QLabel" name="label_41">
+                 <property name="text">
+                  <string>Comments</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QTextBrowser" name="commentsBrowser"/>
+               </item>
+              </layout>
+             </item>
+             <item row="2" column="0">
+              <layout class="QFormLayout" name="formLayout">
+               <property name="fieldGrowthPolicy">
+                <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+               </property>
+               <item row="0" column="0">
+                <widget class="QLabel" name="label_24">
+                 <property name="text">
+                  <string>Overall</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="0" column="1">
+                <widget class="QLabel" name="overallScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="1" column="0">
+                <widget class="QLabel" name="label_27">
+                 <property name="text">
+                  <string>Confidence</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="1" column="1">
+                <widget class="QLabel" name="confidenceScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="2" column="0">
+                <widget class="QLabel" name="label_29">
+                 <property name="text">
+                  <string>Relevance</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="2" column="1">
+                <widget class="QLabel" name="relevanceScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="3" column="0">
+                <widget class="QLabel" name="label_31">
+                 <property name="text">
+                  <string>Originality</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="3" column="1">
+                <widget class="QLabel" name="originalityScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="4" column="0">
+                <widget class="QLabel" name="label_33">
+                 <property name="text">
+                  <string>Significance</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="4" column="1">
+                <widget class="QLabel" name="significanceScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="5" column="0">
+                <widget class="QLabel" name="label_35">
+                 <property name="text">
+                  <string>Presentation</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="5" column="1">
+                <widget class="QLabel" name="presentationScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="6" column="0">
+                <widget class="QLabel" name="label_37">
+                 <property name="text">
+                  <string>Technical Quality</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="6" column="1">
+                <widget class="QLabel" name="techqualScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="7" column="0">
+                <widget class="QLabel" name="label_39">
+                 <property name="text">
+                  <string>Evaluation</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="7" column="1">
+                <widget class="QLabel" name="evaluationScore">
+                 <property name="text">
+                  <string>-</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="8" column="0">
+                <widget class="QPushButton" name="acceptPaper">
+                 <property name="text">
+                  <string>Accept Paper</string>
+                 </property>
+                </widget>
+               </item>
+               <item row="8" column="1">
+                <widget class="QPushButton" name="rejectPaper">
+                 <property name="text">
+                  <string>Reject Paper</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
            </item>
           </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_18">
+         </widget>
+        </widget>
+        <widget class="QWidget" name="usersTab">
+         <attribute name="title">
+          <string>User Management</string>
+         </attribute>
+         <widget class="QTableWidget" name="usersTable">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>10</y>
+            <width>311</width>
+            <height>531</height>
+           </rect>
+          </property>
+          <column>
+           <property name="text">
+            <string>Name</string>
+           </property>
+          </column>
+          <column>
+           <property name="text">
+            <string>User Name</string>
+           </property>
+          </column>
+          <column>
+           <property name="text">
+            <string>id</string>
+           </property>
+          </column>
+         </widget>
+         <widget class="QWidget" name="verticalLayoutWidget_6">
+          <property name="geometry">
+           <rect>
+            <x>370</x>
+            <y>10</y>
+            <width>291</width>
+            <height>321</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_6">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_8">
+             <item>
+              <widget class="QLabel" name="username_5">
+               <property name="text">
+                <string>USERNAME</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="userid_5">
+               <property name="text">
+                <string>USERID</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <widget class="QLabel" name="name_5">
+             <property name="text">
+              <string>NAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="email_5">
+             <property name="text">
+              <string>EMAIL</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="organisation_5">
+             <property name="text">
+              <string>ORGANISATION</string>
+             </property>
+            </widget>
+           </item>
            <item>
-            <widget class="QTextEdit" name="commentsShortPaper"/>
+            <widget class="QLabel" name="phone_5">
+             <property name="text">
+              <string>PHONE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_10">
+             <property name="text">
+              <string>Keywords</string>
+             </property>
+            </widget>
            </item>
            <item>
-            <widget class="QTextEdit" name="commentsBestAward"/>
+            <widget class="QListWidget" name="userKeyList"/>
            </item>
           </layout>
-         </item>
-         <item>
-          <layout class="QHBoxLayout" name="horizontalLayout_19">
+         </widget>
+         <widget class="QWidget" name="horizontalLayoutWidget_2">
+          <property name="geometry">
+           <rect>
+            <x>370</x>
+            <y>500</y>
+            <width>291</width>
+            <height>41</height>
+           </rect>
+          </property>
+          <layout class="QHBoxLayout" name="horizontalLayout_6">
+           <item>
+            <widget class="QLabel" name="label_4">
+             <property name="text">
+              <string>Paper:</string>
+             </property>
+            </widget>
+           </item>
            <item>
-            <widget class="QLabel" name="label_23">
+            <widget class="QLineEdit" name="toReview"/>
+           </item>
+           <item>
+            <widget class="QPushButton" name="addAsReviewer">
              <property name="text">
-              <string>Detailed comments and suggestions</string>
+              <string>Add to Review</string>
              </property>
             </widget>
            </item>
+          </layout>
+         </widget>
+         <widget class="QWidget" name="verticalLayoutWidget_15">
+          <property name="geometry">
+           <rect>
+            <x>370</x>
+            <y>400</y>
+            <width>291</width>
+            <height>101</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_17">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_23">
+             <item>
+              <widget class="QLabel" name="label_30">
+               <property name="text">
+                <string>Authored Papers</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_28">
+               <property name="text">
+                <string>Assigned to Review</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
            <item>
-            <widget class="QTextEdit" name="commentsSuggestions">
-             <property name="html">
-              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+            <layout class="QHBoxLayout" name="horizontalLayout_24">
+             <item>
+              <widget class="QListWidget" name="authoredPapers"/>
+             </item>
+             <item>
+              <widget class="QListWidget" name="assignedPapers"/>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </widget>
+         <widget class="QWidget" name="verticalLayoutWidget_5">
+          <property name="geometry">
+           <rect>
+            <x>370</x>
+            <y>340</y>
+            <width>291</width>
+            <height>51</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_18">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_29">
+             <item>
+              <widget class="QLabel" name="label_3">
+               <property name="text">
+                <string>Words per Post</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_2">
+               <property name="text">
+                <string>Reviewers per Paper</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_30">
+             <item>
+              <widget class="QLineEdit" name="lineEdit_5"/>
+             </item>
+             <item>
+              <widget class="QLineEdit" name="lineEdit_4"/>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </widget>
+        </widget>
+        <widget class="QWidget" name="reviewTab">
+         <attribute name="title">
+          <string>Review</string>
+         </attribute>
+         <widget class="QWidget" name="verticalLayoutWidget_7">
+          <property name="geometry">
+           <rect>
+            <x>10</x>
+            <y>150</y>
+            <width>761</width>
+            <height>416</height>
+           </rect>
+          </property>
+          <layout class="QVBoxLayout" name="verticalLayout_7">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_11">
+             <item>
+              <widget class="QLabel" name="label_11">
+               <property name="text">
+                <string>Overall</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="overall"/>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_12">
+               <property name="text">
+                <string>Confidence</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="confidence"/>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_12">
+             <item>
+              <widget class="QLabel" name="label_13">
+               <property name="text">
+                <string>Relevance</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="relevance"/>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_14">
+               <property name="text">
+                <string>Originality</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="originality"/>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_13">
+             <item>
+              <widget class="QLabel" name="label_15">
+               <property name="text">
+                <string>Significance</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="significance"/>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_16">
+               <property name="text">
+                <string>Presentation</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="presentation"/>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_14">
+             <item>
+              <widget class="QLabel" name="label_17">
+               <property name="text">
+                <string>Technical Quality</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="techQuality"/>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_18">
+               <property name="text">
+                <string>Evaluation</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QSpinBox" name="evaluation"/>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_15">
+             <item>
+              <widget class="QLabel" name="label_19">
+               <property name="text">
+                <string>Strengths of the paper</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_20">
+               <property name="text">
+                <string>Weaknesses of the paper</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_16">
+             <item>
+              <widget class="QTextEdit" name="commentsStrengths"/>
+             </item>
+             <item>
+              <widget class="QTextEdit" name="commentsWeaknesses"/>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_17">
+             <item>
+              <widget class="QLabel" name="label_21">
+               <property name="text">
+                <string>Would this paper be suitable as a short paper?</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_22">
+               <property name="text">
+                <string>Should this paper be considered for a best paper award?</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_18">
+             <item>
+              <widget class="QTextEdit" name="commentsShortPaper"/>
+             </item>
+             <item>
+              <widget class="QTextEdit" name="commentsBestAward"/>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_19">
+             <item>
+              <widget class="QLabel" name="label_23">
+               <property name="text">
+                <string>Detailed comments and suggestions</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QTextEdit" name="commentsSuggestions">
+               <property name="html">
+                <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </widget>
+         <widget class="QWidget" name="gridLayoutWidget">
+          <property name="geometry">
+           <rect>
+            <x>10</x>
+            <y>20</y>
+            <width>761</width>
+            <height>130</height>
+           </rect>
+          </property>
+          <layout class="QGridLayout" name="gridLayout">
+           <item row="0" column="0">
+            <widget class="QComboBox" name="selectPaperReview"/>
+           </item>
+           <item row="1" column="1">
+            <widget class="QListWidget" name="paperKeyListReview"/>
+           </item>
+           <item row="1" column="0">
+            <widget class="QTextBrowser" name="paperAbstractReview"/>
+           </item>
+           <item row="0" column="1">
+            <widget class="QLabel" name="mainKey">
+             <property name="text">
+              <string>MAINKEY</string>
              </property>
             </widget>
            </item>
           </layout>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QWidget" name="gridLayoutWidget">
-        <property name="geometry">
-         <rect>
-          <x>10</x>
-          <y>20</y>
-          <width>761</width>
-          <height>130</height>
-         </rect>
-        </property>
-        <layout class="QGridLayout" name="gridLayout">
-         <item row="0" column="0">
-          <widget class="QComboBox" name="selectPaperReview"/>
-         </item>
-         <item row="1" column="1">
-          <widget class="QListWidget" name="paperKeyListReview"/>
-         </item>
-         <item row="1" column="0">
-          <widget class="QTextBrowser" name="paperAbstractReview"/>
-         </item>
-         <item row="0" column="1">
-          <widget class="QLabel" name="mainKey">
-           <property name="text">
-            <string>MAINKEY</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </widget>
-       <widget class="QPushButton" name="submitReview">
-        <property name="geometry">
-         <rect>
-          <x>20</x>
-          <y>550</y>
-          <width>75</width>
-          <height>23</height>
-         </rect>
-        </property>
-        <property name="text">
-         <string>Submit</string>
-        </property>
+         </widget>
+         <widget class="QPushButton" name="submitReview">
+          <property name="geometry">
+           <rect>
+            <x>20</x>
+            <y>550</y>
+            <width>75</width>
+            <height>23</height>
+           </rect>
+          </property>
+          <property name="text">
+           <string>Submit</string>
+          </property>
+         </widget>
+        </widget>
        </widget>
       </widget>
      </widget>

commit e0156bff2e3ab8fe4e5c44f2ded4b4e84a7c6f29
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Tue Oct 28 16:02:38 2014 +1100

    cleaned up files in Database + minor fixes

diff --git a/Algorithm/Algo.hpp b/Algorithm/Algo.hpp
index 001cefc..e3a236c 100644
--- a/Algorithm/Algo.hpp
+++ b/Algorithm/Algo.hpp
@@ -25,8 +25,13 @@
 
 struct ReviewerBid
 {
-	int score = 0;
-	int reviewerID = 0;
+    ReviewerBid() 
+    { 
+        score = 0; 
+        reviewerID = 0; 
+    }
+	int score;
+	int reviewerID;
 };
 
 class PaperForReview
diff --git a/Database/Database.hpp b/Database/Database.hpp
index b71e399..7c3c135 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -1,10 +1,6 @@
 #ifndef DATABASE_H
 #define DATABASE_H
-#include <string>
-#include <vector>
-#include "mysql_connection.h"
-#include "mysql_driver.h"
-#include "MyRecord.h"
+#include "Exception.hpp"
 #include "../Server/User.hpp"
 #include "../DataAll/Conference.hpp"
 #include "../DataAll/Date.hpp"
@@ -15,6 +11,12 @@
 #include "../DataAll/Discussion.hpp"
 #include "../DataAll/DiscussionPost.hpp"
 
+#include "mysql_connection.h"
+#include "mysql_driver.h"
+
+#include <string>
+#include <vector>
+
 class Database {
 public:
     Database();
diff --git a/Database/Exception.hpp b/Database/Exception.hpp
new file mode 100644
index 0000000..216cca4
--- /dev/null
+++ b/Database/Exception.hpp
@@ -0,0 +1,25 @@
+/*
+ * File:        MyException.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:20 AM
+ */
+
+#ifndef MYEXCEPTION_H
+#define MYEXCEPTION_H
+
+#include <string>
+#include <exception>
+using namespace std;
+
+class MyException : public exception {
+public:
+    MyException(string& whatsup) : message(whatsup) {  }
+    ~MyException() throw() {}
+    const char* what(){return message.c_str();}
+private:
+    string message;
+};
+
+#endif  /* MYEXCEPTION_H */
+
diff --git a/Database/MyException.h b/Database/MyException.h
deleted file mode 100644
index 216cca4..0000000
--- a/Database/MyException.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * File:        MyException.h
- * Author:      nabg
- *
- * Created on 27 November 2012, 11:20 AM
- */
-
-#ifndef MYEXCEPTION_H
-#define MYEXCEPTION_H
-
-#include <string>
-#include <exception>
-using namespace std;
-
-class MyException : public exception {
-public:
-    MyException(string& whatsup) : message(whatsup) {  }
-    ~MyException() throw() {}
-    const char* what(){return message.c_str();}
-private:
-    string message;
-};
-
-#endif  /* MYEXCEPTION_H */
-
diff --git a/Database/MyRecord.cpp b/Database/MyRecord.cpp
deleted file mode 100644
index f8c7c46..0000000
--- a/Database/MyRecord.cpp
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * File:        MyRecord.cpp
- * Author:      nabg
- * 
- * Created on 23 November 2012, 1:25 PM
- * 
- * See MyRecord.h for some explanation!
- * 
- */
-
-#include <vector>
-#include <algorithm>
-#include "MyRecord.h"
-#include "stringtrimmer.h"
-#include "email_regex.hpp"
-
-#include <boost/regex.hpp>
-
-MyRecord::MyRecord(string& id) {
-    this->id = id;
-}
-
-void MyRecord::setName(string& aname) throw (MyException) {
-    this->name = aname;
-}
-         
-void MyRecord::setEmail(string& amail) throw (MyException) {
-    if (boost::regex_match(amail, validationExpression))
-    {
-      this->email = amail;
-    }
-    else
-    {
-        std::string msg = "Email of wrong format";
-        throw MyException(msg);
-    }
-}
-
-void MyRecord::setInfo(string& info) throw (MyException) {
-    this->info = info;
-}
-
-void MyRecord::setImage(string& imagestr) throw (MyException) {
-    this->image = imagestr;
-}
-
-void MyRecord::addRole(string& anotherrole)  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-    if (it != this->roles.end()) return; // Found it, so don't duplicate
-    roles.push_back(anotherrole);
-}
-
-void MyRecord::removeRole(std::string& oldrole)
-{
-    this->roles.erase(remove(this->roles.begin(),
-        this->roles.end(), oldrole),
-        this->roles.end());
-}
-
-void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
-    if (key.empty() || value.empty()) {
-        string msg = "Empty key or value";
-        throw MyException(msg);
-    }
-    // If same collection/key combination specified more than once, later value
-    // overwrites earlier value for that key.
-
-// Change to allow of rSTL's insert() not allowing for replacement
-    if (collectionname == "Phones") {
-        this->phones[key]=value;
-    } else
-        if (collectionname == "Addresses") {
-        this->addresses[key]=value;
-    } else
-        if (collectionname == "Other") {
-         this->other[key]=value;
-    } else {
-        string errmsg = "There is no collection called " + collectionname;
-        throw MyException(errmsg);
-    }
-}
-
-string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
-
-
-    if (collectionname == "Phones") {
-        return phones.find(key)->second;
-    } else
-        if (collectionname == "Addresses") {
-        return addresses.find(key)->second;
-    } else
-        if (collectionname == "Other") {
-        return other.find(key)->second;
-    }
-
-    string errmsg = "There is no collection called " + collectionname;
-    throw MyException(errmsg);
-
-}
-
-
-bool MyRecord::hasRole(string&  anotherrole) const  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::const_iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-   return(it != this->roles.end()) ;
-}
diff --git a/Database/MyRecord.h b/Database/MyRecord.h
deleted file mode 100644
index 076ae54..0000000
--- a/Database/MyRecord.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * File:        MyRecord.h
- * Author:      nabg
- *
- * Created on 27 November 2012, 11:18 AM
- */
-
-#ifndef MYRECORD_H
-#define MYRECORD_H
-#include "MyException.h"
-#include <map>
-#include <string>
-#include <vector>
-using namespace std;
-
-class MyRecord {
-public:
-    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
-    // Mutator functions - setting of other fields
-    // In this version, hardly any of the implementations will actually throw exceptions
-    // later validation functions will be added
-    void setName(std::string& aname) throw (MyException);
-    void setEmail(std::string& amail) throw (MyException);
-    void setInfo(std::string& info) throw (MyException);
-    void setImage(std::string& imagestr) throw (MyException);
-    void addRole(std::string& anotherrole) ;
-    void removeRole(std::string& oldrole);
-    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
-    // Accessor functions
-
-    std::string getID() const { return this->id; }
-    std::string getName() const { return this->name; }
-    std::string getEmail() const { return this->email; }
-    std::string getInfo() const { return this->info; }
-    std::string getImage() const { return this->image; }
-    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
-    const std::vector<std::string>& getRoles() const { return this->roles; }
-    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
-    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
-    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
-
-    bool hasRole(std::string& queryrole) const;
-
-private:
-    std::string id; // Also known as "nickname", or even "primary key"
-    std::string name; // full name
-    std::string email;
-    std::string image;
-    std::string info;
-    std::vector<std::string> roles;
-    std::map<std::string,std::string> phones;
-    std::map<std::string,std::string> addresses;
-    std::map<std::string,std::string> other;
-     // Finally, note that copy constructor and assignment operator are
-    // private (and no implementations will be defined).  I choose to 
-    // disallow such operations.
-    MyRecord(const MyRecord& orig);
-    MyRecord& operator=(const MyRecord&);
-    // Further there is no virtual destructor, I do not intend MyRecord
-    // to be the base class in some hierarchy.
-};
-
-#endif  /* MYRECORD_H */
diff --git a/Database/MyRecordStore.cpp b/Database/MyRecordStore.cpp
deleted file mode 100644
index c840738..0000000
--- a/Database/MyRecordStore.cpp
+++ /dev/null
@@ -1,332 +0,0 @@
-#include "MyRecordStore.h"
-
-#include "cppconn/driver.h"
-#include "cppconn/exception.h"
-#include "cppconn/resultset.h"
-#include "cppconn/statement.h"
-#include "cppconn/prepared_statement.h"
-
-#include <cstring>
-#include <stdlib.h>
-#include <iostream>
-
-#include <vector>
-#include <map>
-#include <string>
-
-using namespace sql;
-
-const char* databaseStr = "localhost";
-const char* databaseUserName = "matt";
-const char* databaseUserPassword = "nuria1990";
-const char* databaseSchema = "csci222";
-
-const char* noDB = "Sorry, but was unable to open database so operation failed";
-
-const char* prepareFailed = "Failure when preparing statement";
-const char* bindFailed = "Failure when binding arguments";
-const char* writeFailed = "Failure when writing to database";
-
-MyRecordStore::MyRecordStore()
-{
-        // Constructors should always succeed. But suppose it failed and
-        // the database couldn't be created?
-        invalid = true;
-        driver = get_driver_instance();
-        try {
-                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
-        } catch (sql::SQLException &e) {
-                // Failed
-                return;
-        }
-        dbcon->setSchema(databaseSchema);
-        // It's ok
-        invalid = false;
-}
-
-MyRecordStore::~MyRecordStore()
-{
-        if (!invalid) {
-                this->close();
-        }
-}
-
-void MyRecordStore::close()
-{
-        if (!invalid) {
-                dbcon->close();
-                delete dbcon;
-        }
-        invalid = true;
-}
-
-bool MyRecordStore::exists(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        const char* countrecord = "select count(*) from myrecord where _id=?";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countrecord);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count = 1;
-}
-
-std::vector<std::string> *MyRecordStore::allKeys()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
-
-        const char* selectall = "select _id from MyRecord";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string anid = rs->getString(1);
-                vptr->push_back(anid);
-        }
-
-        return vptr;
-}
-std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Laboured
-        // First get a list of the ids with the role, then one by one get the
-        // complete records.
-        const char* getrolepersons = "selects personid from roles where _role=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(getrolepersons);
-        pstmt->setString(1, role);
-        rs = pstmt->executeQuery();
-
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
-
-        std::vector<std::string> people;
-
-        // rc = sqlite3_step(stmt);
-
-        while (rs->next()) {
-                std::string apersonid = std::string(rs->getString(1));
-//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
-                people.push_back(apersonid);
-        }
-
-        // Maybe there weren't any
-        if (people.size() == 0)
-                return NULL;
-
-        // Build collection by getting each record
-        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-
-        std::vector<std::string>::const_iterator it;
-        for (it = people.begin(); it != people.end(); it++) {
-                std::string aperson = *it;
-                MyRecord* rec = this->get(aperson.c_str());
-                roleholders->push_back(rec);
-        }
-
-        return roleholders;
-}
-
-void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
-{
-
-        if (invalid)
-                throw (noDB);
-
-        // Tiresome
-        // If it exists - delete it
-        if (this->exists(key)) {
-                bool done = this->deleteRecord(key);
-        }
-        // Insert it
-        this->recordToTables(data);
-}
-
-bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // explicitly delete subordinate records in Phones, Address, others and Roles
-        // then delete the myrecord entry
-        // recreating the prepared statements for each operation - costly
-        const char* deletephones = "delete from phones where personid=?";
-        const char* deleteaddress = "delete from addresses where personid=?";
-        const char* deleteother = "delete from other where personid=?";
-        const char* deleteroles = "delete from roles where personid=?";
-        const char* deletemyrecord = "delete from myrecord where _id=?";
-        const char* unused; // Pointer to unused part of sql string (?)
-        sql::PreparedStatement *pstmt = NULL;
-        // Phones
-        pstmt = dbcon->prepareStatement(deletephones);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Addresses
-        pstmt = dbcon->prepareStatement(deleteaddress);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        //Other
-        pstmt = dbcon->prepareStatement(deleteother);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Roles
-        pstmt = dbcon->prepareStatement(deleteroles);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Finally
-        pstmt = dbcon->prepareStatement(deletemyrecord);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        return true;
-}
-
-MyRecord *MyRecordStore::get(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Again laborious
-        // Load the MyRecord from its table, then add data from Other tables.
-        const char* getrecord = "select * from myrecord where _id=?";
-        const char* getroles = "select role from roles where personid=?";
-        const char* getphones = "select type, number from phones where personid=?";
-        const char* getaddress = "select type, address from addresses where personid=?";
-        const char* getother = "select key, valyue from other where personid=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet *rs = NULL;
-
-        pstmt = dbcon->prepareStatement(getrecord);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
-
-        std::string id = rs->getString(1);
-        std::string name = rs->getString(2);
-        std::string email = rs->getString(3);
-        std::string info = rs->getString(4);
-        std::string image = rs->getString(5);
-
-        MyRecord *arec = new MyRecord(id);
-        arec->setName(name);
-        arec->setEmail(email);
-        arec->setInfo(info);
-        arec->setImage(image);
-
-        delete rs;
-        delete pstmt;
-        // =======================================
-        // Now ask about roles
-        pstmt = dbcon->prepareStatement(getroles);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        while (rs->next())
-        {
-                std::string arole = rs->getString(1);
-                arec->addRole(arole);
-        }
-        delete rs;
-        delete pstmt;
-}
-
-void MyRecordStore::recordToTables(const MyRecord* data)
-{
-        if (invalid)
-                throw (noDB);
-
-        // Insert the myrecord data first, then deal with Other data tables
-
-        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
-        const char* putrole = "insert into roles values(?, ?)";
-        const char* putphone = "insert into phones values (?, ?, ?)";
-        const char* putaddress = "insert into addresses values (?, ?, ?)";
-        const char* putother = "insert into other values (?, ?, ?)";
-
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(putmyrecord);
-        pstmt->setString(1, data->getID());
-        pstmt->setString(2, data->getName());
-        pstmt->setString(3, data->getEmail());
-        pstmt->setString(4, data->getInfo());
-        pstmt->setString(5, data->getImage());
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // Role 
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-
-//      // Other
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-}
diff --git a/Database/MyRecordStore.h b/Database/MyRecordStore.h
deleted file mode 100644
index 261bd0e..0000000
--- a/Database/MyRecordStore.h
+++ /dev/null
@@ -1,43 +0,0 @@
-#include <string>
-#include <vector>
-#include "mysql_connection.h"
-#include "mysql_driver.h"
-#include "MyRecord.h"
-
-class MyRecordStore {
-public:
-        MyRecordStore();
-
-        ~MyRecordStore();
-        // Delete - returns false if there wasn't a record with that key
-        bool deleteRecord(const char* key) throw (const char*);
-        // Exists - is there a record with a given key
-        bool exists(const char* key) throw (const char*);
-        // Put - insert/replace a record; returns false if failed
-        // (In this example, key is actually the same as name field in data record)
-        void put(const char* key, const MyRecord *data) throw (const char*);
-        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
-        MyRecord *get(const char*key) throw (const char*);
-
-        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
-
-        void close();
-
-        std::vector<std::string> *allKeys();
-
-        bool isOK()
-        {
-                return !(this->invalid);
-        }
-
-private:
-        bool invalid;
-        const char* dbname;
-        sql::Connection *dbcon;
-        sql::Driver *driver;
-        MyRecordStore(const MyRecordStore& orig);
-        MyRecordStore& operator=(const MyRecordStore);
-
-        void recordToTables(const MyRecord *data);
-
-};
diff --git a/Database/email_regex.hpp b/Database/email_regex.hpp
deleted file mode 100644
index f886084..0000000
--- a/Database/email_regex.hpp
+++ /dev/null
@@ -1,3 +0,0 @@
-#include <boost/regex.hpp>
-
-static const boost::regex validationExpression("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
diff --git a/Database/stringtrimmer.h b/Database/stringtrimmer.h
deleted file mode 100644
index a2d38a1..0000000
--- a/Database/stringtrimmer.h
+++ /dev/null
@@ -1,31 +0,0 @@
-#ifndef STRINGTRIMMER_H
-#define STRINGTRIMMER_H
-
-#include <algorithm>
-#include <functional>
-#include <cctype>
-#include <locale>
-
-// trim from start
-static inline std::string &ltrim(std::string &s)
-{
-        s.erase(s.begin(), std::find_if(s.begin(), s.end(),
-                std::not1(std::ptr_fun<int, int>(std::isspace))));
-        return s;
-}
-
-//trim from end
-static inline std::string &rtrim(std::string &s)
-{
-        s.erase(std::find_if(s.begin(), s.end(),
-                std::not1(std::ptr_fun<int, int>(std::isspace))), s.end());
-        return s;
-}
-
-//trim from both ends
-static inline std::string &trim(std::string &s)
-{
-        return ltrim(rtrim(s));
-}
-
-#endif
diff --git a/Database/temp_database_create.txt b/Database/temp_database_create.txt
deleted file mode 100644
index d97c32c..0000000
--- a/Database/temp_database_create.txt
+++ /dev/null
@@ -1,34 +0,0 @@
-USE csci222;
-
-CREATE TABLE `myrecord` (
-        `_id` text,
-        `_name` text,
-        `email` text,
-	`info` text,
-	`image` text
-);
-
-CREATE TABLE `roles` (
-	`personid` text,
-	`_role` text
-);
-
-CREATE TABLE `addresses` (
-	`personid` text,
-	`addresstype` text,
-	`address` text
-);
-
-CREATE TABLE `phones` (
-	`personid` text,
-	`phonetype` text,
-	`phonenumber` text
-);
-
-CREATE TABLE `other` (
-	`personid` text,
-	`_key` text,
-	`value` text
-);
-
-INSERT INTO myrecord VALUES ('testperson' ,'Test', 'test@test.com', 'No info', NULL);
diff --git a/Server/User.hpp b/Server/User.hpp
index 2533871..35cd984 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -52,6 +52,6 @@ struct User
     std::string organisation;
     std::string phone;
     std::vector<std::string> keywords;
-    int userID = 0;
+    int userID;
 };
 #endif

commit b06ffe2ee5a50d449b0fcb0ecc09c0bf9b12972a
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 15:49:23 2014 +1100

    removed networking from server

diff --git a/Server/Server.cpp b/Server/Server.cpp
index 2aabf37..06294c5 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -10,41 +10,20 @@
 
 int main(int argc, char *argv[])
 {
-//  Database* db;
-//  PaperManager* pm;
-//  ConferenceManager* cm;
-//  UserManager* um;
-//    
-//  db = new Database(/*CONSTRUCTOR*/);
-//  pm = new PaperManager(nullptr, db);
-//  cm = new ConferenceManager(std::vector<Conference*>(), db, nullptr);
-//  um = new UserManager(nullptr, db);
-  
+    Database* db;
+    PaperManager* pm;
+    ConferenceManager* cm;
+    UserManager* um;
 
-    std::cout << "Server application starting" << std::endl;
-    std::cout << "Initializing QT framework" << std::endl;
-    QApplication app(argc, argv);
-    std::cout << "Creating threaded network server" << std::endl;
-    ServerMain *theServer = new ServerMain();
-    std::cout << "Server location: " << theServer->getIpAddress().toStdString()
-              << ":" << theServer->listeningPort().toStdString() << std::endl;
-    if(!theServer->serverIsOK()) {
-        std::cout << "Failed" << std::endl;
-        std::exit(1);
-    }
-  
-    
-    // create and show your widgets here
-//    gDialogptr = new Dialog();
-//    return gDialogptr->exec();
-  
-    // GO! GO! GO!
-    int rtnValue = app.exec();
-   
-//  delete um;
-//  delete cm;
-//  delete pm;
-//  delete db;
+    db = new Database(/*CONSTRUCTOR*/);
+    pm = new PaperManager(NULL, db);
+    cm = new ConferenceManager(std::vector<Conference*>(), db, NULL);
+    um = new UserManager(NULL, db);
 
-    return rtnValue;
+    delete um;
+    delete cm;
+    delete pm;
+    delete db;
+
+    return 0;
 }

commit ef059dce11f4106178320050da7e0f6f3588f483
Merge: 98a8bed 940b8f9
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 15:40:33 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 98a8bed584a8ca49af4064c578b2fde2db5c6780
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 15:40:28 2014 +1100

    removed networking from server

diff --git a/Server/ServerMain.cpp b/Server/ServerMain.cpp
deleted file mode 100644
index 795f3d4..0000000
--- a/Server/ServerMain.cpp
+++ /dev/null
@@ -1,50 +0,0 @@
-/* 
- * File:   ServerMain.cpp
- * Author: ubuntu
- * 
- * Created on 23 October 2014, 2:40 AM
- */
-
-#include <stdlib.h>
-#include "ServerMain.hpp"
-#include "ClientHandler.hpp"
-#include <QtNetwork>
-#include <iostream>
-
-ServerMain::ServerMain(QObject *parent): 
-{
-    QTcpServer = parent;
-    const char* arbitraryPort = "23456";
-    this->portnum = arbitraryPort;
-
-    QList<QHostAddress> ipAddressesList = QNetworkInterface::allAddresses();
-    // use the first non-localhost IPv4 address
-    for (int i = 0; i < ipAddressesList.size(); ++i) {
-        if (ipAddressesList.at(i) != QHostAddress::LocalHost
-                && ipAddressesList.at(i).toIPv4Address()) {
-            this->ipAddress = ipAddressesList.at(i);
-            break;
-        }
-    }
-    // if we did not find one, use IPv4 localhost
-    if (this->ipAddress.isNull())
-        ipAddress = QHostAddress(QHostAddress::LocalHost);
-
-    if (!this->listen(ipAddress,atoi(arbitraryPort))) {
-        //using namespace std;
-        std::cout << "Unable to initialize server listening port. Abort." << std::endl;
-        exit(1);
-    }
-}
-
-void ServerMain::incomingConnection(int socketDescriptor) 
-{
-    ClientHandler *handler = new ClientHandler(socketDescriptor, this);
-    connect(handler, SIGNAL(finished()), handler, SLOT(deleteLater()));
-    handler->start();
-}
-
-bool ServerMain::serverIsOK() 
-{
-    return this->isListening(); 
-}
diff --git a/Server/ServerMain.hpp b/Server/ServerMain.hpp
deleted file mode 100644
index 10d5651..0000000
--- a/Server/ServerMain.hpp
+++ /dev/null
@@ -1,34 +0,0 @@
-/* 
- * File:   ServerMain.h
- * Author: ubuntu
- *
- * Created on 23 October 2014, 2:40 AM
- */
-
-#ifndef SERVERMAIN_H
-#define	SERVERMAIN_H
-
-#include <QTcpServer>
-
-class ServerMain : public QTcpServer 
-{
-    Q_OBJECT
-    
-public:
-    ServerMain(QObject *parent = 0);
-    QString listeningPort() { return this->portnum; }
-    QString getIpAddress() { return this->ipAddress.toString(); }
-    
-    bool serverIsOK();
-    
-protected:
-    void incomingConnection(int socketDescriptor);
-
-private:
-    QString portnum;
-    QHostAddress ipAddress;
-};
-
-
-#endif	/* SERVERMAIN_H */
-

commit 940b8f9020b920695f6266b9b8902c95d9b13cbf
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 15:05:52 2014 +1100

    missing Review tab

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 6846b5e..df8f4d8 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -56,6 +56,7 @@ void MainWindow::setUser(UserType_t userType)
         ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
         ui->tabWidget->addTab(ui->authorTab, "Author");
         ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
+        ui->tabWidget->addTab(ui->reviewTab, "Review");
         ui->tabWidget->removeTab(0);
         break;
     case PCCHAIR://pcchair

commit 0cdfd28f8d0d4b02030dca44ad21c30f4d61b4c0
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 28 15:02:53 2014 +1100

    syntax errors

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index d9248f7..6846b5e 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -170,206 +170,192 @@ void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/
 void MainWindow::on_tabWidget_currentChanged(int index)
 {//change to current text or something
     QString text = ui->tabWidget->tabText(index);
-    switch(text)
-    {
-        case "Info":
-            populate_infoTabAuthor();
-            break;
-        case "Information":
-            populate_infoTabChair();
-            break;
-        case "Author":
-            populate_authorTab();
-            break;
-        case "Reviewer":
-            populate_reviewerTab();
-            break;
-        case "Paper Management":
-            populate_papersTab();
-            break;
-        case "User Management":
-            populate_usersTab();
-            break;
-        case "Review":
-            populate_reviewTab();
-            break;
-        default:
-            break;
-    }
+//    if(text == "Info")
+//        populate_infoTabAuthor();
+//    else if(text == "Information")
+//        populate_infoTabChair();
+//    else if(text == "Author")
+//        populate_authorTab();
+//    else if(text == "Reviewer")
+//        populate_reviewerTab();
+//    else if(text == "Paper Management")
+//        populate_papersTab();
+//    else if(text == "USer Management")
+//        populate_usersTab();
+//    else if(text == "Review")
+//        populate_reviewTab();
 }
 
 void MainWindow::populate_infoTabAuthor()
 {
-    User* user;
-    if(loginMgr.currentAuthor != nullptr)
-        user = dynamic_cast<User*>(currentAuthor);
-    if(loginMgr.currentReviewer != nullptr)
-        user = dynamic_cast<User*>(currentReviewer);
-
-    ui->username->setText(user->username);
-    ui->userid->setText(user->getUserId());
-    ui->name->setText(user->getName());
-    ui->email->setText(user->getEmail());
-    ui->organisation->setText(user->getOrganisation());
-    ui->phone->setText(user->getPhone());
-
-    if(loginMgr.currentAuthor != nullptr)
-        for(std::vector<std::string>::iterator it = loginMgr.currentAuthor->keywords.begin(); it != loginMgr.currentAuthor->keywords.end(); ++it)
-            ui->authKeyList->addItem(*it);
-    else if(loginMgr.currentReviewer != nullptr)
-        for(std::vector<std::string>::iterator it = loginMgr.currentReviewer->keywords.begin(); it != loginMgr.currentReviewer->keywords.end(); ++it)
-            ui->authKeyList->addItem(*it);
-
-    ui->conferenceName->setText(loginMgr.activeConference->title);
-    ui->confTopic->setText(loginMgr.activeConference->topic);
-    ui->confLocation->setText(loginMgr.activeConference->location);
-    ui->confDesc->setText(loginMgr.activeConference->description);
-    for(std::vector<std::string>::iterator it = loginMgr.activeConference->keywords.begin(); it != loginMgr.activeConference->keywords.end(); ++it)
-        ui->confKeyList->addItem(*it);
-    ui->subDate->setText(loginMgr.activeConference->paperDeadline.toString());
-    ui->discDate->setText(loginMgr.activeConference->discussDeadline.toString());
-    ui->hReviewDate->setText(loginMgr.activeConference->reviewDeadlineHard.toString());
-    ui->sReviewDate->setText(loginMgr.activeConference->reviewDeadlineSoft.toString());
-    //ui->allocDate->setText(loginMgr.activeConference->);
+//    User* user;
+//    if(loginMgr->currentAuthor != nullptr)
+//        user = dynamic_cast<User*>(loginMgr->currentAuthor);
+//    if(loginMgr->currentReviewer != nullptr)
+//        user = dynamic_cast<User*>(loginMgr->currentReviewer);
+
+//    ui->username->setText(QString::fromStdString(user->userName));
+//    ui->userid->setText(QString::number(user->getUserID()));
+//    ui->name->setText(QString::fromStdString(user->getName()));
+//    ui->email->setText(QString::fromStdString(user->getEmail()));
+//    ui->organisation->setText(QString::fromStdString(user->getOrganisation()));
+//    ui->phone->setText(QString::fromStdString(user->getPhone()));
+
+//    if(loginMgr->currentAuthor != nullptr)
+//        for(std::vector<std::string>::iterator it = loginMgr->currentAuthor->keywords.begin(); it != loginMgr->currentAuthor->keywords.end(); ++it)
+//            ui->authKeyList->addItem(QString::fromStdString(*it));
+//    else if(loginMgr->currentReviewer != nullptr)
+//        for(std::vector<std::string>::iterator it = loginMgr->currentReviewer->keywords.begin(); it != loginMgr->currentReviewer->keywords.end(); ++it)
+//            ui->authKeyList->addItem(QString::fromStdString(*it));
+
+//    ui->conferenceName->setText(QString::fromStdString(loginMgr->activeConference->title));
+//    ui->confTopic->setText(QString::fromStdString(loginMgr->activeConference->topic));
+//    ui->confLocation->setText(QString::fromStdString(loginMgr->activeConference->location));
+//    ui->confDesc->append(QString::fromStdString(loginMgr->activeConference->description));
+//    for(std::vector<std::string>::iterator it = loginMgr->activeConference->keywords.begin(); it != loginMgr->activeConference->keywords.end(); ++it)
+//        ui->confKeyList->addItem(QString::fromStdString(*it));
+//    ui->subDate->setText(QString::fromStdString(loginMgr->activeConference->paperDeadline.toString()));
+//    ui->discDate->setText(QString::fromStdString(loginMgr->activeConference->discussDeadline.toString()));
+//    ui->hReviewDate->setText(QString::fromStdString(loginMgr->activeConference->reviewDeadlineHard.toString()));
+//    ui->sReviewDate->setText(QString::fromStdString(loginMgr->activeConference->reviewDeadlineSoft.toString()));
+//    ui->allocDate->setText("29/10/14");
 }
 
 void MainWindow::populate_infoTabChair()
-{
+{/*
     PCChair* user = loginMgr->currentPCChair;
     Conference* conf = loginMgr->getActiveConference();
 
-    ui->username->setText(user->username);
-    ui->userid->setText(user->getUserId());
-    ui->name->setText(user->getName());
-    ui->email->setText(user->getEmail());
-    ui->organisation->setText(user->getOrganisation());
-    ui->phone->setText(user->getPhone());
-
-    ui->conferenceName->setText(conf->title);
-    ui->confTopic->setText(conf->topic);
-    ui->confLocation->setText(conf->location);
-    ui->confDesc->setText(conf->description);
+    ui->name->setText(QString::fromStdString(user->getName()));
+    ui->email->setText(QString::fromStdString(user->getEmail()));
+    ui->organisation->setText(QString::fromStdString(user->getOrganisation()));
+    ui->phone->setText(QString::fromStdString(user->getPhone()));
+    ui->conferenceName->setText(QString::fromStdString(conf->title));
+    ui->confTopic->setText(QString::fromStdString(conf->topic));
+    ui->confLocation->setText(QString::fromStdString(conf->location));
+    ui->confDesc->setText(QString::fromStdString(conf->description));
     for(std::vector<std::string>::iterator it = conf->keywords.begin(); it != conf->keywords.end(); ++it)
-        ui->confKeyList->addItem(*it);
+        ui->confKeyList->addItem(QString::fromStdString(*it));
     ui->subDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
-    //ui->allocDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
+    ui->allocDate->setText("29/10/14");
     ui->sReviewDateEdit->date().setDate(conf->reviewDeadlineSoft.day, conf->reviewDeadlineSoft.month, conf->reviewDeadlineSoft.year);
     ui->hReviewDateEdit->date().setDate(conf->reviewDeadlineHard.day, conf->reviewDeadlineHard.month, conf->reviewDeadlineHard.year);
-    ui->discDateEdit->date().setDate(conf->discussDeadline.day, conf->discussDeadline.month, conf->discussDeadline.year);
+    ui->discDateEdit->date().setDate(conf->discussDeadline.day, conf->discussDeadline.month, conf->discussDeadline.year);*/
 }
 
 void MainWindow::populate_authorTab()
 {
-    Author* user;
-    if(loginMgr->currentAuthor != nullptr)
-        user = loginMgr->currentAuthor;
-    else if(loginMgr->currentReviewer != nullptr)
-        user = loginMgr->currentReviewer;
-    std::vector<PaperSummary> papers = user->getOwnPapers();
-    std::vector<std::string> keys = user->getCurrentPaper().keywords;
-    std::vector<PersonalInfo> authors = user->getCurrentPaper().authors;
-
-    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
-        ui->selectPaperAuthor->addItem(it->paperName);
-
-    ui->paperAbstract->setText(user->getCurrentPaper().abstract);
-    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
-        ui->paperKeyListAuth->addItem(*it);
-
-    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
-        int rows = ui->authorsTable->rowCount();
-        ui->authorsTable->insertRow(rows);
-        QTableWidgetItem* newItem = new QTableWidgetItem(it->name);
-        ui->authorsTable->setItem(rows, 0, newItem);
-        newItem = new QTableWidgetItem(it->email);
-        ui->authorsTable->setItem(rows, 1, newItem);
-        newItem = new QTableWidgetItem(it->organisation);
-        ui->authorsTable->setItem(rows, 2, newItem);
-        newItem = new QTableWidgetItem(it->phone);
-        ui->authorsTable->setItem(rows, 3, newItem);
-    }
-    for(std::vector<string>::iterator it = loginMgr->getActiveConference()->keywords.begin(); it != loginMgr->getActiveConference()->keywords.end(); ++it){
-        ui->selectMainKey->addItem(*it);
-    }
+//    Author* user;
+//    if(loginMgr->currentAuthor != nullptr)
+//        user = loginMgr->currentAuthor;
+//    else if(loginMgr->currentReviewer != nullptr)
+//        user = loginMgr->currentReviewer;
+//    std::vector<PaperSummary> papers = user->getOwnPapers();
+//    std::vector<std::string> keys = user->getCurrentPaper().keywords;
+//    std::vector<PersonalInfo> authors = user->getCurrentPaper().authors;
+
+//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+//        ui->selectPaperAuthor->addItem(QString::fromStdString(it->paperName));
+
+//    ui->paperAbstract->append(QString::fromStdString(user->getCurrentPaper().abstract));
+//    for(std::vector<std::string>::iterator it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListAuth->addItem(QString::fromStdString(*it));
+
+//    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+//        int rows = ui->authorsTable->rowCount();
+//        ui->authorsTable->insertRow(rows);
+//        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+//        ui->authorsTable->setItem(rows, 0, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+//        ui->authorsTable->setItem(rows, 1, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+//        ui->authorsTable->setItem(rows, 2, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+//        ui->authorsTable->setItem(rows, 3, newItem);
+//    }
+//    for(std::vector<std::string>::iterator it = loginMgr->getActiveConference()->keywords.begin(); it != loginMgr->getActiveConference()->keywords.end(); ++it){
+//        ui->selectMainKey->addItem(QString::fromStdString(*it));
+//    }
 }
 
 void MainWindow::populate_papersTab()
 {
-    PCChair* user = loginMgr->currentPCChair;
-    Paper* paper = &user->getCurrentPaper();
-    std::vector<Review>* reviews = &paper->reviews;
-    std::vector<PersonalInfo>* authors = user->getCurrentPaper().authors;
-    std::vector<PersonalInfo> reviewers;
-
-
-    ui->paperNameMng->setText(paper->title);
-    ui->mainKeyMng->setText(paper->confKeyword);
-
-    ui->paperAbstractMng->setText(user->getCurrentPaper().abstract);
-    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
-        ui->paperKeyListMng->addItem(*it);
-
-    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
-        int rows = ui->authorsTableMng->rowCount();
-        ui->authorsTableMng->insertRow(rows);
-        QTableWidgetItem* newItem = new QTableWidgetItem(it->name);
-        ui->authorsTableMng->setItem(rows, 0, newItem);
-        newItem = new QTableWidgetItem(it->email);
-        ui->authorsTableMng->setItem(rows, 1, newItem);
-        newItem = new QTableWidgetItem(it->organisation);
-        ui->authorsTableMng->setItem(rows, 2, newItem);
-        newItem = new QTableWidgetItem(it->phone);
-        ui->authorsTableMng->setItem(rows, 3, newItem);
-    }
+//    PCChair* user = loginMgr->currentPCChair;
+//    Paper* paper = &user->getCurrentPaper();
+//    std::vector<Review>* reviews = &paper->reviews;
+//    std::vector<PersonalInfo>* authors = user->getCurrentPaper().authors;
+//    std::vector<PersonalInfo> reviewers;
+
+//    std::vector<std::string> keys = user->getCurrentPaper().keywords;
+
+//    ui->paperNameMng->setText(QString::fromStdString(paper->title));
+//    ui->mainKeyMng->setText(QString::fromStdString(paper->confKeyword));
+
+//    ui->paperAbstractMng->append(QString::fromStdString(user->getCurrentPaper().abstract));
+//    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListMng->addItem(QString::fromStdString(*it));
+
+//    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+//        int rows = ui->authorsTableMng->rowCount();
+//        ui->authorsTableMng->insertRow(rows);
+//        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+//        ui->authorsTableMng->setItem(rows, 0, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+//        ui->authorsTableMng->setItem(rows, 1, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+//        ui->authorsTableMng->setItem(rows, 2, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+//        ui->authorsTableMng->setItem(rows, 3, newItem);
+//    }
 }
 
 void MainWindow::populate_reviewerTab()
 {
-    Reviewer* user = loginMgr->currentReviewer;
-    std::vector<PaperSummary> papers;
-    std::vector<std::string> keys;
-    if(loginMgr->getActiveConference()->isBeforePaperDeadline)
-        papers = user->getPapersToBid();
-    else
-        papers = user->getAllocatedPapers();
-    if(user->getCurrentPaper() == nullptr && !papers.empty()){
-        user->setCurrentPaper(papers.at(0));
-        keys = user->getCurrentPaper().getKeywords();
-    }
-    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
-        ui->selectPaperReviewer->addItem(it->paperName);
-
-    ui->paperAbstractReviewer->setText(user->getCurrentPaper().abstract);
-    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
-        ui->paperKeyListReviewer->addItem(*it);
-    ui->mainKeyReviewer->setText(user->getCurrentPaper().confKeyword);
+//    Reviewer* user = loginMgr->currentReviewer;
+//    std::vector<PaperSummary> papers;
+//    std::vector<std::string> keys;
+//    if(loginMgr->getActiveConference()->isBeforePaperDeadline)
+//        papers = user->getPapersToBid();
+//    else
+//        papers = user->getAllocatedPapers();
+//    if(user->getCurrentPaper() == nullptr && !papers.empty()){
+//        user->setCurrentPaper(papers.at(0));
+//        keys = user->getCurrentPaper().getKeywords();
+//    }
+//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+//        ui->selectPaperReviewer->addItem(QString::fromStdString(it->paperName));
+
+//    ui->paperAbstractReviewer->append(QString::fromStdString(user->getCurrentPaper().abstract));
+//    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListReviewer->addItem(QString::fromStdString(*it));
+//    ui->mainKeyReviewer->setText(QString::fromStdString(user->getCurrentPaper().confKeyword));
 }
 
 void MainWindow::populate_reviewTab()
 {
-    Reviewer* user = loginMgr->currentReviewer;
-    std::vector<PaperSummary> papers = user->getAllocatedPapers();
-    std::vector<std::string> keys = user->getCurrentPaper().keywords;
-    std::vector<Review> reviews = user->getReviews();
+//    Reviewer* user = loginMgr->currentReviewer;
+//    std::vector<PaperSummary> papers = user->getAllocatedPapers();
+//    std::vector<std::string> keys = user->getCurrentPaper().keywords;
+//    std::vector<Review> reviews = user->getReviews();
 
-    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
-        ui->selectPaperReview->addItem(it->paperName);
+//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+//        ui->selectPaperReview->addItem(QString::fromStdString(it->paperName));
 
-    ui->paperAbstractReviewer->setText(user->getCurrentPaper().abstract);
-    ui->mainKey->setText(user->getCurrentPaper().confKeyword);
-    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
-        ui->paperKeyListReview->addItem(*it);
+//    ui->paperAbstractReviewer->setText(QString::fromStdString(user->getCurrentPaper().abstract));
+//    ui->mainKey->setText(QString::fromStdString(user->getCurrentPaper().confKeyword));
+//    for(std::vector<std::string>::iterator it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListReview->addItem(QString::fromStdString(*it));
 
-    for(std::vector<Reviews>::iterator it = reviews.begin(); it != reviews.end(); ++it){
-        if(it->paperID == user->getCurrentPaper().paperID){
-            ui->commentsBestAward->setText(it->commentsBestAward);
-            ui->commentsShortPaper->setText(it->commentsShortPaper);
-            ui->commentsStrengths->setText(it->commentsStrength);
-            ui->commentsWeaknesses->setText(it->commentsWeakness);
-            ui->commentsSuggestions->setText(it->commentsSuggestions);
-        }
+//    for(std::vector<Review>::iterator it = reviews.begin(); it != reviews.end(); ++it){
+//        if(it->paperID == user->getCurrentPaper().paperID){
+//            ui->commentsBestAward->setText(QString::fromStdString(it->commentsBestAward));
+//            ui->commentsShortPaper->setText(QString::fromStdString(it->commentsShortPaper));
+//            ui->commentsStrengths->setText(QString::fromStdString(it->commentsStrength));
+//            ui->commentsWeaknesses->setText(QString::fromStdString(it->commentsWeakness));
+//            ui->commentsSuggestions->setText(QString::fromStdString(it->commentsSuggestions));
+//        }
 
-    }
+//    }
 }
 
 void MainWindow::populate_usersTab()
@@ -384,6 +370,8 @@ void MainWindow::on_submit_clicked()
 
     //send paper (as in the paper details) as well as the actual paper pdf to server
     //no response from server
+
+
 }
 
 void MainWindow::on_submitBid_clicked()
@@ -397,7 +385,7 @@ void MainWindow::on_submitBid_clicked()
     //no response from server
 }
 
-void MainWindow::downloadPaper(int paperId)
+void MainWindow::downloadPaper()
 {
     int paperId = loginMgr->getCurrentUser()->getCurrentPaper().paperID;
 
@@ -430,7 +418,7 @@ void MainWindow::on_submitPosts_clicked()
 void MainWindow::on_acceptPaper_clicked()
 {
     int paperId = loginMgr->getCurrentUser()->getCurrentPaper().paperID;
-    int confId  = loginMgr->getActiveConference().confID;
+    int confId  = loginMgr->getActiveConference()->confID;
 
     //send paper id, conf id to server
     //no response from server
@@ -442,22 +430,22 @@ void MainWindow::on_rejectPaper_clicked()
 }
 void MainWindow::on_submitReview_clicked()
 {
-    Review rev;
-    rev.confidence = ui->confidence->text().toInt();
-    rev.evalution = ui->evaluation->text().toInt();
-    rev.originality = ui->originality->text().toInt();
-    rev.overall = ui->overall->text().toInt();
-    rev.presentation = ui->presentation->text().toInt();
-    rev.relevance = ui->relevance->text().toInt();
-    rev.significance = ui->significance->text().toInt();
-    rev.techQuality = ui->techQuality->text().toInt();
-    rev.commentsBestAward = ui->commentsBestAward->toPlainText();
-    rev.commentsShortPaper = ui->commentsShortPaper->toPlainText();
-    rev.commentsStrength = ui->commentsStrengths->toPlainText();
-    rev.commentsSuggestions = ui->commentsSuggestions->toPlainText();
-    rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
-    rev.paperID = loginMgr->getCurrentUser()->getCurrentPaper.paperID;
-    rev.reviewerID = loginMgr->getCurrentUser()->getUserID();
+//    Review rev;
+//    rev.confidence = ui->confidence->text().toInt();
+//    rev.evaluation = ui->evaluation->text().toInt();
+//    rev.originality = ui->originality->text().toInt();
+//    rev.overall = ui->overall->text().toInt();
+//    rev.presentation = ui->presentation->text().toInt();
+//    rev.relevance = ui->relevance->text().toInt();
+//    rev.significance = ui->significance->text().toInt();
+//    rev.techQuality = ui->techQuality->text().toInt();
+//    rev.commentsBestAward = ui->commentsBestAward->toPlainText();
+//    rev.commentsShortPaper = ui->commentsShortPaper->toPlainText();
+//    rev.commentsStrength = ui->commentsStrengths->toPlainText();
+//    rev.commentsSuggestions = ui->commentsSuggestions->toPlainText();
+//    rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
+//    rev.paperID = loginMgr->getCurrentUser()->getCurrentPaper.paperID;
+//    rev.reviewerID = loginMgr->getCurrentUser()->getUserID();
 
     //submit review to the server
     //no response from server
@@ -485,19 +473,19 @@ void MainWindow::on_addAsReviewer_2_clicked()
 void MainWindow::on_papersTable_itemSelectionChanged()
 {
 
-    std::vector<PersonalInfo> authors = loginMgr->currentPCChair->getCurrentPaper().authors;
-
-    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
-        int rows = ui->reviewersTable->rowCount();
-        ui->reviewersTable->insertRow(rows);
-        QTableWidgetItem* newItem = new QTableWidgetItem(it->name);
-        ui->reviewersTable->setItem(rows, 0, newItem);
-        newItem = new QTableWidgetItem(it->email);
-        ui->reviewersTable->setItem(rows, 1, newItem);
-        newItem = new QTableWidgetItem(it->organisation);
-        ui->reviewersTable->setItem(rows, 2, newItem);
-        newItem = new QTableWidgetItem(it->phone);
-        ui->reviewersTable->setItem(rows, 3, newItem);
-    }
+//    std::vector<PersonalInfo> authors = loginMgr->currentPCChair->getCurrentPaper().authors;
+
+//    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+//        int rows = ui->reviewersTable->rowCount();
+//        ui->reviewersTable->insertRow(rows);
+//        QTableWidgetItem* newItem = new QTableWidgetItem(QString::fromStdString(it->name));
+//        ui->reviewersTable->setItem(rows, 0, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->email));
+//        ui->reviewersTable->setItem(rows, 1, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->organisation));
+//        ui->reviewersTable->setItem(rows, 2, newItem);
+//        newItem = new QTableWidgetItem(QString::fromStdString(it->phone));
+//        ui->reviewersTable->setItem(rows, 3, newItem);
+//    }
 
 }

commit cbacc4fc0be8fae824ae94a806e1a9dfeee5abe9
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 14:36:01 2014 +1100

    removed references to networking

diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
index b20d183..86a6676 100644
--- a/UserClient/UserClient.cpp
+++ b/UserClient/UserClient.cpp
@@ -1,8 +1,7 @@
 #include <iostream>
 #include <QApplication>
 
-//#include "mainwindow.hpp"
-#include "dummy_mainwindow.hpp"
+#include "mainwindow.hpp"
 
 int main(int argc, char *argv[]) 
 {

commit 7dd0b218542ec11ce772bd9693ce7a2febf7de3e
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 14:34:58 2014 +1100

    removed references to networking

diff --git a/UserClient/LoginManager.cpp b/UserClient/LoginManager.cpp
index 75c73e9..18635b7 100644
--- a/UserClient/LoginManager.cpp
+++ b/UserClient/LoginManager.cpp
@@ -1,9 +1,9 @@
 #include "LoginManager.hpp"
 
-void LoginManager::loginRequest(QString username, QString password)
+void LoginManager::loginRequest(std::string username, std::string password)
 {
 
-    theServer->sendLoginRequest(username, password);
+//    theServer->sendLoginRequest(username, password);
     
     //this function sends the username and password to the server for verification
     //the response received is used to construct the currentUser pointer member of loginmanager
@@ -12,12 +12,12 @@ void LoginManager::loginRequest(QString username, QString password)
 
 void LoginManager::loginResponse()
 {
-    if (currentUser == nullptr) {
-        loggedIn = false;
-        QString msg = "Incorrect username/password!";
-        mWindow->errorBox(msg);
-        mWindow->noUser();
-    }
+//    if (currentUser == NULL) {
+//        loggedIn = false;
+//        std::string msg = "Incorrect username/password!";
+//        mWindow->errorBox(msg);
+//        mWindow->noUser();
+//    }
 }
 
 void LoginManager::logout()
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 6d52169..b79dd26 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -4,39 +4,47 @@
 
 #include "../DataAll/Conference.hpp"
 #include "User.hpp"
-#include "UserClientStubForServer.hpp"
+//#include "UserClientStubForServer.hpp"
 //#include "mainwindow.hpp"
 
 class MainWindow;
 
 class LoginManager {
 public:
-    LoginManager(QTcpSocket* aServer) 
+    LoginManager()
     {
-        // Connection will mainly be managed by an instance of client stub class
-        UserClientStubForServer *stub = new UserClientStubForServer(aServer, this);
-        this->theServer = stub;
-        // but do have some more initialisation to do on the connection
-        aServer->setParent(this->theServer);
-        // Read events generated through TCP connection to be handled by
-        // instance of clientstub class
-        QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
-    
-//    mWindow = new MainWindow();
-    
-//    widget.setupUi(this);
-    
-//    connect(widget.loginButton, SIGNAL(clicked()), this,
-//            SLOT(handleLoginButton()));
-//    
-//    connect(widget.quitButton, SIGNAL(clicked()), this, SLOT(close()));
-    
-    // Start things by sending a request for the names that are needed to
-    // populate the list
-    //this->theServer->getNames(); //ASYNCHRONOUS request - names will arrive sometime
-    
+        currentUser = NULL;
+        loggedIn = false;
+//        std::vector<Conference*> conferences;
+        activeConference = NULL;
     }
 
+//    LoginManager(QTcpSocket* aServer) 
+//    {
+//        // Connection will mainly be managed by an instance of client stub class
+//        UserClientStubForServer *stub = new UserClientStubForServer(aServer, this);
+//        this->theServer = stub;
+//        // but do have some more initialisation to do on the connection
+//        aServer->setParent(this->theServer);
+//        // Read events generated through TCP connection to be handled by
+//        // instance of clientstub class
+//        QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
+//    
+////    mWindow = new MainWindow();
+//    
+////    widget.setupUi(this);
+//    
+////    connect(widget.loginButton, SIGNAL(clicked()), this,
+////            SLOT(handleLoginButton()));
+////    
+////    connect(widget.quitButton, SIGNAL(clicked()), this, SLOT(close()));
+//    
+//    // Start things by sending a request for the names that are needed to
+//    // populate the list
+//    //this->theServer->getNames(); //ASYNCHRONOUS request - names will arrive sometime
+//    
+//    }
+
     LoginManager(bool iloggedIn,
         const std::vector<Conference*>& iconferences,
         Conference* iactiveConference)
@@ -64,7 +72,7 @@ public:
     void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
     void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}  
     
-    void loginRequest(QString, QString);
+    void loginRequest(std::string, std::string);
     void loginResponse();
     
     void logout();
@@ -95,11 +103,11 @@ public:
     } 
     
 private:
-    User* currentUser = nullptr;
+    User* currentUser;
     bool loggedIn;
     std::vector<Conference*> conferences;
-    Conference* activeConference = nullptr;
-    UserClientStubForServer* theServer;
+    Conference* activeConference;
+//    UserClientStubForServer* theServer;
 
 };
 #endif
diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
index 51dfb8b..b20d183 100644
--- a/UserClient/UserClient.cpp
+++ b/UserClient/UserClient.cpp
@@ -1,9 +1,8 @@
 #include <iostream>
 #include <QApplication>
 
-#include "mainwindow.hpp"
-
-QTcpSocket *establishConnection();
+//#include "mainwindow.hpp"
+#include "dummy_mainwindow.hpp"
 
 int main(int argc, char *argv[]) 
 {
@@ -11,63 +10,9 @@ int main(int argc, char *argv[])
     // Q_INIT_RESOURCE(resfile);
 
     QApplication app(argc, argv);
-
-    QTcpSocket *server = establishConnection();
-    LoginManager *mainWindow = new LoginManager(server);
     
-    mainWindow->mWindow = new MainWindow;
-    mainWindow->mWindow->show();
+    MainWindow mWindow;
+    mWindow.show();
 
     return app.exec();
 }
-
-QTcpSocket *establishConnection() 
-{
-    //just connect on localhost
-    std::string servername = "127.0.0.1";
-    std::string pnumstr = "23456";
-    /*QRegExp portChk("^\\d{4,5}$");
-    QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
-    std::cout << "Enter ip address (IP-IV) of server : ";
-    std::string servername;
-    std::cin >> servername;
-
-    int matchpt = ipChk.indexIn(servername.c_str());
-    if(matchpt < 0) {
-        std::cout << "Invalid ip address!";
-        exit(1);
-    }
-    std::cout << "Enter portnumber : ";
-    std::string pnumstr;
-    std::cin >> pnumstr;
-    matchpt = portChk.indexIn(pnumstr.c_str());
-    if(matchpt < 0) {
-        std::cout << "Invalid port number!";
-    }*/
-    QTcpSocket *tcpSocket = new QTcpSocket(0);
-    QString qhost = servername.c_str();
-    QString qport = pnumstr.c_str();
-    tcpSocket->connectToHost(qhost, qport.toInt());
-    // Allow time for connection to establish, then check that all
-    // looks good. If any problems, abort execution.
-    bool ok = tcpSocket->waitForConnected(1000);
-    if (!ok) 
-    {
-        std::cout << "Wait for connected didn't work" << std::endl;
-        exit(1);
-    }
-
-    if (!tcpSocket->isValid()) 
-    {
-        std::cout << "Didn't connect completely?" << std::endl;
-        exit(1);
-    } QAbstractSocket::SocketState state;
-    state = tcpSocket->state();
-    if (state != QAbstractSocket::ConnectedState) 
-    {
-        std::cout << "Not happy with state" << std::endl;
-        exit(1);
-    }
-    
-    return tcpSocket; 
-} 

commit 04cd753a270867a12c91e754753392dd26df6356
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 14:00:18 2014 +1100

    c++11 rollback PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 020eade..d3c19d6 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -16,6 +16,7 @@ public:
         userType = PCCHAIR;
         activeConference = NULL;
     }
+    
     PCChair(const std::vector<PaperSummary>& iallPapers)
     {
         allPapers = iallPapers;

commit b4ade659c922eed82b6458f7c7448ca4401b284b
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 13:59:25 2014 +1100

    c++11 rollback PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index e862e21..020eade 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -11,6 +11,11 @@
 class PCChair : public User 
 {
 public:
+    PCChair()
+    {
+        userType = PCCHAIR;
+        activeConference = NULL;
+    }
     PCChair(const std::vector<PaperSummary>& iallPapers)
     {
         allPapers = iallPapers;
@@ -69,9 +74,10 @@ public:
 private:
     PaperSummary* getPaperByTitle(std::string);
     PaperSummary* getPaperById(int);
+    
     std::vector<PaperSummary> allPapers;
     std::vector<User> allUsers;
-    Conference* activeConference = nullptr;
+    Conference* activeConference;
 };
 
 #endif

commit 810d0e483276b7a76b102bbd43f5a2986f6ce1a5
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 13:10:35 2014 +1100

    c++11 rollback Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index e506c3d..2374378 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -10,7 +10,10 @@
 class Author : public User 
 {
 public:
-    Author() { }
+    Author()
+    {
+        this->userType = AUTHOR;
+    }
     /*
     Author(const std::string& iuserName,
          const std::string& iname,
@@ -55,8 +58,8 @@ public:
          iuserID,
          iuserType)
     {
-         keywords(ikeywords),
-         ownPapers(iownPapers)
+         keywords = ikeywords;
+         ownPapers = iownPapers;
     }
 
     virtual void view();

commit b654478bb2a318c52facb47187b86bdff0255205
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 12:07:22 2014 +1100

    c++11 rollback User.hpp

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index a908c42..859d21c 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -5,11 +5,21 @@
 
 #include <string>
 
-enum UserType_t {AUTHOR, REVIEWER, PCCHAIR};
+enum UserType_t {NOUSER, AUTHOR, REVIEWER, PCCHAIR, ADMIN};
 
 class User {
 public:
-    User() { }
+    User()
+    {
+        password = "";
+        name = "";
+        email = "";
+        organisation = "";
+        phone = "";
+        userID = 0;
+        userType = NOUSER;
+        currentPaper = Paper();
+    }
 
     User(const std::string& iuserName,
         const std::string& ipassword,
@@ -60,7 +70,7 @@ protected:
     std::string email;
     std::string organisation;
     std::string phone;
-    int userID = 0;
+    int userID;
     UserType_t userType;
     Paper currentPaper;
 };

commit b15c1fe8025a44be6b92c24bcd7b873f62d23c22
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Tue Oct 28 11:41:31 2014 +1100

    c++11 rollback and network removal DataAll

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index d48bcd1..b8b64c9 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -5,13 +5,31 @@
 
 #include <string>
 #include <vector>
-#include <QString>
-#include <QVector>
-#include <QDataStream>
 
 struct Conference {
-    Conference() {}
-	  
+    Conference()
+    {
+        isActive = false;
+        title = "";
+        confID = 0;
+        topic = "";
+        description = "";
+        location = "";
+        //keywords vector
+        isBeforePaperDeadline = false;
+        paperDeadline = Date();
+        isBeforeAllocationDate = false;
+        allocationDate = Date();
+        isBeforeSoftReviewDeadline = false;
+        reviewDeadlineSoft = Date();
+        isBeforeHardReviewDeadline = false;
+        reviewDeadlineHard = Date();
+        isBeforeDiscussDeadline = false;
+        discussDeadline = Date();
+        reviewersPerPaper = 0;
+        postWordLimit = 0;
+    }
+
     Conference(
         bool iisActive,
         std::string& ititle,
@@ -97,7 +115,7 @@ struct Conference {
 
     bool isActive;
     std::string title;
-    int confID = 0;
+    int confID;
     std::string topic;
     std::string description;
     std::string location;
@@ -112,156 +130,9 @@ struct Conference {
     Date reviewDeadlineHard;
     bool isBeforeDiscussDeadline;
     Date discussDeadline;
-    int reviewersPerPaper = 0;
-    int postWordLimit = 0;
+    int reviewersPerPaper;
+    int postWordLimit;
 
 };
 
-inline QDataStream& operator<<(QDataStream& out, Conference* conf)
-{
-    QString tempQstring;
-    QVector<QString> tempQvector;
-    
-    out << conf->isActive;
-    tempQstring = QString::fromStdString(conf->title);
-    out << tempQstring;
-    out << conf->confID;
-    tempQstring = QString::fromStdString(conf->topic);
-    out << tempQstring;
-    tempQstring = QString::fromStdString(conf->description);
-    out << tempQstring;
-    tempQstring = QString::fromStdString(conf->location);
-    out << tempQstring;
-    
-    for (unsigned int i = 0; i < conf->keywords.size(); ++i)
-    {
-        tempQstring = QString::fromStdString(conf->keywords[i]);
-        tempQvector.append(tempQstring);
-    }
-    out << tempQvector;
-    tempQvector.clear();
-  
-    out << conf->isBeforePaperDeadline;
-    out << conf->paperDeadline;
-    out << conf->isBeforeAllocationDate;
-    out << conf->allocationDate;
-    out << conf->isBeforeSoftReviewDeadline;
-    out << conf->reviewDeadlineSoft;
-    out << conf->isBeforeHardReviewDeadline;
-    out << conf->reviewDeadlineHard;
-    out << conf->isBeforeDiscussDeadline;
-    out << conf->discussDeadline;
-    out << conf->reviewersPerPaper;
-    out << conf->postWordLimit;
-    return out;
-}
-
-inline QDataStream& operator<<(QDataStream& out, Conference& conf)
-{
-    QString tempQstring;
-    QVector<QString> tempQvector;
-    
-    out << conf.isActive;
-    tempQstring = QString::fromStdString(conf.title);
-    out << tempQstring;
-    out << conf.confID;
-    tempQstring = QString::fromStdString(conf.topic);
-    out << tempQstring;
-    tempQstring = QString::fromStdString(conf.description);
-    out << tempQstring;
-    tempQstring = QString::fromStdString(conf.location);
-    out << tempQstring;
-    
-    for (unsigned int i = 0; i < conf.keywords.size(); ++i)
-        tempQvector.append(QString::fromStdString(conf.keywords[i]));
-    out << tempQvector;
-    tempQvector.clear();
-  
-    out << conf.isBeforePaperDeadline;
-    out << conf.paperDeadline;
-    out << conf.isBeforeAllocationDate;
-    out << conf.allocationDate;
-    out << conf.isBeforeSoftReviewDeadline;
-    out << conf.reviewDeadlineSoft;
-    out << conf.isBeforeHardReviewDeadline;
-    out << conf.reviewDeadlineHard;
-    out << conf.isBeforeDiscussDeadline;
-    out << conf.discussDeadline;
-    out << conf.reviewersPerPaper;
-    out << conf.postWordLimit;
-    return out;
-}
-
-inline QDataStream& operator>>(QDataStream& in, Conference* conf)
-{
-    QString tempQstring;
-    QVector<QString> tempQvector;
-    
-    in >> conf->isActive;
-    in >> tempQstring;
-    conf->title = tempQstring.toStdString();
-    in >> conf->confID;
-    in >> tempQstring;
-    conf->topic = tempQstring.toStdString();
-    in >> tempQstring;
-    conf->description = tempQstring.toStdString();
-    in >> tempQstring;
-    conf->location = tempQstring.toStdString();
-    
-    in >>  tempQvector;
-    for (unsigned int i = 0; i < tempQvector.size(); ++i)
-        conf->keywords.push_back(tempQvector[i].toStdString());
-    tempQvector.clear();
-  
-    in >>  conf->isBeforePaperDeadline;
-    in >>  conf->paperDeadline;
-    in >>  conf->isBeforeAllocationDate;
-    in >>  conf->allocationDate;
-    in >>  conf->isBeforeSoftReviewDeadline;
-    in >>  conf->reviewDeadlineSoft;
-    in >>  conf->isBeforeHardReviewDeadline;
-    in >>  conf->reviewDeadlineHard;
-    in >>  conf->isBeforeDiscussDeadline;
-    in >>  conf->discussDeadline;
-    in >>  conf->reviewersPerPaper;
-    in >>  conf->postWordLimit;
-    return in;
-}
-
-inline QDataStream& operator>>(QDataStream& in, Conference& conf)
-{
-    QString tempQstring;
-    QVector<QString> tempQvector;
-    
-    in >> conf.isActive;
-    in >> tempQstring;
-    conf.title = tempQstring.toStdString();
-    in >> conf.confID;
-    in >> tempQstring;
-    conf.topic = tempQstring.toStdString();
-    in >> tempQstring;
-    conf.description = tempQstring.toStdString();
-    in >> tempQstring;
-    conf.location = tempQstring.toStdString();
-    
-    in >>  tempQvector;
-    for (unsigned int i = 0; i < tempQvector.size(); ++i)
-        conf.keywords.push_back(tempQvector[i].toStdString());
-    tempQvector.clear();
-  
-    in >>  conf.isBeforePaperDeadline;
-    in >>  conf.paperDeadline;
-    in >>  conf.isBeforeAllocationDate;
-    in >>  conf.allocationDate;
-    in >>  conf.isBeforeSoftReviewDeadline;
-    in >>  conf.reviewDeadlineSoft;
-    in >>  conf.isBeforeHardReviewDeadline;
-    in >>  conf.reviewDeadlineHard;
-    in >>  conf.isBeforeDiscussDeadline;
-    in >>  conf.discussDeadline;
-    in >>  conf.reviewersPerPaper;
-    in >>  conf.postWordLimit;
-    return in;
-}
-
 #endif
diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
index fa670d8..d8b5572 100644
--- a/DataAll/Date.hpp
+++ b/DataAll/Date.hpp
@@ -2,12 +2,16 @@
 #define DATE_H
 
 #include <sstream>
-#include <QDataStream>
 
 class Date 
 {
 public:
-    Date() { }
+    Date()
+    {
+        day = 0;
+        month = 0;
+        year = 0;
+    }
 
     Date(int iday, int imonth, int iyear)
     {
@@ -30,8 +34,8 @@ public:
     int getMonth() {return month;}
     int getYear() {return year;}
     
-    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-    {
+    bool compare(const Date& idate)
+    { //returns true if idate is before or on the same day as this
         if(idate.year != year) {
             return idate.year < year;
         } else {
@@ -55,49 +59,9 @@ public:
     } 
     
 private:
-    int day = 0;
-    int month = 0;
-    int year = 0;
+    int day;
+    int month;
+    int year;
 };
 
-  inline QDataStream& operator<<(QDataStream& out, Date* d)
-{
-    out << d->getDay();
-    out << d->getMonth();
-    out << d->getYear();
-    return out;
-}
-
-inline QDataStream& operator<<(QDataStream& out, Date& d)
-{
-    out << d.getDay();
-    out << d.getMonth();
-    out << d.getYear();
-    return out;
-}
-
-inline QDataStream& operator>>(QDataStream& in, Date* d)
-{
-    int tmp;
-    in >> tmp;
-    d->setDay(tmp);
-    in >> tmp;
-    d->setMonth(tmp);
-    in >> tmp;
-    d->setYear(tmp);
-    return in;
-}
-
-inline QDataStream& operator>>(QDataStream& in, Date& d)
-{
-    int tmp;
-    in >> tmp;
-    d.setDay(tmp);
-    in >> tmp;
-    d.setMonth(tmp);
-    in >> tmp;
-    d.setYear(tmp);
-    return in;
-}
-
 #endif
diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index f983594..a6fef7f 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -4,13 +4,13 @@
 #include "../DataAll/DiscussionPost.hpp"
 
 #include <list>
-//#include <QList>
-#include <QLinkedList>
-#include <QDataStream>
 
 struct Discussion 
 {
-    Discussion() { }
+    Discussion()
+    {
+        //discussion list
+    }
 
     Discussion(const std::list<DiscussionPost>& idiscussion)
     {
@@ -25,46 +25,4 @@ struct Discussion
     std::list<DiscussionPost> discussion;
 };
 
-  inline QDataStream& operator<<(QDataStream& out, Discussion* disc)
-  {
-    QLinkedList<Discussion> tempQList;
-     for (unsigned int i = 0; i < disc->discussion.size(); ++i)
-       tempQList.append(disc->discussion[i]);
-     out << tempQList;
-     tempQList.clear();
-
-     return out;
-  }
-  
-  inline QDataStream& operator<<(QDataStream& out, Discussion& disc)
-  {
-    QLinkedList<Discussion> tempQList;
-     for (unsigned int i = 0; i < disc.discussion.size(); ++i)
-       tempQList.append(QString::fromStdString(disc.discussion[i]));
-     out << tempQList;
-     tempQList.clear();
-     return out;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, Discussion* disc)
-  {
-    QLinkedList<Discussion> tempQList;
-    in >> tempQList;
-    for (unsigned int i = 0; i < tempQList.size(); ++i)
-      disc->discussion.push_back(tempQList[i].toStdString());
-    tempQList.clear();
-    return in;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, Discussion& disc)
-  {
-    QLinkedList<Discussion> tempQList;
-    in >> tempQList;
-    for (unsigned int i = 0; i < tempQList.size(); ++i)
-      disc.discussion.push_back(tempQList[i].toStdString());
-    tempQList.clear();
-    return in;
-  }
-
-
 #endif
diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
index ac91ef7..0b4381b 100644
--- a/DataAll/DiscussionPost.hpp
+++ b/DataAll/DiscussionPost.hpp
@@ -1,13 +1,16 @@
 #ifndef DISCUSSION_POST_H
 #define DISCUSSION_POST_H
 
-#include <QString>
-#include <QDataStream>
 #include <string>
 
 struct DiscussionPost 
 {
-    DiscussionPost() {}
+    DiscussionPost()
+    {
+        comment = "";
+        reviewerID = 0;
+        postID = 0;
+    }
     
     DiscussionPost(const std::string& icomment,
         int ireviewerID,
@@ -27,48 +30,8 @@ struct DiscussionPost
     }
     
     std::string comment;
-    int reviewerID = 0;
-    int postID = 0;
+    int reviewerID;
+    int postID;
 };
 
-  inline QDataStream& operator<<(QDataStream& out, DiscussionPost* discp)
-  {
-    QString tempQstring;
-    out << discp->reviewerID;
-    out << discp->postID;
-    tempQstring = QString::fromStdString(discp->comment);
-    out << tempQstring;
-    return out;
-  }
-  
-  inline QDataStream& operator<<(QDataStream& out, DiscussionPost& discp)
-  {
-    QString tempQstring;
-    out << discp.reviewerID;
-    out << discp.postID;
-    tempQstring = QString::fromStdString(discp.comment);
-    out << tempQstring;
-    return out;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, DiscussionPost* discp)
-  {
-    QString tempQstring;
-    in >> discp->reviewerID;
-    in >> discp->postID;
-    in >> tempQstring;
-    discp->comment = tempQstring.toStdString();
-    return in;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, DiscussionPost& discp)
-  {
-    QString tempQstring;
-    in >> discp.reviewerID;
-    in >> discp.postID;
-    in >> tempQstring;
-    discp.comment = tempQstring.toStdString();
-    return in;
-  }
-
 #endif
diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 8fabce8..74ca98f 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -4,17 +4,25 @@
 
 #include "../DataAll/Discussion.hpp"
 #include "../DataAll/Review.hpp"
-//#include "User.hpp"
 #include "../DataAll/PersonalInfo.hpp"
 
-#include <QString>
-#include <QVector>
-#include <QDataStream>
 #include <vector>
 
 struct Paper 
 {
-    Paper() { }
+    Paper()
+    {
+        paperID = 0;
+        confID = 0;
+        leadAuthorID = 0;
+        title = "";
+        abstract = "";
+        //authors;
+        //keywords;
+        confKeyword = "";
+        discussion = Discussion();
+        //reviews;
+    }
 
     Paper(int &ipaperID,
         int &iconfID,
@@ -57,9 +65,9 @@ struct Paper
         confKeyword = iconfKeyword;
     }
 
-    int paperID = 0;
-    int confID = 0;
-    int leadAuthorID = 0;
+    int paperID;
+    int confID;
+    int leadAuthorID;
     std::string title;
     std::string abstract;
     std::vector<PersonalInfo> authors;
@@ -69,143 +77,4 @@ struct Paper
     std::vector<Review> reviews;
 };
 
-    
-    inline QDataStream& operator<<(QDataStream& out, Paper* pap)
-    {
-        QString tempQstring;
-        QVector<QString> tempQvector;
-        QVector<PersonalInfo> tempQvectorP;
-        QVector<Review> tempQvectorR;
-        out << pap->paperID;
-        out << pap->confID;
-        out << pap->leadAuthorID;
-        tempQstring = QString::fromStdString(pap->title);
-        out << tempQstring;
-        tempQstring = QString::fromStdString(pap->abstract);
-        out << tempQstring;
-        for (unsigned int i = 0; i < pap->authors.size(); ++i)
-        {
-          tempQvectorP.append(pap->authors[i]);
-        }
-        out << tempQvectorP;
-        tempQvectorP.clear();
-        for (unsigned int i = 0; i < pap->keywords.size(); ++i)
-        {
-          tempQstring = QString::fromStdString(conf->keywords[i]);
-          tempQvector.append(tempQstring);
-        }
-        out << tempQvector;
-        tempQvector.clear();
-        tempQstring = QString::fromStdString(pap->confKeyword);
-        out << tempQstring;
-        out << pap->dicussion;
-        for (unsigned int i = 0; i < pap->reviews.size(); ++i)
-        {
-          tempQvectorR.append(pap->reviews[i]);
-        }
-        out << tempQvectorR;
-        tempQvectorR.clear();
-        return out;
-    }
-    
-    inline QDataStream& operator<<(QDataStream& out, Paper& pap)
-    {
-        QString tempQstring;
-        QVector<QString> tempQvector;
-        QVector<PersonalInfo> tempQvectorP;
-        QVector<Review> tempQvectorR;
-        out << pap.paperID;
-        out << pap.confID;
-        out << pap.leadAuthorID;
-        tempQstring = QString::fromStdString(pap.title);
-        out << tempQstring;
-        tempQstring = QString::fromStdString(pap.abstract);
-        out << tempQstring;
-        for (unsigned int i = 0; i < pap.authors.size(); ++i)
-        {
-          tempQvectorP.append(pap.authors[i]);
-        }
-        out << tempQvectorP;
-        tempQvectorP.clear();
-        for (unsigned int i = 0; i < pap.keywords.size(); ++i)
-        {
-          tempQstring = QString::fromStdString(conf.keywords[i]);
-          tempQvector.append(tempQstring);
-        }
-        out << tempQvector;
-        tempQvector.clear();
-        tempQstring = QString::fromStdString(pap.confKeyword);
-        out << tempQstring;
-        out << pap.dicussion;
-        for (unsigned int i = 0; i < pap.reviews.size(); ++i)
-        {
-          tempQvectorR.append(pap.reviews[i]);
-        }
-        out << tempQvectorR;
-        tempQvectorR.clear();
-        return out;
-    }
-    
-    inline QDataStream& operator>>(QDataStream& in, Paper* pap)
-    {
-        QString tempQstring;
-        QVector<QString> tempQvector;
-        QVector<PersonalInfo> tempQvectorP;
-        QVector<Review> tempQvectorR;
-        in >> pap->paperID;
-        in >> pap->confID;
-        in >> pap->leadAuthorID;
-        in >> tempQstring;
-        pap->title = tempQstring.toStdString();
-        in >> tempQstring;
-        pap->abstract = tempQstring.toStdString();
-        in >> tempQvectorP;
-        for (unsigned int i = 0; i < tempQvectorP.size(); ++i)
-          pap->authors.push_back(tempQvectorP[i]);
-        tempQvector.clear();
-        in >> tempQvector;
-        for (unsigned int i = 0; i < tempQvector.size(); ++i)
-          pap->keywords.push_back(tempQvector[i].toStdString());
-        tempQvector.clear();
-        in >> tempQstring;
-        pap->confKeyword = tempQstring.toStdString();
-        in >> pap->discussion;
-        in >> tempQvectorR;
-        for (unsigned int i = 0; i < tempQvectorR.size(); ++i)
-          pap->reviews.push_back(tempQvectorR[i]);
-        tempQvector.clear();
-        return in;
-    }
-    
-    inline QDataStream& operator>>(QDataStream& in, Paper& pap)
-    {
-        QString tempQstring;
-        QVector<QString> tempQvector;
-        QVector<PersonalInfo> tempQvectorP;
-        QVector<Review> tempQvectorR;
-        in >> pap.paperID;
-        in >> pap.confID;
-        in >> pap.leadAuthorID;
-        in >> tempQstring;
-        pap.title = tempQstring.toStdString();
-        in >> tempQstring;
-        pap.abstract = tempQstring.toStdString();
-        in >> tempQvectorP;
-        for (unsigned int i = 0; i < tempQvectorP.size(); ++i)
-          pap.authors.push_back(tempQvectorP[i]);
-        tempQvector.clear();
-        in >> tempQvector;
-        for (unsigned int i = 0; i < tempQvector.size(); ++i)
-          pap.keywords.push_back(tempQvector[i].toStdString());
-        tempQvector.clear();
-        in >> tempQstring;
-        pap.confKeyword = tempQstring.toStdString();
-        in >> pap.discussion;
-        in >> tempQvectorR;
-        for (unsigned int i = 0; i < tempQvectorR.size(); ++i)
-          pap.reviews.push_back(tempQvectorR[i]);
-        tempQvector.clear();
-        return in;
-    }
-
 #endif
diff --git a/DataAll/PaperSummary.hpp b/DataAll/PaperSummary.hpp
index 28aa2b5..b612a2e 100644
--- a/DataAll/PaperSummary.hpp
+++ b/DataAll/PaperSummary.hpp
@@ -1,58 +1,24 @@
 #ifndef PAPER_SUMMARY_H
 #define PAPER_SUMMARY_H
 
-#include <QString>
-#include <QDataStream>
 #include <string>
 
 struct PaperSummary 
 {
-	PaperSummary() {}
+    PaperSummary()
+    {
+        paperID = 0;
+        paperName = "";
+    }
 
-	PaperSummary(int ipaperID, const std::string& ipaperName)
+    PaperSummary(int ipaperID, const std::string& ipaperName)
     {
-	    paperID = ipaperID;
-        paperName = ipaperName;
-	}
+        paperID = ipaperID;
+    paperName = ipaperName;
+    }
 
-	int paperID = 0;
-	std::string paperName;
+    int paperID;
+    std::string paperName;
 };
 
-	inline QDataStream& operator<<(QDataStream& out, PaperSummary* paps)
-        {
-           QString tempQstring;
-           out << paps->paperID;
-           tempQstring = QString::fromStdString(paps->paperName);
-           out << tempQstring;
-           return out;
-        }
-        
-        inline QDataStream& operator<<(QDataStream& out, PaperSummary& paps)
-        {
-           QString tempQstring;
-           out << paps.paperID;
-           tempQstring = QString::fromStdString(paps.paperName);
-           out << tempQstring;
-           return out;
-        }
-        
-        inline QDataStream& operator>>(QDataStream& in, PaperSummary* paps)
-        {
-           QString tempQstring;
-           in >> paps->paperID;
-           in >> tempQstring;
-           paps->paperName = tempQstring.toStdString();
-           return in;
-        }
-        
-        inline QDataStream& operator>>(QDataStream& in, PaperSummary& paps)
-        {
-           QString tempQstring;
-           in >> paps.paperID;
-           in >> tempQstring;
-           paps.paperName = tempQstring.toStdString();
-           return in;
-        }
-
 #endif
diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index cd8f4c4..19bc368 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -1,15 +1,19 @@
 #ifndef PERSONAL_INFO_H 
 #define PERSONAL_INFO_H
 
-#include <string>
-#include <QString>
-#include <QDataStream>
 #include <vector>
 
 
 struct PersonalInfo
 {
-    PersonalInfo() {}
+    PersonalInfo()
+    {
+        infoID = 0;
+        name = "";
+        email = "";
+        organisation = "";
+        phone = "";
+    }
     
     PersonalInfo(
         const std::string& iname,
@@ -37,73 +41,11 @@ struct PersonalInfo
         phone = iphone;
     }
 
-    int infoID = 0;
+    int infoID;
     std::string name;
     std::string email;
     std::string organisation;
     std::string phone;
 };
 
-  
-  inline QDataStream& operator<<(QDataStream& out, PersonalInfo* pers)
-  {
-     QString tempQstring;
-     out << pers->infoID;
-     tempQstring = QString::fromStdString(pers->name);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(pers->email);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(pers->organisation);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(pers->phone);
-     out << tempQstring;
-     return out;
-  }
-  
-  inline QDataStream& operator<<(QDataStream& out, PersonalInfo& pers)
-  {
-     QString tempQstring;
-     out << pers.infoID;
-     tempQstring = QString::fromStdString(pers.name);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(pers.email);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(pers.organisation);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(pers.phone);
-     out << tempQstring;
-     return out;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, PersonalInfo* pers)
-  {
-     QString tempQstring;
-     in >> pers->infoID;
-     in >> tempQstring;
-     pers->name = tempQstring.toStdString();
-     in >> tempQstring;
-     pers->email = tempQstring.toStdString();
-     in >> tempQstring;
-     pers->organisation = tempQstring.toStdString();
-     in >> tempQstring;
-     pers->phone = tempQstring.toStdString();
-     return in;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, PersonalInfo& pers)
-  {
-     QString tempQstring;
-     in >> pers.infoID;
-     in >> tempQstring;
-     pers.name = tempQstring.toStdString();
-     in >> tempQstring;
-     pers.email = tempQstring.toStdString();
-     in >> tempQstring;
-     pers.organisation = tempQstring.toStdString();
-     in >> tempQstring;
-     pers.phone = tempQstring.toStdString();
-     return in;
-  }
-
-
 #endif
diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
index ef32218..ed7384d 100644
--- a/DataAll/Review.hpp
+++ b/DataAll/Review.hpp
@@ -1,13 +1,27 @@
 #ifndef REVIEW_H
 #define REVIEW_H
 
-#include <QString>
-#include <QVector>
-#include <QDataStream>
-
 struct Review 
 {
-    Review() { }
+    Review()
+    {
+        reportID = 0;
+        paperID = 0;
+        reviewerID = 0;
+        overall = 0;
+        confidence = 0;
+        relevance = 0;
+        originality = 0;
+        significance = 0;
+        presentation = 0;
+        techQuality = 0;
+        evaluation = 0;
+        commentsStrength = "";
+        commentsWeakness = "";
+        commentsSuggestions = "";
+        commentsShortPaper = "";
+        commentsBestAward = "";
+    }
     
     Review(int ipaperID,
         int ireviewerID,
@@ -77,17 +91,17 @@ struct Review
         commentsBestAward = icommentsBestAward;
     }
 
-    int reportID = 0;
-    int paperID = 0;
-    int reviewerID = 0;
-    int overall = 0;
-    int confidence = 0;
-    int relevance = 0;
-    int originality = 0;
-    int significance = 0;
-    int presentation = 0;
-    int techQuality = 0;
-    int evaluation = 0;
+    int reportID;
+    int paperID;
+    int reviewerID;
+    int overall;
+    int confidence;
+    int relevance;
+    int originality;
+    int significance;
+    int presentation;
+    int techQuality;
+    int evaluation;
     std::string commentsStrength;
     std::string commentsWeakness;
     std::string commentsSuggestions;
@@ -95,114 +109,4 @@ struct Review
     std::string commentsBestAward;
 
 };
-
-  inline QDataStream& operator<<(QDataStream& out, Review* rev)
-  {
-     QString tempQstring;
-     out << rev->reportID;
-     out << rev->paperID;
-     out << rev->reviewerID;
-     out << rev->overall;
-     out << rev->confidence;
-     out << rev->relevance;
-     out << rev->originality;
-     out << rev->significance;
-     out << rev->presentation;
-     out << rev->techQuality;
-     out << rev->evaluation;
-     tempQstring = QString::fromStdString(rev->commentsStrength);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev->commentsWeakness);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev->commentsSuggestions);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev->commentsShortPaper);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev->commentsBestAward);
-     out << tempQstring;
-     return out;
-  }
-  
-  inline QDataStream& operator<<(QDataStream& out, Review& rev)
-  {
-     QString tempQstring;
-     out << rev.reportID;
-     out << rev.paperID;
-     out << rev.reviewerID;
-     out << rev.overall;
-     out << rev.confidence;
-     out << rev.relevance;
-     out << rev.originality;
-     out << rev.significance;
-     out << rev.presentation;
-     out << rev.techQuality;
-     out << rev.evaluation;
-     tempQstring = QString::fromStdString(rev.commentsStrength);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev.commentsWeakness);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev.commentsSuggestions);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev.commentsShortPaper);
-     out << tempQstring;
-     tempQstring = QString::fromStdString(rev.commentsBestAward);
-     out << tempQstring;
-     return out;
-  }
-
-  inline QDataStream& operator>>(QDataStream& in, Review* rev)
-  {
-    QString tempQstring;
-    in >> rev->reportID;
-    in >> rev->paperID;
-    in >> rev->reviewerID;
-    in >> rev->overall;
-    in >> rev->confidence;
-    in >> rev->relevance;
-    in >> rev->originality;
-    in >> rev->significance;
-    in >> rev->presentation;
-    in >> rev->techQuality;
-    in >> rev->evaluation;
-    in >> tempQstring;
-    rev->commentsStrength = tempQstring.toStdString();
-    in >> tempQstring;
-    rev->commentsWeakness = tempQstring.toStdString();
-    in >> tempQstring;
-    rev->commentsSuggestions = tempQstring.toStdString();
-    in >> tempQstring;
-    rev->commentsShortPaper = tempQstring.toStdString();
-    in >> tempQstring;
-    rev->commentsBestAward = tempQstring.toStdString();
-    return in;
-  }
-  
-  inline QDataStream& operator>>(QDataStream& in, Review& rev)
-  {
-    QString tempQstring;
-    in >> rev.reportID;
-    in >> rev.paperID;
-    in >> rev.reviewerID;
-    in >> rev.overall;
-    in >> rev.confidence;
-    in >> rev.relevance;
-    in >> rev.originality;
-    in >> rev.significance;
-    in >> rev.presentation;
-    in >> rev.techQuality;
-    in >> rev.evaluation;
-    in >> tempQstring;
-    rev.commentsStrength = tempQstring.toStdString();
-    in >> tempQstring;
-    rev.commentsWeakness = tempQstring.toStdString();
-    in >> tempQstring;
-    rev.commentsSuggestions = tempQstring.toStdString();
-    in >> tempQstring;
-    rev.commentsShortPaper = tempQstring.toStdString();
-    in >> tempQstring;
-    rev.commentsBestAward = tempQstring.toStdString();
-    return in;
-  }
-
-
 #endif

commit 6a3ad31dccef9d7274555a8fe5ef0ffb2e9b70f1
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 23:06:16 2014 +1100

    added insertUserType's

diff --git a/Algorithm/Algo.cpp b/Algorithm/Algo.cpp
new file mode 100644
index 0000000..13b4963
--- /dev/null
+++ b/Algorithm/Algo.cpp
@@ -0,0 +1,262 @@
+
+#include "Algo.hpp"
+
+#include <algorithm>
+#include <iostream>
+#include <vector>
+
+PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
+{
+	paperID = newPaperID;
+	conferenceID = confID;
+	db = database;
+	
+	numOfReqReviewrs = numReviewers;
+	
+	reviewerBids.resize(numOfReqReviewrs);
+	
+	for(int i=0; i< numOfReqReviewrs; i++)
+	{
+		reviewerBids[i].score = -1;
+		reviewerBids[i].reviewerID = -1;
+	}
+	
+	fillVectors(paperID);
+	
+	algo(paperID, conferenceID);
+	
+	pushReviewers();
+}
+
+void PaperForReview::pushReviewers()
+{
+	for(int i=0; i < reviewerBids.size(); i++)
+	{
+		if(reviewerBids[i].score > 1)
+		{
+            db->assignPaper(paperID, reviewerBids[i].reviewerID, conferenceID);
+			//Push new Reviewer to the database
+			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
+		}
+	}
+
+}
+
+void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
+{
+    if(reviewerBids.size() < numOfReqReviewrs)
+    {
+        // Add reviewer
+        addNewReviewerUnderReqNum(newScore, newReviewerID);
+    }
+    else if(newScore > minScore)
+	{
+        // Update reviewer
+		setNewReviewer(newScore, newReviewerID);
+	}
+}
+
+void PaperForReview::addNewReviewerUnderReqNum(int newScore, int newReviewer)
+{
+    ReviewerBid bid;
+    bid.score = newScore;
+    bid.reviewerID = newReviewer;
+
+    reviewerBids.push_back(bid);
+    
+    if(newScore < minScore)
+        minScore = newScore;
+}
+
+void PaperForReview::findMinScore()
+{
+	int tempScore = -1;
+	for(int i=0; i<numOfReqReviewrs; i++)
+	{
+        if(tempScore == -1)
+            tempScore = reviewerBids[i].score;
+        else if(reviewerBids[i].score < tempScore)
+			tempScore = reviewerBids[i].score;
+	}
+	minScore = tempScore;
+}
+
+void PaperForReview::setNewReviewer(int newScore, int newReviewer)
+{
+	for(int i=0; i< numOfReqReviewrs; i++)
+	{
+		if(reviewerBids[i].score == minScore)
+		{
+			reviewerBids[i].score = newScore;
+			reviewerBids[i].reviewerID =  newReviewer;
+            findMinScore();
+		}
+	}
+}
+
+PaperForReview::~PaperForReview()
+{
+    db = NULL;
+}
+
+
+//TODO
+//populate clonflicting reviewers vector further from database queries
+void PaperForReview::conflictingReviewers()
+{
+	//authors
+	conflictingReviewersVec.insert(conflictingReviewersVec.end(), authors.begin(), authors.end());
+
+	//(3)usersFromSameOrganisation
+		//ForEachAuthor:   SelectOrganisation
+			//SelectAllUsersFromEachOrganisation
+				//PushBack^
+    std::vector<std::string>::const_iterator it;
+    for(it=involvedOrganisation.begin(); it!=involvedOrganisation.end(); it++)
+    {
+        std::vector<int> reviewersForOrg = db->getReviewersForOrganisation(*it);
+	    conflictingReviewersVec.insert(conflictingReviewersVec.end(), reviewersForOrg.begin(), reviewersForOrg.end());
+    }
+        
+	//pastCoAuthors
+		//(4)ForEachAuthor:   selectAllPapers into papersForAuthor
+			//Select All authors for each paper in papersForAuthor and place into temp
+				//pushBack into conflictingReviewersVec
+    std::vector<int>::const_iterator it2;
+    for(it2=authors.begin(); it2!=authors.end(); it2++)
+    {
+        std::vector<int> papersForAuthor = db->getPapersForAuthor(*it2);
+
+        std::vector<int>::const_iterator iter;
+        for(iter=papersForAuthor.begin(); iter!=papersForAuthor.end(); iter++)
+        {
+            std::vector<int> temp = db->getAuthorsForPaper(*iter);
+	        conflictingReviewersVec.insert(conflictingReviewersVec.end(), temp.begin(), temp.end());
+        }
+    }
+}
+
+
+
+//TODO: matching keywords from database returns
+int PaperForReview::calculateScore(int userID, int paperID)
+{
+	int score = 1;
+
+    std::vector<std::string> keysForPaper = db->getKeywordsForPaper(paperID);
+    std::vector<std::string> keysForUser = db->getKeywordsForUser(userID);
+
+	//(5)&(6)for each keyword match
+    std::vector<std::string>::const_iterator it;
+    for(it=keysForPaper.begin(); it!=keysForPaper.end(); it++)
+    {
+        std::vector<std::string>::const_iterator iter;
+        for(iter=keysForUser.begin(); iter!=keysForUser.end(); iter++)
+        {
+            if (*it == *iter)
+		        ++score;
+        }
+    }
+
+	return score;
+
+}
+
+
+//TODO:get reviewer pref
+void PaperForReview::algo(int paperID, int conferenceID)
+{
+	std::vector<int> userIDs;
+	
+	//(7) fill userIDs with reviewers from conference
+    userIDs = db->getReviewersForConf(conferenceID);
+    int UserID;	
+
+    std::vector<int>::const_iterator it;
+    for(it=userIDs.begin(); it!=userIDs.end(); it++)
+    {
+        UserID = *it;
+     	int score = 0;
+        if (std::find(conflictingReviewersVec.begin(), conflictingReviewersVec.end(), UserID) != conflictingReviewersVec.end())
+        {
+    		int reviewersPreference = 0;
+    				// 1=yes
+    				//2=maybe
+                    //3=no
+    				//4=conflict
+    
+            //(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
+    		reviewersPreference = db->getReviewerPreference(UserID, conferenceID, paperID);			
+    
+    		if(reviewersPreference == 1)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		else if(reviewersPreference == 2)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		else if(reviewersPreference != 3)
+    		{
+    			score = calculateScore(UserID, paperID);
+    			checkNewReviewer(score, UserID);
+    		}
+    	}
+    }
+}
+
+
+//TODO: populate vectors from data base
+//TODO: call conflicting reviewers
+
+void PaperForReview::fillVectors(int paperID)
+{
+
+	// (1)select all Authors where paper==paperID
+		//addAuthors to paper
+    authors = db->getAuthorsForPaper(paperID);
+
+	// (2)select organisation for each author
+		//add involved organisation
+    
+    std::vector<int>::const_iterator it;
+    for(it=authors.begin(); it!=authors.end(); it++)
+    {
+        std::string temp = db->getOrganisationForAuthor(*it);
+        if(!temp.empty())
+            involvedOrganisation.push_back(temp);
+    }
+	
+	//CONFLICTING HERE
+	conflictingReviewers();
+}
+
+
+//MAY NEED TO FILTER FOR CONFERENCE ASWELL
+//(1)select author
+		//Where Paper ID = ?
+		
+//(2)select organisation
+		//where author = ?
+		
+
+//(3) select author
+		//where organisation = ?
+		
+//(4) select paperIDs
+		//where Author =?
+		
+//(5) select keywords
+		//where paperID = ?
+		
+//(6) select keywords
+		//where userID = ?
+		
+//(7) select pcs(reviewrs)
+		//where conferfence = ?
+		
+//(8) select reviewerPreferance
+		//where reviewerID = ? and paperID = ? 
+
diff --git a/Algorithm/Algo.hpp b/Algorithm/Algo.hpp
index 2a74911..001cefc 100644
--- a/Algorithm/Algo.hpp
+++ b/Algorithm/Algo.hpp
@@ -16,6 +16,8 @@
 
 //returns vector of reviewerIDs from getter
 
+#include "../Database/Database.hpp"
+
 #include <algorithm>
 #include <iostream>
 #include <vector>
@@ -23,8 +25,8 @@
 
 struct ReviewerBid
 {
-	int score;
-	int reviewerID;
+	int score = 0;
+	int reviewerID = 0;
 };
 
 class PaperForReview
@@ -33,15 +35,16 @@ public:
 	PaperForReview(int, int, int,Database*);
 	~PaperForReview();
 
-	int findMinScore();
+	void findMinScore();
 	void setNewReviewer(int, int);
     void addNewReviewerUnderReqNum(int, int);
 	void checkNewReviewer(int, int);
 	void addAuthor(int);
 	void conflictingReviewers();
-	void algo();
-	void fillVectors();
+	void algo(int, int);
+	void fillVectors(int);
 	void pushReviewers();
+    int calculateScore(int, int);
 
 private:
 	Database* db;
@@ -55,255 +58,3 @@ private:
 	std::vector<int> conflictingReviewersVec;
 };
 
-std::vector<int> pushReviewers()
-{
-	for(int i=0; i<reviewerBids.size(); i++)
-	{
-		if(reviewerBids.score[i] > 1)
-		{
-            db->assignPaper(paperID, reviewerBids.reviewerID, conferenceID);
-			//Push new Reviewer to the database
-			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
-		}
-	}
-
-}
-
-void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
-{
-    if(reviewerBids.size() < NumOfReqReviewers)
-    {
-        // Add reviewer
-        addNewReviewerUnderReqNum(newScore, newReviewerID);
-    }
-    else if(newscore > minScore)
-	{
-        // Update reviewer
-		setNewReviewer(newScore, newReviewerID);
-	}
-}
-
-void PaperForReview::addNewReviewerUnderReqNum(int newScore, int newReviewer)
-{
-    ReviewerBid bid(newScore, newReviewer);
-
-    reviewerBids.push_back(bid);
-    
-    if(newScore < minScore)
-        minScore = newScore
-}
-
-void PaperForReview::findMinScore()
-{
-	int tempScore = -1;
-	for(int i=0; i<NumOfReqReviewers; i++)
-	{
-        if(tempScore == -1)
-            tempScore = reviewerBids[i].score;
-        else if(reviewerBids[i].score < tempScore)
-			tempScore = reviewerBids[i].score;
-	}
-	minScore = tempScore;
-}
-
-void PaperForReview::setNewReviewer(int newScore, int newReviewer)
-{
-	for(int i=0; i< NumOfReqReviewers; i++)
-	{
-		if(reviewerBids[i].score == minScore)
-		{
-			reviewerBids[i].score = newScore;
-			reviewerBids[i].reviewerID =  newReviewer;
-            findMinScore();
-		}
-	}
-}
-
-PaperForReview::~PaperForReview()
-{
-    db = NULL;
-}
-
-PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
-{
-	paperID = newPaperID
-	conferenceID = confID;
-	db = database;
-	
-	numOfReqReviewrs = numReviewers;
-	
-	reviewerBids.resize(numOfReqReviewrs)
-	
-	for(int i=0; i< numOfReqReviewrs; i++)
-	{
-		reviewerBids[i].score = -1;
-		reviewerBids[i].reviewerID = -1;
-	}
-	
-	fillVectors(paperID);
-	
-	algo(PaperID, confID);
-	
-	pushReviewers();
-}
-
-//TODO
-//populate clonflicting reviewers vector further from database queries
-void PaperForReview::conflictingReviewers()
-{
-	//authors
-	conflictingReviewersVec.insert(conflictingReviewersVec.end(), authors.begin(), authors.end());
-
-	//(3)usersFromSameOrganisation
-		//ForEachAuthor:   SelectOrganisation
-			//SelectAllUsersFromEachOrganisation
-				//PushBack^
-    std::vector<std::string>::const_iterator it;
-    for(it=involvedOrganisation.begin(); it!=involvedOrganisation.end(); it++)
-    {
-        std::vector<int> reviewersForOrg = db->getReviewersForOrganisation(*it);
-	    conflictingReviewersVec.insert(conflictingReviewersVec.end(), reviewersForOrg.begin(), reviewersForOrg.end());
-    }
-        
-	//pastCoAuthors
-		//(4)ForEachAuthor:   selectAllPapers into papersForAuthor
-			//Select All authors for each paper in papersForAuthor and place into temp
-				//pushBack into conflictingReviewersVec
-    std::vector<int>::const_iterator it;
-    for(it=authors.begin(); it!=authors.end(); it++)
-    {
-        std::vector<int> papersForAuthor = db->getPapersForAuthor(*it);
-
-        std::vector<int>::const_iterator iter;
-        for(iter=papersForAuthor.begin(); iter!=papersForAuthor.end(); it++)
-        {
-            std::vector<int> temp = db->getAuthorsForPaper(*it);
-	        conflictingReviewersVec.insert(conflictingReviewersVec.end(), temp.begin(), temp.end());
-        }
-    }
-}
-
-
-
-//TODO: matching keywords from database returns
-int calculateScore(int userID, int paperID)
-{
-	int score = 1;
-
-    std::vector<std::string> keysForPaper = db->getKeywordsForPaper(paperID);
-    std::vector<std::string> keysForUser = db->getKeywordsForUser(userID);
-
-	//(5)&(6)for each keyword match
-    std::vector<std::string>::const_iterator it;
-    for(it=keysForPaper.begin(); it!=keysForPaper.end(); it++)
-    {
-        std::vector<std::string>::const_iterator iter;
-        for(iter=keysForUser.begin(); iter!=keysForUser.end(); it++)
-        {
-            if (*it == *iter)
-		        ++score;
-        }
-    }
-
-	return score;
-
-}
-
-
-//TODO:get reviewer pref
-void PaperForReview::algo(int paperID, int conferenceID)
-{
-	std::vector<int> userIDs;
-	
-	//(7) fill userIDs with reviewers from conference
-    userIDs = db->getReviewersForConf(conferenceID);
-    int UserID;	
-
-    std::vector<int>::const_iterator iter;
-    for(it=userIDs.begin(); it!=userIDs.end(); it++)
-    {
-        UserID = *it;
-     	int score = 0;
-        if (std::find(conflictingReviewersVec.begin(), conflictingReviewersVec.end(), UserID) != conflictingReviewersVec.end())
-        {
-    		int reviewersPreference = 0;
-    				// 1=yes
-    				//2=maybe
-                    //3=no
-    				//4=conflict
-    
-            //(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
-    		reviewersPreference = db->getReviewerPreference(UserID, conferenceID, paperID);			
-    
-    		if(reviewersPreference == 1)
-    		{
-    			score = calculateScore(UserID, paperID) * 1000000;
-    			checkNewReviewer(score, UserID);
-    		}
-    		elseif(reviewersPreference == 2)
-    		{
-    			score = calculateScore(UserID, paperID) * 1000;
-    			checkNewReviewer(score, UserID);
-    		}
-    		elseif(reviewersPreference != 3)
-    		{
-    			score = calculateScore(UserID, paperID);
-    			checkNewReviewer(score, UserID);
-    		}
-    	}
-    }
-}
-
-
-//TODO: populate vectors from data base
-//TODO: call conflicting reviewers
-
-void fillVectors(int paperID)
-{
-
-	// (1)select all Authors where paper==paperID
-		//addAuthors to paper
-    authors = db->getAuthorsForPaper(paperID);
-
-	// (2)select organisation for each author
-		//add involved organisation
-    
-    std::vector<int>::const_iterator it;
-    for(it=authors.begin(); it!=authors.end(); it++)
-    {
-        std::string temp = db->getOrganisationForAuthor(*it);
-        if(!temp.empty())
-            involvedOrganisation.push_back(temp);
-    }
-	
-	//CONFLICTING HERE
-	conflictingReviewers();
-}
-
-
-//MAY NEED TO FILTER FOR CONFERENCE ASWELL
-//(1)select author
-		//Where Paper ID = ?
-		
-//(2)select organisation
-		//where author = ?
-		
-
-//(3) select author
-		//where organisation = ?
-		
-//(4) select paperIDs
-		//where Author =?
-		
-//(5) select keywords
-		//where paperID = ?
-		
-//(6) select keywords
-		//where userID = ?
-		
-//(7) select pcs(reviewrs)
-		//where conferfence = ?
-		
-//(8) select reviewerPreferance
-		//where reviewerID = ? and paperID = ? 
-
diff --git a/Database/Database.cpp b/Database/Database.cpp
index 4662bec..1e40cb3 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -67,9 +67,9 @@ User Database::fetchUser(std::string key) throw (const char*)
                 throw (noDB);
 
 	// Add information on user from database to User object
-	const char* getUser = "SELECT * FROM UserAccount where username=?";
-	const char* getPersonalInfo = "SELECT * FROM PersonalInfo where userID=?";
-	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
+	const char* getUser = "SELECT * FROM UserAccount WHERE username=?";
+	const char* getPersonalInfo = "SELECT * FROM PersonalInfo WHERE userID=?";
+	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
 
         // =======================================
         // user account
@@ -193,7 +193,7 @@ void Database::createUser(User user)
 
 	const char* insertPersonalInfo = "INSERT INTO PersonalInfo(userID, name, email, organisation, phone) VALUES(NULL, ?, ?, ?, ?)";
 	const char* insertUser = "INSERT INTO UserAccount(username, password, infoID) VALUES(?, ?, LAST_INSERT_ID())";
-	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() where infoID=(SELECT infoID FROM UserAccount where userID=LAST_INSERT_ID())";
+	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() WHERE infoID=(SELECT infoID FROM UserAccount WHERE userID=LAST_INSERT_ID())";
 	const char* getUserID = "SELECT LAST_INSERT_ID()";
 	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
 
@@ -272,7 +272,7 @@ void Database::updateUser(User user)
         if (invalid)
                 throw (noDB);
 
-	const char* getUserID = "SELECT userID FROM UserAccount where username = ?";
+	const char* getUserID = "SELECT userID FROM UserAccount WHERE username = ?";
 	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
 	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
 
@@ -395,6 +395,60 @@ std::vector<std::string> Database::allUserNames()
         return vptr;
 }
 
+void Database::setUserAsAuthor(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* insertAuthorType = "INSERT INTO UserType VALUES(?, ?, 'author')";
+
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertAuthorType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
+void Database::setUserAsPC(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* insertPCType = "INSERT INTO UserType VALUES(?, ?, 'pc')";
+
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertPCType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
+void Database::setUserAsChair(int userID, int confID) throw (const char*)
+{
+    if (invalid)
+        throw (noDB);
+
+    const char* insertChairType = "INSERT INTO UserType VALUES(?, ?, 'chair')";
+
+    sql::PreparedStatement *pstmt = NULL;
+
+    pstmt = dbcon->prepareStatement(insertChairType);
+    pstmt->setInt(1, userID);
+    pstmt->setInt(2, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
 bool Database::existsKeyword(std::string key) throw (const char*)
 {
     if (invalid)
@@ -443,7 +497,7 @@ Conference Database::fetchConference(int key) throw (const char*)
 
 	// Add information on user from database to User object
 	const char* getConference = "SELECT * FROM Conference WHERE confID=?";
-	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
+	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords WHERE confID=?)";
 
         // =======================================
         // Conference 
@@ -671,7 +725,7 @@ void Database::updateConf(Conference conf)
         if (invalid)
                 throw (noDB);
 
-	const char* getConfID = "SELECT confID FROM Conference where name = ?";
+	const char* getConfID = "SELECT confID FROM Conference WHERE name = ?";
 
 	const char* updateConference = "UPDATE Conference SET name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
 
@@ -927,7 +981,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 
 	const char* getPaper = "SELECT * FROM Paper WHERE paperID=?";
 	const char* getConfKeyword = "SELECT keyword FROM Keywords WHERE keywordID=(SELECT keywordID FROM Paper WHERE paperID=?)";
-	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords WHERE paperID=?)";
 	
 	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
 
@@ -1629,7 +1683,7 @@ std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (c
         if (invalid)
                 throw (noDB);
 
-	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and userID IN (SELECT userID FROM PersonalInfo WHERE (userID IS NOT NULL and organisation=?))";
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType = 'pc' and userID IN (SELECT userID FROM PersonalInfo WHERE (userID IS NOT NULL and organisation=?)))";
 
         // =======================================
         // Reviewers
@@ -1687,7 +1741,7 @@ std::vector<std::string> Database::getKeywordsForPaper(int paperID) throw (const
         if (invalid)
                 throw (noDB);
 
-	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords WHERE paperID=?)";
 
         // =======================================
         // Paper Keywords
@@ -1715,7 +1769,7 @@ std::vector<std::string> Database::getKeywordsForUser(int userID) throw (const c
         if (invalid)
                 throw (noDB);
 
-	const char* getUserKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
+	const char* getUserKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea WHERE userID=?)";
 
         // =======================================
         // Expertise Keywords
@@ -1798,6 +1852,26 @@ int Database::getReviewerPreference(int userID, int confID, int paperID) throw (
 	return preference;
 }
 
+void Database::assignPaper(int paperID, int reviewerID, int confID) throw (const char*)
+{
+    if (invalid)
+            throw (noDB);
+
+	const char* insertPaperAssigned = "INSERT INTO PaperAssigned(paperID, reviewerID, confID) VALUES(?, ?, ?)";
+
+    // =======================================
+    // Paper Assigned
+    sql::PreparedStatement *pstmt = NULL;
+    pstmt = dbcon->prepareStatement(insertPaperAssigned);
+    pstmt->setInt(1, paperID);
+    pstmt->setInt(2, reviewerID);
+    pstmt->setInt(3, confID);
+
+    pstmt->executeUpdate();
+
+    delete pstmt;
+}
+
 std::vector<int> Database::fetchReviewersAssigned(int paperID, int confID) throw (const char*)
 {
         if (invalid)
@@ -1956,7 +2030,7 @@ std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
 //        // Laboured
 //        // First get a list of the ids with the role, then one by one get the
 //        // complete records.
-//        const char* getrolepersons = "selects personid from roles where _role=?";
+//        const char* getrolepersons = "selects personid from roles WHERE _role=?";
 //
 //        sql::PreparedStatement *pstmt = NULL;
 //        sql::ResultSet * rs = NULL;
@@ -2008,11 +2082,11 @@ std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
 //        // explicitly delete subordinate records in Phones, Address, others and Roles
 //        // then delete the myrecord entry
 //        // recreating the prepared statements for each operation - costly
-//        const char* deletephones = "delete from phones where personid=?";
-//        const char* deleteaddress = "delete from addresses where personid=?";
-//        const char* deleteother = "delete from other where personid=?";
-//        const char* deleteroles = "delete from roles where personid=?";
-//        const char* deletemyrecord = "delete from myrecord where _id=?";
+//        const char* deletephones = "delete from phones WHERE personid=?";
+//        const char* deleteaddress = "delete from addresses WHERE personid=?";
+//        const char* deleteother = "delete from other WHERE personid=?";
+//        const char* deleteroles = "delete from roles WHERE personid=?";
+//        const char* deletemyrecord = "delete from myrecord WHERE _id=?";
 //        const char* unused; // Pointer to unused part of sql string (?)
 //        sql::PreparedStatement *pstmt = NULL;
 //        // Phones
@@ -2055,11 +2129,11 @@ std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
 //                throw (noDB);
 //        // Again laborious
 //        // Load the MyRecord from its table, then add data from Other tables.
-//        const char* getrecord = "select * from myrecord where _id=?";
-//        const char* getroles = "select role from roles where personid=?";
-//        const char* getphones = "select type, number from phones where personid=?";
-//        const char* getaddress = "select type, address from addresses where personid=?";
-//        const char* getother = "select key, valyue from other where personid=?";
+//        const char* getrecord = "select * from myrecord WHERE _id=?";
+//        const char* getroles = "select role from roles WHERE personid=?";
+//        const char* getphones = "select type, number from phones WHERE personid=?";
+//        const char* getaddress = "select type, address from addresses WHERE personid=?";
+//        const char* getother = "select key, valyue from other WHERE personid=?";
 //
 //        sql::PreparedStatement *pstmt = NULL;
 //        sql::ResultSet *rs = NULL;
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 14a3545..b71e399 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -29,6 +29,9 @@ public:
     void putUser(std::string key, User user) throw (const char*);
     std::vector<int> allUserIDs();
     std::vector<std::string> allUserNames();
+    void setUserAsAuthor(int userID, int confID) throw (const char*);
+    void setUserAsPC(int userID, int confID) throw (const char*);
+    void setUserAsChair(int userID, int confID) throw (const char*);
 
 	// KEYWORD
     bool existsKeyword(std::string key) throw (const char*);
diff --git a/Database/main.cpp b/Database/main.cpp
index a68e419..90d9f03 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -7,6 +7,7 @@
 #include "../Server/User.hpp"
 #include "../DataAll/Conference.hpp"
 #include "../DataAll/Paper.hpp"
+#include "../Algorithm/Algo.hpp"
 
 #include <vector>
 
@@ -20,128 +21,132 @@ static void createPaper();
 
 int main(int arc, char *argv[])
 {
-        createUsers();
+    createUsers();
 	createConf();
 	createPaper();
-        Database db;
-        if (!db.isOK())
-        {
-                std::cout << "Failed to open database file" << std::endl;
-                exit(1);
-        }
-
-        std::vector<User>::const_iterator it;
-        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
-        {
-                User ptr = *it;
-                std::string key = ptr.userName;
-                db.putUser(key, ptr);
-                std::cout << "Wrote user: " << key << std::endl;
-        }
-
-        std::vector<Conference>::const_iterator it2;
-        for(it2=g_theConfs.begin(); it2!=g_theConfs.end(); it2++)
-        {
-                Conference ptr = *it2;
-                std::string key = ptr.title;
-		db.putConf(key, ptr);
-                std::cout << "Wrote conference: " << key << std::endl;
-        }
-
-        std::vector<Paper>::const_iterator it3;
-        for(it3=g_thePapers.begin(); it3!=g_thePapers.end(); it3++)
-        {
-                Paper ptr = *it3;
-		std::string pdf = "whyyougoanddothesethings";
-		if(!db.existsPaperTitleConf(ptr))
-		{
-			db.createPaper(ptr, pdf);
-                	std::cout << "Wrote paper: " << ptr.title << std::endl;
-		}
-        }
+    Database db;
+
+    if (!db.isOK())
+    {
+            std::cout << "Failed to open database file" << std::endl;
+            exit(1);
+    }
+
+    std::vector<User>::const_iterator it;
+    for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
+    {
+            User ptr = *it;
+            std::string key = ptr.userName;
+            db.putUser(key, ptr);
+            std::cout << "Wrote user: " << key << std::endl;
+    }
+
+    std::vector<Conference>::const_iterator it2;
+    for(it2=g_theConfs.begin(); it2!=g_theConfs.end(); it2++)
+    {
+        Conference ptr = *it2;
+        std::string key = ptr.title;
+	    db.putConf(key, ptr);
+        std::cout << "Wrote conference: " << key << std::endl;
+    }
+
+    std::vector<Paper>::const_iterator it3;
+    for(it3=g_thePapers.begin(); it3!=g_thePapers.end(); it3++)
+    {
+        Paper ptr = *it3;
+	    std::string pdf = "whyyougoanddothesethings";
+	    if(!db.existsPaperTitleConf(ptr))
+	    {
+	    	db.createPaper(ptr, pdf);
+           	std::cout << "Wrote paper: " << ptr.title << std::endl;
+	    }
+    }
 
 	std::vector<std::string> Names = db.allUserNames();
 	std::vector<std::string>::iterator iter;
 
-        for(iter=Names.begin(); iter!=Names.end(); iter++)
-        {
-                std::string key = (*iter);
-                User user = db.fetchUser(key);
-                std::cout << "fetch username: " << user.userName << " name: " << user.name << " first expertise: " <<  user.keywords[0] << " email: " << user.email << std::endl;
-        }
-        
-        std::vector<int> ConfIDs = db.activeConfIDs();
-        std::vector<int>::iterator confiter;
-        for(confiter=ConfIDs.begin(); confiter!=ConfIDs.end(); confiter++)
-        {
-        	int key = (*confiter);
-        	Conference conference = db.fetchConference(key);
-        	std::cout << "fetch conference: " << conference.title << " first keyword: " << conference.keywords[0] << std::endl;
-        }
-        
-        std::vector<int> PaperIDs(db.getPaperIDsForConf(1));
-        std::vector<int>::iterator paperiter;
-        for(paperiter=PaperIDs.begin(); paperiter!=PaperIDs.end(); paperiter++)
-        {
-        	int key = (*paperiter);
-        	Paper paper = db.fetchPaper(key);
-        	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword: " << paper.keywords[0] << std::endl;
-        }
-
-        return EXIT_SUCCESS;
+    for(iter=Names.begin(); iter!=Names.end(); iter++)
+    {
+        std::string key = (*iter);
+        User user = db.fetchUser(key);
+        std::cout << "fetch username: " << user.userName << " name: " << user.name << " first expertise: " <<  user.keywords[0] << " email: " << user.email << std::endl;
+    }
+    
+    std::vector<int> ConfIDs = db.activeConfIDs();
+    std::vector<int>::iterator confiter;
+    for(confiter=ConfIDs.begin(); confiter!=ConfIDs.end(); confiter++)
+    {
+    	int key = (*confiter);
+    	Conference conference = db.fetchConference(key);
+    	std::cout << "fetch conference: " << conference.title << " first keyword: " << conference.keywords[0] << std::endl;
+    }
+    
+    std::vector<int> PaperIDs(db.getPaperIDsForConf(1));
+    std::vector<int>::iterator paperiter;
+    for(paperiter=PaperIDs.begin(); paperiter!=PaperIDs.end(); paperiter++)
+    {
+    	int key = (*paperiter);
+    	Paper paper = db.fetchPaper(key);
+    	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword: " << paper.keywords[0] << std::endl;
+    }
+
+    int PFR = 1;
+    PaperForReview pfr(PFR, PFR, PFR, &db);
+
+    return EXIT_SUCCESS;
 }
 
 static void createUsers()
 {
-        std::string username;
-        std::string password;
-        std::string name;
-        std::string email;
-        std::string organisation;
+    std::string username;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
 	std::string phone;
-        {
-		std::vector<std::string> keywords;
-                username = "tom";
-		password = "fake";
-                name = "Thomas";
-                email = "boos_tom@ourcompany.com.au";
-		organisation = "University of Wollongong";
-                phone = "04666666666";
-		keywords.push_back("mathematics");
-		keywords.push_back("science");
-		User user(
-			username,
-			name,
-			email,
-			organisation,
-			phone,
-			password,
-			keywords);
-
-                g_theUsers.push_back(user);
-        }
-        {
-		std::vector<std::string> keywords;
-                username = "dick";
-		password = "wrong";
-                name = "Dick";
-                email = "clever_dick@ourcompany.com.au";
-                email = "boos_m@ourcompany.com.au";
-		organisation = "University of Wollongong";
-                phone = "04666667666";
-		keywords.push_back("geographyt");
-		keywords.push_back("english");
-		User user(
-			username,
-			name,
-			email,
-			organisation,
-			phone,
-			password,
-			keywords);
-
-                g_theUsers.push_back(user);
-        }
+    {
+	    std::vector<std::string> keywords;
+        username = "tom";
+	    password = "fake";
+        name = "Thomas";
+        email = "boos_tom@ourcompany.com.au";
+	    organisation = "University of Wollongong";
+        phone = "04666666666";
+	    keywords.push_back("mathematics");
+	    keywords.push_back("science");
+	    User user(
+	    	username,
+	    	name,
+	    	email,
+	    	organisation,
+	    	phone,
+	    	password,
+	    	keywords);
+
+        g_theUsers.push_back(user);
+    }
+    {
+	    std::vector<std::string> keywords;
+        username = "dick";
+	    password = "wrong";
+        name = "Dick";
+        email = "clever_dick@ourcompany.com.au";
+        email = "boos_m@ourcompany.com.au";
+	    organisation = "University of Wollongong";
+        phone = "04666667666";
+	    keywords.push_back("geographyt");
+	    keywords.push_back("english");
+	    User user(
+	    	username,
+	    	name,
+	    	email,
+	    	organisation,
+	    	phone,
+	    	password,
+	    	keywords);
+
+        g_theUsers.push_back(user);
+    }
 }
 
 static void createConf()
@@ -178,16 +183,16 @@ static void createConf()
 		reviewersPerPaper,
 		postWordLimit);
 	
-        g_theConfs.push_back(conferencetemp);
+    g_theConfs.push_back(conferencetemp);
 }
 
 static void createPaper()
 {
 	PersonalInfo infotemp(
-                "Dick",
-                "clever_dick@ourcompany.com.au",
+        "Dick",
+        "clever_dick@ourcompany.com.au",
 		"University of Wollongong",
-                "04666667666",
+        "04666667666",
 		2);
 	
 	std::vector<PersonalInfo> authors;
@@ -209,5 +214,5 @@ static void createPaper()
 	keywords,
 	confKeyword);
 
-        g_thePapers.push_back(papertemp);
+    g_thePapers.push_back(papertemp);
 }

commit 4b2433b0d7741b181027e5d9ae0b23ca2c8d0930
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 22:00:10 2014 +1100

    minor fixes Algo

diff --git a/Algorithm/Algo b/Algorithm/Algo
deleted file mode 100644
index eec1e5f..0000000
--- a/Algorithm/Algo
+++ /dev/null
@@ -1,307 +0,0 @@
-/*
-	Algo to be run on server side at bool variable change "allocationDateBool"
-	See below for arguments
-	
-	//takes in paperID, conferenceID, and numReqReviewers for paper
-*/
-
-//Algo:
-//PaperForReview Class has a paper and calculates a score for all the potential reviewers. This is then stored in an
-//array (of structs) which has the reviewerID and associated score for that reviewer.
-
-//USE: Create new PaperForReview with consturctor
-//	Use getter function to return reviewers
-//	reviewers with a reviewer ID of -1 => not a reviewer
-
-
-//returns vector of reviewerIDs from getter
-
-#include <algorithm>
-#include <iostream>
-#include <vector>
-
-
-struct ReviewerBid
-{
-	int score;
-	int reviewerID;
-};
-
-class PaperForReview
-{
-public:
-	PaperForReview(int, int, int,Database*);
-	~PaperForReview();
-
-	int findMinScore();
-	void setNewReviewer(int, int);
-    void addNewReviewerUnderReqNum(int, int);
-	void checkNewReviewer(int, int);
-	void addAuthor(int);
-	void conflictingReviewers();
-	void algo();
-	void fillVectors();
-	void pushReviewers();
-
-private:
-	Database* db;
-	int paperID;
-	int conferenceID;
-    int minScore;
-	int numOfReqReviewrs;
-	std::vector<ReviewerBid> reviewerBids;
-	std::vector<int> authors;
-	std::vector<std::string> involvedOrganisation;
-	std::vector<int> conflictingReviewersVec;
-};
-
-std::vector<int> pushReviewers()
-{
-	for(int i=0; i<reviewerBids.size(); i++)
-	{
-		if(reviewerBids.score[i] > 1)
-		{
-            db->assignPaper(paperID, reviewerBids.reviewerID, conferenceID);
-			//Push new Reviewer to the database
-			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
-		}
-	}
-
-}
-
-void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
-{
-    if(reviewerBids.size() < NumOfReqReviewers)
-    {
-        // Add reviewer
-        addNewReviewerUnderReqNum(newScore, newReviewerID);
-    }
-    else if(newscore > minScore)
-	{
-        // Update reviewer
-		setNewReviewer(newScore, newReviewerID);
-	}
-}
-
-void PaperForReview::addNewReviewerUnderReqNum(int newScore, int newReviewer)
-{
-    ReviewerBid bid(newScore, newReviewer);
-
-    reviewerBids.push_back(bid);
-    
-    if(newScore < minScore)
-        minScore = newScore
-}
-
-void PaperForReview::findMinScore()
-{
-	int tempScore = -1;
-	for(int i=0; i<NumOfReqReviewers; i++)
-	{
-        if(tempScore == -1)
-            tempScore = reviewerBids[i].score;
-        else if(reviewerBids[i].score < tempScore)
-			tempScore = reviewerBids[i].score;
-	}
-	minScore = tempScore;
-}
-
-void PaperForReview::setNewReviewer(int newScore, int newReviewer)
-{
-	for(int i=0; i< NumOfReqReviewers; i++)
-	{
-		if(reviewerBids[i].score == minScore)
-		{
-			reviewerBids[i].score = newScore;
-			reviewerBids[i].reviewerID =  newReviewer;
-            findMinScore();
-		}
-	}
-}
-
-PaperForReview::~PaperForReview()
-{
-    db = NULL;
-}
-
-PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
-{
-	paperID = newPaperID
-	conferenceID = confID;
-	db = database;
-	
-	numOfReqReviewrs = numReviewers;
-	
-	reviewerBids.resize(numOfReqReviewrs)
-	
-	for(int i=0; i< numOfReqReviewrs; i++)
-	{
-		reviewerBids[i].score = -1;
-		reviewerBids[i].reviewerID = -1;
-	}
-	
-	fillVectors(paperID);
-	
-	algo(PaperID, confID);
-	
-	pushReviewers();
-}
-
-//TODO
-//populate clonflicting reviewers vector further from database queries
-void PaperForReview::conflictingReviewers()
-{
-	//authors
-	conflictingReviewersVec.insert(conflictingReviewersVec.end(), authors.begin(), authors.end());
-
-	//(3)usersFromSameOrganisation
-		//ForEachAuthor:   SelectOrganisation
-			//SelectAllUsersFromEachOrganisation
-				//PushBack^
-    std::vector<std::string>::const_iterator it;
-    for(it=involvedOrganisation.begin(); it!=involvedOrganisation.end(); it++)
-    {
-        std::vector<int> reviewersForOrg = db->getReviewersForOrganisation(*it);
-	    conflictingReviewersVec.insert(conflictingReviewersVec.end(), reviewersForOrg.begin(), reviewersForOrg.end());
-    }
-        
-	//pastCoAuthors
-		//(4)ForEachAuthor:   selectAllPapers into papersForAuthor
-			//Select All authors for each paper in papersForAuthor and place into temp
-				//pushBack into conflictingReviewersVec
-    std::vector<int>::const_iterator it;
-    for(it=authors.begin(); it!=authors.end(); it++)
-    {
-        std::vector<int> papersForAuthor = db->getPapersForAuthor(*it);
-
-        std::vector<int>::const_iterator iter;
-        for(iter=papersForAuthor.begin(); iter!=papersForAuthor.end(); it++)
-        {
-            std::vector<int> temp = db->getAuthorsForPaper(*it);
-	        conflictingReviewersVec.insert(conflictingReviewersVec.end(), temp.begin(), temp.end());
-        }
-    }
-}
-
-
-
-//TODO: matching keywords from database returns
-int calculateScore(int userID, int paperID)
-{
-	int score = 1;
-
-    std::vector<std::string> keysForPaper = db->getKeywordsForPaper(paperID);
-    std::vector<std::string> keysForUser = db->getKeywordsForUser(userID);
-
-	//(5)&(6)for each keyword match
-    std::vector<std::string>::const_iterator it;
-    for(it=keysForPaper.begin(); it!=keysForPaper.end(); it++)
-    {
-        std::vector<std::string>::const_iterator iter;
-        for(iter=keysForUser.begin(); iter!=keysForUser.end(); it++)
-        {
-            if (*it == *iter)
-		        ++score;
-        }
-    }
-
-	return score;
-
-}
-
-
-//TODO:get reviewer pref
-void PaperForReview::algo(int paperID, int conferenceID)
-{
-	std::vector<int> userIDs;
-	
-	//(7) fill userIDs with reviewers from conference
-    userIDs = db->getReviewersForConf(conferenceID);
-    int UserID;	
-
-    std::vector<int>::const_iterator iter;
-    for(it=userIDs.begin(); it!=userIDs.end(); it++)
-    {
-        UserID = *it;
-     	int score = 0;
-        if (std::find(conflictingReviewersVec.begin(), conflictingReviewersVec.end(), UserID) != conflictingReviewersVec.end())
-        {
-    		int reviewersPreference = 0;
-    				// 1=yes
-    				//2=maybe
-                    //3=no
-    				//4=conflict
-    
-            //(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
-    		reviewersPreference = db->getReviewerPreference(UserID, conferenceID, paperID);			
-    
-    		if(reviewersPreference == 1)
-    		{
-    			score = calculateScore(UserID, paperID) * 1000000;
-    			checkNewReviewer(score, UserID);
-    		}
-    		elseif(reviewersPreference == 2)
-    		{
-    			score = calculateScore(UserID, paperID) * 1000;
-    			checkNewReviewer(score, UserID);
-    		}
-    		elseif(reviewersPreference != 3)
-    		{
-    			score = calculateScore(UserID, paperID);
-    			checkNewReviewer(score, UserID);
-    		}
-    	}
-    }
-}
-
-
-//TODO: populate vectors from data base
-//TODO: call conflicting reviewers
-
-void fillVectors(int paperID)
-{
-
-	// (1)select all Authors where paper==paperID
-		//addAuthors to paper
-    authors = db->getAuthorsForPaper(paperID);
-
-	// (2)select organisation for each author
-		//add involved organisation
-    
-    std::vector<int>::const_iterator it;
-    for(it=authors.begin(); it!=authors.end(); it++)
-    {
-        involvedOrganisation.push_back(db->getOrganisationForAuthor(*it));
-    }
-	
-	//CONFLICTING HERE
-	conflictingReviewers();
-}
-
-
-//MAY NEED TO FILTER FOR CONFERENCE ASWELL
-//(1)select author
-		//Where Paper ID = ?
-		
-//(2)select organisation
-		//where author = ?
-		
-
-//(3) select author
-		//where organisation = ?
-		
-//(4) select paperIDs
-		//where Author =?
-		
-//(5) select keywords
-		//where paperID = ?
-		
-//(6) select keywords
-		//where userID = ?
-		
-//(7) select pcs(reviewrs)
-		//where conferfence = ?
-		
-//(8) select reviewerPreferance
-		//where reviewerID = ? and paperID = ? 
-
diff --git a/Algorithm/Algo.hpp b/Algorithm/Algo.hpp
new file mode 100644
index 0000000..2a74911
--- /dev/null
+++ b/Algorithm/Algo.hpp
@@ -0,0 +1,309 @@
+/*
+	Algo to be run on server side at bool variable change "allocationDateBool"
+	See below for arguments
+	
+	//takes in paperID, conferenceID, and numReqReviewers for paper
+*/
+
+//Algo:
+//PaperForReview Class has a paper and calculates a score for all the potential reviewers. This is then stored in an
+//array (of structs) which has the reviewerID and associated score for that reviewer.
+
+//USE: Create new PaperForReview with consturctor
+//	Use getter function to return reviewers
+//	reviewers with a reviewer ID of -1 => not a reviewer
+
+
+//returns vector of reviewerIDs from getter
+
+#include <algorithm>
+#include <iostream>
+#include <vector>
+
+
+struct ReviewerBid
+{
+	int score;
+	int reviewerID;
+};
+
+class PaperForReview
+{
+public:
+	PaperForReview(int, int, int,Database*);
+	~PaperForReview();
+
+	int findMinScore();
+	void setNewReviewer(int, int);
+    void addNewReviewerUnderReqNum(int, int);
+	void checkNewReviewer(int, int);
+	void addAuthor(int);
+	void conflictingReviewers();
+	void algo();
+	void fillVectors();
+	void pushReviewers();
+
+private:
+	Database* db;
+	int paperID;
+	int conferenceID;
+    int minScore;
+	int numOfReqReviewrs;
+	std::vector<ReviewerBid> reviewerBids;
+	std::vector<int> authors;
+	std::vector<std::string> involvedOrganisation;
+	std::vector<int> conflictingReviewersVec;
+};
+
+std::vector<int> pushReviewers()
+{
+	for(int i=0; i<reviewerBids.size(); i++)
+	{
+		if(reviewerBids.score[i] > 1)
+		{
+            db->assignPaper(paperID, reviewerBids.reviewerID, conferenceID);
+			//Push new Reviewer to the database
+			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
+		}
+	}
+
+}
+
+void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
+{
+    if(reviewerBids.size() < NumOfReqReviewers)
+    {
+        // Add reviewer
+        addNewReviewerUnderReqNum(newScore, newReviewerID);
+    }
+    else if(newscore > minScore)
+	{
+        // Update reviewer
+		setNewReviewer(newScore, newReviewerID);
+	}
+}
+
+void PaperForReview::addNewReviewerUnderReqNum(int newScore, int newReviewer)
+{
+    ReviewerBid bid(newScore, newReviewer);
+
+    reviewerBids.push_back(bid);
+    
+    if(newScore < minScore)
+        minScore = newScore
+}
+
+void PaperForReview::findMinScore()
+{
+	int tempScore = -1;
+	for(int i=0; i<NumOfReqReviewers; i++)
+	{
+        if(tempScore == -1)
+            tempScore = reviewerBids[i].score;
+        else if(reviewerBids[i].score < tempScore)
+			tempScore = reviewerBids[i].score;
+	}
+	minScore = tempScore;
+}
+
+void PaperForReview::setNewReviewer(int newScore, int newReviewer)
+{
+	for(int i=0; i< NumOfReqReviewers; i++)
+	{
+		if(reviewerBids[i].score == minScore)
+		{
+			reviewerBids[i].score = newScore;
+			reviewerBids[i].reviewerID =  newReviewer;
+            findMinScore();
+		}
+	}
+}
+
+PaperForReview::~PaperForReview()
+{
+    db = NULL;
+}
+
+PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
+{
+	paperID = newPaperID
+	conferenceID = confID;
+	db = database;
+	
+	numOfReqReviewrs = numReviewers;
+	
+	reviewerBids.resize(numOfReqReviewrs)
+	
+	for(int i=0; i< numOfReqReviewrs; i++)
+	{
+		reviewerBids[i].score = -1;
+		reviewerBids[i].reviewerID = -1;
+	}
+	
+	fillVectors(paperID);
+	
+	algo(PaperID, confID);
+	
+	pushReviewers();
+}
+
+//TODO
+//populate clonflicting reviewers vector further from database queries
+void PaperForReview::conflictingReviewers()
+{
+	//authors
+	conflictingReviewersVec.insert(conflictingReviewersVec.end(), authors.begin(), authors.end());
+
+	//(3)usersFromSameOrganisation
+		//ForEachAuthor:   SelectOrganisation
+			//SelectAllUsersFromEachOrganisation
+				//PushBack^
+    std::vector<std::string>::const_iterator it;
+    for(it=involvedOrganisation.begin(); it!=involvedOrganisation.end(); it++)
+    {
+        std::vector<int> reviewersForOrg = db->getReviewersForOrganisation(*it);
+	    conflictingReviewersVec.insert(conflictingReviewersVec.end(), reviewersForOrg.begin(), reviewersForOrg.end());
+    }
+        
+	//pastCoAuthors
+		//(4)ForEachAuthor:   selectAllPapers into papersForAuthor
+			//Select All authors for each paper in papersForAuthor and place into temp
+				//pushBack into conflictingReviewersVec
+    std::vector<int>::const_iterator it;
+    for(it=authors.begin(); it!=authors.end(); it++)
+    {
+        std::vector<int> papersForAuthor = db->getPapersForAuthor(*it);
+
+        std::vector<int>::const_iterator iter;
+        for(iter=papersForAuthor.begin(); iter!=papersForAuthor.end(); it++)
+        {
+            std::vector<int> temp = db->getAuthorsForPaper(*it);
+	        conflictingReviewersVec.insert(conflictingReviewersVec.end(), temp.begin(), temp.end());
+        }
+    }
+}
+
+
+
+//TODO: matching keywords from database returns
+int calculateScore(int userID, int paperID)
+{
+	int score = 1;
+
+    std::vector<std::string> keysForPaper = db->getKeywordsForPaper(paperID);
+    std::vector<std::string> keysForUser = db->getKeywordsForUser(userID);
+
+	//(5)&(6)for each keyword match
+    std::vector<std::string>::const_iterator it;
+    for(it=keysForPaper.begin(); it!=keysForPaper.end(); it++)
+    {
+        std::vector<std::string>::const_iterator iter;
+        for(iter=keysForUser.begin(); iter!=keysForUser.end(); it++)
+        {
+            if (*it == *iter)
+		        ++score;
+        }
+    }
+
+	return score;
+
+}
+
+
+//TODO:get reviewer pref
+void PaperForReview::algo(int paperID, int conferenceID)
+{
+	std::vector<int> userIDs;
+	
+	//(7) fill userIDs with reviewers from conference
+    userIDs = db->getReviewersForConf(conferenceID);
+    int UserID;	
+
+    std::vector<int>::const_iterator iter;
+    for(it=userIDs.begin(); it!=userIDs.end(); it++)
+    {
+        UserID = *it;
+     	int score = 0;
+        if (std::find(conflictingReviewersVec.begin(), conflictingReviewersVec.end(), UserID) != conflictingReviewersVec.end())
+        {
+    		int reviewersPreference = 0;
+    				// 1=yes
+    				//2=maybe
+                    //3=no
+    				//4=conflict
+    
+            //(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
+    		reviewersPreference = db->getReviewerPreference(UserID, conferenceID, paperID);			
+    
+    		if(reviewersPreference == 1)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		elseif(reviewersPreference == 2)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		elseif(reviewersPreference != 3)
+    		{
+    			score = calculateScore(UserID, paperID);
+    			checkNewReviewer(score, UserID);
+    		}
+    	}
+    }
+}
+
+
+//TODO: populate vectors from data base
+//TODO: call conflicting reviewers
+
+void fillVectors(int paperID)
+{
+
+	// (1)select all Authors where paper==paperID
+		//addAuthors to paper
+    authors = db->getAuthorsForPaper(paperID);
+
+	// (2)select organisation for each author
+		//add involved organisation
+    
+    std::vector<int>::const_iterator it;
+    for(it=authors.begin(); it!=authors.end(); it++)
+    {
+        std::string temp = db->getOrganisationForAuthor(*it);
+        if(!temp.empty())
+            involvedOrganisation.push_back(temp);
+    }
+	
+	//CONFLICTING HERE
+	conflictingReviewers();
+}
+
+
+//MAY NEED TO FILTER FOR CONFERENCE ASWELL
+//(1)select author
+		//Where Paper ID = ?
+		
+//(2)select organisation
+		//where author = ?
+		
+
+//(3) select author
+		//where organisation = ?
+		
+//(4) select paperIDs
+		//where Author =?
+		
+//(5) select keywords
+		//where paperID = ?
+		
+//(6) select keywords
+		//where userID = ?
+		
+//(7) select pcs(reviewrs)
+		//where conferfence = ?
+		
+//(8) select reviewerPreferance
+		//where reviewerID = ? and paperID = ? 
+
diff --git a/Database/Database.cpp b/Database/Database.cpp
index a40c23b..4662bec 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -247,21 +247,21 @@ void Database::createUser(User user)
       	if (user.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertExpertise);
-		std::vector<std::string>::const_iterator it;
+    		std::vector<std::string>::const_iterator it;
       		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			
-			pstmt->setInt(1, userID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
+		    {
+			    std::string word = *it;	
+
+        	    	if (!this->existsKeyword(word))
+			    {
+			    	this->addKeyword(word);
+			    }
+			    
+			    pstmt->setInt(1, userID);
+			    pstmt->setString(2, word);
+
+      		            pstmt->executeUpdate();
+		    }
       		delete pstmt;
 
       	}
@@ -333,19 +333,19 @@ void Database::updateUser(User user)
       	if (user.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertExpertise);
-		std::vector<std::string>::const_iterator it;
+		    std::vector<std::string>::const_iterator it;
       		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			pstmt->setInt(1, userID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
+		    {
+		    	std::string word = *it;	
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	pstmt->setInt(1, userID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
       		delete pstmt;
 
       	}
@@ -397,27 +397,27 @@ std::vector<std::string> Database::allUserNames()
 
 bool Database::existsKeyword(std::string key) throw (const char*)
 {
-        if (invalid)
-                throw (noDB);
+    if (invalid)
+        throw (noDB);
 
 	const char* countKeyword = "SELECT COUNT(*) FROM Keywords WHERE keyword=?";
 
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
+    sql::PreparedStatement *pstmt = NULL;
+    sql::ResultSet * rs = NULL;
 
-        pstmt = dbcon->prepareStatement(countKeyword);
+    pstmt = dbcon->prepareStatement(countKeyword);
 
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
+    int count = 0;
+    pstmt->setString(1, key);
+    rs = pstmt->executeQuery();
 
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
+    if (rs->next()) {
+            count = rs->getInt(1);
+    }
+    delete rs;
+    delete pstmt;
 
-        return count == 1;
+    return count == 1;
 }
 
 void Database::addKeyword(std::string key) throw (const char*)
@@ -646,21 +646,21 @@ void Database::createConf(Conference conf)
       	if (conf.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertConfKeyword);
-		std::vector<std::string>::const_iterator it;
+		    std::vector<std::string>::const_iterator it;
       		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			
-			pstmt->setInt(1, confID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
+		    {
+		    	std::string word = *it;	
+
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	
+		    	pstmt->setInt(1, confID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
       		delete pstmt;
 
       	}
@@ -748,19 +748,19 @@ void Database::updateConf(Conference conf)
       	if (conf.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertKeywords);
-		std::vector<std::string>::const_iterator it;
+		    std::vector<std::string>::const_iterator it;
       		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			pstmt->setInt(1, confID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
+		    {
+		    	std::string word = *it;	
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	pstmt->setInt(1, confID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
       		delete pstmt;
       	}
 }
@@ -1191,21 +1191,21 @@ void Database::createPaper(Paper paper, std::string pdf) throw (const char*)
       	if (paper.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertKeywords);
-		std::vector<std::string>::const_iterator it;
+		    std::vector<std::string>::const_iterator it;
       		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			
-			pstmt->setInt(1, paperID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
+		    {
+		    	std::string word = *it;	
+
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	
+		    	pstmt->setInt(1, paperID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
       		delete pstmt;
 
       	}
@@ -1278,19 +1278,19 @@ void Database::updatePaper(Paper paper) throw (const char*)
       	if (paper.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertKeywords);
-		std::vector<std::string>::const_iterator it;
+		    std::vector<std::string>::const_iterator it;
       		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			pstmt->setInt(1, paper.paperID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
+		    {
+		    	std::string word = *it;	
+            		if (!this->existsKeyword(word))
+		    	{
+		    		this->addKeyword(word);
+		    	}
+		    	pstmt->setInt(1, paper.paperID);
+		    	pstmt->setString(2, word);
+
+      	    	        pstmt->executeUpdate();
+		    }
       		delete pstmt;
       	}
 }
@@ -1613,7 +1613,7 @@ std::string Database::getOrganisationForAuthor(int infoID) throw (const char*)
 	{
 		delete rs;
 		delete pstmt;
-		return DiscussionPost();
+		return std::string();
 	}
 
 	std::string org = rs->getString(1);
diff --git a/Database/Database.hpp b/Database/Database.hpp
index d759956..14a3545 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -17,39 +17,39 @@
 
 class Database {
 public:
-        Database();
-
-        ~Database();
-
-        void close();
+    Database();
+    
+    ~Database();
+    
+    void close();
 
 	// USER
 	User fetchUser(std::string key) throw (const char*);
-        bool existsUserName(std::string key) throw (const char*);
-        void putUser(std::string key, User user) throw (const char*);
-        std::vector<int> allUserIDs();
-        std::vector<std::string> allUserNames();
+    bool existsUserName(std::string key) throw (const char*);
+    void putUser(std::string key, User user) throw (const char*);
+    std::vector<int> allUserIDs();
+    std::vector<std::string> allUserNames();
 
 	// KEYWORD
-        bool existsKeyword(std::string key) throw (const char*);
+    bool existsKeyword(std::string key) throw (const char*);
 	void addKeyword(std::string key) throw (const char*);
 
 	// CONFERENCE
 	Conference fetchConference(int key) throw (const char*);
-        bool existsConfName(std::string key) throw (const char*);
-        void putConf(std::string key, Conference conf) throw (const char*);
-        std::vector<int> allConfIDs();
-        std::vector<std::string> allConfNames();
-        std::vector<int> activeConfIDs();
-        std::vector<std::string> activeConfNames();
+    bool existsConfName(std::string key) throw (const char*);
+    void putConf(std::string key, Conference conf) throw (const char*);
+    std::vector<int> allConfIDs();
+    std::vector<std::string> allConfNames();
+    std::vector<int> activeConfIDs();
+    std::vector<std::string> activeConfNames();
 
 	// PAPER
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
-        std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
-        Paper fetchPaper(int key) throw (const char*);
+    std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
+    Paper fetchPaper(int key) throw (const char*);
 	bool existsPaperTitleConf(Paper paper) throw (const char*);
-        void createPaper(Paper paper, std::string pdf) throw (const char*);
-        void updatePaper(Paper paper) throw (const char*);
+    void createPaper(Paper paper, std::string pdf) throw (const char*);
+    void updatePaper(Paper paper) throw (const char*);
 	void addPaperAccepted(int paperID, int confID) throw (const char*);
 	std::vector<int> fetchPaperAccepted(int confID) throw (const char*);
 
@@ -92,28 +92,28 @@ public:
 //
 //
 
-        bool isOK()
-        {
-                return !(this->invalid);
-        }
+    bool isOK()
+    {
+        return !(this->invalid);
+    }
 
 private:
-        bool invalid;
-        const char* dbname;
-        sql::Connection *dbcon;
-        sql::Driver *driver;
-        Database(const Database& orig);
-        Database& operator=(const Database);
+    bool invalid;
+    const char* dbname;
+    sql::Connection *dbcon;
+    sql::Driver *driver;
+    Database(const Database& orig);
+    Database& operator=(const Database);
 
 //        void recordToTables(const MyRecord *data);
 
-	// USER
-        void createUser(User user);
-        void updateUser(User user);
+// USER
+    void createUser(User user);
+    void updateUser(User user);
 
-	// CONF
-        void createConf(Conference conf);
-        void updateConf(Conference conf);
+// CONF
+    void createConf(Conference conf);
+    void updateConf(Conference conf);
 
 };
 #endif

commit bbd989fcf5cea6ffa223651b2c7db858b46e9eed
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 21:47:51 2014 +1100

    Finished sorting Algo

diff --git a/Algorithm/Algo b/Algorithm/Algo
index bd2b87f..eec1e5f 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -15,11 +15,10 @@
 
 
 //returns vector of reviewerIDs from getter
+
+#include <algorithm>
 #include <iostream>
 #include <vector>
-#include "Conference.hpp"
-#include "Paper".hpp
-#include "User.hpp"
 
 
 struct ReviewerBid
@@ -30,40 +29,39 @@ struct ReviewerBid
 
 class PaperForReview
 {
-	private:
-		PapersForReview(int, int, int,Database*);
-		~PapersForReview();
-		int paperID;
-		int conferenceID;
-		Database* db;
-		
-		std::vector<ReviewerBid> reviewerBids;
-		
-		int numOfReqReviewrs;
-		
-		std::vector<int> authors;
-		std::vector<int> involvedOrganisation;
-		std::vector<int> conflictingReviewersVec;
-		
-		int getMinScore();
-		void setNewReviewer(int, int);
-		void checkNewReviewer(int, int);
-		void addAuthor(int);
-		void conflictingReviewers();
-		void algo();
-		void fillVectors();
-		//push
-		void pushReviewers();
-
+public:
+	PaperForReview(int, int, int,Database*);
+	~PaperForReview();
+
+	int findMinScore();
+	void setNewReviewer(int, int);
+    void addNewReviewerUnderReqNum(int, int);
+	void checkNewReviewer(int, int);
+	void addAuthor(int);
+	void conflictingReviewers();
+	void algo();
+	void fillVectors();
+	void pushReviewers();
+
+private:
+	Database* db;
+	int paperID;
+	int conferenceID;
+    int minScore;
+	int numOfReqReviewrs;
+	std::vector<ReviewerBid> reviewerBids;
+	std::vector<int> authors;
+	std::vector<std::string> involvedOrganisation;
+	std::vector<int> conflictingReviewersVec;
 };
 
 std::vector<int> pushReviewers()
 {
-	
-	for(int i=0; i<numOfReqReviewrs; i++)
+	for(int i=0; i<reviewerBids.size(); i++)
 	{
 		if(reviewerBids.score[i] > 1)
 		{
+            db->assignPaper(paperID, reviewerBids.reviewerID, conferenceID);
 			//Push new Reviewer to the database
 			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
 		}
@@ -73,43 +71,57 @@ std::vector<int> pushReviewers()
 
 void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
 {
-	if(getMinScore() < newscore)
+    if(reviewerBids.size() < NumOfReqReviewers)
+    {
+        // Add reviewer
+        addNewReviewerUnderReqNum(newScore, newReviewerID);
+    }
+    else if(newscore > minScore)
 	{
-		//Set New Reviewer
+        // Update reviewer
 		setNewReviewer(newScore, newReviewerID);
 	}
 }
 
-int PaperForReview::getMinScore()
+void PaperForReview::addNewReviewerUnderReqNum(int newScore, int newReviewer)
 {
-	int minScore = -1;
+    ReviewerBid bid(newScore, newReviewer);
+
+    reviewerBids.push_back(bid);
+    
+    if(newScore < minScore)
+        minScore = newScore
+}
+
+void PaperForReview::findMinScore()
+{
+	int tempScore = -1;
 	for(int i=0; i<NumOfReqReviewers; i++)
 	{
-		if(reviewerBids[i].score < minScore)
-			minScore = reviewerBids[i].score;
+        if(tempScore == -1)
+            tempScore = reviewerBids[i].score;
+        else if(reviewerBids[i].score < tempScore)
+			tempScore = reviewerBids[i].score;
 	}
-	return minScore;
+	minScore = tempScore;
 }
 
 void PaperForReview::setNewReviewer(int newScore, int newReviewer)
 {
-
-	minScore = getMinScore();
 	for(int i=0; i< NumOfReqReviewers; i++)
 	{
-		if(reviewerBids[i].score < minScore)
+		if(reviewerBids[i].score == minScore)
 		{
 			reviewerBids[i].score = newScore;
 			reviewerBids[i].reviewerID =  newReviewer;
-			i=  NumOfReqReviewrs;
+            findMinScore();
 		}
 	}
-
 }
 
 PaperForReview::~PaperForReview()
 {
-
+    db = NULL;
 }
 
 PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
@@ -133,33 +145,42 @@ PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Dat
 	algo(PaperID, confID);
 	
 	pushReviewers();
-	
-	//del???
-}
-
-
-void PaperForReview::addAuthor(int newAuthor)
-{
-	authors.push_back(newAuthor);
 }
 
 //TODO
 //populate clonflicting reviewers vector further from database queries
-void  PaperForReview::conflictingReviewers()
+void PaperForReview::conflictingReviewers()
 {
 	//authors
-		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());
-
+	conflictingReviewersVec.insert(conflictingReviewersVec.end(), authors.begin(), authors.end());
 
 	//(3)usersFromSameOrganisation
 		//ForEachAuthor:   SelectOrganisation
 			//SelectAllUsersFromEachOrganisation
 				//PushBack^
-
+    std::vector<std::string>::const_iterator it;
+    for(it=involvedOrganisation.begin(); it!=involvedOrganisation.end(); it++)
+    {
+        std::vector<int> reviewersForOrg = db->getReviewersForOrganisation(*it);
+	    conflictingReviewersVec.insert(conflictingReviewersVec.end(), reviewersForOrg.begin(), reviewersForOrg.end());
+    }
+        
 	//pastCoAuthors
-		//(4)ForEachAuthor:   selectAllPapers into temp
-			//Select All authors for each paper in temp
-				//pushBack^
+		//(4)ForEachAuthor:   selectAllPapers into papersForAuthor
+			//Select All authors for each paper in papersForAuthor and place into temp
+				//pushBack into conflictingReviewersVec
+    std::vector<int>::const_iterator it;
+    for(it=authors.begin(); it!=authors.end(); it++)
+    {
+        std::vector<int> papersForAuthor = db->getPapersForAuthor(*it);
+
+        std::vector<int>::const_iterator iter;
+        for(iter=papersForAuthor.begin(); iter!=papersForAuthor.end(); it++)
+        {
+            std::vector<int> temp = db->getAuthorsForPaper(*it);
+	        conflictingReviewersVec.insert(conflictingReviewersVec.end(), temp.begin(), temp.end());
+        }
+    }
 }
 
 
@@ -169,8 +190,20 @@ int calculateScore(int userID, int paperID)
 {
 	int score = 1;
 
+    std::vector<std::string> keysForPaper = db->getKeywordsForPaper(paperID);
+    std::vector<std::string> keysForUser = db->getKeywordsForUser(userID);
+
 	//(5)&(6)for each keyword match
-		 ++score;
+    std::vector<std::string>::const_iterator it;
+    for(it=keysForPaper.begin(); it!=keysForPaper.end(); it++)
+    {
+        std::vector<std::string>::const_iterator iter;
+        for(iter=keysForUser.begin(); iter!=keysForUser.end(); it++)
+        {
+            if (*it == *iter)
+		        ++score;
+        }
+    }
 
 	return score;
 
@@ -183,35 +216,42 @@ void PaperForReview::algo(int paperID, int conferenceID)
 	std::vector<int> userIDs;
 	
 	//(7) fill userIDs with reviewers from conference
-	
-	 for all in userIDs
-	 {
-	 	int score = 0;
-		If UserID not in  conflictingReviewers
-		{
-			int reviewersPreference = 0;
-					// 1=yes
-					//2=maybe
-					//3=conflict
-			reviewersPreference = ;//(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
-			
-			if(reviewersPreference == 1)
-			{
-				score = calculateScore(userID, paperID) * 1000000;
-				checkNewReviewer(score, userID);
-			}
-			elseif(reviewersPreference == 2)
-			{
-				score = calculateScore(userID, paperID) * 1000;
-				checkNewReviewer(score, userID);
-			}
-			elseif(reviewersPreference != 3)
-			{
-				score = calculate score(userID, paperID);
-				checkNewReviewer(score, userID);
-			}
-		}
-	}
+    userIDs = db->getReviewersForConf(conferenceID);
+    int UserID;	
+
+    std::vector<int>::const_iterator iter;
+    for(it=userIDs.begin(); it!=userIDs.end(); it++)
+    {
+        UserID = *it;
+     	int score = 0;
+        if (std::find(conflictingReviewersVec.begin(), conflictingReviewersVec.end(), UserID) != conflictingReviewersVec.end())
+        {
+    		int reviewersPreference = 0;
+    				// 1=yes
+    				//2=maybe
+                    //3=no
+    				//4=conflict
+    
+            //(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
+    		reviewersPreference = db->getReviewerPreference(UserID, conferenceID, paperID);			
+    
+    		if(reviewersPreference == 1)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		elseif(reviewersPreference == 2)
+    		{
+    			score = calculateScore(UserID, paperID) * 1000;
+    			checkNewReviewer(score, UserID);
+    		}
+    		elseif(reviewersPreference != 3)
+    		{
+    			score = calculateScore(UserID, paperID);
+    			checkNewReviewer(score, UserID);
+    		}
+    	}
+    }
 }
 
 
@@ -223,12 +263,19 @@ void fillVectors(int paperID)
 
 	// (1)select all Authors where paper==paperID
 		//addAuthors to paper
+    authors = db->getAuthorsForPaper(paperID);
 
 	// (2)select organisation for each author
 		//add involved organisation
+    
+    std::vector<int>::const_iterator it;
+    for(it=authors.begin(); it!=authors.end(); it++)
+    {
+        involvedOrganisation.push_back(db->getOrganisationForAuthor(*it));
+    }
 	
 	//CONFLICTING HERE
-		conflictingReviewers();
+	conflictingReviewers();
 }
 
 
diff --git a/Database/Database.cpp b/Database/Database.cpp
index 3a2e466..a40c23b 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1590,7 +1590,7 @@ std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
 	return vec;
 }
 
-std::vector<std::string> Database::getOrganisationForAuthor(int infoID) throw (const char*)
+std::string Database::getOrganisationForAuthor(int infoID) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -1608,15 +1608,20 @@ std::vector<std::string> Database::getOrganisationForAuthor(int infoID) throw (c
 
 	rs = pstmt->executeQuery();
 
-        while (rs->next()) {
-		std::string org = rs->getString(1);
-                vec.push_back(org);
-        }
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return DiscussionPost();
+	}
 
-        delete rs;
-        delete pstmt;
+	std::string org = rs->getString(1);
+
+    delete rs;
+    delete pstmt;
 	
-	return vec;
+	return org;
 }
 
 std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (const char*)
diff --git a/Database/Database.hpp b/Database/Database.hpp
index dec5a5f..d759956 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -64,7 +64,7 @@ public:
 
 	// ALGO
 	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);
-	std::vector<std::string> getOrganisationForAuthor(int infoID) throw (const char*);
+	std::string getOrganisationForAuthor(int infoID) throw (const char*);
 	std::vector<int> getReviewersForOrganisation(std::string org) throw (const char*);
 	std::vector<int> getPapersForAuthor(int authorID) throw (const char*);
 	std::vector<std::string> getKeywordsForPaper(int paperID) throw (const char*);
diff --git a/Database/main.cpp b/Database/main.cpp
index fc19efd..a68e419 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -70,7 +70,7 @@ int main(int arc, char *argv[])
                 std::cout << "fetch username: " << user.userName << " name: " << user.name << " first expertise: " <<  user.keywords[0] << " email: " << user.email << std::endl;
         }
         
-        std::vector<int> ConfIDs{db.activeConfIDs()};
+        std::vector<int> ConfIDs = db.activeConfIDs();
         std::vector<int>::iterator confiter;
         for(confiter=ConfIDs.begin(); confiter!=ConfIDs.end(); confiter++)
         {
@@ -85,7 +85,7 @@ int main(int arc, char *argv[])
         {
         	int key = (*paperiter);
         	Paper paper = db.fetchPaper(key);
-        	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword " << paper.keywords[0] << std::endl;
+        	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword: " << paper.keywords[0] << std::endl;
         }
 
         return EXIT_SUCCESS;

commit df710bfb7d60e137a8aa0b59095663b10256da7d
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 19:41:50 2014 +1100

    minor cleaning

diff --git a/PDF/PDF_read_write_example.cpp b/PDF/PDF_read_write_example.cpp
index a80cd03..22c125a 100644
--- a/PDF/PDF_read_write_example.cpp
+++ b/PDF/PDF_read_write_example.cpp
@@ -19,13 +19,12 @@ Alex Cremona Oct 2014
 
 int main()
 {
-	char inName[256] = "Simple.pdf";
+    char inName[256] = "Simple.pdf";
 	char outName[256] = "testOut.pdf";
 	//std::string content;
 	std::ifstream fin;
 	std::ofstream fout;
 
-
 	//open pdf in binary
 	fin.open(inName, std::ios::in | std::ios::binary);
 	
@@ -42,20 +41,13 @@ int main()
 
 	fin.close();
 	
-	
 	//set string for saving
 	std::string = buffer;
 
-
-
-
 	//open output in Binary and output content elsewhere
 	fout.open(outName, std::ios::out | std::ios::binary);
 	fout.write(buffer, length);
 	fout.close();
 
 	return 0;
-
-
-
 }

commit 60ef35c2db1e456437c69a45aa04e1d3eb2b31ee
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 19:39:42 2014 +1100

    possible mistake with inheritance constructing of UserClient/mainwindow.cpp

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index bf2c081..d9248f7 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -2,9 +2,8 @@
 #include "ui_mainwindow.h"
 #include "Review.hpp"
 
-MainWindow::MainWindow(QWidget *parent)
+MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
 {
-    QMainWindow = parent;
     ui = new Ui::MainWindow;
     ui->setupUi(this);
     noUser();

commit ca79dfbb55254ff2df01f4ebeb1f099a8b3b9bad
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 19:36:52 2014 +1100

    c++11 rollback AdminClient

diff --git a/AdminClient/AdminClient.cpp b/AdminClient/AdminClient.cpp
index e4a1c5c..f85d4b2 100644
--- a/AdminClient/AdminClient.cpp
+++ b/AdminClient/AdminClient.cpp
@@ -7,7 +7,8 @@
 
 QTcpSocket *establishConnection();
 
-int main(int argc, char *argv[]) {
+int main(int argc, char *argv[]) 
+{
     // initialize resources, if needed
     // Q_INIT_RESOURCE(resfile);
 
@@ -22,7 +23,8 @@ int main(int argc, char *argv[]) {
     return app.exec();
 }
 
-QTcpSocket *establishConnection() {
+QTcpSocket *establishConnection() 
+{
     // just connect on localhost
     std::string servername = "10.64.32.150";//"127.0.0.1";
     std::string pnumstr = "23456";
@@ -51,16 +53,21 @@ QTcpSocket *establishConnection() {
     // Allow time for connection to establish, then check that all
     // looks good. If any problems, abort execution.
     bool ok = tcpSocket->waitForConnected(1000);
-    if (!ok) {
+    if (!ok) 
+    {
         std::cout << "Wait for connected didn't work" << std::endl;
         exit(1);
     }
-    if (!tcpSocket->isValid()) {
+
+    if (!tcpSocket->isValid()) 
+    {
         std::cout << "Didn't connect completely?" << std::endl;
         exit(1);
     } QAbstractSocket::SocketState state;
+
     state = tcpSocket->state();
-    if (state != QAbstractSocket::ConnectedState) {
+    if (state != QAbstractSocket::ConnectedState) 
+    {
         std::cout << "Not happy with state" << std::endl;
         exit(1);
     }
diff --git a/AdminClient/AdminClientStubForServer.cpp b/AdminClient/AdminClientStubForServer.cpp
index 26cec61..df8073d 100644
--- a/AdminClient/AdminClientStubForServer.cpp
+++ b/AdminClient/AdminClientStubForServer.cpp
@@ -54,19 +54,22 @@ void AdminClientStubForServer::handleCheckLoginDetailsResponse()
     
 }
 
-void AdminClientStubForServer::dispatch(QString responseName) {
+void AdminClientStubForServer::dispatch(QString responseName) 
+{
     if (responseName == "CHECKLOGIN")
         handleCheckLoginDetailsResponse();
 }
 
-void AdminClientStubForServer::handleResponse() {
+void AdminClientStubForServer::handleResponse() 
+{
     QString responseName;
     (*this->responseReader) >> responseName;
     this->dispatch(responseName);
     this->busy = false; 
 } 
 
-void AdminClientStubForServer::setupForRequest() {
+void AdminClientStubForServer::setupForRequest() 
+{
     this->requestData.clear();
     this->requestWriter = new QDataStream(&requestData, QIODevice::WriteOnly);
     this->requestWriter->setVersion(QDataStream::Qt_4_0);
@@ -77,7 +80,8 @@ void AdminClientStubForServer::setupForRequest() {
     // buffer
 }
 
-void AdminClientStubForServer::sendRequest() {
+void AdminClientStubForServer::sendRequest() 
+{
     // Request is complete - just have to adjust the length field
     int datalength = this->requestData.size();
     
@@ -93,7 +97,8 @@ void AdminClientStubForServer::sendRequest() {
     delete this->requestWriter; 
 } 
 
-void AdminClientStubForServer::setupForResponse() {
+void AdminClientStubForServer::setupForResponse() 
+{
     this->busy = true;
     // don't want any other requests made if need a response
     
@@ -104,7 +109,8 @@ void AdminClientStubForServer::setupForResponse() {
     this->responseReader->setVersion(QDataStream::Qt_4_0);
 }
 
-void AdminClientStubForServer::readResponseData() {
+void AdminClientStubForServer::readResponseData() 
+{
     // This function will be called repeatedly as the underlying system
     // detects incoming bytes on the tcp connection.
     
diff --git a/AdminClient/AdminClientStubForServer.hpp b/AdminClient/AdminClientStubForServer.hpp
index 4775044..e35879d 100644
--- a/AdminClient/AdminClientStubForServer.hpp
+++ b/AdminClient/AdminClientStubForServer.hpp
@@ -16,11 +16,13 @@
 
 class LoginManager;
 
-class AdminClientStubForServer : public QObject {
+class AdminClientStubForServer : public QObject 
+{
     
     Q_OBJECT;
 public:
-    AdminClientStubForServer(QTcpSocket *aServer, LoginManager* aMainGui) {
+    AdminClientStubForServer(QTcpSocket *aServer, LoginManager* aMainGui) 
+    {
         this->theServer = aServer;
         this->mainGui = aMainGui;
         this->busy = false;
@@ -69,7 +71,6 @@ private:
     // Collaborators 
     QTcpSocket *theServer;
     LoginManager *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
-
 };
 
 #endif	/* USERCLIENTSTUBFORSERVER_H */
diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index 7c5e106..3fd62fe 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -2,25 +2,30 @@
 #define CONFERENCE_MANAGER_H
 #include "../DataAll/Conference.hpp"
 
-class ConferenceManager {
+class ConferenceManager 
+{
 public:
-  ConferenceManager() { }
-  ConferenceManager(Conference* icurrentConference) : currentConference(icurrentConference) { }
-  ~ConferenceManager() { if(currentConference != nullptr)
-                     delete currentConference;}
+    ConferenceManager() { }
 
-  Conference* getcurrentConference(return currentConference;)
-  void setConference(Conference* icurrentConference) {currentConference = icurrentConference;}
-  void createConference();
-  void removeConference();
-  void listConferences();
-  void viewConference();
-  void editConference();
-  void addKWords();
+    ConferenceManager(Conference* icurrentConference) : currentConference(icurrentConference) { }
+
+    ~ConferenceManager() 
+    { 
+        if(currentConference != nullptr)
+        delete currentConference;
+    }
+    
+    Conference* getcurrentConference(return currentConference;)
+    void setConference(Conference* icurrentConference) {currentConference = icurrentConference;}
+    void createConference();
+    void removeConference();
+    void listConferences();
+    void viewConference();
+    void editConference();
+    void addKWords();
   
   
 private:
-  Conference* currentConference{nullptr};
-
+    Conference* currentConference = nullptr;
 };
 #endif
diff --git a/AdminClient/DateTest.cpp b/AdminClient/DateTest.cpp
index 9589bd4..b9370d9 100644
--- a/AdminClient/DateTest.cpp
+++ b/AdminClient/DateTest.cpp
@@ -5,33 +5,37 @@
 #include "../DataAll/Date.hpp"
 
 //BOOST_AUTO_TEST_SUITE(CompareTest)
-BOOST_AUTO_TEST_CASE(EqualDates) {
-  Date a;
-  Date b;
-  BOOST_CHECK(a.compare(b));
-  BOOST_CHECK(!b.compare(a));
+BOOST_AUTO_TEST_CASE(EqualDates) 
+{
+    Date a;
+    Date b;
+    BOOST_CHECK(a.compare(b));
+    BOOST_CHECK(!b.compare(a));
 }
 
-BOOST_AUTO_TEST_CASE(MonthAheadDayBehind) {
-  Date a;
-  a.day = 1;
-  Date b(0,1,0);
-  BOOST_CHECK(!a.compare(b));
-  BOOST_CHECK(b.compare(a));
+BOOST_AUTO_TEST_CASE(MonthAheadDayBehind) 
+{
+    Date a;
+    a.day = 1;
+    Date b(0,1,0);
+    BOOST_CHECK(!a.compare(b));
+    BOOST_CHECK(b.compare(a));
 }
 
-BOOST_AUTO_TEST_CASE(YearAheadMonthBehind) {
-  Date a;
-  a.month = 1;
-  Date b(0,0,1);
-  BOOST_CHECK(!a.compare(b));
-  BOOST_CHECK(b.compare(a));
+BOOST_AUTO_TEST_CASE(YearAheadMonthBehind) 
+{
+    Date a;
+    a.month = 1;
+    Date b(0,0,1);
+    BOOST_CHECK(!a.compare(b));
+    BOOST_CHECK(b.compare(a));
 }
 
-BOOST_AUTO_TEST_CASE(YearBehindDayAhead) {
-  Date a;
-  a.year = 1;
-  Date b(1,0,0);
-  BOOST_CHECK(a.compare(b));
-  BOOST_CHECK(!b.compare(a));
+BOOST_AUTO_TEST_CASE(YearBehindDayAhead) 
+{
+    Date a;
+    a.year = 1;
+    Date b(1,0,0);
+    BOOST_CHECK(a.compare(b));
+    BOOST_CHECK(!b.compare(a));
 }
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index f6a403e..4c6e8a7 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -6,40 +6,45 @@
 
 class MainWindow;
 
-class LoginManager {
+class LoginManager 
+{
 public:
-  LoginManager(QTcpSocket* aServer) {
+    LoginManager(QTcpSocket* aServer) 
+    {
+      // Connection will mainly be managed by an instance of client stub class
+      AdminClientStubForServer *stub = new AdminClientStubForServer(aServer, this);
+      this->theServer = stub;
+      // but do have some more initialisation to do on the connection
+      aServer->setParent(this->theServer);
+      // Read events generated through TCP connection to be handled by
+      // instance of clientstub class
+      QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
     
-    // Connection will mainly be managed by an instance of client stub class
-    AdminClientStubForServer *stub = new AdminClientStubForServer(aServer, this);
-    this->theServer = stub;
-    // but do have some more initialisation to do on the connection
-    aServer->setParent(this->theServer);
-    // Read events generated through TCP connection to be handled by
-    // instance of clientstub class
-    QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
- 
-  }
-  LoginManager(bool iloggedIn) :
-    loggedIn(iloggedIn)
-    { }
-  ~LoginManager() {
-    delete currentUser;
-  }
-  
-  MainWindow* mWindow;
-  
-  bool getLoggedIn() {return loggedIn;}
-  User* getCurrentUser() {return currentUser;}
-  void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}
-  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}  
-  
-  bool login(std::string, std::string);
-  void logout();
+    }
+
+    LoginManager(bool iloggedIn)
+    {
+        loggedIn = iloggedIn;
+    }
+
+    ~LoginManager() 
+    {
+        delete currentUser;
+    }
+    
+    MainWindow* mWindow;
+    
+    bool getLoggedIn() {return loggedIn;}
+    User* getCurrentUser() {return currentUser;}
+    void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}
+    void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}  
+    
+    bool login(std::string, std::string);
+    void logout();
   
 private:
-  bool loggedIn;
-  User* currentUser{nullptr};
-  AdminClientStubForServer* theServer;
+    bool loggedIn;
+    User* currentUser = nullptr;
+    AdminClientStubForServer* theServer;
 };
 #endif
diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 1988ac1..e055036 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -2,69 +2,93 @@
 #define PAPER_MANAGER_H
 #include "../DataAll/Paper.hpp"
 
-class PaperManager {
+class PaperManager 
+{
 public:
-  PaperManager() { }
-  PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
-  ~PaperManager() { if(currentPaper != nullptr)
-                     delete currentPaper;}
-  Paper* getCurrentPaper() {return currentPaper;}
-  void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+    PaperManager() { }
 
-  void createPaper();
-  void removePaper();
-  void listPapers();
-  void viewPaper();
-  void editPaper();
-  void downloadPaper();
-  void addToKeywords(const std::string& in) {
-      currentPaper->keywords.push_back(in);
+    PaperManager(Paper* icurrentPaper)
+    {
+        currentPaper = icurrentPaper
     }
-    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < currentPaper->keywords.size(); ++i)
-      {
-        if(currentPaper->keywords[i] == keywordToRemove) {
-          currentPaper->keywords.erase(currentPaper->keywords.begin() + i);
-          return;
+
+    ~PaperManager() 
+    {
+        if(currentPaper != nullptr)
+            delete currentPaper;
+    }
+
+    Paper* getCurrentPaper() {return currentPaper;}
+    void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+    
+    void createPaper();
+    void removePaper();
+    void listPapers();
+    void viewPaper();
+    void editPaper();
+    void downloadPaper();
+    void addToKeywords(const std::string& in) 
+    {
+        currentPaper->keywords.push_back(in);
+    }
+
+    void removeKeyword(const std::string& keywordToRemove) //remove by paperID
+    {
+        for(unsigned int i = 0; i < currentPaper->keywords.size(); ++i)
+        {
+            if(currentPaper->keywords[i] == keywordToRemove) 
+            {
+                currentPaper->keywords.erase(currentPaper->keywords.begin() + i);
+                return;
+            }
         }
-      }
     }
-    void addToAuthors(const User& in) {
-      currentPaper->authors.push_back(in);
+
+    void addToAuthors(const User& in) 
+    {
+        currentPaper->authors.push_back(in);
     }
-    void removeAuthor(int userToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < currentPaper->authors.size(); ++i)
-      {
-        if(currentPaper->authors[i].userID == userToRemove) {
-          currentPaper->authors.erase(currentPaper->authors.begin() + i);
-          return;
+
+    void removeAuthor(int userToRemove) //remove by paperID
+    {
+        for(unsigned int i = 0; i < currentPaper->authors.size(); ++i)
+        {
+            if(currentPaper->authors[i].userID == userToRemove) 
+            {
+                currentPaper->authors.erase(currentPaper->authors.begin() + i);
+                return;
+            }
         }
-      }
     }
-    void addToReviews(const Review& in) {
-      currentPaper->reviews.push_back(in);
+
+    void addToReviews(const Review& in) 
+    {
+        currentPaper->reviews.push_back(in);
     }
-    void removeReview(int reviewToRemove) { //remove by reviewer ID
-      for(unsigned int i = 0; i < currentPaper->reviews.size(); ++i)
-      {
-        if(currentPaper->reviews[i].reviewerID == reviewToRemove) {
-          currentPaper->reviews.erase(currentPaper->reviews.begin() + i);
-          return;
+
+    void removeReview(int reviewToRemove) //remove by reviewer ID
+    {
+        for(unsigned int i = 0; i < currentPaper->reviews.size(); ++i)
+        {
+            if(currentPaper->reviews[i].reviewerID == reviewToRemove) 
+            {
+                currentPaper->reviews.erase(currentPaper->reviews.begin() + i);
+                return;
+            }
         }
-      }
     }
 
 private:
-  void viewDiscussion();
-  void addDiscPost();
-  void removeDiscPost();
-  void editDiscPost();
-  void addReview();
-  void listReviews();
-  void editReview();
-  void removeReview();
-
-  Paper* currentPaper{nullptr};
+    void viewDiscussion();
+    void addDiscPost();
+    void removeDiscPost();
+    void editDiscPost();
+    void addReview();
+    void listReviews();
+    void editReview();
+    void removeReview();
+    
+    Paper* currentPaper = nullptr;
 
 };
 #endif
diff --git a/AdminClient/SuperUser.cpp b/AdminClient/SuperUser.cpp
index 684804b..cbd17a9 100644
--- a/AdminClient/SuperUser.cpp
+++ b/AdminClient/SuperUser.cpp
@@ -2,7 +2,7 @@
 
 void SuperUser::checkAllDeadlines() 
 {
-  // returns nothing
-  // calls the checkAllDeadlines on the conf manager on the server
-  // takes no inputs
+    // returns nothing
+    // calls the checkAllDeadlines on the conf manager on the server
+    // takes no inputs
 }
diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index 588417f..f70e910 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -4,22 +4,22 @@
 
 class SuperUser {
 public:
-  SuperUser(const std::string& iuserName,
-    const std::string& ipassword) :
-    userName(iuserName),
-    password(ipassword)
-    { }
-
-
-  void view();
-  void changeDetails();
-  void checkAllDeadlines();
-  std::string getPassword() {return password;}
-  void setPassword(const std::string& ipassword) {password = ipassword;}
-
-  std::string userName{""};
+    SuperUser(const std::string& iuserName,
+        const std::string& ipassword)
+    {
+        userName = iuserName;
+        password = ipassword;
+    }
+    
+    void view();
+    void changeDetails();
+    void checkAllDeadlines();
+    std::string getPassword() {return password;}
+    void setPassword(const std::string& ipassword) {password = ipassword;}
+    
+    std::string userName;
 
 private:
-  std::string password{""};
+    std::string password;
 };
 #endif
diff --git a/AdminClient/User.hpp b/AdminClient/User.hpp
index 035eaba..50345f5 100644
--- a/AdminClient/User.hpp
+++ b/AdminClient/User.hpp
@@ -3,34 +3,36 @@
 #include <string>
 #include <vector>
 
+struct User 
+{
+    User() { }
 
-struct User {
-  User() { }
-  User(const std::string& iuserName,
-         const std::string& iname,
-         const std::string& iemail,
-         const std::string& iorganisation,
-         const std::string& iphone,
-         const std::string& ipassword,
-         int iuserID,
-         const std::vector<std::string>& ikeywords):
-         userName(iuserName),
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         password(ipassword),
-         userID(iuserID),
-         keywords(ikeywords)
-         { }
-  std::string userName{""};
-  std::string password{""};
-  std::string name{""};
-  std::string email{""};
-  std::string organisation{""};
-  std::string phone{""};
-  std::vector<std::string> keywords;
-  int userID{0};
+    User(const std::string& iuserName,
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        const std::string& ipassword,
+        int iuserID,
+        const std::vector<std::string>& ikeywords)
+    {
+        userName = iuserName;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        password = ipassword;
+        userID = iuserID;
+        keywords = ikeywords;
+    }
 
+    std::string userName;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    std::vector<std::string> keywords;
+    int userID = 0;
 };
 #endif
diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index e3a373b..47a7e3f 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -2,21 +2,31 @@
 #define USER_MANAGER_H
 #include "User.hpp"
 
-class UserManager {
+class UserManager 
+{
 public:
-  UserManager() { }
-  UserManager(User* icurrentUser) : currentUser(icurrentUser) { }
-  ~UserManager() { if(currentUser != nullptr)
-                     delete currentUser;}
-  User* getCurrentUser() {return currentUser;}
-  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}  
-  void createUser();
-  void removeUser();
-  void listUsers();
-  void viewUser();
-  void editUser();
-private:  
-  User* currentUser{nullptr};
+    UserManager() { }
+
+    UserManager(User* icurrentUser) 
+    {
+        currentUser = icurrentUser;
+    }
+
+    ~UserManager() 
+    { 
+        if(currentUser != nullptr)
+            delete currentUser;
+    }
 
+    User* getCurrentUser() {return currentUser;}
+    void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}  
+    void createUser();
+    void removeUser();
+    void listUsers();
+    void viewUser();
+    void editUser();
+
+private:  
+    User* currentUser = nullptr;
 };
 #endif
diff --git a/AdminClient/mainwindow.cpp b/AdminClient/mainwindow.cpp
index 85c4ebd..71ba97f 100644
--- a/AdminClient/mainwindow.cpp
+++ b/AdminClient/mainwindow.cpp
@@ -1,10 +1,9 @@
 #include "mainwindow.hpp"
 #include "ui_mainwindow.h"
 
-MainWindow::MainWindow(QWidget *parent) :
-    QMainWindow(parent),
-    ui(new Ui::MainWindow)
+MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent)
 {
+    ui = new Ui::MainWindow;
     ui->setupUi(this);
 }
 
diff --git a/AdminClient/mainwindow.hpp b/AdminClient/mainwindow.hpp
index 973af2c..9b9c3f1 100644
--- a/AdminClient/mainwindow.hpp
+++ b/AdminClient/mainwindow.hpp
@@ -5,7 +5,7 @@
 #include "LoginManager.hpp"
 
 namespace Ui {
-class MainWindow;
+    class MainWindow;
 }
 
 class MainWindow : public QMainWindow

commit f3b40e4fb2965580bc0973996d84935d4887e75e
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 19:20:02 2014 +1100

    c++11 rollback UserClient

diff --git a/UserClient/Author.cpp b/UserClient/Author.cpp
index 9973212..ba236aa 100644
--- a/UserClient/Author.cpp
+++ b/UserClient/Author.cpp
@@ -5,8 +5,6 @@ void Author::getAllPapers()
     //sends request to server asking for PaperSummaries
 
     //populates ownPaper vector with response
-
-
 }
 
 void Author::getPaper()
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 7d715dd..e506c3d 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -7,8 +7,9 @@
 
 #include <vector>
 
-class Author : public User {
-  public:
+class Author : public User 
+{
+public:
     Author() { }
     /*
     Author(const std::string& iuserName,
@@ -43,19 +44,21 @@ class Author : public User {
          int iuserID,
          UserType_t iuserType,
          const std::vector<std::string>& ikeywords,
-         const std::vector<PaperSummary>& iownPapers):
-         User(iuserName,
+         const std::vector<PaperSummary>& iownPapers)
+    :
+    User(iuserName,
          iname,
          iemail,
          iorganisation,
          iphone,
          ipassword,
          iuserID,
-         iuserType
-         ),
+         iuserType)
+    {
          keywords(ikeywords),
          ownPapers(iownPapers)
-         { }
+    }
+
     virtual void view();
     void getAllPapers();
     void getPaper();
@@ -67,19 +70,25 @@ class Author : public User {
     std::vector<std::string> keywords;
     std::vector<PaperSummary> getOwnPapers() {return ownPapers;}
     void setOwnPapers(const std::vector<PaperSummary>& iownPapers) {ownPapers = iownPapers;}
-    void addToOwnPapers(const PaperSummary& in) {
-      ownPapers.push_back(in);
+
+    void addToOwnPapers(const PaperSummary& in) 
+    {
+        ownPapers.push_back(in);
     }
-    void removeOwnPaper(int paperToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < ownPapers.size(); ++i)
-      {
-        if(ownPapers[i].paperID == paperToRemove) {
-          ownPapers.erase(ownPapers.begin() + i);
-          return;
+
+    void removeOwnPaper(int paperToRemove) //remove by paperID
+    {
+        for(unsigned int i = 0; i < ownPapers.size(); ++i)
+        {
+            if(ownPapers[i].paperID == paperToRemove) 
+            {
+                ownPapers.erase(ownPapers.begin() + i);
+                return;
+            }
         }
-      }
     } 
-  protected:
+
+protected:
     std::vector<PaperSummary> ownPapers;
 };
 #endif
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 32af856..6d52169 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -10,18 +10,17 @@
 class MainWindow;
 
 class LoginManager {
-  public:
-  LoginManager(QTcpSocket* aServer) {
-      
-    
-    // Connection will mainly be managed by an instance of client stub class
-    UserClientStubForServer *stub = new UserClientStubForServer(aServer, this);
-    this->theServer = stub;
-    // but do have some more initialisation to do on the connection
-    aServer->setParent(this->theServer);
-    // Read events generated through TCP connection to be handled by
-    // instance of clientstub class
-    QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
+public:
+    LoginManager(QTcpSocket* aServer) 
+    {
+        // Connection will mainly be managed by an instance of client stub class
+        UserClientStubForServer *stub = new UserClientStubForServer(aServer, this);
+        this->theServer = stub;
+        // but do have some more initialisation to do on the connection
+        aServer->setParent(this->theServer);
+        // Read events generated through TCP connection to be handled by
+        // instance of clientstub class
+        QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
     
 //    mWindow = new MainWindow();
     
@@ -36,59 +35,71 @@ class LoginManager {
     // populate the list
     //this->theServer->getNames(); //ASYNCHRONOUS request - names will arrive sometime
     
-  }
-  LoginManager(bool iloggedIn,
-               const std::vector<Conference*>& iconferences,
-               Conference* iactiveConference) :
-               loggedIn(iloggedIn),
-               conferences(iconferences),
-               activeConference(iactiveConference) // potentially useful for logging back into the conference they were last in
-               { }
-  ~LoginManager() {
-  for (unsigned i=0; i < conferences.size(); i++) {
-    delete conferences[i];
-  }
-  delete currentUser;
-}
-  MainWindow* mWindow;
+    }
+
+    LoginManager(bool iloggedIn,
+        const std::vector<Conference*>& iconferences,
+        Conference* iactiveConference)
+    {
+        loggedIn = iloggedIn;
+        conferences = iconferences;
+        activeConference = iactiveConference; // potentially useful for logging back into the conference they were last in
+    }
+
+    ~LoginManager() 
+    {
+        for (unsigned i=0; i < conferences.size(); i++) 
+        {
+            delete conferences[i];
+        }
+
+        delete currentUser;
+    }
+
+    MainWindow* mWindow;
 
 // no other constructors deemed necessary at this point
-  User* getCurrentUser() {return currentUser;}
-  bool getLoggedIn() {return loggedIn;}
-  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
-  void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}  
+    User* getCurrentUser() {return currentUser;}
+    bool getLoggedIn() {return loggedIn;}
+    void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
+    void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}  
+    
+    void loginRequest(QString, QString);
+    void loginResponse();
+    
+    void logout();
+    bool createAccount(std::string, std::string);
+    void listConferences();
+    void viewActiveConfDetails();
+    Conference* getActiveConference() {return activeConference;}
+    std::vector<Conference*> getConferences() {return conferences;}
+    void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
+    void setConferences(const std::vector<Conference*>& iconferences) {conferences =  iconferences;}
+    std::vector<std::string> searchForKWords(std::string);
 
-  void loginRequest(QString, QString);
-  void loginResponse();
-  
-  void logout();
-  bool createAccount(std::string, std::string);
-  void listConferences();
-  void viewActiveConfDetails();
-  Conference* getActiveConference() {return activeConference;}
-  std::vector<Conference*> getConferences() {return conferences;}
-  void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
-  void setConferences(const std::vector<Conference*>& iconferences) {conferences =  iconferences;}
-  std::vector<std::string> searchForKWords(std::string);
-  void addToConferences(Conference* in) {
-      conferences.push_back(in);
-  }
-  void removeConference(int conferenceToRemove) { //remove by paperID
-    for(unsigned int i = 0; i < conferences.size(); ++i)
+    void addToConferences(Conference* in) 
     {
-      if(conferences[i]->confID == conferenceToRemove) {
-        conferences.erase(conferences.begin() + i);
-        return;
-      }
+        conferences.push_back(in);
     }
-  } 
 
-  private:
-  User* currentUser{nullptr};
-  bool loggedIn;
-  std::vector<Conference*> conferences;
-  Conference* activeConference{nullptr};
-  UserClientStubForServer* theServer;
+    void removeConference(int conferenceToRemove) 
+    { //remove by paperID
+        for(unsigned int i = 0; i < conferences.size(); ++i)
+        {
+            if(conferences[i]->confID == conferenceToRemove) 
+            {
+                conferences.erase(conferences.begin() + i);
+                return;
+            }
+        }
+    } 
+    
+private:
+    User* currentUser = nullptr;
+    bool loggedIn;
+    std::vector<Conference*> conferences;
+    Conference* activeConference = nullptr;
+    UserClientStubForServer* theServer;
 
 };
 #endif
diff --git a/UserClient/PCChair.cpp b/UserClient/PCChair.cpp
index bcf4e11..e355921 100644
--- a/UserClient/PCChair.cpp
+++ b/UserClient/PCChair.cpp
@@ -2,9 +2,9 @@
 
 void PCChair::checkConferencesDeadlines()
 {
-  //calls checkDeadlines in conferenceManager on server with activeConference* 
-  //need to use getActiveConference to obtain it
-  //returns nothing
+    //calls checkDeadlines in conferenceManager on server with activeConference* 
+    //need to use getActiveConference to obtain it
+    //returns nothing
 }
 
 void PCChair::fetchPapers()
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 0756f06..e862e21 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -8,56 +8,70 @@
 
 #include <vector>
 
-class PCChair : public User {
-  public:
-  PCChair(const std::vector<PaperSummary>& iallPapers)
-  : allPapers(iallPapers)
-  { }
-  std::vector<PaperSummary> getAllPapers() {return allPapers;}
-  void setAllPapers(const std::vector<PaperSummary>& iallPapers) {allPapers = iallPapers;}
-  void view();
-  void removeReviewerFromConf(int);
-  void removeReviewerFromPaper(int, int);
-  bool removeReviewerByName(std::string);
-  void editConfDetails();
-  //void setConfDeadlines();
-  //void setConfKWords();covered by above
-  //int getAvgScoreForPaper();dont think we really need this
-  void acceptOrRejectPaper(bool); // NOTE: changed parameter from int to bool to match function description
-  void addReviewerToConf(int);
-  void addReviewerToPaper(int, int);
-  void fetchPapers();
-  void fetchUsers();
-  void checkConferencesDeadlines(); // NOTE: was not declared but function existed, putting here for now
-  void addToAllPapers(const PaperSummary& in) {
-    allPapers.push_back(in);
-  }
-  void removePaperFromOwnPapers(int paperToRemove) { //remove by paperID
-    for(unsigned int i = 0; i < allPapers.size(); ++i)
+class PCChair : public User 
+{
+public:
+    PCChair(const std::vector<PaperSummary>& iallPapers)
     {
-      if(allPapers[i].paperID == paperToRemove) {
-        allPapers.erase(allPapers.begin() + i);
-        return;
-      }
+        allPapers = iallPapers;
     }
-  }
-  void addToAllUsers(const User& in) {
-    allUsers.push_back(in);
-  }
-  void removeUser(int userToRemove) { //remove by paperID
-    for(unsigned int i = 0; i < allUsers.size(); ++i)
+
+    std::vector<PaperSummary> getAllPapers() {return allPapers;}
+    void setAllPapers(const std::vector<PaperSummary>& iallPapers) {allPapers = iallPapers;}
+    void view();
+    void removeReviewerFromConf(int);
+    void removeReviewerFromPaper(int, int);
+    bool removeReviewerByName(std::string);
+    void editConfDetails();
+    //void setConfDeadlines();
+    //void setConfKWords();covered by above
+    //int getAvgScoreForPaper();dont think we really need this
+    void acceptOrRejectPaper(bool); // NOTE: changed parameter from int to bool to match function description
+    void addReviewerToConf(int);
+    void addReviewerToPaper(int, int);
+    void fetchPapers();
+    void fetchUsers();
+    void checkConferencesDeadlines(); // NOTE: was not declared but function existed, putting here for now
+    void addToAllPapers(const PaperSummary& in) 
+    {
+        allPapers.push_back(in);
+    }
+
+    void removePaperFromOwnPapers(int paperToRemove) //remove by paperID
+    {
+        for(unsigned int i = 0; i < allPapers.size(); ++i)
+        {
+            if(allPapers[i].paperID == paperToRemove) 
+            {
+                allPapers.erase(allPapers.begin() + i);
+                return;
+            }
+        }
+    }
+
+    void addToAllUsers(const User& in) 
+    {
+        allUsers.push_back(in);
+    }
+
+    void removeUser(int userToRemove) //remove by paperID
     {
-      if(allUsers[i].getUserID() == userToRemove) {
-        allUsers.erase(allUsers.begin() + i);
-        return;
-      }
+        for(unsigned int i = 0; i < allUsers.size(); ++i)
+        {
+            if(allUsers[i].getUserID() == userToRemove) 
+            {
+                allUsers.erase(allUsers.begin() + i);
+                return;
+            }
+        }
     }
-  }
-  private:
-  PaperSummary* getPaperByTitle(std::string);
-  PaperSummary* getPaperById(int);
-  std::vector<PaperSummary> allPapers;
-  std::vector<User> allUsers;
-  Conference* activeConference{nullptr};
+
+private:
+    PaperSummary* getPaperByTitle(std::string);
+    PaperSummary* getPaperById(int);
+    std::vector<PaperSummary> allPapers;
+    std::vector<User> allUsers;
+    Conference* activeConference = nullptr;
 };
+
 #endif
diff --git a/UserClient/PaperManager.hpp b/UserClient/PaperManager.hpp
index 5429d4e..7e6e70c 100644
--- a/UserClient/PaperManager.hpp
+++ b/UserClient/PaperManager.hpp
@@ -4,49 +4,71 @@
 
 class PaperManager {
 public:
-  PaperManager() { }
-  PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
-  ~PaperManager() { if(currentPaper != nullptr)
-                     delete currentPaper;}
-  Paper* getCurrentPaper() {return currentPaper;}
-  void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+    PaperManager() { }
+    
+    PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
 
-  void downloadPaper();
-void addToKeywords(const std::string& in) {
-      currentPaper->keywords.push_back(in);
+    ~PaperManager() 
+    { 
+        if(currentPaper != nullptr)
+            delete currentPaper;
     }
-    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < currentPaper->keywords.size(); ++i)
-      {
-        if(currentPaper->keywords[i] == keywordToRemove) {
-          currentPaper->keywords.erase(currentPaper->keywords.begin() + i);
-          return;
+
+    Paper* getCurrentPaper() {return currentPaper;}
+
+    void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+    
+    void downloadPaper();
+
+    id addToKeywords(const std::string& in) 
+    {
+        currentPaper->keywords.push_back(in);
+    }
+
+    void removeKeyword(const std::string& keywordToRemove) //remove by paperID
+    {
+        for(unsigned int i = 0; i < currentPaper->keywords.size(); ++i)
+        {
+            if(currentPaper->keywords[i] == keywordToRemove) 
+            {
+                currentPaper->keywords.erase(currentPaper->keywords.begin() + i);
+                return;
+            }
         }
-      }
     }
-    void addToAuthors(const User& in) {
+
+    void addToAuthors(const User& in) 
+    {
       currentPaper->authors.push_back(in);
     }
-    void removeAuthor(int userToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < currentPaper->authors.size(); ++i)
-      {
-        if(currentPaper->authors[i].userID == userToRemove) {
-          currentPaper->authors.erase(currentPaper->authors.begin() + i);
-          return;
+
+    void removeAuthor(int userToRemove) //remove by paperID
+    {    
+        for(unsigned int i = 0; i < currentPaper->authors.size(); ++i)
+        {
+            if(currentPaper->authors[i].userID == userToRemove) 
+            {
+                currentPaper->authors.erase(currentPaper->authors.begin() + i);
+                return;
+            }
         }
-      }
     }
-    void addToReviews(const Review& in) {
-      currentPaper->reviews.push_back(in);
+
+    void addToReviews(const Review& in) 
+    {
+        currentPaper->reviews.push_back(in);
     }
-    void removeReview(int reviewToRemove) { //remove by reviewer ID
-      for(unsigned int i = 0; i < currentPaper->reviews.size(); ++i)
-      {
-        if(currentPaper->reviews[i].reviewerID == reviewToRemove) {
-          currentPaper->reviews.erase(currentPaper->reviews.begin() + i);
-          return;
+
+    void removeReview(int reviewToRemove) //remove by reviewer ID
+    {
+        for(unsigned int i = 0; i < currentPaper->reviews.size(); ++i)
+        {
+            if(currentPaper->reviews[i].reviewerID == reviewToRemove) 
+            {
+                currentPaper->reviews.erase(currentPaper->reviews.begin() + i);
+                return;
+            }
         }
-      }
     }
 
 private:
@@ -59,7 +81,7 @@ private:
   void editReview();
   void removeReview(); */
 
-  Paper* currentPaper{nullptr};
-
+    Paper* currentPaper{nullptr};
 };
+
 #endif
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 0e1de2e..328ce7f 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -5,8 +5,9 @@
 #include "../DataAll/PaperSummary.hpp"
 #include "../DataAll/Review.hpp"
 
-class Reviewer : public Author {
-  public:
+class Reviewer : public Author 
+{
+public:
 /*    Reviewer(const std::string& iuserName,
       const std::string& iname,
       const std::string& iemail,
@@ -32,35 +33,37 @@ class Reviewer : public Author {
       reviews(ireviews)
       { } */
     Reviewer() {}
+
     Reviewer(const std::string& iuserName,
-      const std::string& iname,
-      const std::string& iemail,
-      const std::string& iorganisation,
-      const std::string& iphone,
-      const std::string& ipassword,
-      int iuserID,
-      UserType_t iuserType,
-      const std::vector<std::string>& ikeywords,
-      const std::vector<PaperSummary>& iownPapers,
-      const std::vector<PaperSummary>& iallocatedPapers,
-      const std::vector<PaperSummary>& ipapersToBid,
-      const std::vector<Review>& ireviews)
-      :
-      Author(iuserName,
-      iname,
-      iemail,
-      iorganisation,
-      iphone,
-      ipassword,
-      iuserID,
-      iuserType,
-      ikeywords,
-      iownPapers
-      ),
-      allocatedPapers(iallocatedPapers),
-      papersToBid(ipapersToBid),
-      reviews(ireviews)
-      { }
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        const std::string& ipassword,
+        int iuserID,
+        UserType_t iuserType,
+        const std::vector<std::string>& ikeywords,
+        const std::vector<PaperSummary>& iownPapers,
+        const std::vector<PaperSummary>& iallocatedPapers,
+        const std::vector<PaperSummary>& ipapersToBid,
+        const std::vector<Review>& ireviews)
+    :
+    Author(iuserName,
+        iname,
+        iemail,
+        iorganisation,
+        iphone,
+        ipassword,
+        iuserID,
+        iuserType,
+        ikeywords,
+        iownPapers)
+    {
+        allocatedPapers = iallocatedPapers;
+        papersToBid = ipapersToBid;
+        reviews = ireviews;
+    }
+
     void view();
     void getPapersToReview();
     void submitReview();
@@ -76,46 +79,59 @@ class Reviewer : public Author {
     void setAllocatedPapers(const std::vector<PaperSummary>& iallocatedPapers) {allocatedPapers = iallocatedPapers;}
     void setPapersToBid(const std::vector<PaperSummary>& ipapersToBid) {papersToBid = ipapersToBid;}
     void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
-    void addToAllocatedPapers(const PaperSummary& in) {
-      allocatedPapers.push_back(in);
+
+    void addToAllocatedPapers(const PaperSummary& in) 
+    {
+        allocatedPapers.push_back(in);
     }
-    void removeAllocatedPaper(int paperToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < allocatedPapers.size(); ++i)
-      {
-        if(allocatedPapers[i].paperID == paperToRemove) {
-          allocatedPapers.erase(allocatedPapers.begin() + i);
-          return;
+
+    void removeAllocatedPaper(int paperToRemove) //remove by paperID
+    {
+        for(unsigned int i = 0; i < allocatedPapers.size(); ++i)
+        {
+            if(allocatedPapers[i].paperID == paperToRemove) 
+            {
+                allocatedPapers.erase(allocatedPapers.begin() + i);
+                return;
+            }
         }
-      }
     } 
     
-    void addToPapersToBid(const PaperSummary& in) {
-      papersToBid.push_back(in);
+    void addToPapersToBid(const PaperSummary& in) 
+    {
+        papersToBid.push_back(in);
     }
-    void removePaperToBid(int paperToRemove) {
-      for(unsigned int i = 0; i < papersToBid.size(); ++i)
-      {
-        if(papersToBid[i].paperID == paperToRemove) {
-          papersToBid.erase(papersToBid.begin() + i);
-          return;
+
+    void removePaperToBid(int paperToRemove) 
+    {
+        for(unsigned int i = 0; i < papersToBid.size(); ++i)
+        {
+            if(papersToBid[i].paperID == paperToRemove) 
+            {
+                papersToBid.erase(papersToBid.begin() + i);
+                return;
+            }
         }
-      }
     } 
     
-    void addToReviews(const Review& in) {
-      reviews.push_back(in);
+    void addToReviews(const Review& in) 
+    {
+        reviews.push_back(in);
     }
-    void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
-      for(unsigned int i = 0; i < reviews.size(); ++i)
-      {
-        if(reviews[i].paperID == reviewToRemove) {
-          reviews.erase(reviews.begin() + i);
-          return;
+
+    void removeReview(int reviewToRemove) //remove by paper ID of the paper that was reviewed
+    {
+        for(unsigned int i = 0; i < reviews.size(); ++i)
+        {
+            if(reviews[i].paperID == reviewToRemove) 
+            {
+                reviews.erase(reviews.begin() + i);
+                return;
+            }
         }
-      }
     } 
     
-  private:
+private:
     Paper* getPaperByTitle(std::string); // helper
     Paper* getPaperByIndex(int); // helper
 
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index 4d7e99f..a908c42 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -8,25 +8,28 @@
 enum UserType_t {AUTHOR, REVIEWER, PCCHAIR};
 
 class User {
-  public:
+public:
     User() { }
+
     User(const std::string& iuserName,
-         const std::string& ipassword,
-         const std::string& iname,
-         const std::string& iemail,
-         const std::string& iorganisation,
-         const std::string& iphone,
-         int iuserID,
-         UserType_t iuserType):
-         userName(iuserName),
-         password(ipassword),
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         userID(iuserID),
-         userType(iuserType)
-         { }
+        const std::string& ipassword,
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        int iuserID,
+        UserType_t iuserType)
+    {
+        userName = iuserName;
+        password = ipassword;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        userID = iuserID;
+        userType = iuserType;
+    }
+
     virtual ~User() {}
     
 //    virtual void view() = 0;
@@ -51,16 +54,14 @@ class User {
 
     std::string userName;
 
-  protected:
-
-std::string password{""};
-std::string name{""};
-std::string email{""};
-std::string organisation{""};
-std::string phone{""};
-int userID{0};
-UserType_t userType;
-Paper currentPaper;
-
+protected:
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    int userID = 0;
+    UserType_t userType;
+    Paper currentPaper;
 };
 #endif
diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
index 26379bd..51dfb8b 100644
--- a/UserClient/UserClient.cpp
+++ b/UserClient/UserClient.cpp
@@ -5,7 +5,8 @@
 
 QTcpSocket *establishConnection();
 
-int main(int argc, char *argv[]) {
+int main(int argc, char *argv[]) 
+{
     // initialize resources, if needed
     // Q_INIT_RESOURCE(resfile);
 
@@ -20,7 +21,8 @@ int main(int argc, char *argv[]) {
     return app.exec();
 }
 
-QTcpSocket *establishConnection() {
+QTcpSocket *establishConnection() 
+{
     //just connect on localhost
     std::string servername = "127.0.0.1";
     std::string pnumstr = "23456";
@@ -49,16 +51,20 @@ QTcpSocket *establishConnection() {
     // Allow time for connection to establish, then check that all
     // looks good. If any problems, abort execution.
     bool ok = tcpSocket->waitForConnected(1000);
-    if (!ok) {
+    if (!ok) 
+    {
         std::cout << "Wait for connected didn't work" << std::endl;
         exit(1);
     }
-    if (!tcpSocket->isValid()) {
+
+    if (!tcpSocket->isValid()) 
+    {
         std::cout << "Didn't connect completely?" << std::endl;
         exit(1);
     } QAbstractSocket::SocketState state;
     state = tcpSocket->state();
-    if (state != QAbstractSocket::ConnectedState) {
+    if (state != QAbstractSocket::ConnectedState) 
+    {
         std::cout << "Not happy with state" << std::endl;
         exit(1);
     }
diff --git a/UserClient/UserClientStubForServer.cpp b/UserClient/UserClientStubForServer.cpp
index 5718691..f6fddda 100644
--- a/UserClient/UserClientStubForServer.cpp
+++ b/UserClient/UserClientStubForServer.cpp
@@ -39,21 +39,23 @@ void UserClientStubForServer::handleLoginResponse()
 }
 
 // receives response from server, takes qstring command off qdatastream, calls appropriate function
-void UserClientStubForServer::dispatch(QString responseName) {
-        
+void UserClientStubForServer::dispatch(QString responseName) 
+{
     // check command here and call appropriate handle function in LoginManager
     if (responseName == "CHECKLOGIN")
         handleLoginResponse();
 }
 
-void UserClientStubForServer::handleResponse() {
+void UserClientStubForServer::handleResponse() 
+{
     QString responseName;
     (*this->responseReader) >> responseName;
     this->dispatch(responseName);
     this->busy = false; 
 } 
 
-void UserClientStubForServer::setupForRequest() {
+void UserClientStubForServer::setupForRequest() 
+{
     this->requestData.clear();
     this->requestWriter = new QDataStream(&requestData, QIODevice::WriteOnly);
     this->requestWriter->setVersion(QDataStream::Qt_4_0);
@@ -64,7 +66,8 @@ void UserClientStubForServer::setupForRequest() {
     // buffer
 }
 
-void UserClientStubForServer::sendRequest() {
+void UserClientStubForServer::sendRequest() 
+{
     // Request is complete - just have to adjust the length field
     int datalength = this->requestData.size();
     
@@ -80,7 +83,8 @@ void UserClientStubForServer::sendRequest() {
     delete this->requestWriter; 
 } 
 
-void UserClientStubForServer::setupForResponse() {
+void UserClientStubForServer::setupForResponse() 
+{
     this->busy = true;
     // don't want any other requests made if need a response
     
@@ -91,7 +95,8 @@ void UserClientStubForServer::setupForResponse() {
     this->responseReader->setVersion(QDataStream::Qt_4_0);
 }
 
-void UserClientStubForServer::readResponseData() {
+void UserClientStubForServer::readResponseData() 
+{
     // This function will be called repeatedly as the underlying system
     // detects incoming bytes on the tcp connection.
     
@@ -103,7 +108,8 @@ void UserClientStubForServer::readResponseData() {
     int headersize = sizeof (quint32);
     if (!this->responseLengthReceived) {
         // Waiting for the 4byte header
-        if (theServer->bytesAvailable() < headersize) return; // not ready
+        if (theServer->bytesAvailable() < headersize) 
+            return; // not ready
         quint32 tmp;
         QDataStream in(theServer);
         in.setVersion(QDataStream::Qt_4_0);
diff --git a/UserClient/UserClientStubForServer.hpp b/UserClient/UserClientStubForServer.hpp
index 1d2377b..8c48341 100644
--- a/UserClient/UserClientStubForServer.hpp
+++ b/UserClient/UserClientStubForServer.hpp
@@ -16,11 +16,13 @@
 
 class LoginManager;
 
-class UserClientStubForServer : public QObject {
+class UserClientStubForServer : public QObject 
+{
     
     Q_OBJECT;
 public:
-    UserClientStubForServer(QTcpSocket *aServer, LoginManager* aMainGui) {
+    UserClientStubForServer(QTcpSocket *aServer, LoginManager* aMainGui) 
+    {
         this->theServer = aServer;
         this->mainGui = aMainGui;
         this->busy = false;
@@ -71,7 +73,6 @@ private:
     // Collaborators 
     QTcpSocket *theServer;
     LoginManager *mainGui; // used to send server responses to/from gui
-
 };
 
 #endif	/* USERCLIENTSTUBFORSERVER_H */
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 66528e7..bf2c081 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -2,10 +2,10 @@
 #include "ui_mainwindow.h"
 #include "Review.hpp"
 
-MainWindow::MainWindow(QWidget *parent) :
-    QMainWindow(parent),
-    ui(new Ui::MainWindow)
+MainWindow::MainWindow(QWidget *parent)
 {
+    QMainWindow = parent;
+    ui = new Ui::MainWindow;
     ui->setupUi(this);
     noUser();
     ui->passwordLogin->setEchoMode(QLineEdit::Password);
@@ -171,32 +171,31 @@ void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/
 void MainWindow::on_tabWidget_currentChanged(int index)
 {//change to current text or something
     QString text = ui->tabWidget->tabText(index);
-    switch(text){
-    case "Info":
-        populate_infoTabAuthor();
-        break;
-    case "Information":
-        populate_infoTabChair();
-        break;
-    case "Author":
-        populate_authorTab();
-        break;
-    case "Reviewer":
-        populate_reviewerTab();
-        break;
-    case "Paper Management":
-        populate_papersTab();
-        break;
-    case "User Management":
-        populate_usersTab();
-        break;
-    case "Review":
-        populate_reviewTab();
-        break;
-    default:
-        break;
-
-
+    switch(text)
+    {
+        case "Info":
+            populate_infoTabAuthor();
+            break;
+        case "Information":
+            populate_infoTabChair();
+            break;
+        case "Author":
+            populate_authorTab();
+            break;
+        case "Reviewer":
+            populate_reviewerTab();
+            break;
+        case "Paper Management":
+            populate_papersTab();
+            break;
+        case "User Management":
+            populate_usersTab();
+            break;
+        case "Review":
+            populate_reviewTab();
+            break;
+        default:
+            break;
     }
 }
 

commit cb75235eef78077f2a48523baf32557b586a097e
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 18:33:59 2014 +1100

    c++11 rollback Server

diff --git a/Server/ClientHandler.cpp b/Server/ClientHandler.cpp
index dd3541c..1884aee 100644
--- a/Server/ClientHandler.cpp
+++ b/Server/ClientHandler.cpp
@@ -10,7 +10,9 @@
 #include <QtNetwork>
 
 ClientHandler::ClientHandler(int socketDescriptor, QObject* parent)
-    : QThread(parent), socketDescriptor(socketDescriptor) {
+{
+    QThread = parent;
+    socketDescriptor = socketDescriptor;
     this->tcpSocket = NULL;
 }
 
diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index 6dec3da..031c376 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -39,7 +39,7 @@ private:
     QDataStream *requestReader;
     QDataStream *responseWriter; 
 
-    UserManager* theUser{nullptr};
+    UserManager* theUser = nullptr;
     
 };
 
diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 883eb5e..d39a42e 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -4,20 +4,25 @@
 #include "../DataAll/Conference.hpp"
 #include "../Database/Database.hpp"
 
-class ConferenceManager {
+class ConferenceManager 
+{
 public:
-  ConferenceManager(std::vector<Conference*> iconferences,
-                    Conference* icurrentConference,
-                    Database* idatabase) :
-                    conferences(iconferences), 
-                    currentConference(icurrentConference),
-                    database(idatabase)
-                    { }
-  ~ConferenceManager() {
-  for (unsigned i=0; i < conferences.size(); i++) {
-    delete conferences[i];
-  }
-}
+    ConferenceManager(std::vector<Conference*> iconferences,
+        Conference* icurrentConference,
+        Database* idatabase)
+    {
+        conferences = iconferences; 
+        currentConference = icurrentConference;
+        database = idatabase;
+    }
+
+    ~ConferenceManager() 
+    {
+        for (unsigned i=0; i < conferences.size(); i++) 
+        {
+            delete conferences[i];
+        }
+    }
 
   std::vector<Conference*> getConferences() {return conferences;}
   void setConferences(const std::vector<Conference*>& iconferences) {conferences = iconferences;}
@@ -25,15 +30,18 @@ public:
   void setCurrentConference(Conference* icurrentConference) {currentConference = icurrentConference;}
   Database* getDatabase() {return database;}
   void setDatabase(Database* idatabase) {database = idatabase;}
+
   void addConference() 
   {
     database->putConf(currentConference->title, *currentConference);
   }
+
   void modifyConference(int confID)
   {
     fetchConference(confID);
     addConference();
   }
+
   //bool deleteConference(int);
   void sendConference();
   void sendConferenceBatch();
@@ -42,13 +50,11 @@ public:
   std::vector<Conference> getAllActiveConferences();
   std::vector<Conference> getAllConferences();
 
-
-
 private:
   void checkDeadlines(Conference*);
   void fetchConference(int);
   std::vector<Conference*> conferences;
-  Conference* currentConference{nullptr};
-  Database* database{nullptr};
+  Conference* currentConference = nullptr;
+  Database* database = nullptr;
 };
 #endif
diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 35ed679..51603ba 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -8,42 +8,48 @@
 
 class PaperManager {
 public:
-  PaperManager() { }
-  PaperManager(Paper* icurrentPaper, 
-  Database* idatabase) : 
-  currentPaper(icurrentPaper),
-  database(idatabase)
-  { }
-  ~PaperManager() { if(currentPaper != nullptr)
-                      delete currentPaper;}
+    PaperManager() { }
 
-  Paper* getCurrentPaper() {return currentPaper;}
-  void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
-  Database* getDatabase() {return database;}
-  void setDatabase(Database* idatabase) {database = idatabase;}
-  void addPaper();
-  void modifyPaper(int, const std::string&);
-  void modifyPdf(int, int, const std::string&);
-  //bool deleteDiscPost(int);
-  void modifyDiscPost(int);
-  //bool deleteReview(int);
-  void addReview(Review);
-  void fetchReview(int);
-  void modifyReview(Review);
-  void fetchDiscussion();
-  void fetchRebuttal(int);
-  void createDiscussionPost(DiscussionPost);
-  //bool deletePaper(int);
-  void sendPaper(); //just send a paper
-  void sendPaperSummaryBatch(int); //all papers for a conf
-  void sendAuthoredPaperSummaries(int, int); //
-  void sendPaperSummariesToReview(int, int); //all papers for a reviewer in a conference
-  void sendPapersAccepted(int);
-  void addPaperAccepted(int);
+    PaperManager(Paper* icurrentPaper, 
+        Database* idatabase)
+    { 
+        currentPaper = icurrentPaper;
+        database = idatabase;
+    }
+
+    ~PaperManager() 
+    { 
+        if(currentPaper != nullptr)
+            delete currentPaper;
+    }
+    
+    Paper* getCurrentPaper() {return currentPaper;}
+    void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+    Database* getDatabase() {return database;}
+    void setDatabase(Database* idatabase) {database = idatabase;}
+    void addPaper();
+    void modifyPaper(int, const std::string&);
+    void modifyPdf(int, int, const std::string&);
+    //bool deleteDiscPost(int);
+    void modifyDiscPost(int);
+    //bool deleteReview(int);
+    void addReview(Review);
+    void fetchReview(int);
+    void modifyReview(Review);
+    void fetchDiscussion();
+    void fetchRebuttal(int);
+    void createDiscussionPost(DiscussionPost);
+    //bool deletePaper(int);
+    void sendPaper(); //just send a paper
+    void sendPaperSummaryBatch(int); //all papers for a conf
+    void sendAuthoredPaperSummaries(int, int); //
+    void sendPaperSummariesToReview(int, int); //all papers for a reviewer in a conference
+    void sendPapersAccepted(int);
+    void addPaperAccepted(int);
 
 private:
-void fetchPaper(int);
-Paper* currentPaper{nullptr};
-Database* database{nullptr};
+    void fetchPaper(int);
+    Paper* currentPaper = nullptr;
+    Database* database = nullptr;
 };
 #endif
diff --git a/Server/Server.cpp b/Server/Server.cpp
index 737d5c6..2aabf37 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -46,5 +46,5 @@ int main(int argc, char *argv[])
 //  delete pm;
 //  delete db;
 
-  return rtnValue;
+    return rtnValue;
 }
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index 566c82b..f0d3025 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -15,9 +15,12 @@
 
 int main()
 {
-std::cout << "hello world" << std::endl;
-int foo = 6;
-auto bar = foo;
-std::cout << bar << "bar" << std::endl;
-return 0;
+    std::cout << "hello world" << std::endl;
+
+    int foo = 6;
+    auto bar = foo;
+
+    std::cout << bar << "bar" << std::endl;
+
+    return 0;
 }
diff --git a/Server/ServerMain.cpp b/Server/ServerMain.cpp
index 1a1aa7d..795f3d4 100644
--- a/Server/ServerMain.cpp
+++ b/Server/ServerMain.cpp
@@ -11,7 +11,9 @@
 #include <QtNetwork>
 #include <iostream>
 
-ServerMain::ServerMain(QObject *parent) : QTcpServer(parent) {
+ServerMain::ServerMain(QObject *parent): 
+{
+    QTcpServer = parent;
     const char* arbitraryPort = "23456";
     this->portnum = arbitraryPort;
 
@@ -35,13 +37,14 @@ ServerMain::ServerMain(QObject *parent) : QTcpServer(parent) {
     }
 }
 
-void ServerMain::incomingConnection(int socketDescriptor) {
-
+void ServerMain::incomingConnection(int socketDescriptor) 
+{
     ClientHandler *handler = new ClientHandler(socketDescriptor, this);
     connect(handler, SIGNAL(finished()), handler, SLOT(deleteLater()));
     handler->start();
 }
 
-bool ServerMain::serverIsOK() {
+bool ServerMain::serverIsOK() 
+{
     return this->isListening(); 
 }
diff --git a/Server/ServerMain.hpp b/Server/ServerMain.hpp
index 1e63079..10d5651 100644
--- a/Server/ServerMain.hpp
+++ b/Server/ServerMain.hpp
@@ -10,7 +10,8 @@
 
 #include <QTcpServer>
 
-class ServerMain : public QTcpServer {
+class ServerMain : public QTcpServer 
+{
     Q_OBJECT
     
 public:
@@ -26,7 +27,6 @@ protected:
 private:
     QString portnum;
     QHostAddress ipAddress;
-
 };
 
 
diff --git a/Server/User.hpp b/Server/User.hpp
index ab364df..2533871 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -5,50 +5,53 @@
 #include <vector>
 
 
-struct User {
-  User() {}
-  
-  User(std::string& iuserName,
-         std::string& iname,
-         std::string& iemail,
-         std::string& iorganisation,
-         std::string& iphone,
-         std::string& ipassword,
-         int iuserID,
-         std::vector<std::string>& ikeywords):
-         userName(iuserName),
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         password(ipassword),
-         userID(iuserID),
-         keywords(ikeywords)
-         { }
-
-  User(const std::string& iuserName,
-         const std::string& iname,
-         const std::string& iemail,
-         const std::string& iorganisation,
-         const std::string& iphone,
-         const std::string& ipassword,
-         const std::vector<std::string>& ikeywords):
-         userName(iuserName),
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         password(ipassword),
-         keywords(ikeywords)
-         { }
-  std::string userName{""};
-  std::string password{""};
-  std::string name{""};
-  std::string email{""};
-  std::string organisation{""};
-  std::string phone{""};
-  std::vector<std::string> keywords;
-  int userID{0};
+struct User 
+{
+    User() {}
+    
+    User(std::string& iuserName,
+        std::string& iname,
+        std::string& iemail,
+        std::string& iorganisation,
+        std::string& iphone,
+        std::string& ipassword,
+        int iuserID,
+        std::vector<std::string>& ikeywords)
+    {
+        userName = iuserName;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        password = ipassword;
+        userID = iuserID;
+        keywords = ikeywords;
+    }
+    
+    User(const std::string& iuserName,
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        const std::string& ipassword,
+        const std::vector<std::string>& ikeywords)
+    {
+        userName = iuserName;
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        password = ipassword;
+        keywords = ikeywords;
+    }
 
+    std::string userName;
+    std::string password;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
+    std::vector<std::string> keywords;
+    int userID = 0;
 };
 #endif
diff --git a/Server/UserManager.cpp b/Server/UserManager.cpp
index a90c1a9..d03addd 100644
--- a/Server/UserManager.cpp
+++ b/Server/UserManager.cpp
@@ -2,27 +2,29 @@
 
 void UserManager::fetchUser(std::string userName)
 {
-  *currentUser = database->fetchUser(userName);
+    *currentUser = database->fetchUser(userName);
 }
 
 std::vector UserManager::getAllUsers()
 {
-  std::vector<std::string> allUsers = database->allUserNames();
-  
-  std::vector<User> users;
-  for(int i = 0; i < allUsers.size(); ++i)
-  {
-    users.push_back(database->fetchUser(allUsers[i]));
-  }
-  return users;
+    std::vector<std::string> allUsers = database->allUserNames();
+    
+    std::vector<User> users;
+
+    for(int i = 0; i < allUsers.size(); ++i)
+    {
+        users.push_back(database->fetchUser(allUsers[i]));
+    }
+
+    return users;
 }
 
 void UserManager::sendUser()
 {
- //send *currentUser to the client
+    //send *currentUser to the client
 }
 
 void UserManager::sendUserBatch()
 {
-  //std::vector<std::string> userID = db->
+    //std::vector<std::string> userID = db->
 }
diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 30b294c..f60ba5e 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -7,39 +7,47 @@
 #include <string>
 #include <vector>
 
-class UserManager {
+class UserManager 
+{
 public:
-  UserManager() { }
-  UserManager(User* icurrentUser,
-              Database* idatabase) : 
-              currentUser(icurrentUser),
-              database(idatabase)
-              { }
-  ~UserManager() { if(currentUser != nullptr)
-                     delete currentUser;}
-
-  User* getCurrentUser() {return currentUser;}
-  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
-  Database* getDatabase() {return database;}
-  void setDatabase(Database* idatabase) {database = idatabase;}
-  void addUser() 
-  {
-    database->putUser(currentUser->name, *currentUser);
-  }
-  void modifyUser()
-  {
-    addUser(); 
-  }
-  
-  //bool deleteUser(int);
-  void sendUser();
-  void sendUserBatch(int);
-  void fetchUser(std::string);
-  std::vector<User> getAllUsers();
+    UserManager() { }
 
+    UserManager(User* icurrentUser,
+        Database* idatabase)
+    { 
+        currentUser = icurrentUser;
+        database = idatabase;
+    }
+
+    ~UserManager() 
+    { 
+        if(currentUser != nullptr)
+            delete currentUser;
+    }
+    
+    User* getCurrentUser() {return currentUser;}
+    void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
+    Database* getDatabase() {return database;}
+    void setDatabase(Database* idatabase) {database = idatabase;}
+
+    void addUser() 
+    {
+        jdatabase->putUser(currentUser->name, *currentUser);
+    }
+
+    void modifyUser()
+    {
+        addUser(); 
+    }
+    
+    //bool deleteUser(int);
+    void sendUser();
+    void sendUserBatch(int);
+    void fetchUser(std::string);
+    std::vector<User> getAllUsers();
 
 private:
- User* currentUser{nullptr};
- Database* database{nullptr};
+    User* currentUser = nullptr;
+    Database* database = nullptr;
 };
 #endif

commit 4df2d9e530306b1ce98067134f37b4d8c5e5315f
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 18:17:45 2014 +1100

    c++11 rollback DataAll

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index 7d2c61e..d48bcd1 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -10,105 +10,110 @@
 #include <QDataStream>
 
 struct Conference {
-  Conference() {}
-  
-  Conference(bool iisActive,
-  std::string& ititle,
-  int& iconfID,
-  std::string& itopic,
-  std::string& idescription,
-  std::string& ilocation,
-  std::vector<std::string>& ikeywords,
-  bool iisBeforePaperDeadline,
-  Date& ipaperDeadline,
-  bool iisBeforeAllocationDate,
-  Date& iallocationDate,
-  bool iisBeforeSoftReviewDeadline,
-  Date& ireviewDeadlineSoft,
-  bool iisBeforeHardReviewDeadline,
-  Date& ireviewDeadlineHard,
-  bool iisBeforeDiscussDeadline,
-  Date& idiscussDeadline,
-  int ireviewersPerPaper,
-  int ipostWordLimit):
-  isActive(iisActive),
-  title(ititle),
-  confID(iconfID),
-  topic(itopic),
-  description(idescription),
-  location(ilocation),
-  keywords(ikeywords),
-  isBeforePaperDeadline(iisBeforePaperDeadline),
-  paperDeadline(ipaperDeadline),
-  isBeforeAllocationDate(iisBeforeAllocationDate),
-  allocationDate(iallocationDate),
-  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
-  reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
-  reviewDeadlineHard(ireviewDeadlineHard),
-  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
-  discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper),
-  postWordLimit(ipostWordLimit)
-  { }
+    Conference() {}
+	  
+    Conference(
+        bool iisActive,
+        std::string& ititle,
+        int& iconfID,
+        std::string& itopic,
+        std::string& idescription,
+        std::string& ilocation,
+        std::vector<std::string>& ikeywords,
+        bool iisBeforePaperDeadline,
+        Date& ipaperDeadline,
+        bool iisBeforeAllocationDate,
+        Date& iallocationDate,
+        bool iisBeforeSoftReviewDeadline,
+        Date& ireviewDeadlineSoft,
+        bool iisBeforeHardReviewDeadline,
+        Date& ireviewDeadlineHard,
+        bool iisBeforeDiscussDeadline,
+        Date& idiscussDeadline,
+        int ireviewersPerPaper,
+        int ipostWordLimit)
+    {
+  	    isActive = iisActive;
+  	    title = ititle;
+  	    confID = iconfID;
+  	    topic = itopic;
+  	    description = idescription;
+  	    location = ilocation;
+  	    keywords = ikeywords;
+  	    isBeforePaperDeadline = iisBeforePaperDeadline;
+  	    paperDeadline = ipaperDeadline;
+  	    isBeforeAllocationDate = iisBeforeAllocationDate;
+  	    allocationDate = iallocationDate;
+  	    isBeforeSoftReviewDeadline = iisBeforeSoftReviewDeadline;
+  	    reviewDeadlineSoft = ireviewDeadlineSoft;
+  	    isBeforeHardReviewDeadline = iisBeforeHardReviewDeadline;
+  	    reviewDeadlineHard = ireviewDeadlineHard;
+  	    isBeforeDiscussDeadline = iisBeforeDiscussDeadline;
+  	    discussDeadline = idiscussDeadline;
+  	    reviewersPerPaper = ireviewersPerPaper;
+  	    postWordLimit = ipostWordLimit;
+    }
 
-Conference(bool iisActive, //no confID
-  std::string& ititle,
-  std::string& itopic,
-  std::string& idescription,
-  std::string& ilocation,
-  std::vector<std::string>& ikeywords,
-  bool iisBeforePaperDeadline,
-  Date& ipaperDeadline,
-  bool iisBeforeAllocationDate,
-  Date& iallocationDate,
-  bool iisBeforeSoftReviewDeadline,
-  Date& ireviewDeadlineSoft,
-  bool iisBeforeHardReviewDeadline,
-  Date& ireviewDeadlineHard,
-  bool iisBeforeDiscussDeadline,
-  Date& idiscussDeadline,
-  int ireviewersPerPaper,
-  int ipostWordLimit):
-  isActive(iisActive),
-  title(ititle),
-  topic(itopic),
-  description(idescription),
-  location(ilocation),
-  keywords(ikeywords),
-  isBeforePaperDeadline(iisBeforePaperDeadline),
-  paperDeadline(ipaperDeadline),
-  isBeforeAllocationDate(iisBeforeAllocationDate),
-  allocationDate(iallocationDate),
-  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
-  reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
-  reviewDeadlineHard(ireviewDeadlineHard),
-  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
-  discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper),
-  postWordLimit(ipostWordLimit)
-  { }
+// Conference ID not known
+    Conference(
+    bool iisActive,
+    std::string& ititle,
+    std::string& itopic,
+    std::string& idescription,
+    std::string& ilocation,
+    std::vector<std::string>& ikeywords,
+    bool iisBeforePaperDeadline,
+    Date& ipaperDeadline,
+    bool iisBeforeAllocationDate,
+    Date& iallocationDate,
+    bool iisBeforeSoftReviewDeadline,
+    Date& ireviewDeadlineSoft,
+    bool iisBeforeHardReviewDeadline,
+    Date& ireviewDeadlineHard,
+    bool iisBeforeDiscussDeadline,
+    Date& idiscussDeadline,
+    int ireviewersPerPaper,
+    int ipostWordLimit)
+    {
+  	    isActive = iisActive;
+  	    title = ititle;
+  	    topic = itopic;
+  	    description = idescription;
+  	    location = ilocation;
+  	    keywords = ikeywords;
+  	    isBeforePaperDeadline = iisBeforePaperDeadline;
+  	    paperDeadline = ipaperDeadline;
+  	    isBeforeAllocationDate = iisBeforeAllocationDate;
+  	    allocationDate = iallocationDate;
+  	    isBeforeSoftReviewDeadline = iisBeforeSoftReviewDeadline;
+  	    reviewDeadlineSoft = ireviewDeadlineSoft;
+  	    isBeforeHardReviewDeadline = iisBeforeHardReviewDeadline;
+  	    reviewDeadlineHard = ireviewDeadlineHard;
+  	    isBeforeDiscussDeadline = iisBeforeDiscussDeadline;
+  	    discussDeadline = idiscussDeadline;
+  	    reviewersPerPaper = ireviewersPerPaper;
+  	    postWordLimit = ipostWordLimit;
+    }
 
-  bool isActive;
-  std::string title{""};
-  int confID{0};
-  std::string topic{""};
-  std::string description{""};
-  std::string location{""};
-  std::vector<std::string> keywords;
-  bool isBeforePaperDeadline;
-  Date paperDeadline;
-  bool isBeforeAllocationDate;
-  Date allocationDate;
-  bool isBeforeSoftReviewDeadline;
-  Date reviewDeadlineSoft;
-  bool isBeforeHardReviewDeadline;
-  Date reviewDeadlineHard;
-  bool isBeforeDiscussDeadline;
-  Date discussDeadline;
-  int reviewersPerPaper{0};
-  int postWordLimit{0};
+    bool isActive;
+    std::string title;
+    int confID = 0;
+    std::string topic;
+    std::string description;
+    std::string location;
+    std::vector<std::string> keywords;
+    bool isBeforePaperDeadline;
+    Date paperDeadline;
+    bool isBeforeAllocationDate;
+    Date allocationDate;
+    bool isBeforeSoftReviewDeadline;
+    Date reviewDeadlineSoft;
+    bool isBeforeHardReviewDeadline;
+    Date reviewDeadlineHard;
+    bool isBeforeDiscussDeadline;
+    Date discussDeadline;
+    int reviewersPerPaper = 0;
+    int postWordLimit = 0;
 
 };
 
diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
index 23264c8..fa670d8 100644
--- a/DataAll/Date.hpp
+++ b/DataAll/Date.hpp
@@ -4,17 +4,17 @@
 #include <sstream>
 #include <QDataStream>
 
-class Date {
-    
+class Date 
+{
 public:
     Date() { }
-    Date(int iday,
-         int imonth,
-         int iyear):
-         day(iday),
-         month(imonth),
-         year(iyear)
-             { }
+
+    Date(int iday, int imonth, int iyear)
+    {
+        day = iday;
+        month = imonth;
+        year = iyear;
+    }
     
     Date(const Date& in)
     {
@@ -23,7 +23,6 @@ public:
         year = in.year;
     }
     
-// NOTE: changed get functions, new below
     void setDay(int iday) {day = iday;}
     void setMonth(int imonth) {month = imonth;}
     void setYear(int iyear) {year = iyear;}
@@ -47,18 +46,18 @@ public:
         return true;
     }
 
-  std::string convertToString()
-  {
-    std::stringstream temp;
-    temp << day << "/" << month << "/" << year; 
-    return(temp.str());
-  } 
+    std::string convertToString()
+    {
+        std::stringstream temp;
+        temp << day << "/" << month << "/" << year; 
+
+        return temp.str();
+    } 
     
 private:
-    int day{0};
-    int month{0};
-    int year{0};
-    
+    int day = 0;
+    int month = 0;
+    int year = 0;
 };
 
   inline QDataStream& operator<<(QDataStream& out, Date* d)
diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index d0d5d6b..f983594 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -8,15 +8,21 @@
 #include <QLinkedList>
 #include <QDataStream>
 
-struct Discussion {
-  Discussion() { }
-  Discussion(const std::list<DiscussionPost>& idiscussion):
-               discussion(idiscussion)
-               { }
-  Discussion(const Discussion& in) {
-    discussion = in.discussion;
-  }
-  std::list<DiscussionPost> discussion;
+struct Discussion 
+{
+    Discussion() { }
+
+    Discussion(const std::list<DiscussionPost>& idiscussion)
+    {
+        discussion = idiscussion;
+    }
+
+    Discussion(const Discussion& in) 
+    {
+        discussion = in.discussion;
+    }
+
+    std::list<DiscussionPost> discussion;
 };
 
   inline QDataStream& operator<<(QDataStream& out, Discussion* disc)
diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
index ee193c1..ac91ef7 100644
--- a/DataAll/DiscussionPost.hpp
+++ b/DataAll/DiscussionPost.hpp
@@ -5,26 +5,30 @@
 #include <QDataStream>
 #include <string>
 
-struct DiscussionPost {
-  DiscussionPost() {}
-
-  DiscussionPost(const std::string& icomment,
-                 int ireviewerID,
-                 int ipostID):
-                 comment(icomment),
-                 reviewerID(ireviewerID),
-                 postID(ipostID)
-                 { }
-
-  DiscussionPost(const std::string& icomment,
-                 int ireviewerID):
-                 comment(icomment),
-                 reviewerID(ireviewerID)
-                 { }
-  
-  std::string comment{""};
-  int reviewerID{0};
-  int postID{0};
+struct DiscussionPost 
+{
+    DiscussionPost() {}
+    
+    DiscussionPost(const std::string& icomment,
+        int ireviewerID,
+        int ipostID)
+    {
+        comment = icomment;
+        reviewerID = ireviewerID;
+        postID = ipostID;
+    }
+    
+// No postID
+    DiscussionPost(const std::string& icomment,
+        int ireviewerID)
+    {
+        comment = icomment;
+        reviewerID = ireviewerID;
+    }
+    
+    std::string comment;
+    int reviewerID = 0;
+    int postID = 0;
 };
 
   inline QDataStream& operator<<(QDataStream& out, DiscussionPost* discp)
diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 5188360..8fabce8 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -12,55 +12,56 @@
 #include <QDataStream>
 #include <vector>
 
-struct Paper {
-
+struct Paper 
+{
     Paper() { }
+
     Paper(int &ipaperID,
-      int &iconfID,
-      int &ileadAuthorID,
-      std::string& ititle,
-      std::string& iabstract,
-      std::vector<PersonalInfo>& iauthors,
-      std::vector<std::string>& ikeywords,
-      std::string& iconfKeyword,
-      std::vector<Review>& ireviews,
-      Discussion& idiscussion)
-      :
-      paperID(ipaperID),
-      confID(iconfID),
-      leadAuthorID(ileadAuthorID),
-      title(ititle),
-      abstract(iabstract),
-      authors(iauthors),
-      keywords(ikeywords),
-      confKeyword(iconfKeyword),
-      reviews(ireviews),
-      discussion(idiscussion)
-      { }
+        int &iconfID,
+        int &ileadAuthorID,
+        std::string& ititle,
+        std::string& iabstract,
+        std::vector<PersonalInfo>& iauthors,
+        std::vector<std::string>& ikeywords,
+        std::string& iconfKeyword,
+        std::vector<Review>& ireviews,
+        Discussion& idiscussion)
+    { 
+        paperID = ipaperID;
+        confID = iconfID;
+        leadAuthorID = ileadAuthorID;
+        title = ititle;
+        abstract = iabstract;
+        authors = iauthors;
+        keywords = ikeywords;
+        confKeyword = iconfKeyword;
+        reviews = ireviews;
+        discussion = idiscussion;
+    }
 
     Paper(
-      int &iconfID,
-      int &ileadAuthorID,
-      std::string& ititle,
-      std::string& iabstract,
-      std::vector<PersonalInfo>& iauthors,
-      std::vector<std::string>& ikeywords,
-      std::string& iconfKeyword)
-      :
-      confID(iconfID),
-      leadAuthorID(ileadAuthorID),
-      title(ititle),
-      abstract(iabstract),
-      authors(iauthors),
-      keywords(ikeywords),
-      confKeyword(iconfKeyword)
-      { }
-    // no assignment operator or copy constructor deemed necessary at this point
-    int paperID{0};
-    int confID{0};
-    int leadAuthorID{0};
-    std::string title{""};
-    std::string abstract{""};
+        int &iconfID,
+        int &ileadAuthorID,
+        std::string& ititle,
+        std::string& iabstract,
+        std::vector<PersonalInfo>& iauthors,
+        std::vector<std::string>& ikeywords,
+        std::string& iconfKeyword)
+    {
+        confID = iconfID;
+        leadAuthorID = ileadAuthorID;
+        title = ititle;
+        abstract = iabstract;
+        authors = iauthors;
+        keywords = ikeywords;
+        confKeyword = iconfKeyword;
+    }
+
+    int paperID = 0;
+    int confID = 0;
+    int leadAuthorID = 0;
+    std::string title;
+    std::string abstract;
     std::vector<PersonalInfo> authors;
     std::vector<std::string> keywords;
     std::string confKeyword;
diff --git a/DataAll/PaperSummary.hpp b/DataAll/PaperSummary.hpp
index 691f3b9..28aa2b5 100644
--- a/DataAll/PaperSummary.hpp
+++ b/DataAll/PaperSummary.hpp
@@ -5,15 +5,18 @@
 #include <QDataStream>
 #include <string>
 
-struct PaperSummary {
+struct PaperSummary 
+{
 	PaperSummary() {}
 
-	PaperSummary(int ipaperID, const std::string& ipaperName) :
-	paperID(ipaperID), paperName(ipaperName)
-	{ }
+	PaperSummary(int ipaperID, const std::string& ipaperName)
+    {
+	    paperID = ipaperID;
+        paperName = ipaperName;
+	}
 
-	int paperID{0};
-	std::string paperName{""};
+	int paperID = 0;
+	std::string paperName;
 };
 
 	inline QDataStream& operator<<(QDataStream& out, PaperSummary* paps)
diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index 15959ea..cd8f4c4 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -7,40 +7,41 @@
 #include <vector>
 
 
-struct PersonalInfo {
-  PersonalInfo() {}
-  
-  PersonalInfo(
-         const std::string& iname,
-         const std::string& iemail,
-         const std::string& iorganisation,
-         const std::string& iphone,
-         int iinfoID
-         ):
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         infoID(iinfoID)
-         { }
+struct PersonalInfo
+{
+    PersonalInfo() {}
+    
+    PersonalInfo(
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone,
+        int iinfoID)
+    {
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+        infoID = iinfoID;
+    }
+    
+    PersonalInfo(
+        const std::string& iname,
+        const std::string& iemail,
+        const std::string& iorganisation,
+        const std::string& iphone)
+    {
+        name = iname;
+        email = iemail;
+        organisation = iorganisation;
+        phone = iphone;
+    }
 
-  PersonalInfo(
-         const std::string& iname,
-         const std::string& iemail,
-         const std::string& iorganisation,
-         const std::string& iphone
-         ):
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone)
-         { }
-  int infoID{0};
-  std::string name{""};
-  std::string email{""};
-  std::string organisation{""};
-  std::string phone{""};
-  
+    int infoID = 0;
+    std::string name;
+    std::string email;
+    std::string organisation;
+    std::string phone;
 };
 
   
diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
index 8b4236c..ef32218 100644
--- a/DataAll/Review.hpp
+++ b/DataAll/Review.hpp
@@ -5,91 +5,94 @@
 #include <QVector>
 #include <QDataStream>
 
-struct Paper;
+struct Review 
+{
+    Review() { }
+    
+    Review(int ipaperID,
+        int ireviewerID,
+        int ioverall,
+        int iconfidence,
+        int irelevance,
+        int ioriginality,
+        int isignificance,
+        int ipresentation,
+        int itechQuality,
+        int ievaluation,
+        const std::string& icommentsStrength,
+        const std::string& icommentsWeakness,
+        const std::string& icommentsSuggestions,
+        const std::string& icommentsShortPaper,
+        const std::string& icommentsBestAward)
+    {
+        paperID = ipaperID;
+        reviewerID = ireviewerID;
+        overall = ioverall;
+        confidence = iconfidence;
+        relevance = irelevance;
+        originality = ioriginality;
+        significance = isignificance;
+        presentation = ipresentation;
+        techQuality = itechQuality;
+        evaluation = ievaluation;
+        commentsStrength = icommentsStrength;
+        commentsWeakness = icommentsWeakness;
+        commentsSuggestions = icommentsSuggestions;
+        commentsShortPaper = icommentsShortPaper;
+        commentsBestAward = icommentsBestAward;
+    }
+    
+    Review(int ireportID,
+        int ipaperID,
+        int ireviewerID,
+        int ioverall,
+        int iconfidence,
+        int irelevance,
+        int ioriginality,
+        int isignificance,
+        int ipresentation,
+        int itechQuality,
+        int ievaluation,
+        const std::string& icommentsStrength,
+        const std::string& icommentsWeakness,
+        const std::string& icommentsSuggestions,
+        const std::string& icommentsShortPaper,
+        const std::string& icommentsBestAward)
+    {
+        reportID = ireportID;
+        paperID = ipaperID;
+        reviewerID = ireviewerID;
+        overall = ioverall;
+        confidence = iconfidence;
+        relevance = irelevance;
+        originality = ioriginality;
+        significance = isignificance;
+        presentation = ipresentation;
+        techQuality = itechQuality;
+        evaluation = ievaluation;
+        commentsStrength = icommentsStrength;
+        commentsWeakness = icommentsWeakness;
+        commentsSuggestions = icommentsSuggestions;
+        commentsShortPaper = icommentsShortPaper;
+        commentsBestAward = icommentsBestAward;
+    }
 
-struct Review {
-  Review() { }
-  Review(int ipaperID,
-    int ireviewerID,
-    int ioverall,
-    int iconfidence,
-    int irelevance,
-    int ioriginality,
-    int isignificance,
-    int ipresentation,
-    int itechQuality,
-    int ievaluation,
-    const std::string& icommentsStrength,
-    const std::string& icommentsWeakness,
-    const std::string& icommentsSuggestions,
-    const std::string& icommentsShortPaper,
-    const std::string& icommentsBestAward):
-    paperID(ipaperID),
-    reviewerID(ireviewerID),
-    overall(ioverall),
-    confidence(iconfidence),
-    relevance(irelevance),
-    originality(ioriginality),
-    significance(isignificance),
-    presentation(ipresentation),
-    techQuality(itechQuality),
-    evaluation(ievaluation),
-    commentsStrength(icommentsStrength),
-    commentsWeakness(icommentsWeakness),
-    commentsSuggestions(icommentsSuggestions),
-    commentsShortPaper(icommentsShortPaper),
-    commentsBestAward(icommentsBestAward)
-    { }
-
-  Review(int ireportID,
-    int ipaperID,
-    int ireviewerID,
-    int ioverall,
-    int iconfidence,
-    int irelevance,
-    int ioriginality,
-    int isignificance,
-    int ipresentation,
-    int itechQuality,
-    int ievaluation,
-    const std::string& icommentsStrength,
-    const std::string& icommentsWeakness,
-    const std::string& icommentsSuggestions,
-    const std::string& icommentsShortPaper,
-    const std::string& icommentsBestAward):
-    reportID(ireportID),
-    paperID(ipaperID),
-    reviewerID(ireviewerID),
-    overall(ioverall),
-    confidence(iconfidence),
-    relevance(irelevance),
-    originality(ioriginality),
-    significance(isignificance),
-    presentation(ipresentation),
-    techQuality(itechQuality),
-    evaluation(ievaluation),
-    commentsStrength(icommentsStrength),
-    commentsWeakness(icommentsWeakness),
-    commentsSuggestions(icommentsSuggestions),
-    commentsShortPaper(icommentsShortPaper),
-    commentsBestAward(icommentsBestAward)
-    { }
-  int reportID{0};
-  int paperID{0};
-  int reviewerID{0};
-  int overall{0};
-  int confidence{0};
-  int relevance{0};
-  int originality{0};
-  int significance{0};
-  int presentation{0};
-  int techQuality{0};
-  int evaluation{0};
-  std::string commentsStrength{""};
-  std::string commentsWeakness{""};
-  std::string commentsSuggestions{""};
-  std::string commentsShortPaper{""};
-  std::string commentsBestAward{""};
+    int reportID = 0;
+    int paperID = 0;
+    int reviewerID = 0;
+    int overall = 0;
+    int confidence = 0;
+    int relevance = 0;
+    int originality = 0;
+    int significance = 0;
+    int presentation = 0;
+    int techQuality = 0;
+    int evaluation = 0;
+    std::string commentsStrength;
+    std::string commentsWeakness;
+    std::string commentsSuggestions;
+    std::string commentsShortPaper;
+    std::string commentsBestAward;
 
 };
 

commit 528947245344ed22c9ed772e859f2bbbf99b7163
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 13:43:44 2014 +1100

    Update main.cpp

diff --git a/Database/main.cpp b/Database/main.cpp
index f7421df..fc19efd 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -3,9 +3,6 @@
 #include <fstream>
 #include <string>
 
-//#include "MyRecord.h"
-//#include "MyRecordStore.h"
-
 #include "Database.hpp"
 #include "../Server/User.hpp"
 #include "../DataAll/Conference.hpp"
@@ -32,44 +29,6 @@ int main(int arc, char *argv[])
                 std::cout << "Failed to open database file" << std::endl;
                 exit(1);
         }
-/*std::vector<std::string> keywords;
-username = "tom";
-password = "fake";
-name = "Thomas";
-email = "boos_tom@ourcompany.com.au";
-organisation = "University of Wollongong";
-phone = "04666666666";
-keywords.push_back("mathematics");
-keywords.push_back("science");
-User usertemp(
-username,
-name,
-email,
-organisation,
-phone,
-password,
-keywords);*/
-//User usertemp("foo",
-//"bar",
-//"thefoo",
-//"boos_tom@ourcompany.com.au",
-//"University of Wollongong",
-//"04666666666",
-//std::vector<std::string>{"mathematics","science"});
-//std::string key = usertemp.userName;
-//db.putUser(key, usertemp);
-
-
-
-/* User usertemp2("dick",
-"wrong",
-"Dick",
-"clever_dick@ourcompany.com.au",
-"University of Wollongong",
-"04666667666",
-std::vector<std::string>{"geographyt","english"});
-std::vector theUsers{usertemp, usertemp2}; */
-
 
         std::vector<User>::const_iterator it;
         for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
@@ -128,29 +87,18 @@ std::vector theUsers{usertemp, usertemp2}; */
         	Paper paper = db.fetchPaper(key);
         	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword " << paper.keywords[0] << std::endl;
         }
-//        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
-//        {
-//                userPtr ptr = (*it);
-//                int key = ptr->userID;
-//                db.deleteRecord(key);
-//                std::cout << "Deleted record " << key << std::endl;
-//        }
+
         return EXIT_SUCCESS;
 }
 
 static void createUsers()
 {
-        // Hard code procedural creation of a few records so that can
-        // have some data to show in the Qt based GUI
         std::string username;
         std::string password;
         std::string name;
         std::string email;
         std::string organisation;
 	std::string phone;
-
-        // You will need to adjust filenames etc to match the image files
-        // that you provide
         {
 		std::vector<std::string> keywords;
                 username = "tom";
@@ -261,6 +209,5 @@ static void createPaper()
 	keywords,
 	confKeyword);
 
-
         g_thePapers.push_back(papertemp);
 }

commit 7a23ad9ba33e6e5a2dc529c546cb9c407a4b9944
Merge: 05741e4 7a6e427
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 12:51:47 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 7a6e427b51f10f27eb3f192e0794838dd2d69298
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 12:50:09 2014 +1100

    Update PersonalInfo.hpp

diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index edceaa6..15959ea 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -11,10 +11,10 @@ struct PersonalInfo {
   PersonalInfo() {}
   
   PersonalInfo(
-         std::string& iname,
-         std::string& iemail,
-         std::string& iorganisation,
-         std::string& iphone,
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
          int iinfoID
          ):
          name(iname),

commit 05741e4df98b93636c76133ff8773c248555b608
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 12:48:49 2014 +1100

    Fixed DATABASE :)

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 1f72cfa..3a2e466 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -508,7 +508,7 @@ Conference Database::fetchConference(int key) throw (const char*)
 	rs = pstmt->executeQuery();
 
         while (rs->next()) {
-                std::string keyword = rs->getString(2);
+                std::string keyword = rs->getString(1);
                 vec.push_back(keyword);
         }
 
@@ -1007,10 +1007,10 @@ Paper Database::fetchPaper(int key) throw (const char*)
 
         while (rs->next()) {
 		int infoID = rs->getInt(1);
-		std::string name = rs->getString(3);
-		std::string email = rs->getString(4);
-		std::string organisation = rs->getString(5);
-		std::string phone = rs->getString(6);
+		std::string name = rs->getString(2);
+		std::string email = rs->getString(3);
+		std::string organisation = rs->getString(4);
+		std::string phone = rs->getString(5);
 		PersonalInfo pInfo(name, email, organisation, phone, infoID);
                 authors.push_back(pInfo);
         }
@@ -1101,12 +1101,38 @@ Paper Database::fetchPaper(int key) throw (const char*)
 	return paper;
 }
 
-void Database::createPaper(Paper paper, std::string pdf)
+bool Database::existsPaperTitleConf(Paper paper) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
 
-	const char* insertPaper = "INSERT INTO Paper(paperID, leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(NULL, ?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?), ?, ?, ?)";
+	const char* countPaper = "SELECT COUNT(*) FROM Paper WHERE (paperTitle=? and confID=?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countPaper);
+
+        int count = 0;
+        pstmt->setString(1, paper.title);
+        pstmt->setInt(2, paper.confID);
+
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+void Database::createPaper(Paper paper, std::string pdf) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertPaper = "INSERT IGNORE INTO Paper(leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?), ?, ?, ?)";
 	const char* getPaperID = "SELECT LAST_INSERT_ID()";
 	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
 
@@ -1138,6 +1164,9 @@ void Database::createPaper(Paper paper, std::string pdf)
 
         int paperID = rs->getInt(1);
 
+	if( paperID == 0)
+		return;
+
         delete rs;
         delete pstmt;
 
@@ -1153,9 +1182,7 @@ void Database::createPaper(Paper paper, std::string pdf)
 		pstmt->setInt(1, paperID);
 		pstmt->setInt(2, pInfo.infoID);
 
-		std::cout << "here1" << std::endl;
 	        pstmt->executeUpdate();
-		std::cout << "here2" << std::endl;
 	}
 	delete pstmt;
 
@@ -1185,7 +1212,7 @@ void Database::createPaper(Paper paper, std::string pdf)
 
 }
 
-void Database::updatePaper(Paper paper)
+void Database::updatePaper(Paper paper) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -1357,7 +1384,7 @@ Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (con
         std::string commentsShortPaper = rs->getString(16);
         std::string commentsBestAward = rs->getString(17);
 
-	Review review(reportID
+	Review review(reportID,
 		paperID, 
 		reviewerID, 
 		overall, 
@@ -1377,7 +1404,7 @@ Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (con
         delete rs;
         delete pstmt;
 
-	return review
+	return review;
 }
 
 void Database::modifyReview(Review review, int confID) throw (const char*)
@@ -1392,58 +1419,53 @@ void Database::modifyReview(Review review, int confID) throw (const char*)
         sql::PreparedStatement *pstmt = NULL;
 
 	pstmt = dbcon->prepareStatement(insertReview);
-	std::vector<Review>::const_iterator it;
-	for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
-	{
-		Review review = *it;	
-
-		if (review.reportID==0)
-		{
-			pstmt = dbcon->prepareStatement(insertReview);
-
-			pstmt->setInt(1, paper.paperID);
-			pstmt->setInt(2, review.reviewerID);
-			pstmt->setInt(3, paper.confID);
-			pstmt->setInt(4, review.overall);
-			pstmt->setInt(5, review.confidence);
-			pstmt->setInt(6, review.relevance);
-			pstmt->setInt(7, review.originality);
-			pstmt->setInt(8, review.significance);
-			pstmt->setInt(9, review.presentation);
-			pstmt->setInt(10, review.techQuality);
-			pstmt->setInt(11, review.evaluation);
-			pstmt->setString(12, review.commentsStrength);
-			pstmt->setString(13, review.commentsWeakness);
-			pstmt->setString(14, review.commentsSuggestions);
-			pstmt->setString(15, review.commentsShortPaper);
-			pstmt->setString(16, review.commentsBestAward);
-
-	        	pstmt->executeUpdate();
-		}
-		else
-		{
-			pstmt = dbcon->prepareStatement(updateReview);
 
-			pstmt->setInt(1, paper.paperID);
-			pstmt->setInt(2, review.reviewerID);
-			pstmt->setInt(3, paper.confID);
-			pstmt->setInt(4, review.overall);
-			pstmt->setInt(5, review.confidence);
-			pstmt->setInt(6, review.relevance);
-			pstmt->setInt(7, review.originality);
-			pstmt->setInt(8, review.significance);
-			pstmt->setInt(9, review.presentation);
-			pstmt->setInt(10, review.techQuality);
-			pstmt->setInt(11, review.evaluation);
-			pstmt->setString(12, review.commentsStrength);
-			pstmt->setString(13, review.commentsWeakness);
-			pstmt->setString(14, review.commentsSuggestions);
-			pstmt->setString(15, review.commentsShortPaper);
-			pstmt->setString(16, review.commentsBestAward);
-			pstmt->setInt(17, review.reportID);
-
-	        	pstmt->executeUpdate();
-		}
+	if (review.reportID==0)
+	{
+		pstmt = dbcon->prepareStatement(insertReview);
+
+		pstmt->setInt(1, review.paperID);
+		pstmt->setInt(2, review.reviewerID);
+		pstmt->setInt(3, confID);
+		pstmt->setInt(4, review.overall);
+		pstmt->setInt(5, review.confidence);
+		pstmt->setInt(6, review.relevance);
+		pstmt->setInt(7, review.originality);
+		pstmt->setInt(8, review.significance);
+		pstmt->setInt(9, review.presentation);
+		pstmt->setInt(10, review.techQuality);
+		pstmt->setInt(11, review.evaluation);
+		pstmt->setString(12, review.commentsStrength);
+		pstmt->setString(13, review.commentsWeakness);
+		pstmt->setString(14, review.commentsSuggestions);
+		pstmt->setString(15, review.commentsShortPaper);
+		pstmt->setString(16, review.commentsBestAward);
+
+		pstmt->executeUpdate();
+	}
+	else
+	{
+		pstmt = dbcon->prepareStatement(updateReview);
+
+		pstmt->setInt(1, review.paperID);
+		pstmt->setInt(2, review.reviewerID);
+		pstmt->setInt(3, confID);
+		pstmt->setInt(4, review.overall);
+		pstmt->setInt(5, review.confidence);
+		pstmt->setInt(6, review.relevance);
+		pstmt->setInt(7, review.originality);
+		pstmt->setInt(8, review.significance);
+		pstmt->setInt(9, review.presentation);
+		pstmt->setInt(10, review.techQuality);
+		pstmt->setInt(11, review.evaluation);
+		pstmt->setString(12, review.commentsStrength);
+		pstmt->setString(13, review.commentsWeakness);
+		pstmt->setString(14, review.commentsSuggestions);
+		pstmt->setString(15, review.commentsShortPaper);
+		pstmt->setString(16, review.commentsBestAward);
+		pstmt->setInt(17, review.reportID);
+
+		pstmt->executeUpdate();
 	}
 	delete pstmt;
 }
@@ -1458,6 +1480,9 @@ Discussion Database::fetchDiscussion(int paperID, int confID) throw (const char*
         // Discussion
         std::list<DiscussionPost> discussion;
 	
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+
 	pstmt = dbcon->prepareStatement(getDiscussion);
 	pstmt->setInt(1, paperID);
 	pstmt->setInt(2, confID);
@@ -1476,7 +1501,7 @@ Discussion Database::fetchDiscussion(int paperID, int confID) throw (const char*
         delete pstmt;
 }
 
-DiscussionPost Database::fetchRebuttal(int paperID, int userId, int confID) throw (const char*)
+DiscussionPost Database::fetchRebuttal(int paperID, int userID, int confID) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -1488,7 +1513,7 @@ DiscussionPost Database::fetchRebuttal(int paperID, int userId, int confID) thro
 	sql::PreparedStatement *pstmt = NULL;
 	sql::ResultSet *rs = NULL;
 	
-	pstmt = dbcon->prepareStatement(getDiscussion);
+	pstmt = dbcon->prepareStatement(getDiscussionPost);
 	pstmt->setInt(1, paperID);
 	pstmt->setInt(2, userID);
 	pstmt->setInt(3, confID);
@@ -1511,7 +1536,7 @@ DiscussionPost Database::fetchRebuttal(int paperID, int userId, int confID) thro
         delete rs;
         delete pstmt;
 	
-	return discuss
+	return discuss;
 }
 
 void Database::createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*)
@@ -1768,7 +1793,7 @@ int Database::getReviewerPreference(int userID, int confID, int paperID) throw (
 	return preference;
 }
 
-std::vector<int> fetchReviewersAssigned(int paperID, int confID) throw (const char*)
+std::vector<int> Database::fetchReviewersAssigned(int paperID, int confID) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 61c5bc8..dec5a5f 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -47,8 +47,9 @@ public:
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
         std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
         Paper fetchPaper(int key) throw (const char*);
-        void createPaper(Paper paper, std::string pdf);
-        void updatePaper(Paper paper);
+	bool existsPaperTitleConf(Paper paper) throw (const char*);
+        void createPaper(Paper paper, std::string pdf) throw (const char*);
+        void updatePaper(Paper paper) throw (const char*);
 	void addPaperAccepted(int paperID, int confID) throw (const char*);
 	std::vector<int> fetchPaperAccepted(int confID) throw (const char*);
 
diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index 94f5ccd..c2b6545 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -101,8 +101,8 @@ CREATE TABLE `Paper` (
 	`leadAuthorID` int NOT NULL,
 	`confID` int NOT NULL,
 	`keywordID` int NOT NULL,
-	`paperTitle` varchar(512) NOT NULL,
-	`paperAbstract` varchar(4096) NOT NULL,
+	`paperTitle` varchar(255) NOT NULL,
+	`paperAbstract` TEXT NOT NULL,
 	`paper` blob NOT NULL,
 	PRIMARY KEY(`paperID`),
 	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
@@ -110,6 +110,8 @@ CREATE TABLE `Paper` (
 	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+ALTER TABLE `Paper` ADD UNIQUE `unique_index`(`confID`, `paperTitle`);
+
 CREATE TABLE `AcceptedPapers` (
 	`confID` int NOT NULL,
 	`paperID` int NOT NULL,
@@ -117,7 +119,7 @@ CREATE TABLE `AcceptedPapers` (
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
-ALTER TABLE `AcceptedPaper` ADD UNIQUE `unique_index`(`paperID`, `confID`);
+ALTER TABLE `AcceptedPapers` ADD UNIQUE `unique_index`(`paperID`, `confID`);
 
 CREATE TABLE `paperAuthors` (
 	`paperID` int NOT NULL,
diff --git a/Database/main.cpp b/Database/main.cpp
index d2eef10..f7421df 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -8,16 +8,24 @@
 
 #include "Database.hpp"
 #include "../Server/User.hpp"
+#include "../DataAll/Conference.hpp"
+#include "../DataAll/Paper.hpp"
 
 #include <vector>
 
 std::vector<User> g_theUsers;
+std::vector<Conference> g_theConfs;
+std::vector<Paper> g_thePapers;
 
 static void createUsers();
+static void createConf();
+static void createPaper();
 
 int main(int arc, char *argv[])
 {
         createUsers();
+	createConf();
+	createPaper();
         Database db;
         if (!db.isOK())
         {
@@ -51,57 +59,7 @@ keywords);*/
 //std::string key = usertemp.userName;
 //db.putUser(key, usertemp);
 
-std::string baz = "baz";
-std::string blah = "blah";
-std::string boo = "boo";
-std::string flop = "flop";
-Date date(1,12,30);
-std::vector<std::string> test;
-test.push_back("one");
-test.push_back("two");
-Conference conferencetemp(true, 
-baz,
-blah,
-boo,
-flop,
-test,
-true,
-date,
-true,
-date,
-true,
-date,
-true,
-date,
-true,
-date,
-4,
-250);
-std::string title = conferencetemp.title;
-db.putConf(title, conferencetemp);
-
-PersonalInfo infotemp("a", "b", "c", "d");
-
-std::vector<PersonalInfo> vec;
-vec.push_back(infotemp);
-std::vector<std::string> vec2;
-vec2.push_back("one");
-vec2.push_back("two");
-std::string fee("one");
-std::string fi("two");
-std::string giant("one");
-int CONFID=1;
-int five=1;
-Paper papertemp(five,
-CONFID,
-fee,
-fi,
-vec,
-vec2,
-giant);
-std::string pdf = "whyyougoanddothesethings";
-db.createPaper(papertemp, pdf);
-std::cout << "here3" << std::endl;
+
 
 /* User usertemp2("dick",
 "wrong",
@@ -112,13 +70,35 @@ std::cout << "here3" << std::endl;
 std::vector<std::string>{"geographyt","english"});
 std::vector theUsers{usertemp, usertemp2}; */
 
+
         std::vector<User>::const_iterator it;
         for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
         {
                 User ptr = *it;
                 std::string key = ptr.userName;
                 db.putUser(key, ptr);
-                std::cout << "Wrote record " << key << std::endl;
+                std::cout << "Wrote user: " << key << std::endl;
+        }
+
+        std::vector<Conference>::const_iterator it2;
+        for(it2=g_theConfs.begin(); it2!=g_theConfs.end(); it2++)
+        {
+                Conference ptr = *it2;
+                std::string key = ptr.title;
+		db.putConf(key, ptr);
+                std::cout << "Wrote conference: " << key << std::endl;
+        }
+
+        std::vector<Paper>::const_iterator it3;
+        for(it3=g_thePapers.begin(); it3!=g_thePapers.end(); it3++)
+        {
+                Paper ptr = *it3;
+		std::string pdf = "whyyougoanddothesethings";
+		if(!db.existsPaperTitleConf(ptr))
+		{
+			db.createPaper(ptr, pdf);
+                	std::cout << "Wrote paper: " << ptr.title << std::endl;
+		}
         }
 
 	std::vector<std::string> Names = db.allUserNames();
@@ -128,7 +108,7 @@ std::vector theUsers{usertemp, usertemp2}; */
         {
                 std::string key = (*iter);
                 User user = db.fetchUser(key);
-                std::cout << user.userName << " " << user.name << " " <<  user.keywords[0] << " " << user.email << " " << key << std::endl;
+                std::cout << "fetch username: " << user.userName << " name: " << user.name << " first expertise: " <<  user.keywords[0] << " email: " << user.email << std::endl;
         }
         
         std::vector<int> ConfIDs{db.activeConfIDs()};
@@ -137,16 +117,16 @@ std::vector theUsers{usertemp, usertemp2}; */
         {
         	int key = (*confiter);
         	Conference conference = db.fetchConference(key);
-        	std::cout << conference.title << " " << conference.keywords[0] << std::endl;
+        	std::cout << "fetch conference: " << conference.title << " first keyword: " << conference.keywords[0] << std::endl;
         }
         
-        std::vector<int> PaperIDs{db.getPaperIDsForConf(CONFID)};
+        std::vector<int> PaperIDs(db.getPaperIDsForConf(1));
         std::vector<int>::iterator paperiter;
         for(paperiter=PaperIDs.begin(); paperiter!=PaperIDs.end(); paperiter++)
         {
         	int key = (*paperiter);
         	Paper paper = db.fetchPaper(key);
-        	std::cout << paper.paperID << " " << paper.confID << " " << paper.leadAuthorID << " " << paper.keywords[0] << std::endl;
+        	std::cout << "fetch paper " << "paperID:" << paper.paperID << " confID:" << paper.confID << " leadAuthorID:" << paper.leadAuthorID << " first keyword " << paper.keywords[0] << std::endl;
         }
 //        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
 //        {
@@ -215,3 +195,72 @@ static void createUsers()
                 g_theUsers.push_back(user);
         }
 }
+
+static void createConf()
+{
+	bool active = true;
+	std::string title = "maths conference";
+	std::string topic = "linear algebra";
+	std::string description = "exciting LA and MORE!!";
+	std::string location = "UoW";
+	std::vector<std::string> keywords;
+	keywords.push_back("maths");
+	keywords.push_back("linear algebra");
+	Date date(1,12,30);
+	bool open = true;
+	int reviewersPerPaper = 10;
+	int postWordLimit = 250;
+	Conference conferencetemp(
+		active,
+		title,
+		topic,
+		description,
+		location,
+		keywords,
+		open,
+		date,
+		open,
+		date,
+		open,
+		date,
+		open,
+		date,
+		open,
+		date,
+		reviewersPerPaper,
+		postWordLimit);
+	
+        g_theConfs.push_back(conferencetemp);
+}
+
+static void createPaper()
+{
+	PersonalInfo infotemp(
+                "Dick",
+                "clever_dick@ourcompany.com.au",
+		"University of Wollongong",
+                "04666667666",
+		2);
+	
+	std::vector<PersonalInfo> authors;
+	authors.push_back(infotemp);
+	std::vector<std::string> keywords;
+	keywords.push_back("linear algebra");
+	std::string title("LA");
+	std::string abstract("amazing!");
+	std::string confKeyword("linear algebra");
+	int CONFID = 1;
+	int leadAuthorID = 2;
+
+	Paper papertemp(
+	CONFID,
+	leadAuthorID,
+	title,
+	abstract,
+	authors,
+	keywords,
+	confKeyword);
+
+
+        g_thePapers.push_back(papertemp);
+}

commit 5c662c2e87e43a39bdc1cdf0a839800e92aa03a9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 12:43:49 2014 +1100

    Update Date.hpp

diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
index 6e8023f..23264c8 100644
--- a/DataAll/Date.hpp
+++ b/DataAll/Date.hpp
@@ -54,6 +54,13 @@ public:
     return(temp.str());
   } 
     
+private:
+    int day{0};
+    int month{0};
+    int year{0};
+    
+};
+
   inline QDataStream& operator<<(QDataStream& out, Date* d)
 {
     out << d->getDay();
@@ -94,11 +101,4 @@ inline QDataStream& operator>>(QDataStream& in, Date& d)
     return in;
 }
 
-private:
-    int day{0};
-    int month{0};
-    int year{0};
-    
-};
-
 #endif

commit a0699e957d92466e8352b289efd0e633c445a770
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 12:05:13 2014 +1100

    Update Paper.hpp

diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 8609ca8..5188360 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -173,6 +173,7 @@ struct Paper {
         for (unsigned int i = 0; i < tempQvectorR.size(); ++i)
           pap->reviews.push_back(tempQvectorR[i]);
         tempQvector.clear();
+        return in;
     }
     
     inline QDataStream& operator>>(QDataStream& in, Paper& pap)
@@ -203,6 +204,7 @@ struct Paper {
         for (unsigned int i = 0; i < tempQvectorR.size(); ++i)
           pap.reviews.push_back(tempQvectorR[i]);
         tempQvector.clear();
+        return in;
     }
 
 #endif

commit f57bbd48c6d842264ff93dc93f9bf172b52d180b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 12:00:03 2014 +1100

    made operators public

diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
index 53907fc..6e8023f 100644
--- a/DataAll/Date.hpp
+++ b/DataAll/Date.hpp
@@ -54,14 +54,7 @@ public:
     return(temp.str());
   } 
     
-private:
-    int day{0};
-    int month{0};
-    int year{0};
-    
-};
-
-inline QDataStream& operator<<(QDataStream& out, Date* d)
+  inline QDataStream& operator<<(QDataStream& out, Date* d)
 {
     out << d->getDay();
     out << d->getMonth();
@@ -101,4 +94,11 @@ inline QDataStream& operator>>(QDataStream& in, Date& d)
     return in;
 }
 
+private:
+    int day{0};
+    int month{0};
+    int year{0};
+    
+};
+
 #endif

commit f764add35bb44265729f60dcf89f02376bd832a3
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 11:54:53 2014 +1100

    changed QList to QLinkedList as it more closely resembles std::list

diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index 6ca061a..d0d5d6b 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -4,7 +4,8 @@
 #include "../DataAll/DiscussionPost.hpp"
 
 #include <list>
-#include <QList>
+//#include <QList>
+#include <QLinkedList>
 #include <QDataStream>
 
 struct Discussion {
@@ -20,7 +21,7 @@ struct Discussion {
 
   inline QDataStream& operator<<(QDataStream& out, Discussion* disc)
   {
-    QList<Discussion> tempQList;
+    QLinkedList<Discussion> tempQList;
      for (unsigned int i = 0; i < disc->discussion.size(); ++i)
        tempQList.append(disc->discussion[i]);
      out << tempQList;
@@ -31,7 +32,7 @@ struct Discussion {
   
   inline QDataStream& operator<<(QDataStream& out, Discussion& disc)
   {
-    QList<Discussion> tempQList;
+    QLinkedList<Discussion> tempQList;
      for (unsigned int i = 0; i < disc.discussion.size(); ++i)
        tempQList.append(QString::fromStdString(disc.discussion[i]));
      out << tempQList;
@@ -41,7 +42,7 @@ struct Discussion {
   
   inline QDataStream& operator>>(QDataStream& in, Discussion* disc)
   {
-    QList<Discussion> tempQList;
+    QLinkedList<Discussion> tempQList;
     in >> tempQList;
     for (unsigned int i = 0; i < tempQList.size(); ++i)
       disc->discussion.push_back(tempQList[i].toStdString());
@@ -51,7 +52,7 @@ struct Discussion {
   
   inline QDataStream& operator>>(QDataStream& in, Discussion& disc)
   {
-    QList<Discussion> tempQList;
+    QLinkedList<Discussion> tempQList;
     in >> tempQList;
     for (unsigned int i = 0; i < tempQList.size(); ++i)
       disc.discussion.push_back(tempQList[i].toStdString());

commit b4b0c7ecd5e8ce033301ba473f939e4e066257c6
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Mon Oct 27 05:44:00 2014 +1100

    trying to fix needs work

diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index 712c7d2..6ca061a 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -20,7 +20,7 @@ struct Discussion {
 
   inline QDataStream& operator<<(QDataStream& out, Discussion* disc)
   {
-    QList<DiscussionPost> tempQList;
+    QList<Discussion> tempQList;
      for (unsigned int i = 0; i < disc->discussion.size(); ++i)
        tempQList.append(disc->discussion[i]);
      out << tempQList;
@@ -31,7 +31,7 @@ struct Discussion {
   
   inline QDataStream& operator<<(QDataStream& out, Discussion& disc)
   {
-    QList<DiscussionPost> tempQList;
+    QList<Discussion> tempQList;
      for (unsigned int i = 0; i < disc.discussion.size(); ++i)
        tempQList.append(QString::fromStdString(disc.discussion[i]));
      out << tempQList;
@@ -41,7 +41,7 @@ struct Discussion {
   
   inline QDataStream& operator>>(QDataStream& in, Discussion* disc)
   {
-    QList<DiscussionPost> tempQList;
+    QList<Discussion> tempQList;
     in >> tempQList;
     for (unsigned int i = 0; i < tempQList.size(); ++i)
       disc->discussion.push_back(tempQList[i].toStdString());
@@ -51,7 +51,7 @@ struct Discussion {
   
   inline QDataStream& operator>>(QDataStream& in, Discussion& disc)
   {
-    QList<DiscussionPost> tempQList;
+    QList<Discussion> tempQList;
     in >> tempQList;
     for (unsigned int i = 0; i < tempQList.size(); ++i)
       disc.discussion.push_back(tempQList[i].toStdString());
diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
index 8fd15bc..ee193c1 100644
--- a/DataAll/DiscussionPost.hpp
+++ b/DataAll/DiscussionPost.hpp
@@ -27,7 +27,7 @@ struct DiscussionPost {
   int postID{0};
 };
 
-  inline QDataStream& operator<<(QDataStream& out, const DiscussionPost* discp)
+  inline QDataStream& operator<<(QDataStream& out, DiscussionPost* discp)
   {
     QString tempQstring;
     out << discp->reviewerID;

commit 21beb47d28a23b4db24468bfaa128792f08c5232
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Mon Oct 27 05:36:05 2014 +1100

    added login function on client and server. Stream overloaders in DataAll need fixing, also stream overloaders in User.hpp need doing

diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index f31ac07..712c7d2 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -16,11 +16,13 @@ struct Discussion {
     discussion = in.discussion;
   }
   std::list<DiscussionPost> discussion;
+};
+
   inline QDataStream& operator<<(QDataStream& out, Discussion* disc)
   {
     QList<DiscussionPost> tempQList;
      for (unsigned int i = 0; i < disc->discussion.size(); ++i)
-       tempQList.append(QString::fromStdString(disc->discussion[i]));
+       tempQList.append(disc->discussion[i]);
      out << tempQList;
      tempQList.clear();
 
@@ -56,5 +58,6 @@ struct Discussion {
     tempQList.clear();
     return in;
   }
-};
+
+
 #endif
diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
index c1cfae7..8fd15bc 100644
--- a/DataAll/DiscussionPost.hpp
+++ b/DataAll/DiscussionPost.hpp
@@ -21,8 +21,13 @@ struct DiscussionPost {
                  comment(icomment),
                  reviewerID(ireviewerID)
                  { }
+  
+  std::string comment{""};
+  int reviewerID{0};
+  int postID{0};
+};
 
-  inline QDataStream& operator<<(QDataStream& out, DiscussionPost* discp)
+  inline QDataStream& operator<<(QDataStream& out, const DiscussionPost* discp)
   {
     QString tempQstring;
     out << discp->reviewerID;
@@ -61,9 +66,5 @@ struct DiscussionPost {
     discp.comment = tempQstring.toStdString();
     return in;
   }
-  
-  std::string comment{""};
-  int reviewerID{0};
-  int postID{0};
-};
+
 #endif
diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 90f2c83..8609ca8 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -66,6 +66,8 @@ struct Paper {
     std::string confKeyword;
     Discussion discussion;
     std::vector<Review> reviews;
+};
+
     
     inline QDataStream& operator<<(QDataStream& out, Paper* pap)
     {
@@ -202,5 +204,5 @@ struct Paper {
           pap.reviews.push_back(tempQvectorR[i]);
         tempQvector.clear();
     }
-};
+
 #endif
diff --git a/DataAll/PaperSummary.hpp b/DataAll/PaperSummary.hpp
index ff8d9db..691f3b9 100644
--- a/DataAll/PaperSummary.hpp
+++ b/DataAll/PaperSummary.hpp
@@ -14,6 +14,8 @@ struct PaperSummary {
 
 	int paperID{0};
 	std::string paperName{""};
+};
+
 	inline QDataStream& operator<<(QDataStream& out, PaperSummary* paps)
         {
            QString tempQstring;
@@ -23,7 +25,7 @@ struct PaperSummary {
            return out;
         }
         
-        inline QDataStream& operator<<(QDataStream& out, PaperSummary* paps)
+        inline QDataStream& operator<<(QDataStream& out, PaperSummary& paps)
         {
            QString tempQstring;
            out << paps.paperID;
@@ -49,5 +51,5 @@ struct PaperSummary {
            paps.paperName = tempQstring.toStdString();
            return in;
         }
-};
+
 #endif
diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index 88b85aa..edceaa6 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -41,6 +41,9 @@ struct PersonalInfo {
   std::string organisation{""};
   std::string phone{""};
   
+};
+
+  
   inline QDataStream& operator<<(QDataStream& out, PersonalInfo* pers)
   {
      QString tempQstring;
@@ -101,5 +104,5 @@ struct PersonalInfo {
      return in;
   }
 
-};
+
 #endif
diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
index c013bf0..8b4236c 100644
--- a/DataAll/Review.hpp
+++ b/DataAll/Review.hpp
@@ -74,6 +74,24 @@ struct Review {
     commentsShortPaper(icommentsShortPaper),
     commentsBestAward(icommentsBestAward)
     { }
+  int reportID{0};
+  int paperID{0};
+  int reviewerID{0};
+  int overall{0};
+  int confidence{0};
+  int relevance{0};
+  int originality{0};
+  int significance{0};
+  int presentation{0};
+  int techQuality{0};
+  int evaluation{0};
+  std::string commentsStrength{""};
+  std::string commentsWeakness{""};
+  std::string commentsSuggestions{""};
+  std::string commentsShortPaper{""};
+  std::string commentsBestAward{""};
+
+};
 
   inline QDataStream& operator<<(QDataStream& out, Review* rev)
   {
@@ -105,7 +123,7 @@ struct Review {
   inline QDataStream& operator<<(QDataStream& out, Review& rev)
   {
      QString tempQstring;
-     out << rev,reportID;
+     out << rev.reportID;
      out << rev.paperID;
      out << rev.reviewerID;
      out << rev.overall;
@@ -182,22 +200,6 @@ struct Review {
     rev.commentsBestAward = tempQstring.toStdString();
     return in;
   }
-  int reportID{0};
-  int paperID{0};
-  int reviewerID{0};
-  int overall{0};
-  int confidence{0};
-  int relevance{0};
-  int originality{0};
-  int significance{0};
-  int presentation{0};
-  int techQuality{0};
-  int evaluation{0};
-  std::string commentsStrength{""};
-  std::string commentsWeakness{""};
-  std::string commentsSuggestions{""};
-  std::string commentsShortPaper{""};
-  std::string commentsBestAward{""};
 
-};
+
 #endif
diff --git a/Server/ClientHandler.cpp b/Server/ClientHandler.cpp
index 295d898..dd3541c 100644
--- a/Server/ClientHandler.cpp
+++ b/Server/ClientHandler.cpp
@@ -3,6 +3,7 @@
  */
 
 #include "ClientHandler.hpp"
+#include "UserManager.hpp"
 //#include "UserList.h" NOTE: old
 #include <iostream> 
 
@@ -13,7 +14,7 @@ ClientHandler::ClientHandler(int socketDescriptor, QObject* parent)
     this->tcpSocket = NULL;
 }
 
-void ClientHandler::run() {
+void ClientHandler::run() { // DO NOT TOUCH
     //using namespace std;
     std::cout << "Handling a new client at socketDescriptor " << this->socketDescriptor << std::endl;
     this->tcpSocket = new QTcpSocket(0);
@@ -30,12 +31,12 @@ void ClientHandler::run() {
     }
 }
 
-void ClientHandler::handleOneRequest() {
+void ClientHandler::handleOneRequest() { // DO NOT TOUCH
     if (this->getRequest())
         this->dispatchRequest(); 
 }
 
-bool ClientHandler::getRequest() {
+bool ClientHandler::getRequest() { //DO NOT TOUCH
     //using namespace std;
     requestData.clear();
     // Requests:
@@ -62,7 +63,7 @@ bool ClientHandler::getRequest() {
     return true; 
 } 
 
-bool ClientHandler::waitForBytes(int numbytes) {
+bool ClientHandler::waitForBytes(int numbytes) { // DO NOT TOUCH
     //using namespace std; 
 
     const int Timeout = 500000;
@@ -82,13 +83,15 @@ bool ClientHandler::waitForBytes(int numbytes) {
     return true; 
 }
 
+// receives request from client, takes qstring command off qdatastream, calls appropriate function
 void ClientHandler::dispatchRequest() {
-    //using namespace std; 
 
     requestReader = new QDataStream(&requestData, QIODevice::ReadOnly);
     requestReader->setVersion(QDataStream::Qt_4_0);
     QString cmd;
     (*requestReader) >> cmd;
+    
+    // check command here and call appropriate function
     if (cmd == "CHECKLOGIN")
         this->handleLoginRequest();
 
@@ -97,25 +100,34 @@ void ClientHandler::dispatchRequest() {
 }
 
 void ClientHandler::handleLoginRequest() {
+    // extract objects after command qstring
     QString uname;
     QString pword;
     (*requestReader) >> uname;
     (*requestReader) >> pword;
 
-    prepareToRespond();
+    prepareToRespond(); // only if response needed
     
+    // interact with whatever to interact with database here
     // check if user exists and check password
     theUser->fetchUser(uname.toStdString());
-    if (theUser->) //here
+    if (theUser->getCurrentUser()->password != pword.toStdString()) {
+        theUser->setCurrentUser(nullptr);
+    }
     
+    // if needed send response
+    // first qstring is a command
     QString cmd = "CHECKLOGIN";
     (*this->responseWriter) << cmd;
     
-    (*this->responseWriter) << response;
+    // write the rest of the response
+    (*this->responseWriter) << theUser->getCurrentUser();
+    
+    // sendResponse
     this->sendResponse(); 
 }
 
-void ClientHandler::prepareToRespond() {
+void ClientHandler::prepareToRespond() { // DO NO TOUCH
     this->responseData.clear(); 
     this->responseWriter = new QDataStream(&responseData, QIODevice::WriteOnly);
     this->responseWriter->setVersion(QDataStream::Qt_4_0);
@@ -126,7 +138,7 @@ void ClientHandler::prepareToRespond() {
     // buffer; 
 }
 
-void ClientHandler::sendResponse() {
+void ClientHandler::sendResponse() { // DO NOT TOUCH
     // Request is complete - just have to adjust the length field
     int datalength = this->responseData.size();
 
@@ -142,4 +154,3 @@ void ClientHandler::sendResponse() {
     // Now tidy up
     delete this->responseWriter; 
 } 
-
diff --git a/UserClient/LoginManager.cpp b/UserClient/LoginManager.cpp
index f16a04f..75c73e9 100644
--- a/UserClient/LoginManager.cpp
+++ b/UserClient/LoginManager.cpp
@@ -1,46 +1,23 @@
 #include "LoginManager.hpp"
 
-//NOTE: temporarily commented out parameters to silence compiler warning until implemented
-void LoginManager::loginRequest(QString /*username*/, QString /*password*/)
+void LoginManager::loginRequest(QString username, QString password)
 {
-//    UserType_t uType;//from packet
-
-//        if(username == "PCChair" && password == "admin")
-//            uType = AUTHOR;
-//        else if(username == "Reviewer" && password == "user")
-//            uType = REVIEWER;
-//        else if(username == "Author" && password == "user")
-//            uType = PCCHAIR;
-        
-//        if(uType = PCCHAIR)
-//        {
-//            currentConference = new Conference(/* initialization constructor based on packet */)
-//            //FIND HIS CONFERENCE
-//            checkDeadlines(Conference* myConf);
-//        }
-
-//    std::vector<std::string> keys;
-//    std::vector<PaperSummary> papers;
-//    std::string blank = "";
-//    if(uType == AUTHOR){
-//        currentUser = new Author(username, blank, blank, blank, blank, 0, AUTHOR);
-//        currentUser->setUserType(AUTHOR);
-//        return true;
-//    } else if (uType == REVIEWER){
-//        currentUser = new Reviewer(username, "", "", "", "", 0, REVIEWER);
-//        currentUser->setUserType(REVIEWER);
-//        return true;
-//    } else if (uType == PCCHAIR) {
-//        currentUser = new PCChair(username, "", "", "", "", 0, PCCHAIR);
-//        currentUser->setUserType(PCCHAIR);
-//        return true;
-//    } else return false;
 
+    theServer->sendLoginRequest(username, password);
+    
     //this function sends the username and password to the server for verification
     //the response received is used to construct the currentUser pointer member of loginmanager
 
+}
 
-    //return false; // NOTE: placeholder
+void LoginManager::loginResponse()
+{
+    if (currentUser == nullptr) {
+        loggedIn = false;
+        QString msg = "Incorrect username/password!";
+        mWindow->errorBox(msg);
+        mWindow->noUser();
+    }
 }
 
 void LoginManager::logout()
@@ -50,7 +27,7 @@ void LoginManager::logout()
 }
 
 //NOTE: temporarily commented out parameters to silence compiler warning until implemented
-bool LoginManager::createAccount(std::string /*username*/, std::string /*password*/)
+bool LoginManager::createAccount(std::string username, std::string password)
 {
     //this functions identically to login except that a new record is created in the database with the supplkied details
     //rather than verifying that one exists with matching details
diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
index e4a1c5c..26379bd 100644
--- a/UserClient/UserClient.cpp
+++ b/UserClient/UserClient.cpp
@@ -1,8 +1,6 @@
 #include <iostream>
 #include <QApplication>
-//#include <qt5/QtWidgets/qwidget.h> // NOTE: might need to be <QtGui/QApplication>
 
-//#include "LoginManager.hpp"
 #include "mainwindow.hpp"
 
 QTcpSocket *establishConnection();
@@ -23,8 +21,8 @@ int main(int argc, char *argv[]) {
 }
 
 QTcpSocket *establishConnection() {
-    // just connect on localhost
-    std::string servername = "10.64.32.150";//"127.0.0.1";
+    //just connect on localhost
+    std::string servername = "127.0.0.1";
     std::string pnumstr = "23456";
     /*QRegExp portChk("^\\d{4,5}$");
     QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
diff --git a/UserClient/UserClientStubForServer.cpp b/UserClient/UserClientStubForServer.cpp
index 6645d91..5718691 100644
--- a/UserClient/UserClientStubForServer.cpp
+++ b/UserClient/UserClientStubForServer.cpp
@@ -11,21 +11,16 @@
 #include "mainwindow.hpp"
 #include "UserClientStubForServer.hpp"
 
-// NOTE: future possible includes:
-// #include "LoginManager.hpp"
-// #include "User.hpp" // for UserType_t enum
-// etc.
-
-void UserClientStubForServer::checkLoginDetails(QString uname, QString pword)
+void UserClientStubForServer::sendLoginRequest(QString uname, QString pword)
 {
     if (this->busy)
         return;
 
     this->setupForRequest();
-    this->setupForResponse(); // expecting a response to this request
+    this->setupForResponse(); // expecting a response to this request (omit otherwise)
     
-    // Send a QString with command name
-    QString checkLoginCmd = "CHECKLOGIN"; // NOTE: might be changed to enum
+    // Send a QString with command name as first on qdatastream
+    QString checkLoginCmd = "CHECKLOGIN";
     
     (*this->requestWriter) << checkLoginCmd;
     (*this->requestWriter) << uname;
@@ -33,30 +28,22 @@ void UserClientStubForServer::checkLoginDetails(QString uname, QString pword)
     this->sendRequest();
 }
 
-void UserClientStubForServer::handleCheckLoginDetailsResponse()
+void UserClientStubForServer::handleLoginResponse()
 {
-    int userType; // NOTE: UserType_t
-    QString msg;
-    (*this->responseReader) >> userType;
-    
-    
-    
-//    
-//    if(userType == "PCCHAIR")
-//        setUser(1);
-//    else if(userType == "REVIEWER")
-//        setUser(2);
-//    else if(userType == "AUTHOR")
-//        setUser(3);
-//    
-//    mainGui->showReponse(msg);
+    User* userResponse = new User;
+    (*this->responseReader) >> userResponse;
     
+    mainGui->setCurrentUser(userResponse);
     
+    mainGui->loginResponse()
 }
 
+// receives response from server, takes qstring command off qdatastream, calls appropriate function
 void UserClientStubForServer::dispatch(QString responseName) {
+        
+    // check command here and call appropriate handle function in LoginManager
     if (responseName == "CHECKLOGIN")
-        handleCheckLoginDetailsResponse();
+        handleLoginResponse();
 }
 
 void UserClientStubForServer::handleResponse() {
diff --git a/UserClient/UserClientStubForServer.hpp b/UserClient/UserClientStubForServer.hpp
index 40c1284..1d2377b 100644
--- a/UserClient/UserClientStubForServer.hpp
+++ b/UserClient/UserClientStubForServer.hpp
@@ -37,7 +37,8 @@ public:
     // calls appropriate "call-back" functions that adjust data in the form
     
     // NOTE: functions for requests sent to server go here
-    void checkLoginDetails(QString uname, QString pword); // NOTE: example
+    // sendFooRequest()
+    void sendLoginRequest(QString uname, QString pword);
    
 public slots:
     void readResponseData(); 
@@ -51,7 +52,8 @@ private:
     void dispatch(QString responseName);
     
     // NOTE: functions to handle responses from server go here
-    void handleCheckLoginDetailsResponse(); // NOTE: example
+    // handleFooResponse())
+    void handleLoginResponse();
     
     // NOTE: probably delete
     // Don't define copy constructor
@@ -68,7 +70,7 @@ private:
 
     // Collaborators 
     QTcpSocket *theServer;
-    LoginManager *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
+    LoginManager *mainGui; // used to send server responses to/from gui
 
 };
 
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index e22aa7f..66528e7 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -16,9 +16,17 @@ MainWindow::~MainWindow()
     delete ui;
 }
 
-void MainWindow::login()
+void MainWindow::errorBox(QString msg)
 {
-//    if(loginMgr.login(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
+        QMessageBox msgBox;
+        msgBox.setWindowTitle("Error!");
+        msgBox.setDetailedText(msg.c_str());
+        msgBox.exec();
+}
+
+void MainWindow::loginRequest()
+{
+    loginMgr.loginRequest(ui->usernameLogin->text(), ui->passwordLogin->text());
 //        setUser(loginMgr.getCurrentUser()->getUserType());
 }
 
@@ -34,7 +42,7 @@ void MainWindow::noUser()
     ui->tabWidget->addTab(ui->loginTab, "Login");
 }
 
-void MainWindow::setUser(/*UserType_t*/int userType)
+void MainWindow::setUser(UserType_t userType)
 {
     switch(userType)
     {
diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 57064a5..6d0d4e5 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -4,10 +4,6 @@
 #include <QMainWindow>
 #include "LoginManager.hpp"
 
-//class LoginManager;
-
-//enum UserType_t; //{AUTHOR, REVIEWER, PCCHAIR};
-
 namespace Ui {
 class MainWindow;
 }
@@ -22,6 +18,8 @@ public:
     explicit MainWindow(QWidget *parent = 0);
     ~MainWindow();
 
+    void errorBox(QString msg);
+    
 private slots:
     void on_login_clicked();//server stuff here
 
@@ -88,9 +86,9 @@ private slots:
     void on_papersTable_itemSelectionChanged();
 
 private:
-    void setUser(/*UserType_t*/ int userType);
+    void setUser(UserType_t userType);
     void noUser();
-    void login();
+    void loginRequest();
     void logout();
     void populate_infoTabAuthor();
     void populate_infoTabChair();

commit ca09a6188ab46ee51795ac1b7a6c9376e97a0151
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 03:42:44 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 2793500..35ed679 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -38,6 +38,8 @@ public:
   void sendPaperSummaryBatch(int); //all papers for a conf
   void sendAuthoredPaperSummaries(int, int); //
   void sendPaperSummariesToReview(int, int); //all papers for a reviewer in a conference
+  void sendPapersAccepted(int);
+  void addPaperAccepted(int);
 
 private:
 void fetchPaper(int);

commit 8247589c4eb1908e71061d2c1ef2270f3dda2a9d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 03:42:41 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 601e42b..4e2ebd7 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -89,5 +89,22 @@ void PaperManager::sendAuthoredPaperSummaries(int leadAuthorID, int confID)
   //send papersAuthored to the client
 }
 
+void sendPapersAccepted(int confID)
+{
+  std::vector<int> acceptedPaperIDs = db->fetchPaperAccepted(confID);
+  std::vector<Paper> acceptedPapers;
+  for(unsigned int i = 0; i < acceptedPaperIDs.size(); ++i)
+  {
+    fetchPaper(acceptedPaperIDs[i]);
+    std::vector<Paper> acceptedPapers[i] = *currentPaper;
+  }
+  // send acceptedPapers to client 
+}
+void addPaperAccepted(int paperID)
+{
+  fetchPaper(paperID);
+  db->addPaperAccepted(currentPaper->paperID, currentPaper->confID);
+}
+
 
 

commit d220b7059914599b227f2dd9b982aec7757c9f41
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Mon Oct 27 03:42:22 2014 +1100

    Update ClientHandler.hpp

diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index b98e2f9..6dec3da 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -20,7 +20,7 @@ public:
 private: 
 
     // handler functions here
-    void handleUserCheckRequest();
+    void handleLoginRequest();
 
     void handleOneRequest();
     bool getRequest();
@@ -39,6 +39,8 @@ private:
     QDataStream *requestReader;
     QDataStream *responseWriter; 
 
+    UserManager* theUser{nullptr};
+    
 };
 
 #endif	/* CLIENTHANDLER_H */

commit 9358e8911be180b4900e87e168c51ab778dfd853
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Mon Oct 27 03:42:15 2014 +1100

    Update ClientHandler.cpp

diff --git a/Server/ClientHandler.cpp b/Server/ClientHandler.cpp
index b733311..295d898 100644
--- a/Server/ClientHandler.cpp
+++ b/Server/ClientHandler.cpp
@@ -89,14 +89,14 @@ void ClientHandler::dispatchRequest() {
     requestReader->setVersion(QDataStream::Qt_4_0);
     QString cmd;
     (*requestReader) >> cmd;
-    if (cmd == "CHECKUSER")
-        this->handleUserCheckRequest();
+    if (cmd == "CHECKLOGIN")
+        this->handleLoginRequest();
 
     delete requestReader;
     this->requestData.clear();
 }
 
-void ClientHandler::handleUserCheckRequest() {
+void ClientHandler::handleLoginRequest() {
     QString uname;
     QString pword;
     (*requestReader) >> uname;
@@ -104,10 +104,11 @@ void ClientHandler::handleUserCheckRequest() {
 
     prepareToRespond();
     
-    //UserList users;
-    bool response = true; // NOTE: check username here. was: users.CheckUserPassword(uname, pword);
+    // check if user exists and check password
+    theUser->fetchUser(uname.toStdString());
+    if (theUser->) //here
     
-    QString cmd = "CHECKUSER";
+    QString cmd = "CHECKLOGIN";
     (*this->responseWriter) << cmd;
     
     (*this->responseWriter) << response;

commit f6b8171ad57824b9f2e0b6e065fc334860dd51aa
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 03:41:48 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index c29e69b..94f5ccd 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -146,6 +146,8 @@ CREATE TABLE `PaperAssigned` (
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
 	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `PaperAssigned` ADD UNIQUE `unique_index`(`paperID`, `reviewerID`, `confID`);
 	
 CREATE TABLE `Review` (
 	`reportID` int NOT NULL AUTO_INCREMENT,

commit b31c4b21ed58410a6b5ddf90579df23628a9ec10
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 03:41:07 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index d9aca1f..1f72cfa 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1768,6 +1768,36 @@ int Database::getReviewerPreference(int userID, int confID, int paperID) throw (
 	return preference;
 }
 
+std::vector<int> fetchReviewersAssigned(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewersIDs = "SELECT reviewerID FROM PaperAssigned WHERE (paperID=? and confID=?)";
+
+        // =======================================
+        // Reviewer ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewersIDs);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int reviewerID = rs->getInt(1);
+                vec.push_back(reviewerID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
 std::vector<int> Database::getPaperIDsForConf(int confID) throw (const char*)
 {
         if (invalid)

commit c978390563dcc2d3f7c37f48c121b449a9548fa4
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 03:39:54 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 738c59d..61c5bc8 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -70,6 +70,9 @@ public:
 	std::vector<std::string> getKeywordsForUser(int userID) throw (const char*);
 	std::vector<int> getReviewersForConf(int confID) throw (const char*);
 	int getReviewerPreference(int userID, int confID, int paperID) throw (const char*);
+	void assignPaper(int paperID, int reviewerID, int confID) throw (const char*);
+
+	std::vector<int> fetchReviewersAssigned(int paperID, int confID) throw (const char*);
 	
 	std::vector<int> getPaperIDsForConf(int confID) throw (const char*);	
 	std::vector<int> getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*);

commit 38a064608e21b0fd474801f5e602de5877dc8a02
Merge: cd5b3cb 8ea9b45
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 03:38:38 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit cd5b3cb7126405f9e89f763467918e6026ff1469
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 03:38:17 2014 +1100

    wip

diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 6ad5083..f239111 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -12,16 +12,16 @@
 struct Paper {
 
     Paper() { }
-    Paper(const int ipaperID,
-      const int iconfID,
-      const int ileadAuthorID,
-      const std::string& ititle,
-      const std::string& iabstract,
-      const std::vector<PersonalInfo>& iauthors,
-      const std::vector<std::string>& ikeywords,
-      const std::string& iconfKeyword,
-      const std::vector<Review>& ireviews,
-      const Discussion& idiscussion)
+    Paper(int &ipaperID,
+      int &iconfID,
+      int &ileadAuthorID,
+      std::string& ititle,
+      std::string& iabstract,
+      std::vector<PersonalInfo>& iauthors,
+      std::vector<std::string>& ikeywords,
+      std::string& iconfKeyword,
+      std::vector<Review>& ireviews,
+      Discussion& idiscussion)
       :
       paperID(ipaperID),
       confID(iconfID),
@@ -36,13 +36,13 @@ struct Paper {
       { }
 
     Paper(
-      const int iconfID,
-      const int ileadAuthorID,
-      const std::string& ititle,
-      const std::string& iabstract,
-      const std::vector<PersonalInfo>& iauthors,
-      const std::vector<std::string>& ikeywords,
-      const std::string& iconfKeyword)
+      int &iconfID,
+      int &ileadAuthorID,
+      std::string& ititle,
+      std::string& iabstract,
+      std::vector<PersonalInfo>& iauthors,
+      std::vector<std::string>& ikeywords,
+      std::string& iconfKeyword)
       :
       confID(iconfID),
       leadAuthorID(ileadAuthorID),

commit 5ee0865854f76d40015fef247ef9cd83ba57b162
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 03:37:11 2014 +1100

    wip

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 1c51c4a..74a53d0 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -673,7 +673,7 @@ void Database::updateConf(Conference conf)
 
 	const char* getConfID = "SELECT confID FROM Conference where name = ?";
 
-	const char* updateConference = "UPDATE Conference SET confID=?, name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
+	const char* updateConference = "UPDATE Conference SET name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
 
         const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
 	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
@@ -762,7 +762,6 @@ void Database::updateConf(Conference conf)
       		        pstmt->executeUpdate();
 		}
       		delete pstmt;
-
       	}
 }
 
@@ -1021,7 +1020,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 
         // =======================================
         // Discussion
-        std::list<DiscussionPost> discussion;
+        Discussion discussion;
 	
 	pstmt = dbcon->prepareStatement(getDiscussPost);
 	pstmt->setInt(1, paperID);
@@ -1034,7 +1033,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 		int reviewerID = rs->getInt(2);
 		int commentID = rs->getInt(3);
 		DiscussionPost discuss(comment, reviewerID, commentID);
-                discussion.push_back(discuss);
+                discussion.discussion.push_back(discuss);
         }
 
         delete rs;
@@ -1154,7 +1153,9 @@ void Database::createPaper(Paper paper, std::string pdf)
 		pstmt->setInt(1, paperID);
 		pstmt->setInt(2, pInfo.infoID);
 
+		std::cout << "here1" << std::endl;
 	        pstmt->executeUpdate();
+		std::cout << "here2" << std::endl;
 	}
 	delete pstmt;
 
diff --git a/Database/main.cpp b/Database/main.cpp
index 9341699..d2eef10 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -3,8 +3,8 @@
 #include <fstream>
 #include <string>
 
-#include "MyRecord.h"
-#include "MyRecordStore.h"
+//#include "MyRecord.h"
+//#include "MyRecordStore.h"
 
 #include "Database.hpp"
 #include "../Server/User.hpp"
@@ -41,32 +41,40 @@ organisation,
 phone,
 password,
 keywords);*/
-User usertemp("foo",
-"bar",
-"thefoo",
-"boos_tom@ourcompany.com.au",
-"University of Wollongong",
-"04666666666",
-std::vector<std::string>{"mathematics","science"});
-std::string key = usertemp.userName;
-db.putUser(key, usertemp);
-
+//User usertemp("foo",
+//"bar",
+//"thefoo",
+//"boos_tom@ourcompany.com.au",
+//"University of Wollongong",
+//"04666666666",
+//std::vector<std::string>{"mathematics","science"});
+//std::string key = usertemp.userName;
+//db.putUser(key, usertemp);
+
+std::string baz = "baz";
+std::string blah = "blah";
+std::string boo = "boo";
+std::string flop = "flop";
+Date date(1,12,30);
+std::vector<std::string> test;
+test.push_back("one");
+test.push_back("two");
 Conference conferencetemp(true, 
-"baz",
-"blah",
-"boo",
-"flop",
-std::vector<std::string>("one", "two"),
-TRUE,
-Date(1,12,30),
-TRUE,
-Date(1,12,30),
-TRUE,
-Date(1,12,30),
-TRUE,
-Date(1,12,30),
-TRUE,
-Date(1,12,30),
+baz,
+blah,
+boo,
+flop,
+test,
+true,
+date,
+true,
+date,
+true,
+date,
+true,
+date,
+true,
+date,
 4,
 250);
 std::string title = conferencetemp.title;
@@ -74,16 +82,26 @@ db.putConf(title, conferencetemp);
 
 PersonalInfo infotemp("a", "b", "c", "d");
 
-const int CONFID = 7;
-Paper papertemp(5,
+std::vector<PersonalInfo> vec;
+vec.push_back(infotemp);
+std::vector<std::string> vec2;
+vec2.push_back("one");
+vec2.push_back("two");
+std::string fee("one");
+std::string fi("two");
+std::string giant("one");
+int CONFID=1;
+int five=1;
+Paper papertemp(five,
 CONFID,
-"fee",
-"fi",
-std::vector<PersonalInfo>(infotemp),
-std::vector<std::string>("fo", "fum"),
-"giants");
+fee,
+fi,
+vec,
+vec2,
+giant);
 std::string pdf = "whyyougoanddothesethings";
 db.createPaper(papertemp, pdf);
+std::cout << "here3" << std::endl;
 
 /* User usertemp2("dick",
 "wrong",
@@ -117,7 +135,7 @@ std::vector theUsers{usertemp, usertemp2}; */
         std::vector<int>::iterator confiter;
         for(confiter=ConfIDs.begin(); confiter!=ConfIDs.end(); confiter++)
         {
-        	int key = (*iter);
+        	int key = (*confiter);
         	Conference conference = db.fetchConference(key);
         	std::cout << conference.title << " " << conference.keywords[0] << std::endl;
         }
@@ -126,7 +144,7 @@ std::vector theUsers{usertemp, usertemp2}; */
         std::vector<int>::iterator paperiter;
         for(paperiter=PaperIDs.begin(); paperiter!=PaperIDs.end(); paperiter++)
         {
-        	int key = (*iter);
+        	int key = (*paperiter);
         	Paper paper = db.fetchPaper(key);
         	std::cout << paper.paperID << " " << paper.confID << " " << paper.leadAuthorID << " " << paper.keywords[0] << std::endl;
         }

commit 8ea9b45c342ea15aa6b64192c71d17acdf574a83
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 03:23:27 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index c39da37..2793500 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -1,7 +1,9 @@
 #ifndef PAPER_MANAGER_H
 #define PAPER_MANAGER_H
 
+#include "../DataAll/DiscussionPost.hpp"
 #include "../DataAll/Paper.hpp"
+#include "../DataAll/Review.hpp"
 #include "../Database/Database.hpp"
 
 class PaperManager {
@@ -25,8 +27,12 @@ public:
   //bool deleteDiscPost(int);
   void modifyDiscPost(int);
   //bool deleteReview(int);
-  void addReview();
-  void modifyReview(int);
+  void addReview(Review);
+  void fetchReview(int);
+  void modifyReview(Review);
+  void fetchDiscussion();
+  void fetchRebuttal(int);
+  void createDiscussionPost(DiscussionPost);
   //bool deletePaper(int);
   void sendPaper(); //just send a paper
   void sendPaperSummaryBatch(int); //all papers for a conf

commit e19ab8395e69f771edbb0f1492b0a4bd2f7125ab
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 03:23:25 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index f5ed05f..601e42b 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -19,14 +19,34 @@ void PaperManager::modifyPDF(int paperID, int confID, const std::string& pdf)
    database->updatePDF(paperID, confID, pdf);
 }
 
-void PaperManager::addReview()
+void PaperManager::addReview(Review rev)
 {
- 
+  db->modifyReview(currentPaper->confID, rev);
 }
 
-void PaperManager::modifyReview(int confID, int reportID)
+void PaperManager::fetchReview(int reviewerID)
 {
- 
+  // send the following to client db->fetchReview(currentPaper->paperID, reviewerID, currentPaper->confID);
+}
+
+void PaperManager::modifyReview(Review rev)
+{
+  db->modifyReview(currentPaper->confID, rev);
+}
+
+void fetchDiscussion()
+{
+  // send the following to client db->fetchDiscussion(currentPaper->paperID, currentPaper->confID);
+}
+
+void fetchRebuttal(int userID)
+{
+  // send the following to client db->fetchRebuttal(currentPaper->paperID, userID, currentPaper->confID);
+}
+
+void createDiscussionPost(DiscussionPost discussionPost)
+{
+  db->createDiscussionPost(discussionPost, currentPaper->paperID, currentPaper->confID);
 }
 
 void PaperManager::sendPaper(int paperID)

commit 1e888d98634353e60b3b3f99c2efefc2e635fc1f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 03:05:10 2014 +1100

    added QDataStream operators

diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
index 9b98d0c..c013bf0 100644
--- a/DataAll/Review.hpp
+++ b/DataAll/Review.hpp
@@ -1,6 +1,10 @@
 #ifndef REVIEW_H
 #define REVIEW_H
 
+#include <QString>
+#include <QVector>
+#include <QDataStream>
+
 struct Paper;
 
 struct Review {
@@ -71,6 +75,113 @@ struct Review {
     commentsBestAward(icommentsBestAward)
     { }
 
+  inline QDataStream& operator<<(QDataStream& out, Review* rev)
+  {
+     QString tempQstring;
+     out << rev->reportID;
+     out << rev->paperID;
+     out << rev->reviewerID;
+     out << rev->overall;
+     out << rev->confidence;
+     out << rev->relevance;
+     out << rev->originality;
+     out << rev->significance;
+     out << rev->presentation;
+     out << rev->techQuality;
+     out << rev->evaluation;
+     tempQstring = QString::fromStdString(rev->commentsStrength);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev->commentsWeakness);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev->commentsSuggestions);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev->commentsShortPaper);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev->commentsBestAward);
+     out << tempQstring;
+     return out;
+  }
+  
+  inline QDataStream& operator<<(QDataStream& out, Review& rev)
+  {
+     QString tempQstring;
+     out << rev,reportID;
+     out << rev.paperID;
+     out << rev.reviewerID;
+     out << rev.overall;
+     out << rev.confidence;
+     out << rev.relevance;
+     out << rev.originality;
+     out << rev.significance;
+     out << rev.presentation;
+     out << rev.techQuality;
+     out << rev.evaluation;
+     tempQstring = QString::fromStdString(rev.commentsStrength);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev.commentsWeakness);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev.commentsSuggestions);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev.commentsShortPaper);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(rev.commentsBestAward);
+     out << tempQstring;
+     return out;
+  }
+
+  inline QDataStream& operator>>(QDataStream& in, Review* rev)
+  {
+    QString tempQstring;
+    in >> rev->reportID;
+    in >> rev->paperID;
+    in >> rev->reviewerID;
+    in >> rev->overall;
+    in >> rev->confidence;
+    in >> rev->relevance;
+    in >> rev->originality;
+    in >> rev->significance;
+    in >> rev->presentation;
+    in >> rev->techQuality;
+    in >> rev->evaluation;
+    in >> tempQstring;
+    rev->commentsStrength = tempQstring.toStdString();
+    in >> tempQstring;
+    rev->commentsWeakness = tempQstring.toStdString();
+    in >> tempQstring;
+    rev->commentsSuggestions = tempQstring.toStdString();
+    in >> tempQstring;
+    rev->commentsShortPaper = tempQstring.toStdString();
+    in >> tempQstring;
+    rev->commentsBestAward = tempQstring.toStdString();
+    return in;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, Review& rev)
+  {
+    QString tempQstring;
+    in >> rev.reportID;
+    in >> rev.paperID;
+    in >> rev.reviewerID;
+    in >> rev.overall;
+    in >> rev.confidence;
+    in >> rev.relevance;
+    in >> rev.originality;
+    in >> rev.significance;
+    in >> rev.presentation;
+    in >> rev.techQuality;
+    in >> rev.evaluation;
+    in >> tempQstring;
+    rev.commentsStrength = tempQstring.toStdString();
+    in >> tempQstring;
+    rev.commentsWeakness = tempQstring.toStdString();
+    in >> tempQstring;
+    rev.commentsSuggestions = tempQstring.toStdString();
+    in >> tempQstring;
+    rev.commentsShortPaper = tempQstring.toStdString();
+    in >> tempQstring;
+    rev.commentsBestAward = tempQstring.toStdString();
+    return in;
+  }
   int reportID{0};
   int paperID{0};
   int reviewerID{0};

commit e3424c26891d386857924be387350c1d20da765b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 02:58:01 2014 +1100

    added QDataStream operators

diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index 6139e18..88b85aa 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -2,6 +2,8 @@
 #define PERSONAL_INFO_H
 
 #include <string>
+#include <QString>
+#include <QDataStream>
 #include <vector>
 
 
@@ -38,6 +40,66 @@ struct PersonalInfo {
   std::string email{""};
   std::string organisation{""};
   std::string phone{""};
+  
+  inline QDataStream& operator<<(QDataStream& out, PersonalInfo* pers)
+  {
+     QString tempQstring;
+     out << pers->infoID;
+     tempQstring = QString::fromStdString(pers->name);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(pers->email);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(pers->organisation);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(pers->phone);
+     out << tempQstring;
+     return out;
+  }
+  
+  inline QDataStream& operator<<(QDataStream& out, PersonalInfo& pers)
+  {
+     QString tempQstring;
+     out << pers.infoID;
+     tempQstring = QString::fromStdString(pers.name);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(pers.email);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(pers.organisation);
+     out << tempQstring;
+     tempQstring = QString::fromStdString(pers.phone);
+     out << tempQstring;
+     return out;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, PersonalInfo* pers)
+  {
+     QString tempQstring;
+     in >> pers->infoID;
+     in >> tempQstring;
+     pers->name = tempQstring.toStdString();
+     in >> tempQstring;
+     pers->email = tempQstring.toStdString();
+     in >> tempQstring;
+     pers->organisation = tempQstring.toStdString();
+     in >> tempQstring;
+     pers->phone = tempQstring.toStdString();
+     return in;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, PersonalInfo& pers)
+  {
+     QString tempQstring;
+     in >> pers.infoID;
+     in >> tempQstring;
+     pers.name = tempQstring.toStdString();
+     in >> tempQstring;
+     pers.email = tempQstring.toStdString();
+     in >> tempQstring;
+     pers.organisation = tempQstring.toStdString();
+     in >> tempQstring;
+     pers.phone = tempQstring.toStdString();
+     return in;
+  }
 
 };
 #endif

commit 5a6a14c81800d1b9e721510642ef08de70277cf3
Author: 7xe <evans.samuel7@gmail.com>
Date:   Mon Oct 27 02:55:48 2014 +1100

    Update mainwindow.ui

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index 005302f..a463a7a 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -42,7 +42,7 @@
        </rect>
       </property>
       <property name="currentIndex">
-       <number>5</number>
+       <number>1</number>
       </property>
       <widget class="QWidget" name="loginTab">
        <attribute name="title">
@@ -180,7 +180,7 @@
       </widget>
       <widget class="QWidget" name="infoTabAuthor">
        <attribute name="title">
-        <string>Information</string>
+        <string>Info</string>
        </attribute>
        <widget class="QWidget" name="verticalLayoutWidget">
         <property name="geometry">
@@ -794,13 +794,16 @@ p, li { white-space: pre-wrap; }
             </widget>
            </item>
            <item>
-            <widget class="QLineEdit" name="filenameAuth">
+            <widget class="QLabel" name="label_32">
              <property name="text">
-              <string>FILENAME</string>
+              <string>Rebuttal</string>
              </property>
             </widget>
            </item>
            <item>
+            <widget class="QTextEdit" name="rebuttalEntry"/>
+           </item>
+           <item>
             <widget class="QPushButton" name="selectFile">
              <property name="text">
               <string>Select File</string>
@@ -859,7 +862,7 @@ p, li { white-space: pre-wrap; }
           </widget>
          </item>
          <item row="1" column="0">
-          <widget class="QTextBrowser" name="discussionBody_2">
+          <widget class="QTextBrowser" name="discussionBodyReviewer">
            <property name="html">
             <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
@@ -926,40 +929,29 @@ p, li { white-space: pre-wrap; }
          </rect>
         </property>
         <layout class="QGridLayout" name="gridLayout_5">
-         <item row="0" column="1">
-          <widget class="QLabel" name="paperName_3">
-           <property name="text">
-            <string>PAPERNAME</string>
-           </property>
-          </widget>
+         <item row="1" column="2">
+          <widget class="QTextBrowser" name="paperAbstractReviewer"/>
          </item>
-         <item row="1" column="0">
-          <widget class="QLabel" name="mainKey_3">
-           <property name="text">
-            <string>MAINKEY</string>
-           </property>
-          </widget>
+         <item row="1" column="3">
+          <widget class="QListWidget" name="paperKeyListReviewer"/>
          </item>
-         <item row="2" column="0">
-          <widget class="QLabel" name="fileName_2">
+         <item row="0" column="3">
+          <widget class="QLabel" name="mainKeyReviewer">
            <property name="text">
-            <string>FILENAME</string>
+            <string>MAINKEY</string>
            </property>
           </widget>
          </item>
-         <item row="0" column="0">
+         <item row="0" column="2">
           <widget class="QComboBox" name="selectPaperReviewer"/>
          </item>
-         <item row="2" column="1">
+         <item row="2" column="3">
           <widget class="QPushButton" name="downloadReviewer">
            <property name="text">
             <string>Download</string>
            </property>
           </widget>
          </item>
-         <item row="1" column="1">
-          <widget class="QListWidget" name="paperKeyListRev"/>
-         </item>
         </layout>
        </widget>
       </widget>
@@ -996,24 +988,17 @@ p, li { white-space: pre-wrap; }
           <x>250</x>
           <y>20</y>
           <width>511</width>
-          <height>151</height>
+          <height>171</height>
          </rect>
         </property>
         <layout class="QGridLayout" name="gridLayout_6">
          <item row="0" column="0">
-          <widget class="QLabel" name="paperName_4">
+          <widget class="QLabel" name="paperNameMng">
            <property name="text">
             <string>PAPERNAME</string>
            </property>
           </widget>
          </item>
-         <item row="2" column="0">
-          <widget class="QLabel" name="fileName_3">
-           <property name="text">
-            <string>FILENAME</string>
-           </property>
-          </widget>
-         </item>
          <item row="2" column="1">
           <widget class="QPushButton" name="downloadChair">
            <property name="text">
@@ -1022,7 +1007,7 @@ p, li { white-space: pre-wrap; }
           </widget>
          </item>
          <item row="0" column="1">
-          <widget class="QLabel" name="mainKey_4">
+          <widget class="QLabel" name="mainKeyMng">
            <property name="text">
             <string>MAINKEY</string>
            </property>
@@ -1055,6 +1040,9 @@ p, li { white-space: pre-wrap; }
          <item row="1" column="1">
           <widget class="QListWidget" name="paperKeyListMng"/>
          </item>
+         <item row="2" column="0">
+          <widget class="QTextBrowser" name="paperAbstractMng"/>
+         </item>
         </layout>
        </widget>
        <widget class="QWidget" name="verticalLayoutWidget_11">
@@ -1077,7 +1065,7 @@ p, li { white-space: pre-wrap; }
             </widget>
            </item>
            <item row="1" column="0">
-            <widget class="QTextBrowser" name="discussionBody_3">
+            <widget class="QTextBrowser" name="discussionBodyMng">
              <property name="html">
               <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
@@ -1330,7 +1318,7 @@ p, li { white-space: pre-wrap; }
           <x>370</x>
           <y>10</y>
           <width>291</width>
-          <height>381</height>
+          <height>321</height>
          </rect>
         </property>
         <layout class="QVBoxLayout" name="verticalLayout_6">
@@ -1461,6 +1449,46 @@ p, li { white-space: pre-wrap; }
          </item>
         </layout>
        </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>340</y>
+          <width>291</width>
+          <height>51</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_18">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_29">
+           <item>
+            <widget class="QLabel" name="label_3">
+             <property name="text">
+              <string>Words per Post</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_2">
+             <property name="text">
+              <string>Reviewers per Paper</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_30">
+           <item>
+            <widget class="QLineEdit" name="lineEdit_5"/>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="lineEdit_4"/>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
       </widget>
       <widget class="QWidget" name="reviewTab">
        <attribute name="title">
@@ -1472,7 +1500,7 @@ p, li { white-space: pre-wrap; }
           <x>10</x>
           <y>150</y>
           <width>761</width>
-          <height>401</height>
+          <height>416</height>
          </rect>
         </property>
         <layout class="QVBoxLayout" name="verticalLayout_7">
@@ -1658,53 +1686,26 @@ p, li { white-space: pre-wrap; }
           <x>10</x>
           <y>20</y>
           <width>761</width>
-          <height>128</height>
+          <height>130</height>
          </rect>
         </property>
         <layout class="QGridLayout" name="gridLayout">
-         <item row="1" column="0">
-          <widget class="QLabel" name="mainKey">
-           <property name="text">
-            <string>MAINKEY</string>
-           </property>
-          </widget>
-         </item>
-         <item row="2" column="0">
-          <widget class="QLabel" name="fileName">
-           <property name="text">
-            <string>FILENAME</string>
-           </property>
-          </widget>
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReview"/>
          </item>
          <item row="1" column="1">
-          <widget class="QTextBrowser" name="textBrowser">
-           <property name="html">
-            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-           </property>
-          </widget>
+          <widget class="QListWidget" name="paperKeyListReview"/>
          </item>
-         <item row="2" column="1">
-          <widget class="QPushButton" name="downloadReview">
-           <property name="text">
-            <string>Download</string>
-           </property>
-          </widget>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="paperAbstractReview"/>
          </item>
          <item row="0" column="1">
-          <widget class="QLabel" name="paperName">
+          <widget class="QLabel" name="mainKey">
            <property name="text">
-            <string>PAPERNAME</string>
+            <string>MAINKEY</string>
            </property>
           </widget>
          </item>
-         <item row="0" column="0">
-          <widget class="QComboBox" name="selectPaperReview"/>
-         </item>
         </layout>
        </widget>
        <widget class="QPushButton" name="submitReview">

commit 491a0f599b00205b8c92224e213a77ccfee5acc9
Author: 7xe <evans.samuel7@gmail.com>
Date:   Mon Oct 27 02:54:05 2014 +1100

    Update mainwindow.hpp

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index ab8d385..57064a5 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -75,8 +75,6 @@ private slots:
 
     void on_rejectPaper_clicked();//probably are faking this part
 
-    void on_downloadReview_clicked();//see downloadPaper()
-
     void downloadPaper();//server stuff here
 
     void on_submitReview_clicked();//server shit here
@@ -85,6 +83,10 @@ private slots:
 
     void on_addAsReviewer_2_clicked();//server shit here
 
+    void on_reviewersTable_activated(const QModelIndex &index);
+
+    void on_papersTable_itemSelectionChanged();
+
 private:
     void setUser(/*UserType_t*/ int userType);
     void noUser();

commit d4a0d5de04d4cf87ed6ea68492df6c87bc8a1799
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 02:51:53 2014 +1100

    added QDataStream operators

diff --git a/DataAll/PaperSummary.hpp b/DataAll/PaperSummary.hpp
index 52f5f86..ff8d9db 100644
--- a/DataAll/PaperSummary.hpp
+++ b/DataAll/PaperSummary.hpp
@@ -1,6 +1,8 @@
 #ifndef PAPER_SUMMARY_H
 #define PAPER_SUMMARY_H
 
+#include <QString>
+#include <QDataStream>
 #include <string>
 
 struct PaperSummary {
@@ -12,5 +14,40 @@ struct PaperSummary {
 
 	int paperID{0};
 	std::string paperName{""};
+	inline QDataStream& operator<<(QDataStream& out, PaperSummary* paps)
+        {
+           QString tempQstring;
+           out << paps->paperID;
+           tempQstring = QString::fromStdString(paps->paperName);
+           out << tempQstring;
+           return out;
+        }
+        
+        inline QDataStream& operator<<(QDataStream& out, PaperSummary* paps)
+        {
+           QString tempQstring;
+           out << paps.paperID;
+           tempQstring = QString::fromStdString(paps.paperName);
+           out << tempQstring;
+           return out;
+        }
+        
+        inline QDataStream& operator>>(QDataStream& in, PaperSummary* paps)
+        {
+           QString tempQstring;
+           in >> paps->paperID;
+           in >> tempQstring;
+           paps->paperName = tempQstring.toStdString();
+           return in;
+        }
+        
+        inline QDataStream& operator>>(QDataStream& in, PaperSummary& paps)
+        {
+           QString tempQstring;
+           in >> paps.paperID;
+           in >> tempQstring;
+           paps.paperName = tempQstring.toStdString();
+           return in;
+        }
 };
 #endif

commit 4418513d8925cab86cc97023d482b33115d51352
Author: 7xe <evans.samuel7@gmail.com>
Date:   Mon Oct 27 02:51:35 2014 +1100

    field population fns

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index c9ab2ab..e22aa7f 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,7 +1,6 @@
 #include "mainwindow.hpp"
 #include "ui_mainwindow.h"
-#include "../DataAll/Review.hpp"
-//can probably be rid of the above review include
+#include "Review.hpp"
 
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),
@@ -163,33 +162,34 @@ void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/
 
 void MainWindow::on_tabWidget_currentChanged(int index)
 {//change to current text or something
-//    switch(index){
-//    case 1:
-//        populate_infoTabAuthor();
-//        break;
-//    case 2:
-//        populate_infoTabChair();
-//        break;
-//    case 3:
-//        populate_authorTab();
-//        break;
-//    case 4:
-//        populate_reviewerTab();
-//        break;
-//    case 5:
-//        populate_papersTab();
-//        break;
-//    case 6:
-//        populate_usersTab();
-//        break;
-//    case 7:
-//        populate_reviewTab();
-//        break;
-//    default:
-//        break;
-
-
-//    }
+    QString text = ui->tabWidget->tabText(index);
+    switch(text){
+    case "Info":
+        populate_infoTabAuthor();
+        break;
+    case "Information":
+        populate_infoTabChair();
+        break;
+    case "Author":
+        populate_authorTab();
+        break;
+    case "Reviewer":
+        populate_reviewerTab();
+        break;
+    case "Paper Management":
+        populate_papersTab();
+        break;
+    case "User Management":
+        populate_usersTab();
+        break;
+    case "Review":
+        populate_reviewTab();
+        break;
+    default:
+        break;
+
+
+    }
 }
 
 void MainWindow::populate_infoTabAuthor()
@@ -210,7 +210,7 @@ void MainWindow::populate_infoTabAuthor()
     if(loginMgr.currentAuthor != nullptr)
         for(std::vector<std::string>::iterator it = loginMgr.currentAuthor->keywords.begin(); it != loginMgr.currentAuthor->keywords.end(); ++it)
             ui->authKeyList->addItem(*it);
-    if(loginMgr.currentReviewer != nullptr)
+    else if(loginMgr.currentReviewer != nullptr)
         for(std::vector<std::string>::iterator it = loginMgr.currentReviewer->keywords.begin(); it != loginMgr.currentReviewer->keywords.end(); ++it)
             ui->authKeyList->addItem(*it);
 
@@ -229,8 +229,8 @@ void MainWindow::populate_infoTabAuthor()
 
 void MainWindow::populate_infoTabChair()
 {
-    PCChair* user = loginMgr.currentPCChair;
-    Conference* conf = loginMgr.activeConference;
+    PCChair* user = loginMgr->currentPCChair;
+    Conference* conf = loginMgr->getActiveConference();
 
     ui->username->setText(user->username);
     ui->userid->setText(user->getUserId());
@@ -254,47 +254,116 @@ void MainWindow::populate_infoTabChair()
 
 void MainWindow::populate_authorTab()
 {
-    Author* user = loginMgr.currentAuthor;
+    Author* user;
+    if(loginMgr->currentAuthor != nullptr)
+        user = loginMgr->currentAuthor;
+    else if(loginMgr->currentReviewer != nullptr)
+        user = loginMgr->currentReviewer;
     std::vector<PaperSummary> papers = user->getOwnPapers();
-    std::vector<std::string> keys = user->getCurrentPaper().getKeywords();
-    std::vector<User> authors = user->getCurrentPaper().getAuthors();
+    std::vector<std::string> keys = user->getCurrentPaper().keywords;
+    std::vector<PersonalInfo> authors = user->getCurrentPaper().authors;
 
     for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
         ui->selectPaperAuthor->addItem(it->paperName);
 
-    ui->paperAbstract->setText(user->getCurrentPaper().getAbstract());
+    ui->paperAbstract->setText(user->getCurrentPaper().abstract);
     for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
         ui->paperKeyListAuth->addItem(*it);
 
-    for(std::vector<User>::iterator it = authors.begin(); it != authors.end(); ++it){
+    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
         int rows = ui->authorsTable->rowCount();
         ui->authorsTable->insertRow(rows);
-        QTableWidgetItem* newItem = new QTableWidgetItem(it->getName());
+        QTableWidgetItem* newItem = new QTableWidgetItem(it->name);
         ui->authorsTable->setItem(rows, 0, newItem);
-        newItem = new QTableWidgetItem(it->getName());
+        newItem = new QTableWidgetItem(it->email);
         ui->authorsTable->setItem(rows, 1, newItem);
-        newItem = new QTableWidgetItem(it->getOrganisation());
+        newItem = new QTableWidgetItem(it->organisation);
         ui->authorsTable->setItem(rows, 2, newItem);
-        newItem = new QTableWidgetItem(it->getPhone());
+        newItem = new QTableWidgetItem(it->phone);
         ui->authorsTable->setItem(rows, 3, newItem);
     }
-
-    ui->filenameAuth->setText(user->getCurrentPaper().getFname());
+    for(std::vector<string>::iterator it = loginMgr->getActiveConference()->keywords.begin(); it != loginMgr->getActiveConference()->keywords.end(); ++it){
+        ui->selectMainKey->addItem(*it);
+    }
 }
 
 void MainWindow::populate_papersTab()
 {
+    PCChair* user = loginMgr->currentPCChair;
+    Paper* paper = &user->getCurrentPaper();
+    std::vector<Review>* reviews = &paper->reviews;
+    std::vector<PersonalInfo>* authors = user->getCurrentPaper().authors;
+    std::vector<PersonalInfo> reviewers;
+
 
+    ui->paperNameMng->setText(paper->title);
+    ui->mainKeyMng->setText(paper->confKeyword);
+
+    ui->paperAbstractMng->setText(user->getCurrentPaper().abstract);
+    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+        ui->paperKeyListMng->addItem(*it);
+
+    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+        int rows = ui->authorsTableMng->rowCount();
+        ui->authorsTableMng->insertRow(rows);
+        QTableWidgetItem* newItem = new QTableWidgetItem(it->name);
+        ui->authorsTableMng->setItem(rows, 0, newItem);
+        newItem = new QTableWidgetItem(it->email);
+        ui->authorsTableMng->setItem(rows, 1, newItem);
+        newItem = new QTableWidgetItem(it->organisation);
+        ui->authorsTableMng->setItem(rows, 2, newItem);
+        newItem = new QTableWidgetItem(it->phone);
+        ui->authorsTableMng->setItem(rows, 3, newItem);
+    }
 }
 
 void MainWindow::populate_reviewerTab()
 {
+    Reviewer* user = loginMgr->currentReviewer;
+    std::vector<PaperSummary> papers;
+    std::vector<std::string> keys;
+    if(loginMgr->getActiveConference()->isBeforePaperDeadline)
+        papers = user->getPapersToBid();
+    else
+        papers = user->getAllocatedPapers();
+    if(user->getCurrentPaper() == nullptr && !papers.empty()){
+        user->setCurrentPaper(papers.at(0));
+        keys = user->getCurrentPaper().getKeywords();
+    }
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperReviewer->addItem(it->paperName);
 
+    ui->paperAbstractReviewer->setText(user->getCurrentPaper().abstract);
+    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+        ui->paperKeyListReviewer->addItem(*it);
+    ui->mainKeyReviewer->setText(user->getCurrentPaper().confKeyword);
 }
 
 void MainWindow::populate_reviewTab()
 {
+    Reviewer* user = loginMgr->currentReviewer;
+    std::vector<PaperSummary> papers = user->getAllocatedPapers();
+    std::vector<std::string> keys = user->getCurrentPaper().keywords;
+    std::vector<Review> reviews = user->getReviews();
+
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperReview->addItem(it->paperName);
+
+    ui->paperAbstractReviewer->setText(user->getCurrentPaper().abstract);
+    ui->mainKey->setText(user->getCurrentPaper().confKeyword);
+    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+        ui->paperKeyListReview->addItem(*it);
+
+    for(std::vector<Reviews>::iterator it = reviews.begin(); it != reviews.end(); ++it){
+        if(it->paperID == user->getCurrentPaper().paperID){
+            ui->commentsBestAward->setText(it->commentsBestAward);
+            ui->commentsShortPaper->setText(it->commentsShortPaper);
+            ui->commentsStrengths->setText(it->commentsStrength);
+            ui->commentsWeaknesses->setText(it->commentsWeakness);
+            ui->commentsSuggestions->setText(it->commentsSuggestions);
+        }
 
+    }
 }
 
 void MainWindow::populate_usersTab()
@@ -342,11 +411,6 @@ void MainWindow::on_downloadChair_clicked()
     downloadPaper();
 }
 
-void MainWindow::on_downloadReview_clicked()
-{
-    downloadPaper();
-}
-
 void MainWindow::on_submitPosts_clicked()
 {
     QString post = ui->postBody->toPlainText();
@@ -388,8 +452,6 @@ void MainWindow::on_submitReview_clicked()
     rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
     rev.paperID = loginMgr->getCurrentUser()->getCurrentPaper.paperID;
     rev.reviewerID = loginMgr->getCurrentUser()->getUserID();
-    //probably going to move some of the above functionality to elsewhere
-    
 
     //submit review to the server
     //no response from server
@@ -413,3 +475,23 @@ void MainWindow::on_addAsReviewer_2_clicked()
     //send paper id and user id to server to add a paper assigned table entry
     //no response from server
 }
+
+void MainWindow::on_papersTable_itemSelectionChanged()
+{
+
+    std::vector<PersonalInfo> authors = loginMgr->currentPCChair->getCurrentPaper().authors;
+
+    for(std::vector<PersonalInfo>::iterator it = authors.begin(); it != authors.end(); ++it){
+        int rows = ui->reviewersTable->rowCount();
+        ui->reviewersTable->insertRow(rows);
+        QTableWidgetItem* newItem = new QTableWidgetItem(it->name);
+        ui->reviewersTable->setItem(rows, 0, newItem);
+        newItem = new QTableWidgetItem(it->email);
+        ui->reviewersTable->setItem(rows, 1, newItem);
+        newItem = new QTableWidgetItem(it->organisation);
+        ui->reviewersTable->setItem(rows, 2, newItem);
+        newItem = new QTableWidgetItem(it->phone);
+        ui->reviewersTable->setItem(rows, 3, newItem);
+    }
+
+}

commit d9a3d79838f638ea02a2fc62ec0f26de1018d650
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 02:44:56 2014 +1100

    added QDataStream operators

diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 6ad5083..13e2f3b 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -7,6 +7,9 @@
 //#include "User.hpp"
 #include "../DataAll/PersonalInfo.hpp"
 
+#include <QString>
+#include <QVector>
+#include <QDataStream>
 #include <vector>
 
 struct Paper {
@@ -61,8 +64,143 @@ struct Paper {
     std::vector<PersonalInfo> authors;
     std::vector<std::string> keywords;
     std::string confKeyword;
-
     Discussion discussion;
     std::vector<Review> reviews;
+    
+    inline QDataStream& operator<<(QDataStream& out, Paper* pap)
+    {
+        QString tempQstring;
+        QVector<QString> tempQvector;
+        QVector<PersonalInfo> tempQvectorP;
+        QVector<Review> tempQvectorR;
+        out << pap->paperID;
+        out << pap->confID;
+        out << pap->leadAuthorID;
+        tempQstring = QString::fromStdString(pap->title);
+        out << tempQstring;
+        tempQstring = QString::fromStdString(pap->abstract);
+        out << tempQstring;
+        for (unsigned int i = 0; i < pap->authors.size(); ++i)
+        {
+          tempQvectorP.append(pap->authors[i]);
+        }
+        out << tempQvectorP;
+        tempQvectorP.clear();
+        for (unsigned int i = 0; i < pap->keywords.size(); ++i)
+        {
+          tempQstring = QString::fromStdString(conf->keywords[i]);
+          tempQvector.append(tempQstring);
+        }
+        out << tempQvector;
+        tempQvector.clear();
+        tempQstring = QString::fromStdString(pap->confKeyword);
+        out << tempQstring;
+        out << pap->dicussion;
+        for (unsigned int i = 0; i < pap->reviews.size(); ++i)
+        {
+          tempQvectorR.append(pap->reviews[i]);
+        }
+        out << tempQvectorR;
+        tempQvectorR.clear();
+        return out;
+    }
+    
+    inline QDataStream& operator<<(QDataStream& out, Paper& pap)
+    {
+        QString tempQstring;
+        QVector<QString> tempQvector;
+        QVector<PersonalInfo> tempQvectorP;
+        QVector<Review> tempQvectorR;
+        out << pap.paperID;
+        out << pap.confID;
+        out << pap.leadAuthorID;
+        tempQstring = QString::fromStdString(pap.title);
+        out << tempQstring;
+        tempQstring = QString::fromStdString(pap.abstract);
+        out << tempQstring;
+        for (unsigned int i = 0; i < pap.authors.size(); ++i)
+        {
+          tempQvectorP.append(pap.authors[i]);
+        }
+        out << tempQvectorP;
+        tempQvectorP.clear();
+        for (unsigned int i = 0; i < pap.keywords.size(); ++i)
+        {
+          tempQstring = QString::fromStdString(conf.keywords[i]);
+          tempQvector.append(tempQstring);
+        }
+        out << tempQvector;
+        tempQvector.clear();
+        tempQstring = QString::fromStdString(pap.confKeyword);
+        out << tempQstring;
+        out << pap.dicussion;
+        for (unsigned int i = 0; i < pap.reviews.size(); ++i)
+        {
+          tempQvectorR.append(pap.reviews[i]);
+        }
+        out << tempQvectorR;
+        tempQvectorR.clear();
+        return out;
+    }
+    
+    inline QDataStream& operator>>(QDataStream& in, Paper* pap)
+    {
+        QString tempQstring;
+        QVector<QString> tempQvector;
+        QVector<PersonalInfo> tempQvectorP;
+        QVector<Review> tempQvectorR;
+        in >> pap->paperID;
+        in >> pap->confID;
+        in >> pap->leadAuthorID;
+        in >> tempQstring;
+        pap->title = tempQstring.toStdString();
+        in >> tempQstring;
+        pap->abstract = tempQstring.toStdString();
+        in >> tempQvectorP;
+        for (unsigned int i = 0; i < tempQvectorP.size(); ++i)
+          pap->authors.push_back(tempQvectorP[i]);
+        tempQvector.clear();
+        in >> tempQvector;
+        for (unsigned int i = 0; i < tempQvector.size(); ++i)
+          pap->keywords.push_back(tempQvector[i].toStdString());
+        tempQvector.clear();
+        in >> tempQstring;
+        pap->confKeyword = tempQstring.toStdString();
+        in >> pap->discussion;
+        in >> tempQvectorR;
+        for (unsigned int i = 0; i < tempQvectorR.size(); ++i)
+          pap->reviews.push_back(tempQvectorR[i]);
+        tempQvector.clear();
+    }
+    
+    inline QDataStream& operator>>(QDataStream& in, Paper& pap)
+    {
+        QString tempQstring;
+        QVector<QString> tempQvector;
+        QVector<PersonalInfo> tempQvectorP;
+        QVector<Review> tempQvectorR;
+        in >> pap.paperID;
+        in >> pap.confID;
+        in >> pap.leadAuthorID;
+        in >> tempQstring;
+        pap.title = tempQstring.toStdString();
+        in >> tempQstring;
+        pap.abstract = tempQstring.toStdString();
+        in >> tempQvectorP;
+        for (unsigned int i = 0; i < tempQvectorP.size(); ++i)
+          pap.authors.push_back(tempQvectorP[i]);
+        tempQvector.clear();
+        in >> tempQvector;
+        for (unsigned int i = 0; i < tempQvector.size(); ++i)
+          pap.keywords.push_back(tempQvector[i].toStdString());
+        tempQvector.clear();
+        in >> tempQstring;
+        pap.confKeyword = tempQstring.toStdString();
+        in >> pap.discussion;
+        in >> tempQvectorR;
+        for (unsigned int i = 0; i < tempQvectorR.size(); ++i)
+          pap.reviews.push_back(tempQvectorR[i]);
+        tempQvector.clear();
+    }
 };
 #endif

commit 35da53154cbaf6021b0cdbd3fe6a3ddfc13c15f8
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 02:20:30 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index f258b7e..c29e69b 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -6,7 +6,6 @@ CREATE TABLE `UserType` (
 	`userID` int NOT NULL,
 	`confID` int NOT NULL,
 	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
-	`paidAmount` float NOT NULL DEFAULT 0,
 	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
@@ -118,6 +117,8 @@ CREATE TABLE `AcceptedPapers` (
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
+ALTER TABLE `AcceptedPaper` ADD UNIQUE `unique_index`(`paperID`, `confID`);
+
 CREATE TABLE `paperAuthors` (
 	`paperID` int NOT NULL,
 	`authorID` int NOT NULL,

commit f4011fbc7d38b477f7f18f34e7f4811d46368ba1
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 02:20:15 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 6d45323..738c59d 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -49,6 +49,17 @@ public:
         Paper fetchPaper(int key) throw (const char*);
         void createPaper(Paper paper, std::string pdf);
         void updatePaper(Paper paper);
+	void addPaperAccepted(int paperID, int confID) throw (const char*);
+	std::vector<int> fetchPaperAccepted(int confID) throw (const char*);
+
+	// REVIEW
+	Review fetchReview(int paperID, int reviewerID, int confID) throw (const char*);
+	void modifyReview(Review review, int confID) throw (const char*);
+
+	// DISCUSSION
+	Discussion fetchDiscussion(int paperID, int confID) throw (const char*);
+	DiscussionPost fetchRebuttal(int paperID, int userID, int confID) throw (const char*);
+	void createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*);
 
 	// ALGO
 	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);
@@ -63,6 +74,7 @@ public:
 	std::vector<int> getPaperIDsForConf(int confID) throw (const char*);	
 	std::vector<int> getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*);
 	std::vector<int> getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*);
+	std::vector<int> getUserIDsForConf(int confID) throw (const char*);
 	
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);

commit ae41fa6fcde934732d7ef5da8021db23365b3209
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 02:20:03 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 1c51c4a..60338f2 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1195,21 +1195,17 @@ void Database::updatePaper(Paper paper)
 
         const char* deleteKeywords = "DELETE FROM PaperKeywords WHERE paperID=?";
 	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-	const char* insertDiscuss = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
-	const char* insertReview = "INSERT INTO Review(paperID, reviewerID, confID, overall, confidence, relevance, originality, significance, presentation, techQuality, evaluation, commentsStrength, commentsWeakness, commentsSuggestions, commentsShortPaper, commentsBestAward) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 
-	const char* updateReview = "UPDATE Review SET paperID=?, reviewerID=?, confID=?, overall=?, confidence=?, relevance=?, originality=?, significance=?, presentation=?, techQuality=?, evaluation=?, commentsStrength=?, commentsWeakness=?, commentsSuggestions=?, commentsShortPaper=?, commentsBestAward=? WHERE reportID=?"; 
-
 
         // =======================================
         // Paper
         sql::PreparedStatement *pstmt = NULL;
         pstmt = dbcon->prepareStatement(updatePaper);
         pstmt->setInt(1, paper.leadAuthorID);
-        pstmt->setInt(1, paper.confID);
+        pstmt->setInt(2, paper.confID);
         pstmt->setString(3, paper.confKeyword);
         pstmt->setString(4, paper.title);
         pstmt->setString(5, paper.abstract);
-        pstmt->setInt(3, paper.paperID);
+        pstmt->setInt(6, paper.paperID);
 
         pstmt->executeUpdate();
 
@@ -1268,93 +1264,275 @@ void Database::updatePaper(Paper paper)
       		        pstmt->executeUpdate();
 		}
       		delete pstmt;
-
       	}
+}
+
+void Database::addPaperAccepted(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertAccepted = "INSERT INTO AcceptedPapers VALUES(?, ?)";
 
         // =======================================
-        // Discussion
-      	if (paper.discussion.discussion.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertDiscuss);
-		std::list<DiscussionPost>::const_iterator it;
-      		for (it = paper.discussion.discussion.begin(); it != paper.discussion.discussion.end(); it ++)
-		{
-			DiscussionPost discuss = *it;	
+        // Paper Accepted
+        sql::PreparedStatement *pstmt = NULL;
 
-        		if (discuss.postID==0)
-			{
-				pstmt->setInt(1, paper.paperID);
-				pstmt->setInt(2, paper.confID);
-				pstmt->setInt(3, discuss.reviewerID);
-				pstmt->setString(4, discuss.comment);
+	pstmt = dbcon->prepareStatement(insertAccepted);
+        pstmt->setInt(1, confID);
+        pstmt->setInt(2, paperID);
 
-      		        	pstmt->executeUpdate();
-			}
-		}
-      		delete pstmt;
+        pstmt->executeUpdate();
 
-      	}
+	delete pstmt;
+}
+
+std::vector<int> Database::fetchPaperAccepted(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAccepted = "SELECT paperID FROM AcceptedPapers WHERE confID=?";
+
+        // =======================================
+        // Paper Accepted
+	std::vector<int> vec;
+
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+
+	pstmt = dbcon->prepareStatement(getAccepted);
+        pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+	delete pstmt;
+	delete rs;
+}
 
+Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReview = "SELECT * FROM Review WHERE (paperID=? and reviewerID=? and confID=?)";
+        // =======================================
+        // Review
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReview);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, reviewerID);
+	pstmt->setInt(3, confID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Review();
+	}
+
+        int reportID = rs->getInt(1);
+        int overall = rs->getInt(5);
+        int confidence = rs->getInt(6);
+        int relevance = rs->getInt(7);
+        int originality = rs->getInt(8);
+        int significance = rs->getInt(9);
+        int presentation = rs->getInt(10);
+        int techQuality = rs->getInt(11);
+        int evaluation = rs->getInt(12);
+        std::string commentsStrength = rs->getString(13);
+        std::string commentsWeakness = rs->getString(14);
+        std::string commentsSuggestions = rs->getString(15);
+        std::string commentsShortPaper = rs->getString(16);
+        std::string commentsBestAward = rs->getString(17);
+
+	Review review(reportID
+		paperID, 
+		reviewerID, 
+		overall, 
+		confidence, 
+		relevance, 
+		originality, 
+		significance, 
+		presentation, 
+		techQuality, 
+		evaluation, 
+		commentsStrength, 
+		commentsWeakness, 
+		commentsSuggestions, 
+		commentsShortPaper, 
+		commentsBestAward);
+
+        delete rs;
+        delete pstmt;
+
+	return review
+}
+
+void Database::modifyReview(Review review, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertReview = "INSERT INTO Review(paperID, reviewerID, confID, overall, confidence, relevance, originality, significance, presentation, techQuality, evaluation, commentsStrength, commentsWeakness, commentsSuggestions, commentsShortPaper, commentsBestAward) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 
+	const char* updateReview = "UPDATE Review SET paperID=?, reviewerID=?, confID=?, overall=?, confidence=?, relevance=?, originality=?, significance=?, presentation=?, techQuality=?, evaluation=?, commentsStrength=?, commentsWeakness=?, commentsSuggestions=?, commentsShortPaper=?, commentsBestAward=? WHERE reportID=?"; 
         // =======================================
         // Reviews
-      	if (paper.reviews.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertReview);
-		std::vector<Review>::const_iterator it;
-      		for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertReview);
+	std::vector<Review>::const_iterator it;
+	for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
+	{
+		Review review = *it;	
+
+		if (review.reportID==0)
 		{
-			Review review = *it;	
+			pstmt = dbcon->prepareStatement(insertReview);
 
-        		if (review.reportID==0)
-			{
-      				pstmt = dbcon->prepareStatement(insertReview);
-
-				pstmt->setInt(1, paper.paperID);
-				pstmt->setInt(2, review.reviewerID);
-				pstmt->setInt(3, paper.confID);
-				pstmt->setInt(4, review.overall);
-				pstmt->setInt(5, review.confidence);
-				pstmt->setInt(6, review.relevance);
-				pstmt->setInt(7, review.originality);
-				pstmt->setInt(8, review.significance);
-				pstmt->setInt(9, review.presentation);
-				pstmt->setInt(10, review.techQuality);
-				pstmt->setInt(11, review.evaluation);
-				pstmt->setString(12, review.commentsStrength);
-				pstmt->setString(13, review.commentsWeakness);
-				pstmt->setString(14, review.commentsSuggestions);
-				pstmt->setString(15, review.commentsShortPaper);
-				pstmt->setString(16, review.commentsBestAward);
-
-      		        	pstmt->executeUpdate();
-			}
-			else
-			{
-      				pstmt = dbcon->prepareStatement(updateReview);
-
-				pstmt->setInt(1, paper.paperID);
-				pstmt->setInt(2, review.reviewerID);
-				pstmt->setInt(3, paper.confID);
-				pstmt->setInt(4, review.overall);
-				pstmt->setInt(5, review.confidence);
-				pstmt->setInt(6, review.relevance);
-				pstmt->setInt(7, review.originality);
-				pstmt->setInt(8, review.significance);
-				pstmt->setInt(9, review.presentation);
-				pstmt->setInt(10, review.techQuality);
-				pstmt->setInt(11, review.evaluation);
-				pstmt->setString(12, review.commentsStrength);
-				pstmt->setString(13, review.commentsWeakness);
-				pstmt->setString(14, review.commentsSuggestions);
-				pstmt->setString(15, review.commentsShortPaper);
-				pstmt->setString(16, review.commentsBestAward);
-				pstmt->setInt(17, review.reportID);
-
-      		        	pstmt->executeUpdate();
-			}
+			pstmt->setInt(1, paper.paperID);
+			pstmt->setInt(2, review.reviewerID);
+			pstmt->setInt(3, paper.confID);
+			pstmt->setInt(4, review.overall);
+			pstmt->setInt(5, review.confidence);
+			pstmt->setInt(6, review.relevance);
+			pstmt->setInt(7, review.originality);
+			pstmt->setInt(8, review.significance);
+			pstmt->setInt(9, review.presentation);
+			pstmt->setInt(10, review.techQuality);
+			pstmt->setInt(11, review.evaluation);
+			pstmt->setString(12, review.commentsStrength);
+			pstmt->setString(13, review.commentsWeakness);
+			pstmt->setString(14, review.commentsSuggestions);
+			pstmt->setString(15, review.commentsShortPaper);
+			pstmt->setString(16, review.commentsBestAward);
+
+	        	pstmt->executeUpdate();
 		}
-      		delete pstmt;
-      	}
+		else
+		{
+			pstmt = dbcon->prepareStatement(updateReview);
+
+			pstmt->setInt(1, paper.paperID);
+			pstmt->setInt(2, review.reviewerID);
+			pstmt->setInt(3, paper.confID);
+			pstmt->setInt(4, review.overall);
+			pstmt->setInt(5, review.confidence);
+			pstmt->setInt(6, review.relevance);
+			pstmt->setInt(7, review.originality);
+			pstmt->setInt(8, review.significance);
+			pstmt->setInt(9, review.presentation);
+			pstmt->setInt(10, review.techQuality);
+			pstmt->setInt(11, review.evaluation);
+			pstmt->setString(12, review.commentsStrength);
+			pstmt->setString(13, review.commentsWeakness);
+			pstmt->setString(14, review.commentsSuggestions);
+			pstmt->setString(15, review.commentsShortPaper);
+			pstmt->setString(16, review.commentsBestAward);
+			pstmt->setInt(17, review.reportID);
+
+	        	pstmt->executeUpdate();
+		}
+	}
+	delete pstmt;
+}
+
+Discussion Database::fetchDiscussion(int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getDiscussion = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
+        // =======================================
+        // Discussion
+        std::list<DiscussionPost> discussion;
+	
+	pstmt = dbcon->prepareStatement(getDiscussion);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string comment = rs->getString(1);
+		int reviewerID = rs->getInt(2);
+		int commentID = rs->getInt(3);
+		DiscussionPost discuss(comment, reviewerID, commentID);
+                discussion.push_back(discuss);
+        }
+
+        delete rs;
+        delete pstmt;
+}
+
+DiscussionPost Database::fetchRebuttal(int paperID, int userId, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getDiscussionPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and reviewerID=? and confID=?)";
+
+        // =======================================
+        // Discussion Post
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getDiscussion);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, userID);
+	pstmt->setInt(3, confID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return DiscussionPost();
+	}
+
+	std::string comment = rs->getString(1);
+	int reviewerID = rs->getInt(2);
+	int commentID = rs->getInt(3);
+	DiscussionPost discuss(comment, reviewerID, commentID);
+
+        delete rs;
+        delete pstmt;
+	
+	return discuss
+}
+
+void Database::createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertDiscussPost = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
+        // =======================================
+        // Discussion
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertDiscussPost);
+	
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+	pstmt->setInt(3, discussionPost.reviewerID);
+	pstmt->setString(4, discussionPost.comment);
+
+	pstmt->executeUpdate();
+
+	delete pstmt;
 }
 
 std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
@@ -1678,6 +1856,35 @@ std::vector<int> Database::getPaperIDsForLeadAuthor(int leadAuthorID, int confID
 	return vec;
 }
 
+std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserIDs = "SELECT userID FROM UserType WHERE confID=?";
+
+        // =======================================
+        // User ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserIDs);
+	pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
 
 
 //

commit f77946a989d5ec30b222c319d38a20db84c4a73e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 02:12:10 2014 +1100

    added QDataStream operators

diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
index 5d9add6..c1cfae7 100644
--- a/DataAll/DiscussionPost.hpp
+++ b/DataAll/DiscussionPost.hpp
@@ -1,5 +1,8 @@
 #ifndef DISCUSSION_POST_H
 #define DISCUSSION_POST_H
+
+#include <QString>
+#include <QDataStream>
 #include <string>
 
 struct DiscussionPost {
@@ -19,6 +22,46 @@ struct DiscussionPost {
                  reviewerID(ireviewerID)
                  { }
 
+  inline QDataStream& operator<<(QDataStream& out, DiscussionPost* discp)
+  {
+    QString tempQstring;
+    out << discp->reviewerID;
+    out << discp->postID;
+    tempQstring = QString::fromStdString(discp->comment);
+    out << tempQstring;
+    return out;
+  }
+  
+  inline QDataStream& operator<<(QDataStream& out, DiscussionPost& discp)
+  {
+    QString tempQstring;
+    out << discp.reviewerID;
+    out << discp.postID;
+    tempQstring = QString::fromStdString(discp.comment);
+    out << tempQstring;
+    return out;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, DiscussionPost* discp)
+  {
+    QString tempQstring;
+    in >> discp->reviewerID;
+    in >> discp->postID;
+    in >> tempQstring;
+    discp->comment = tempQstring.toStdString();
+    return in;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, DiscussionPost& discp)
+  {
+    QString tempQstring;
+    in >> discp.reviewerID;
+    in >> discp.postID;
+    in >> tempQstring;
+    discp.comment = tempQstring.toStdString();
+    return in;
+  }
+  
   std::string comment{""};
   int reviewerID{0};
   int postID{0};

commit a2f751f8fdcd8bdf2d478c66283cc388b0620b54
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 02:02:33 2014 +1100

    added QDataStream operators

diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index 50f82e1..f31ac07 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -4,6 +4,8 @@
 #include "../DataAll/DiscussionPost.hpp"
 
 #include <list>
+#include <QList>
+#include <QDataStream>
 
 struct Discussion {
   Discussion() { }
@@ -14,5 +16,45 @@ struct Discussion {
     discussion = in.discussion;
   }
   std::list<DiscussionPost> discussion;
+  inline QDataStream& operator<<(QDataStream& out, Discussion* disc)
+  {
+    QList<DiscussionPost> tempQList;
+     for (unsigned int i = 0; i < disc->discussion.size(); ++i)
+       tempQList.append(QString::fromStdString(disc->discussion[i]));
+     out << tempQList;
+     tempQList.clear();
+
+     return out;
+  }
+  
+  inline QDataStream& operator<<(QDataStream& out, Discussion& disc)
+  {
+    QList<DiscussionPost> tempQList;
+     for (unsigned int i = 0; i < disc.discussion.size(); ++i)
+       tempQList.append(QString::fromStdString(disc.discussion[i]));
+     out << tempQList;
+     tempQList.clear();
+     return out;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, Discussion* disc)
+  {
+    QList<DiscussionPost> tempQList;
+    in >> tempQList;
+    for (unsigned int i = 0; i < tempQList.size(); ++i)
+      disc->discussion.push_back(tempQList[i].toStdString());
+    tempQList.clear();
+    return in;
+  }
+  
+  inline QDataStream& operator>>(QDataStream& in, Discussion& disc)
+  {
+    QList<DiscussionPost> tempQList;
+    in >> tempQList;
+    for (unsigned int i = 0; i < tempQList.size(); ++i)
+      disc.discussion.push_back(tempQList[i].toStdString());
+    tempQList.clear();
+    return in;
+  }
 };
 #endif

commit 3cc1a61840199f70ad8c8cc76cfefd45ce9e857b
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 02:01:00 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index 1317d4d..f258b7e 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -1,2043 +1,195 @@
-#include "Database.hpp"
-
-#include "cppconn/driver.h"
-#include "cppconn/exception.h"
-#include "cppconn/resultset.h"
-#include "cppconn/statement.h"
-#include "cppconn/prepared_statement.h"
-
-#include <cstring>
-#include <stdlib.h>
-#include <iostream>
-
-#include <vector>
-#include <map>
-#include <string>
-#include <list>
-
-using namespace sql;
-
-const char* databaseStr = "localhost";
-const char* databaseUserName = "user";
-const char* databaseUserPassword = "user";
-const char* databaseSchema = "csci222";
-
-const char* noDB = "Sorry, but was unable to open database so operation failed";
-
-const char* prepareFailed = "Failure when preparing statement";
-const char* bindFailed = "Failure when binding arguments";
-const char* writeFailed = "Failure when writing to database";
-
-Database::Database()
-{
-        // Constructors should always succeed. But suppose it failed and
-        // the database couldn't be created?
-        invalid = true;
-        driver = get_driver_instance();
-        try {
-                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
-        } catch (sql::SQLException &e) {
-                // Failed
-                return;
-        }
-        dbcon->setSchema(databaseSchema);
-        // It's ok
-        invalid = false;
-}
-
-Database::~Database()
-{
-        if (!invalid) {
-                this->close();
-        }
-}
-
-void Database::close()
-{
-        if (!invalid) {
-                dbcon->close();
-                delete dbcon;
-        }
-        invalid = true;
-}
-
-User Database::fetchUser(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	// Add information on user from database to User object
-	const char* getUser = "SELECT * FROM UserAccount where username=?";
-	const char* getPersonalInfo = "SELECT * FROM PersonalInfo where userID=?";
-	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
-
-        // =======================================
-        // user account
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUser);
-	pstmt->setString(1, key);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return User();
-	}
-
-        int userID = rs->getInt(1);
-        std::string username = rs->getString(2);
-        std::string password = rs->getString(3);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Personal Info
-	pstmt = dbcon->prepareStatement(getPersonalInfo);
-	pstmt->setInt(1, userID);
-	rs = pstmt->executeQuery();
-	haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return User();
-	}
-
-        std::string name = rs->getString(3);
-	std::string email = rs->getString(4);
-	std::string organisation = rs->getString(5);
-	std::string phone = rs->getString(6);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise Area
-        std::vector<std::string> vec;
-	
-	pstmt = dbcon->prepareStatement(getExpertise);
-	pstmt->setInt(1, userID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string expertise = rs->getString(1);
-                vec.push_back(expertise);
-        }
-
-        User user(
-		username,
-		name,
-		email,
-		organisation,
-		phone,
-		password,
-		userID,
-		vec);
-
-        delete rs;
-        delete pstmt;
-	
-	return user;
-}
-
-bool Database::existsUserName(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* countUser = "SELECT COUNT(*) FROM UserAccount WHERE username=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countUser);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count == 1;
-}
-
-void Database::putUser(std::string key, User user) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-        if (this->existsUserName(key))
-	{
-                this->updateUser(user);
-        }
-	else
-	{
-        	this->createUser(user);
-	}
-}
-
-void Database::createUser(User user)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* insertPersonalInfo = "INSERT INTO PersonalInfo(userID, name, email, organisation, phone) VALUES(NULL, ?, ?, ?, ?)";
-	const char* insertUser = "INSERT INTO UserAccount(username, password, infoID) VALUES(?, ?, LAST_INSERT_ID())";
-	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() where infoID=(SELECT infoID FROM UserAccount where userID=LAST_INSERT_ID())";
-	const char* getUserID = "SELECT LAST_INSERT_ID()";
-	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Personal Info
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertPersonalInfo);
-        pstmt->setString(1, user.name);
-        pstmt->setString(2, user.email);
-        pstmt->setString(3, user.organisation);
-        pstmt->setString(4, user.phone);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // user account
-        pstmt = dbcon->prepareStatement(insertUser);
-        pstmt->setString(1, user.userName);
-        pstmt->setString(2, user.password);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Personal Info Update
-        pstmt = dbcon->prepareStatement(updatePIuserID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Store userID
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUserID);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int userID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise
-      	if (user.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertExpertise);
-		std::vector<std::string>::const_iterator it;
-      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			
-			pstmt->setInt(1, userID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
-      		delete pstmt;
-
-      	}
-}
-
-void Database::updateUser(User user)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getUserID = "SELECT userID FROM UserAccount where username = ?";
-	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
-	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
-
-        const char* deleteExpertise = "DELETE FROM ExpertiseArea WHERE userID=?";
-	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Store userID
-        sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUserID);
-        pstmt->setString(1, user.userName);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int userID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // user account
-        pstmt = dbcon->prepareStatement(updateUser);
-        pstmt->setString(1, user.userName);
-        pstmt->setString(2, user.password);
-        pstmt->setInt(3, userID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Personal Info
-        pstmt = dbcon->prepareStatement(updatePersonalInfo);
-        pstmt->setString(1, user.name);
-        pstmt->setString(2, user.email);
-        pstmt->setString(3, user.organisation);
-        pstmt->setString(4, user.phone);
-        pstmt->setInt(5, userID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Expertise Delete
-        pstmt = dbcon->prepareStatement(deleteExpertise);
-        pstmt->setInt(1, userID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Expertise Insert
-      	if (user.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertExpertise);
-		std::vector<std::string>::const_iterator it;
-      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			pstmt->setInt(1, userID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
-      		delete pstmt;
-
-      	}
-}
-
-std::vector<int> Database::allUserIDs()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<int> vptr;
-
-        const char* selectall = "select userID from UserAccount";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                int anid = rs->getInt(1);
-                vptr.push_back(anid);
-        }
-
-        return vptr;
-}
-
-std::vector<std::string> Database::allUserNames()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> vptr;
-
-        const char* selectall = "select username from UserAccount";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string aname = rs->getString(1);
-                vptr.push_back(aname);
-        }
-
-        return vptr;
-}
-
-bool Database::existsKeyword(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* countKeyword = "SELECT COUNT(*) FROM Keywords WHERE keyword=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countKeyword);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count == 1;
-}
-
-void Database::addKeyword(std::string key) throw (const char*)
-{
-	if (invalid)
-		throw (noDB);
-
-	const char* insertKeyword = "INSERT INTO Keywords VALUES(NULL, ?)";
-
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertKeyword);
-        pstmt->setString(1, key);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-}
-
-Conference Database::fetchConference(int key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	// Add information on user from database to User object
-	const char* getConference = "SELECT * FROM Conference WHERE confID=?";
-	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
-
-        // =======================================
-        // Conference 
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getConference);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Conference();
-	}
-
-        int confID = rs->getInt(1);
-        std::string title = rs->getString(2);
-        std::string topic = rs->getString(3);
-        std::string description = rs->getString(4);
-        std::string location = rs->getString(5);
-        bool isActive = rs->getBoolean(6);
-        int paperDeadlineD  = rs->getInt(7);
-        int paperDeadlineM  = rs->getInt(8);
-        int paperDeadlineY  = rs->getInt(9);
-	Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
-        bool isBeforePaperDeadline = rs->getBoolean(10);
-        int allocationDateD  = rs->getInt(11);
-        int allocationDateM  = rs->getInt(12);
-        int allocationDateY  = rs->getInt(13);
-	Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
-        bool isBeforeAllocationDate = rs->getBoolean(14);
-        int reviewDeadlineSoftD  = rs->getInt(15);
-        int reviewDeadlineSoftM  = rs->getInt(16);
-        int reviewDeadlineSoftY  = rs->getInt(17);
-	Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY);
-        bool isBeforeSoftReviewDeadline = rs->getBoolean(18);
-	int reviewDeadlineHardD  = rs->getInt(19);
-        int reviewDeadlineHardM  = rs->getInt(20);
-        int reviewDeadlineHardY  = rs->getInt(21);
-	Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
-        bool isBeforeHardReviewDeadline = rs->getBoolean(22);
-        int discussDeadlineD  = rs->getInt(23);
-        int discussDeadlineM  = rs->getInt(24);
-        int discussDeadlineY  = rs->getInt(25);
-	Date discussDeadline(discussDeadlineD, discussDeadlineM, discussDeadlineY);
-        bool isBeforeDiscussDeadline = rs->getBoolean(26);
-	int reviewersPerPaper = rs->getInt(27);
-	int postWordLimit = rs->getInt(28);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise Area
-        std::vector<std::string> vec;
-	
-	pstmt = dbcon->prepareStatement(getConfKeywords);
-	pstmt->setInt(1, key);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string keyword = rs->getString(2);
-                vec.push_back(keyword);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        Conference conf(
-		isActive,
-		title,
-		confID,
-		topic,
-		description,
-		location,
-		vec,
-		isBeforePaperDeadline,
-		paperDeadline,
-		isBeforeAllocationDate,
-		allocationDate,
-		isBeforeSoftReviewDeadline,
-		reviewDeadlineSoft,
-		isBeforeHardReviewDeadline,
-		reviewDeadlineHard,
-		isBeforeDiscussDeadline,
-		discussDeadline,
-		reviewersPerPaper,
-		postWordLimit
-		);
-	
-	return conf;
-}
-
-bool Database::existsConfName(std::string key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* countConf = "SELECT COUNT(*) FROM Conference WHERE name=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countConf);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count == 1;
-}
-
-void Database::putConf(std::string key, Conference conf) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-        if (this->existsConfName(key))
-	{
-                this->updateConf(conf);
-        }
-	else
-	{
-        	this->createConf(conf);
-	}
-}
-
-void Database::createConf(Conference conf)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadlineD, paperDeadlineM, paperDeadlineY, paperDeadlineBool, allocationDateD, allocationDateM, allocationDateY, allocationDateBool, reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY, reviewDeadlineSoftBool, reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY, reviewDeadlineHardBool, discussDeadlineD, discussDeadlineM, discussDeadlineY, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
-
-	const char* getconfID = "SELECT LAST_INSERT_ID()";
-	const char* insertConfKeyword = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Personal Info
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertConference);
-
-        pstmt->setString(1, conf.title);
-        pstmt->setString(2, conf.topic);
-        pstmt->setString(3, conf.description);
-        pstmt->setString(4, conf.location);
-        pstmt->setBoolean(5, conf.isActive);
-        pstmt->setInt(6, conf.paperDeadline.getDay());
-        pstmt->setInt(7, conf.paperDeadline.getMonth());
-        pstmt->setInt(8, conf.paperDeadline.getYear());
-        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
-        pstmt->setInt(10, conf.allocationDate.getDay());
-        pstmt->setInt(11, conf.allocationDate.getMonth());
-        pstmt->setInt(12, conf.allocationDate.getYear());
-        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
-        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
-        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
-        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
-        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
-        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
-        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
-        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf.discussDeadline.getDay());
-        pstmt->setInt(23, conf.discussDeadline.getMonth());
-        pstmt->setInt(24, conf.discussDeadline.getYear());
-        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
-	pstmt->setInt(26, conf.reviewersPerPaper);
-	pstmt->setInt(27, conf.postWordLimit);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Store confID
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getconfID);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int confID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Expertise
-      	if (conf.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertConfKeyword);
-		std::vector<std::string>::const_iterator it;
-      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			
-			pstmt->setInt(1, confID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
-      		delete pstmt;
-
-      	}
-}
-
-void Database::updateConf(Conference conf)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getConfID = "SELECT confID FROM Conference where name = ?";
-
-	const char* updateConference = "UPDATE Conference SET confID=?, name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
-
-        const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
-	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Store confID
-        sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getConfID);
-        pstmt->setString(1, conf.title);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int confID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Conference
-        pstmt = dbcon->prepareStatement(updateConference);
-
-        pstmt->setString(1, conf.title);
-        pstmt->setString(2, conf.topic);
-        pstmt->setString(3, conf.description);
-        pstmt->setString(4, conf.location);
-        pstmt->setBoolean(5, conf.isActive);
-	int day = conf.paperDeadline.getDay();
-	int month = conf.paperDeadline.getMonth();
-	int year = conf.paperDeadline.getYear();
-        pstmt->setInt(6, day);
-        pstmt->setInt(7, month);
-        pstmt->setInt(8, year);
-        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
-        pstmt->setInt(10, conf.allocationDate.getDay());
-        pstmt->setInt(11, conf.allocationDate.getMonth());
-        pstmt->setInt(12, conf.allocationDate.getYear());
-        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
-        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
-        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
-        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
-        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
-        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
-        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
-        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf.discussDeadline.getDay());
-        pstmt->setInt(23, conf.discussDeadline.getMonth());
-        pstmt->setInt(24, conf.discussDeadline.getYear());
-        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
-	pstmt->setInt(26, conf.reviewersPerPaper);
-	pstmt->setInt(27, conf.postWordLimit);
-	pstmt->setInt(28, confID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Keywords Delete
-        pstmt = dbcon->prepareStatement(deleteKeywords);
-        pstmt->setInt(1, confID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Keywords Insert
-      	if (conf.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertKeywords);
-		std::vector<std::string>::const_iterator it;
-      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			pstmt->setInt(1, confID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
-      		delete pstmt;
-
-      	}
-}
-
-std::vector<int> Database::allConfIDs()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<int> vptr;
-
-        const char* selectall = "select confID from Conference";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                int anid = rs->getInt(1);
-                vptr.push_back(anid);
-        }
-
-        return vptr;
-}
-
-std::vector<std::string> Database::allConfNames()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> vptr;
-
-        const char* selectall = "select name from Conference";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string aname = rs->getString(1);
-                vptr.push_back(aname);
-        }
-
-        return vptr;
-}
-
-std::vector<int> Database::activeConfIDs()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<int> vptr;
-
-        const char* selectActive = "SELECT confID FROM Conference WHERE active = 1";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectActive);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                int anid = rs->getInt(1);
-                vptr.push_back(anid);
-        }
-
-        return vptr;
-}
-
-std::vector<std::string> Database::activeConfNames()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> vptr;
-
-        const char* selectActive = "SELECT name FROM Conference WHERE active = 1";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectActive);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string aname = rs->getString(1);
-                vptr.push_back(aname);
-        }
-
-        return vptr;
-}
-
-PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperSummary = "SELECT paperName FROM Paper WHERE paperID=?";
-
-        // =======================================
-        // Paper Summary 
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperSummary);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return PaperSummary();
-	}
-
-        std::string paperName = rs->getString(1);
-
-        delete rs;
-        delete pstmt;
-
-        PaperSummary papSum(key, paperName);
-	
-	return papSum;
-}
-
-std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int authorID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and paperID IN (SELECT paperID FROM paperAuthors WHERE authorID=?))";
-
-        // =======================================
-        // Paper Summary 
-	std::vector<PaperSummary> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperSummary);
-	pstmt->setInt(1, confID);
-	pstmt->setInt(2, authorID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-        	std::string paperName = rs->getString(1);
-        	int paperID = rs->getInt(2);
-        	PaperSummary papSum(paperID, paperName);
-                vec.push_back(papSum);
-        }
-
-        delete rs;
-        delete pstmt;
-	
-	return vec;
-}
-
-Paper Database::fetchPaper(int key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaper = "SELECT * FROM Paper WHERE paperID=?";
-	const char* getConfKeyword = "SELECT keyword FROM Keywords WHERE keywordID=(SELECT keywordID FROM Paper WHERE paperID=?)";
-	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
-	
-	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
-
-	const char* getDiscussPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
-
-	const char* getReviews = "SELECT * FROM Review WHERE (paperID=? and confID=?)";
-	
-        // =======================================
-        // Paper
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaper);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Paper();
-	}
-
-    	int paperID = rs->getInt(1);
-	int confID = rs->getInt(3);
-    	int leadAuthorID = rs->getInt(2);
-    	std::string title = rs->getString(5);
-    	std::string abstract = rs->getString(6);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // confKeyword
-	pstmt = dbcon->prepareStatement(getConfKeyword);
-	pstmt->setInt(1, key);
-
-	rs = pstmt->executeQuery();
-
-	haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Paper();
-	}
-
-	std::string confKeyword = rs->getString(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Paper Keywords
-        std::vector<std::string> keywords;
-	
-	pstmt = dbcon->prepareStatement(getPaperKeywords);
-	pstmt->setInt(1, key);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string keyword = rs->getString(1);
-                keywords.push_back(keyword);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Authors 
-        std::vector<PersonalInfo> authors;
-	
-	pstmt = dbcon->prepareStatement(getAuthors);
-	pstmt->setInt(1, key);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int infoID = rs->getInt(1);
-		std::string name = rs->getString(3);
-		std::string email = rs->getString(4);
-		std::string organisation = rs->getString(5);
-		std::string phone = rs->getString(6);
-		PersonalInfo pInfo(name, email, organisation, phone, infoID);
-                authors.push_back(pInfo);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Discussion
-        std::list<DiscussionPost> discussion;
-	
-	pstmt = dbcon->prepareStatement(getDiscussPost);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		std::string comment = rs->getString(1);
-		int reviewerID = rs->getInt(2);
-		int commentID = rs->getInt(3);
-		DiscussionPost discuss(comment, reviewerID, commentID);
-                discussion.push_back(discuss);
-        }
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Reviews
-        std::vector<Review> reviews;
-	
-	pstmt = dbcon->prepareStatement(getReviews);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int reviewerID = rs->getInt(3);
-		int overall = rs->getInt(5);
-		int confidence = rs->getInt(6);
-		int relevance = rs->getInt(7);
-		int originality = rs->getInt(8);
-		int significance = rs->getInt(9);
-		int presentation = rs->getInt(10);
-		int techQuality = rs->getInt(11);
-		int evaluation = rs->getInt(12);
-  		std::string commentsStrength = rs->getString(13);
-  		std::string commentsWeakness = rs->getString(14);
-  		std::string commentsSuggestions = rs->getString(15);
-  		std::string commentsShortPaper = rs->getString(16);
-  		std::string commentsBestAward = rs->getString(17);
-
-		Review review(paperID, 
-			reviewerID, 
-			overall, 
-			confidence, 
-			relevance, 
-			originality, 
-			significance, 
-			presentation, 
-			techQuality, 
-			evaluation, 
-			commentsStrength, 
-			commentsWeakness, 
-			commentsSuggestions, 
-			commentsShortPaper, 
-			commentsBestAward);
-		reviews.push_back(review);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	Paper paper(
-		paperID,
-		confID,
-		leadAuthorID,
-		title,
-		abstract,
-		authors,
-		keywords,
-		confKeyword,
-		reviews,
-		discussion);
-
-	return paper;
-}
-
-void Database::createPaper(Paper paper, std::string pdf)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* insertPaper = "INSERT INTO Paper(paperID, leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(NULL, ?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?), ?, ?, ?)";
-	const char* getPaperID = "SELECT LAST_INSERT_ID()";
-	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
-
-	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Paper
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(insertPaper);
-        pstmt->setInt(1, paper.leadAuthorID);
-        pstmt->setInt(2, paper.confID);
-        pstmt->setString(3, paper.confKeyword);
-        pstmt->setString(4, paper.title);
-        pstmt->setString(5, paper.abstract);
-        pstmt->setString(6, pdf);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Store paperID
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperID);
-
-	rs = pstmt->executeQuery();
-	bool haveRecord = rs->next();
-
-        int paperID = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-
-        // =======================================
-        // Paper Authors
-        pstmt = dbcon->prepareStatement(insertAuthors);
-
-	std::vector<PersonalInfo>::const_iterator it;
-	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
-	{
-		PersonalInfo pInfo = *it;	
-
-		pstmt->setInt(1, paperID);
-		pstmt->setInt(2, pInfo.infoID);
-
-	        pstmt->executeUpdate();
-	}
-	delete pstmt;
-
-        // =======================================
-        // Keywords
-      	if (paper.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertKeywords);
-		std::vector<std::string>::const_iterator it;
-      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			
-			pstmt->setInt(1, paperID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
-      		delete pstmt;
-
-      	}
-
-}
-
-void Database::updatePaper(Paper paper)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* updatePaper = "UPDATE Paper SET leadAuthorID=?, confID=?, keywordID=(SELECT keywordID FROM Keywords WHERE keyword=?), paperTitle=?, paperAbstract=? WHERE paperID=?";
-        const char* deleteAuthors = "DELETE FROM paperAuthors WHERE paperID=?";
-	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
-
-        const char* deleteKeywords = "DELETE FROM PaperKeywords WHERE paperID=?";
-	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-
-        // =======================================
-        // Paper
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(updatePaper);
-        pstmt->setInt(1, paper.leadAuthorID);
-        pstmt->setInt(1, paper.confID);
-        pstmt->setString(3, paper.confKeyword);
-        pstmt->setString(4, paper.title);
-        pstmt->setString(5, paper.abstract);
-        pstmt->setInt(3, paper.paperID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Authors Delete
-        pstmt = dbcon->prepareStatement(deleteAuthors);
-        pstmt->setInt(1, paper.paperID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Paper Authors
-        pstmt = dbcon->prepareStatement(insertAuthors);
-
-	std::vector<PersonalInfo>::const_iterator it;
-	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
-	{
-		PersonalInfo pInfo = *it;	
-
-		pstmt->setInt(1, paper.paperID);
-		pstmt->setInt(2, pInfo.infoID);
-
-	        pstmt->executeUpdate();
-	}
-	delete pstmt;
-
-        // =======================================
-        // Keywords Delete
-        pstmt = dbcon->prepareStatement(deleteKeywords);
-        pstmt->setInt(1, paper.paperID);
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // =======================================
-        // Keywords Insert
-      	if (paper.keywords.size() > 0)
-      	{
-      		pstmt = dbcon->prepareStatement(insertKeywords);
-		std::vector<std::string>::const_iterator it;
-      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
-		{
-			std::string word = *it;	
-        		if (!this->existsKeyword(word))
-			{
-				this->addKeyword(word);
-			}
-			pstmt->setInt(1, paper.paperID);
-			pstmt->setString(2, word);
-
-      		        pstmt->executeUpdate();
-		}
-      		delete pstmt;
-
-      	}
-}
-
-Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (const char*)
-{
-	const char* getReview = "SELECT * FROM Review WHERE (paperID=? and reviewerID=? and confID=?)";
-        // =======================================
-        // Review
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getReview);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, reviewerID);
-	pstmt->setInt(3, confID);
-
-	rs = pstmt->executeQuery();
-
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return Review();
-	}
-
-        int reportID = rs->getInt(1);
-        int overall = rs->getInt(5);
-        int confidence = rs->getInt(6);
-        int relevance = rs->getInt(7);
-        int originality = rs->getInt(8);
-        int significance = rs->getInt(9);
-        int presentation = rs->getInt(10);
-        int techQuality = rs->getInt(11);
-        int evaluation = rs->getInt(12);
-        std::string commentsStrength = rs->getString(13);
-        std::string commentsWeakness = rs->getString(14);
-        std::string commentsSuggestions = rs->getString(15);
-        std::string commentsShortPaper = rs->getString(16);
-        std::string commentsBestAward = rs->getString(17);
-
-	Review review(reportID
-		paperID, 
-		reviewerID, 
-		overall, 
-		confidence, 
-		relevance, 
-		originality, 
-		significance, 
-		presentation, 
-		techQuality, 
-		evaluation, 
-		commentsStrength, 
-		commentsWeakness, 
-		commentsSuggestions, 
-		commentsShortPaper, 
-		commentsBestAward);
-
-        delete rs;
-        delete pstmt;
-
-	return review
-}
-
-void Database::modifyReview(Review review, int confID) throw (const char*)
-{
-	const char* insertReview = "INSERT INTO Review(paperID, reviewerID, confID, overall, confidence, relevance, originality, significance, presentation, techQuality, evaluation, commentsStrength, commentsWeakness, commentsSuggestions, commentsShortPaper, commentsBestAward) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 
-	const char* updateReview = "UPDATE Review SET paperID=?, reviewerID=?, confID=?, overall=?, confidence=?, relevance=?, originality=?, significance=?, presentation=?, techQuality=?, evaluation=?, commentsStrength=?, commentsWeakness=?, commentsSuggestions=?, commentsShortPaper=?, commentsBestAward=? WHERE reportID=?"; 
-        // =======================================
-        // Reviews
-        sql::PreparedStatement *pstmt = NULL;
-
-	pstmt = dbcon->prepareStatement(insertReview);
-	std::vector<Review>::const_iterator it;
-	for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
-	{
-		Review review = *it;	
-
-		if (review.reportID==0)
-		{
-			pstmt = dbcon->prepareStatement(insertReview);
-
-			pstmt->setInt(1, paper.paperID);
-			pstmt->setInt(2, review.reviewerID);
-			pstmt->setInt(3, paper.confID);
-			pstmt->setInt(4, review.overall);
-			pstmt->setInt(5, review.confidence);
-			pstmt->setInt(6, review.relevance);
-			pstmt->setInt(7, review.originality);
-			pstmt->setInt(8, review.significance);
-			pstmt->setInt(9, review.presentation);
-			pstmt->setInt(10, review.techQuality);
-			pstmt->setInt(11, review.evaluation);
-			pstmt->setString(12, review.commentsStrength);
-			pstmt->setString(13, review.commentsWeakness);
-			pstmt->setString(14, review.commentsSuggestions);
-			pstmt->setString(15, review.commentsShortPaper);
-			pstmt->setString(16, review.commentsBestAward);
-
-	        	pstmt->executeUpdate();
-		}
-		else
-		{
-			pstmt = dbcon->prepareStatement(updateReview);
-
-			pstmt->setInt(1, paper.paperID);
-			pstmt->setInt(2, review.reviewerID);
-			pstmt->setInt(3, paper.confID);
-			pstmt->setInt(4, review.overall);
-			pstmt->setInt(5, review.confidence);
-			pstmt->setInt(6, review.relevance);
-			pstmt->setInt(7, review.originality);
-			pstmt->setInt(8, review.significance);
-			pstmt->setInt(9, review.presentation);
-			pstmt->setInt(10, review.techQuality);
-			pstmt->setInt(11, review.evaluation);
-			pstmt->setString(12, review.commentsStrength);
-			pstmt->setString(13, review.commentsWeakness);
-			pstmt->setString(14, review.commentsSuggestions);
-			pstmt->setString(15, review.commentsShortPaper);
-			pstmt->setString(16, review.commentsBestAward);
-			pstmt->setInt(17, review.reportID);
-
-	        	pstmt->executeUpdate();
-		}
-	}
-	delete pstmt;
-}
-
-Discussion Database::fetchDiscussion(int paperID, int confID) throw (const char*)
-{
-	const char* getDiscussion = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
-        // =======================================
-        // Discussion
-        std::list<DiscussionPost> discussion;
-	
-	pstmt = dbcon->prepareStatement(getDiscussion);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		std::string comment = rs->getString(1);
-		int reviewerID = rs->getInt(2);
-		int commentID = rs->getInt(3);
-		DiscussionPost discuss(comment, reviewerID, commentID);
-                discussion.push_back(discuss);
-        }
-
-        delete rs;
-        delete pstmt;
-}
-
-DiscussionPost Database::fetchRebuttal(int paperID, int userId, int confID) throw (const char*)
-{
-	const char* getDiscussionPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and reviewerID=? and confID=?)";
-
-        // =======================================
-        // Discussion Post
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getDiscussion);
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, userID);
-	pstmt->setInt(3, confID);
-
-	rs = pstmt->executeQuery();
-
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return DiscussionPost();
-	}
-
-	std::string comment = rs->getString(1);
-	int reviewerID = rs->getInt(2);
-	int commentID = rs->getInt(3);
-	DiscussionPost discuss(comment, reviewerID, commentID);
-
-        delete rs;
-        delete pstmt;
-	
-	return discuss
-}
-
-void Database::createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*)
-{
-	const char* insertDiscussPost = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
-        // =======================================
-        // Discussion
-        sql::PreparedStatement *pstmt = NULL;
-
-	pstmt = dbcon->prepareStatement(insertDiscussPost);
-	
-	pstmt->setInt(1, paperID);
-	pstmt->setInt(2, confID);
-	pstmt->setInt(3, discussionPost.reviewerID);
-	pstmt->setString(4, discussionPost.comment);
-
-	pstmt->executeUpdate();
-
-	delete pstmt;
-}
-
-std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getAuthors = "SELECT authorID FROM paperAuthors WHERE paperID=?";
-
-        // =======================================
-        // Authors
-	std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getAuthors);
-	pstmt->setInt(1, paperID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int authorID = rs->getInt(1);
-                vec.push_back(authorID);
-        }
-
-        delete rs;
-        delete pstmt;
-	
-	return vec;
-}
-
-std::vector<std::string> Database::getOrganisationForAuthor(int infoID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getOrg = "SELECT organisation FROM PersonalInfo WHERE infoID=?";
-
-        // =======================================
-        // Org
-	std::vector<std::string> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getOrg);
-	pstmt->setInt(1, infoID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		std::string org = rs->getString(1);
-                vec.push_back(org);
-        }
-
-        delete rs;
-        delete pstmt;
-	
-	return vec;
-}
-
-std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and userID IN (SELECT userID FROM PersonalInfo WHERE (userID IS NOT NULL and organisation=?))";
-
-        // =======================================
-        // Reviewers
-	std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getReviewers);
-	pstmt->setString(1, org);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int reviewerID = rs->getInt(1);
-                vec.push_back(reviewerID);
-        }
-
-        delete rs;
-        delete pstmt;
-	
-	return vec;
-}
-
-std::vector<int> Database::getPapersForAuthor(int authorID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPapers = "SELECT paperID FROM paperAuthors WHERE authorID=?";
-
-        // =======================================
-        // Papers
-	std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPapers);
-	pstmt->setInt(1, authorID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-		int paperID = rs->getInt(1);
-                vec.push_back(paperID);
-        }
-
-        delete rs;
-        delete pstmt;
-	
-	return vec;
-}
-
-std::vector<std::string> Database::getKeywordsForPaper(int paperID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
-
-        // =======================================
-        // Paper Keywords
-        std::vector<std::string> keywords;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperKeywords);
-	pstmt->setInt(1, paperID);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string keyword = rs->getString(1);
-                keywords.push_back(keyword);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return keywords;
-}
-
-std::vector<std::string> Database::getKeywordsForUser(int userID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getUserKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
-
-        // =======================================
-        // Expertise Keywords
-        std::vector<std::string> keywords;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUserKeywords);
-	pstmt->setInt(1, userID);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                std::string keyword = rs->getString(1);
-                keywords.push_back(keyword);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return keywords;
-}
-
-std::vector<int> Database::getReviewersForConf(int confID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and confID=?)";
-
-        // =======================================
-        // Reviewers
-        std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getReviewers);
-	pstmt->setInt(1, confID);
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                int userID = rs->getInt(1);
-                vec.push_back(userID);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return vec;
-}
-
-int Database::getReviewerPreference(int userID, int confID, int paperID) throw (const char*)
-{
-	const char* getReviewerPreference = "SELECT preference FROM ReviewerPreference WHERE (userID=? and confID=? and paperID=?)";
-
-        // =======================================
-        // Reviewer Preference
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getReviewerPreference);
-	pstmt->setInt(1, userID);
-	pstmt->setInt(2, confID);
-	pstmt->setInt(3, paperID);
-
-	rs = pstmt->executeQuery();
-
-	bool haveRecord = rs->next();
-	if (!haveRecord)
-	{
-		delete rs;
-		delete pstmt;
-		return -1;
-	}
-
-    	int preference = rs->getInt(1);
-
-        delete rs;
-        delete pstmt;
-	
-	return preference;
-}
-
-std::vector<int> Database::getPaperIDsForConf(int confID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE confID=?";
-
-        // =======================================
-        // Paper ID
-        std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperIDs);
-	pstmt->setInt(1, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                int paperID = rs->getInt(1);
-                vec.push_back(paperID);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return vec;
-}
-
-std::vector<int> Database::getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperIDs = "SELECT paperID FROM PaperAssigned WHERE (reviewerID=? and confID)";
-
-        // =======================================
-        // Paper ID
-        std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperIDs);
-	pstmt->setInt(1, reviewerID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                int paperID = rs->getInt(1);
-                vec.push_back(paperID);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return vec;
-}
-
-std::vector<int> Database::getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE (leadAuthorID=? and confID=?)";
-
-        // =======================================
-        // Paper ID
-        std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getPaperIDs);
-	pstmt->setInt(1, leadAuthorID);
-	pstmt->setInt(2, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                int paperID = rs->getInt(1);
-                vec.push_back(paperID);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return vec;
-}
-
-std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-
-	const char* getUserIDs = "SELECT userID FROM UserType WHERE confID=?";
-
-        // =======================================
-        // User ID
-        std::vector<int> vec;
-	sql::PreparedStatement *pstmt = NULL;
-	sql::ResultSet *rs = NULL;
-	
-	pstmt = dbcon->prepareStatement(getUserIDs);
-	pstmt->setInt(1, confID);
-
-	rs = pstmt->executeQuery();
-
-        while (rs->next()) {
-                int paperID = rs->getInt(1);
-                vec.push_back(paperID);
-        }
-
-        delete rs;
-        delete pstmt;
-
-	return vec;
-}
-
-
-
-//
-//std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//        // Laboured
-//        // First get a list of the ids with the role, then one by one get the
-//        // complete records.
-//        const char* getrolepersons = "selects personid from roles where _role=?";
-//
-//        sql::PreparedStatement *pstmt = NULL;
-//        sql::ResultSet * rs = NULL;
-//
-//        pstmt = dbcon->prepareStatement(getrolepersons);
-//        pstmt->setString(1, role);
-//        rs = pstmt->executeQuery();
-//
-//        bool haveRecord = rs->next();
-//        if (!haveRecord)
-//        {
-//                delete rs;
-//                delete pstmt;
-//                return NULL;
-//        }
-//
-//        std::vector<std::string> people;
-//
-//        // rc = sqlite3_step(stmt);
-//
-//        while (rs->next()) {
-//                std::string apersonid = std::string(rs->getString(1));
-////              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
-//                people.push_back(apersonid);
-//        }
-//
-//        // Maybe there weren't any
-//        if (people.size() == 0)
-//                return NULL;
-//
-//        // Build collection by getting each record
-//        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-//
-//        std::vector<std::string>::const_iterator it;
-//        for (it = people.begin(); it != people.end(); it++) {
-//                std::string aperson = *it;
-//                MyRecord* rec = this->get(aperson.c_str());
-//                roleholders->push_back(rec);
-//        }
-//
-//        return roleholders;
-//}
-//
-
-//bool Database::deleteUser(int* key) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//        // explicitly delete subordinate records in Phones, Address, others and Roles
-//        // then delete the myrecord entry
-//        // recreating the prepared statements for each operation - costly
-//        const char* deletephones = "delete from phones where personid=?";
-//        const char* deleteaddress = "delete from addresses where personid=?";
-//        const char* deleteother = "delete from other where personid=?";
-//        const char* deleteroles = "delete from roles where personid=?";
-//        const char* deletemyrecord = "delete from myrecord where _id=?";
-//        const char* unused; // Pointer to unused part of sql string (?)
-//        sql::PreparedStatement *pstmt = NULL;
-//        // Phones
-//        pstmt = dbcon->prepareStatement(deletephones);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        // Addresses
-//        pstmt = dbcon->prepareStatement(deleteaddress);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        //Other
-//        pstmt = dbcon->prepareStatement(deleteother);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        // Roles
-//        pstmt = dbcon->prepareStatement(deleteroles);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        // Finally
-//        pstmt = dbcon->prepareStatement(deletemyrecord);
-//        pstmt->setString(1, key);
-//        pstmt->executeUpdate();
-//        delete pstmt;
-//
-//        return true;
-//}
-//
-//
-//MyRecord *Database::get(const char* key) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//        // Again laborious
-//        // Load the MyRecord from its table, then add data from Other tables.
-//        const char* getrecord = "select * from myrecord where _id=?";
-//        const char* getroles = "select role from roles where personid=?";
-//        const char* getphones = "select type, number from phones where personid=?";
-//        const char* getaddress = "select type, address from addresses where personid=?";
-//        const char* getother = "select key, valyue from other where personid=?";
-//
-//        sql::PreparedStatement *pstmt = NULL;
-//        sql::ResultSet *rs = NULL;
-//
-//        pstmt = dbcon->prepareStatement(getrecord);
-//        pstmt->setString(1, key);
-//        rs = pstmt->executeQuery();
-//        bool haveRecord = rs->next();
-//        if (!haveRecord)
-//        {
-//                delete rs;
-//                delete pstmt;
-//                return NULL;
-//        }
-//
-//        std::string id = rs->getString(1);
-//        std::string name = rs->getString(2);
-//        std::string email = rs->getString(3);
-//        std::string info = rs->getString(4);
-//        std::string image = rs->getString(5);
-//
-//        MyRecord *arec = new MyRecord(id);
-//        arec->setName(name);
-//        arec->setEmail(email);
-//        arec->setInfo(info);
-//        arec->setImage(image);
-//
-//        delete rs;
-//        delete pstmt;
-//        // =======================================
-//        // Now ask about roles
-//        pstmt = dbcon->prepareStatement(getroles);
-//        pstmt->setString(1, key);
-//        rs = pstmt->executeQuery();
-//        while (rs->next())
-//        {
-//                std::string arole = rs->getString(1);
-//                arec->addRole(arole);
-//        }
-//        delete rs;
-//        delete pstmt;
-//}
-//
-//void Database::recordToTables(const MyRecord* data)
-//{
-//        if (invalid)
-//                throw (noDB);
-//
-//        // Insert the myrecord data first, then deal with Other data tables
-//
-//        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
-//        const char* putrole = "insert into roles values(?, ?)";
-//        const char* putphone = "insert into phones values (?, ?, ?)";
-//        const char* putaddress = "insert into addresses values (?, ?, ?)";
-//        const char* putother = "insert into other values (?, ?, ?)";
-//
-//        sql::PreparedStatement *pstmt = NULL;
-//        pstmt = dbcon->prepareStatement(putmyrecord);
-//        pstmt->setString(1, data->getID());
-//        pstmt->setString(2, data->getName());
-//        pstmt->setString(3, data->getEmail());
-//        pstmt->setString(4, data->getInfo());
-//        pstmt->setString(5, data->getImage());
-//
-//        pstmt->executeUpdate();
-//
-//        delete pstmt;
-//
-//        // Role 
-////      if (data->getOtherKV().size() > 0)
-////      {
-////              pstmt = dbcon->prepareStatement(putother);
-////              std::map<std::string, std::string>::const_iterator it;
-////              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
-////              {
-////                      std::string akey = it->first;
-////                      std::string avalue = it->second;
-////                      pstmt->setString(1, data->getID());
-////                      pstmt->setString(2, akey);
-////                      pstmt->setString(3, avalue);
-////                      pstmt->executeUpdate();
-////              }
-////              delete pstmt;
-////
-////      }
-//
-////      // Other
-////      if (data->getOtherKV().size() > 0)
-////      {
-////              pstmt = dbcon->prepareStatement(putother);
-////              std::map<std::string, std::string>::const_iterator it;
-////              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-////              {
-////                      std::string akey = it->first;
-////                      std::string avalue = it->second;
-////                      pstmt->setString(1, data->getID());
-////                      pstmt->setString(2, akey);
-////                      pstmt->setString(3, avalue);
-////                      pstmt->executeUpdate();
-////              }
-////              delete pstmt;
-////
-////      }
-//}
+USE csci222;
+
+SET foreign_key_checks = 0;
+
+CREATE TABLE `UserType` (
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
+	`paidAmount` float NOT NULL DEFAULT 0,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `UserAccount` (
+	`userID` int NOT NULL AUTO_INCREMENT,
+	`username` varchar(32) NOT NULL UNIQUE,
+	`password` varchar(32) NOT NULL,
+	`infoID` int NOT NULL,
+	PRIMARY KEY(`userID`),
+	FOREIGN KEY(`infoID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PersonalInfo` (
+	`infoID` int NOT NULL AUTO_INCREMENT,
+	`userID` int,
+	`name` varchar(128) NOT NULL,
+	`email` varchar(128),
+	`organisation` varchar(256) NOT NULL,
+	`phone` varchar(32), 
+	PRIMARY KEY(`infoID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Emails` (
+	`emailID` int NOT NULL AUTO_INCREMENT,
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`emailType` ENUM('accountCreation', 'accountModified', 'paperSubmitted', 'paperAssigned', 'paperReviewed', 'rebuttalNeeded', 'rebuttalSubmitted', 'biddingOpen', 'paperAccepted', 'paperRejected', 'ReviewersNeeded', 'AllPapersReviewed', 'invitationCommitte', 'invitationChair', 'softDeadline', 'hardDeadline'),
+	PRIMARY KEY(`emailID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ExpertiseArea` (
+	`userID` int NOT NULL,
+	`expertiseID` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `ExpertiseArea` ADD UNIQUE `unique_index`(`userID`, `expertiseID`);
+
+CREATE TABLE `Keywords` (
+	`keywordID` int NOT NULL AUTO_INCREMENT,
+	`keyword` varchar(64) NOT NULL UNIQUE,
+	PRIMARY KEY(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Conference` (
+	`confID` int NOT NULL AUTO_INCREMENT,
+	`name` varchar(255) NOT NULL UNIQUE,
+	`topic` TEXT NOT NULL,
+	`description` TEXT NOT NULL,
+	`location` varchar(255) NOT NULL,
+	`active` boolean NOT NULL DEFAULT 1,
+	`paperDeadlineD` int,
+	`paperDeadlineM` int,
+	`paperDeadlineY` int,
+	`paperDeadlineBool` bool,
+	`allocationDateD` int,
+	`allocationDateM` int,
+	`allocationDateY` int,
+	`allocationDateBool` bool,
+	`reviewDeadlineSoftD` int,
+	`reviewDeadlineSoftM` int,
+	`reviewDeadlineSoftY` int,
+	`reviewDeadlineSoftBool` bool,
+	`reviewDeadlineHardD` int,
+	`reviewDeadlineHardM` int,
+	`reviewDeadlineHardY` int,
+	`reviewDeadlineHardBool` bool,
+	`discussDeadlineD` int,
+	`discussDeadlineM` int,
+	`discussDeadlineY` int,
+	`discussDeadlineBool` bool,
+	`reviewersPerPaper` int NOT NULL,
+	`postWordLimit` int NOT NULL,
+	PRIMARY KEY(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ConferenceKeywords` (
+	`confID` int,
+	`keywordID` int,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `ConferenceKeywords` ADD UNIQUE `unique_index`(`confID`, `keywordID`);
+
+CREATE TABLE `Paper` (
+	`paperID` int NOT NULL AUTO_INCREMENT,
+	`leadAuthorID` int NOT NULL,
+	`confID` int NOT NULL,
+	`keywordID` int NOT NULL,
+	`paperTitle` varchar(512) NOT NULL,
+	`paperAbstract` varchar(4096) NOT NULL,
+	`paper` blob NOT NULL,
+	PRIMARY KEY(`paperID`),
+	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `AcceptedPapers` (
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `paperAuthors` (
+	`paperID` int NOT NULL,
+	`authorID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `paperAuthors` ADD UNIQUE `unique_index`(`paperID`, `authorID`);
+
+CREATE TABLE `PaperKeywords` (
+	`paperID` int NOT NULL,
+	`keywordID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+ALTER TABLE `PaperKeywords` ADD UNIQUE `unique_index`(`paperID`, `keywordID`);
+
+CREATE TABLE `PaperAssigned` (
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
+	`reviewed` boolean NOT NULL DEFAULT 0,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+	
+CREATE TABLE `Review` (
+	`reportID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
+	`overall` int,
+	`confidence` int,
+	`relevance` int,
+	`originality` int,
+	`significance` int,
+	`presentation` int,
+	`techQuality` int,
+	`evaluation` int,
+	`commentsStrength` text,
+	`commentsWeakness` text,
+	`commentsSuggestions` text,
+	`commentsShortPaper` text,
+	`commentsBestAward` text,
+	PRIMARY KEY(`reportID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ReviewerDiscussion` (
+	`commentID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`confID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`comment` varchar(4096),
+	PRIMARY KEY(`commentID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ReviewerPreference`(
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	`preference` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+SET foreign_key_checks = 1;

commit 01535825824edf3e8086d87d2ce04beeff85e7c7
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 02:00:35 2014 +1100

    Update DiscussionPost.hpp

diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
index 6aee447..5d9add6 100644
--- a/DataAll/DiscussionPost.hpp
+++ b/DataAll/DiscussionPost.hpp
@@ -3,6 +3,8 @@
 #include <string>
 
 struct DiscussionPost {
+  DiscussionPost() {}
+
   DiscussionPost(const std::string& icomment,
                  int ireviewerID,
                  int ipostID):
@@ -10,6 +12,13 @@ struct DiscussionPost {
                  reviewerID(ireviewerID),
                  postID(ipostID)
                  { }
+
+  DiscussionPost(const std::string& icomment,
+                 int ireviewerID):
+                 comment(icomment),
+                 reviewerID(ireviewerID)
+                 { }
+
   std::string comment{""};
   int reviewerID{0};
   int postID{0};

commit 45cb80aab84cbc73057a6d302f454833f27f7f67
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 01:59:34 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index f258b7e..1317d4d 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -1,195 +1,2043 @@
-USE csci222;
-
-SET foreign_key_checks = 0;
-
-CREATE TABLE `UserType` (
-	`userID` int NOT NULL,
-	`confID` int NOT NULL,
-	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
-	`paidAmount` float NOT NULL DEFAULT 0,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `UserAccount` (
-	`userID` int NOT NULL AUTO_INCREMENT,
-	`username` varchar(32) NOT NULL UNIQUE,
-	`password` varchar(32) NOT NULL,
-	`infoID` int NOT NULL,
-	PRIMARY KEY(`userID`),
-	FOREIGN KEY(`infoID`) REFERENCES PersonalInfo(`infoID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `PersonalInfo` (
-	`infoID` int NOT NULL AUTO_INCREMENT,
-	`userID` int,
-	`name` varchar(128) NOT NULL,
-	`email` varchar(128),
-	`organisation` varchar(256) NOT NULL,
-	`phone` varchar(32), 
-	PRIMARY KEY(`infoID`),
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `Emails` (
-	`emailID` int NOT NULL AUTO_INCREMENT,
-	`userID` int NOT NULL,
-	`confID` int NOT NULL,
-	`emailType` ENUM('accountCreation', 'accountModified', 'paperSubmitted', 'paperAssigned', 'paperReviewed', 'rebuttalNeeded', 'rebuttalSubmitted', 'biddingOpen', 'paperAccepted', 'paperRejected', 'ReviewersNeeded', 'AllPapersReviewed', 'invitationCommitte', 'invitationChair', 'softDeadline', 'hardDeadline'),
-	PRIMARY KEY(`emailID`),
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ExpertiseArea` (
-	`userID` int NOT NULL,
-	`expertiseID` int NOT NULL,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
-	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-ALTER TABLE `ExpertiseArea` ADD UNIQUE `unique_index`(`userID`, `expertiseID`);
-
-CREATE TABLE `Keywords` (
-	`keywordID` int NOT NULL AUTO_INCREMENT,
-	`keyword` varchar(64) NOT NULL UNIQUE,
-	PRIMARY KEY(`keywordID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `Conference` (
-	`confID` int NOT NULL AUTO_INCREMENT,
-	`name` varchar(255) NOT NULL UNIQUE,
-	`topic` TEXT NOT NULL,
-	`description` TEXT NOT NULL,
-	`location` varchar(255) NOT NULL,
-	`active` boolean NOT NULL DEFAULT 1,
-	`paperDeadlineD` int,
-	`paperDeadlineM` int,
-	`paperDeadlineY` int,
-	`paperDeadlineBool` bool,
-	`allocationDateD` int,
-	`allocationDateM` int,
-	`allocationDateY` int,
-	`allocationDateBool` bool,
-	`reviewDeadlineSoftD` int,
-	`reviewDeadlineSoftM` int,
-	`reviewDeadlineSoftY` int,
-	`reviewDeadlineSoftBool` bool,
-	`reviewDeadlineHardD` int,
-	`reviewDeadlineHardM` int,
-	`reviewDeadlineHardY` int,
-	`reviewDeadlineHardBool` bool,
-	`discussDeadlineD` int,
-	`discussDeadlineM` int,
-	`discussDeadlineY` int,
-	`discussDeadlineBool` bool,
-	`reviewersPerPaper` int NOT NULL,
-	`postWordLimit` int NOT NULL,
-	PRIMARY KEY(`confID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ConferenceKeywords` (
-	`confID` int,
-	`keywordID` int,
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-ALTER TABLE `ConferenceKeywords` ADD UNIQUE `unique_index`(`confID`, `keywordID`);
-
-CREATE TABLE `Paper` (
-	`paperID` int NOT NULL AUTO_INCREMENT,
-	`leadAuthorID` int NOT NULL,
-	`confID` int NOT NULL,
-	`keywordID` int NOT NULL,
-	`paperTitle` varchar(512) NOT NULL,
-	`paperAbstract` varchar(4096) NOT NULL,
-	`paper` blob NOT NULL,
-	PRIMARY KEY(`paperID`),
-	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `AcceptedPapers` (
-	`confID` int NOT NULL,
-	`paperID` int NOT NULL,
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `paperAuthors` (
-	`paperID` int NOT NULL,
-	`authorID` int NOT NULL,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-ALTER TABLE `paperAuthors` ADD UNIQUE `unique_index`(`paperID`, `authorID`);
-
-CREATE TABLE `PaperKeywords` (
-	`paperID` int NOT NULL,
-	`keywordID` int NOT NULL,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-ALTER TABLE `PaperKeywords` ADD UNIQUE `unique_index`(`paperID`, `keywordID`);
-
-CREATE TABLE `PaperAssigned` (
-	`paperID` int NOT NULL,
-	`reviewerID` int NOT NULL,
-	`confID` int NOT NULL,
-	`reviewed` boolean NOT NULL DEFAULT 0,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-	
-CREATE TABLE `Review` (
-	`reportID` int NOT NULL AUTO_INCREMENT,
-	`paperID` int NOT NULL,
-	`reviewerID` int NOT NULL,
-	`confID` int NOT NULL,
-	`overall` int,
-	`confidence` int,
-	`relevance` int,
-	`originality` int,
-	`significance` int,
-	`presentation` int,
-	`techQuality` int,
-	`evaluation` int,
-	`commentsStrength` text,
-	`commentsWeakness` text,
-	`commentsSuggestions` text,
-	`commentsShortPaper` text,
-	`commentsBestAward` text,
-	PRIMARY KEY(`reportID`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ReviewerDiscussion` (
-	`commentID` int NOT NULL AUTO_INCREMENT,
-	`paperID` int NOT NULL,
-	`confID` int NOT NULL,
-	`reviewerID` int NOT NULL,
-	`comment` varchar(4096),
-	PRIMARY KEY(`commentID`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ReviewerPreference`(
-	`userID` int NOT NULL,
-	`confID` int NOT NULL,
-	`paperID` int NOT NULL,
-	`preference` int NOT NULL,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-SET foreign_key_checks = 1;
+#include "Database.hpp"
+
+#include "cppconn/driver.h"
+#include "cppconn/exception.h"
+#include "cppconn/resultset.h"
+#include "cppconn/statement.h"
+#include "cppconn/prepared_statement.h"
+
+#include <cstring>
+#include <stdlib.h>
+#include <iostream>
+
+#include <vector>
+#include <map>
+#include <string>
+#include <list>
+
+using namespace sql;
+
+const char* databaseStr = "localhost";
+const char* databaseUserName = "user";
+const char* databaseUserPassword = "user";
+const char* databaseSchema = "csci222";
+
+const char* noDB = "Sorry, but was unable to open database so operation failed";
+
+const char* prepareFailed = "Failure when preparing statement";
+const char* bindFailed = "Failure when binding arguments";
+const char* writeFailed = "Failure when writing to database";
+
+Database::Database()
+{
+        // Constructors should always succeed. But suppose it failed and
+        // the database couldn't be created?
+        invalid = true;
+        driver = get_driver_instance();
+        try {
+                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
+        } catch (sql::SQLException &e) {
+                // Failed
+                return;
+        }
+        dbcon->setSchema(databaseSchema);
+        // It's ok
+        invalid = false;
+}
+
+Database::~Database()
+{
+        if (!invalid) {
+                this->close();
+        }
+}
+
+void Database::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+User Database::fetchUser(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	// Add information on user from database to User object
+	const char* getUser = "SELECT * FROM UserAccount where username=?";
+	const char* getPersonalInfo = "SELECT * FROM PersonalInfo where userID=?";
+	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
+
+        // =======================================
+        // user account
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUser);
+	pstmt->setString(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return User();
+	}
+
+        int userID = rs->getInt(1);
+        std::string username = rs->getString(2);
+        std::string password = rs->getString(3);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Personal Info
+	pstmt = dbcon->prepareStatement(getPersonalInfo);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+	haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return User();
+	}
+
+        std::string name = rs->getString(3);
+	std::string email = rs->getString(4);
+	std::string organisation = rs->getString(5);
+	std::string phone = rs->getString(6);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise Area
+        std::vector<std::string> vec;
+	
+	pstmt = dbcon->prepareStatement(getExpertise);
+	pstmt->setInt(1, userID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string expertise = rs->getString(1);
+                vec.push_back(expertise);
+        }
+
+        User user(
+		username,
+		name,
+		email,
+		organisation,
+		phone,
+		password,
+		userID,
+		vec);
+
+        delete rs;
+        delete pstmt;
+	
+	return user;
+}
+
+bool Database::existsUserName(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countUser = "SELECT COUNT(*) FROM UserAccount WHERE username=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countUser);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::putUser(std::string key, User user) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+        if (this->existsUserName(key))
+	{
+                this->updateUser(user);
+        }
+	else
+	{
+        	this->createUser(user);
+	}
+}
+
+void Database::createUser(User user)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertPersonalInfo = "INSERT INTO PersonalInfo(userID, name, email, organisation, phone) VALUES(NULL, ?, ?, ?, ?)";
+	const char* insertUser = "INSERT INTO UserAccount(username, password, infoID) VALUES(?, ?, LAST_INSERT_ID())";
+	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() where infoID=(SELECT infoID FROM UserAccount where userID=LAST_INSERT_ID())";
+	const char* getUserID = "SELECT LAST_INSERT_ID()";
+	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Personal Info
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertPersonalInfo);
+        pstmt->setString(1, user.name);
+        pstmt->setString(2, user.email);
+        pstmt->setString(3, user.organisation);
+        pstmt->setString(4, user.phone);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // user account
+        pstmt = dbcon->prepareStatement(insertUser);
+        pstmt->setString(1, user.userName);
+        pstmt->setString(2, user.password);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Personal Info Update
+        pstmt = dbcon->prepareStatement(updatePIuserID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store userID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise
+      	if (user.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertExpertise);
+		std::vector<std::string>::const_iterator it;
+      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			
+			pstmt->setInt(1, userID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+void Database::updateUser(User user)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserID = "SELECT userID FROM UserAccount where username = ?";
+	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
+	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
+
+        const char* deleteExpertise = "DELETE FROM ExpertiseArea WHERE userID=?";
+	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Store userID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+        pstmt->setString(1, user.userName);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // user account
+        pstmt = dbcon->prepareStatement(updateUser);
+        pstmt->setString(1, user.userName);
+        pstmt->setString(2, user.password);
+        pstmt->setInt(3, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Personal Info
+        pstmt = dbcon->prepareStatement(updatePersonalInfo);
+        pstmt->setString(1, user.name);
+        pstmt->setString(2, user.email);
+        pstmt->setString(3, user.organisation);
+        pstmt->setString(4, user.phone);
+        pstmt->setInt(5, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Expertise Delete
+        pstmt = dbcon->prepareStatement(deleteExpertise);
+        pstmt->setInt(1, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Expertise Insert
+      	if (user.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertExpertise);
+		std::vector<std::string>::const_iterator it;
+      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			pstmt->setInt(1, userID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+std::vector<int> Database::allUserIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> vptr;
+
+        const char* selectall = "select userID from UserAccount";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr.push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> Database::allUserNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> vptr;
+
+        const char* selectall = "select username from UserAccount";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr.push_back(aname);
+        }
+
+        return vptr;
+}
+
+bool Database::existsKeyword(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countKeyword = "SELECT COUNT(*) FROM Keywords WHERE keyword=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countKeyword);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::addKeyword(std::string key) throw (const char*)
+{
+	if (invalid)
+		throw (noDB);
+
+	const char* insertKeyword = "INSERT INTO Keywords VALUES(NULL, ?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertKeyword);
+        pstmt->setString(1, key);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+}
+
+Conference Database::fetchConference(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	// Add information on user from database to User object
+	const char* getConference = "SELECT * FROM Conference WHERE confID=?";
+	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
+
+        // =======================================
+        // Conference 
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getConference);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Conference();
+	}
+
+        int confID = rs->getInt(1);
+        std::string title = rs->getString(2);
+        std::string topic = rs->getString(3);
+        std::string description = rs->getString(4);
+        std::string location = rs->getString(5);
+        bool isActive = rs->getBoolean(6);
+        int paperDeadlineD  = rs->getInt(7);
+        int paperDeadlineM  = rs->getInt(8);
+        int paperDeadlineY  = rs->getInt(9);
+	Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+        bool isBeforePaperDeadline = rs->getBoolean(10);
+        int allocationDateD  = rs->getInt(11);
+        int allocationDateM  = rs->getInt(12);
+        int allocationDateY  = rs->getInt(13);
+	Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+        bool isBeforeAllocationDate = rs->getBoolean(14);
+        int reviewDeadlineSoftD  = rs->getInt(15);
+        int reviewDeadlineSoftM  = rs->getInt(16);
+        int reviewDeadlineSoftY  = rs->getInt(17);
+	Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY);
+        bool isBeforeSoftReviewDeadline = rs->getBoolean(18);
+	int reviewDeadlineHardD  = rs->getInt(19);
+        int reviewDeadlineHardM  = rs->getInt(20);
+        int reviewDeadlineHardY  = rs->getInt(21);
+	Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+        bool isBeforeHardReviewDeadline = rs->getBoolean(22);
+        int discussDeadlineD  = rs->getInt(23);
+        int discussDeadlineM  = rs->getInt(24);
+        int discussDeadlineY  = rs->getInt(25);
+	Date discussDeadline(discussDeadlineD, discussDeadlineM, discussDeadlineY);
+        bool isBeforeDiscussDeadline = rs->getBoolean(26);
+	int reviewersPerPaper = rs->getInt(27);
+	int postWordLimit = rs->getInt(28);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise Area
+        std::vector<std::string> vec;
+	
+	pstmt = dbcon->prepareStatement(getConfKeywords);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(2);
+                vec.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        Conference conf(
+		isActive,
+		title,
+		confID,
+		topic,
+		description,
+		location,
+		vec,
+		isBeforePaperDeadline,
+		paperDeadline,
+		isBeforeAllocationDate,
+		allocationDate,
+		isBeforeSoftReviewDeadline,
+		reviewDeadlineSoft,
+		isBeforeHardReviewDeadline,
+		reviewDeadlineHard,
+		isBeforeDiscussDeadline,
+		discussDeadline,
+		reviewersPerPaper,
+		postWordLimit
+		);
+	
+	return conf;
+}
+
+bool Database::existsConfName(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countConf = "SELECT COUNT(*) FROM Conference WHERE name=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countConf);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::putConf(std::string key, Conference conf) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+        if (this->existsConfName(key))
+	{
+                this->updateConf(conf);
+        }
+	else
+	{
+        	this->createConf(conf);
+	}
+}
+
+void Database::createConf(Conference conf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadlineD, paperDeadlineM, paperDeadlineY, paperDeadlineBool, allocationDateD, allocationDateM, allocationDateY, allocationDateBool, reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY, reviewDeadlineSoftBool, reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY, reviewDeadlineHardBool, discussDeadlineD, discussDeadlineM, discussDeadlineY, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
+
+	const char* getconfID = "SELECT LAST_INSERT_ID()";
+	const char* insertConfKeyword = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Personal Info
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertConference);
+
+        pstmt->setString(1, conf.title);
+        pstmt->setString(2, conf.topic);
+        pstmt->setString(3, conf.description);
+        pstmt->setString(4, conf.location);
+        pstmt->setBoolean(5, conf.isActive);
+        pstmt->setInt(6, conf.paperDeadline.getDay());
+        pstmt->setInt(7, conf.paperDeadline.getMonth());
+        pstmt->setInt(8, conf.paperDeadline.getYear());
+        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
+        pstmt->setInt(10, conf.allocationDate.getDay());
+        pstmt->setInt(11, conf.allocationDate.getMonth());
+        pstmt->setInt(12, conf.allocationDate.getYear());
+        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
+        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf.discussDeadline.getDay());
+        pstmt->setInt(23, conf.discussDeadline.getMonth());
+        pstmt->setInt(24, conf.discussDeadline.getYear());
+        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf.reviewersPerPaper);
+	pstmt->setInt(27, conf.postWordLimit);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store confID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getconfID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int confID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise
+      	if (conf.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertConfKeyword);
+		std::vector<std::string>::const_iterator it;
+      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			
+			pstmt->setInt(1, confID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+void Database::updateConf(Conference conf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getConfID = "SELECT confID FROM Conference where name = ?";
+
+	const char* updateConference = "UPDATE Conference SET confID=?, name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
+
+        const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
+	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Store confID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getConfID);
+        pstmt->setString(1, conf.title);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int confID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Conference
+        pstmt = dbcon->prepareStatement(updateConference);
+
+        pstmt->setString(1, conf.title);
+        pstmt->setString(2, conf.topic);
+        pstmt->setString(3, conf.description);
+        pstmt->setString(4, conf.location);
+        pstmt->setBoolean(5, conf.isActive);
+	int day = conf.paperDeadline.getDay();
+	int month = conf.paperDeadline.getMonth();
+	int year = conf.paperDeadline.getYear();
+        pstmt->setInt(6, day);
+        pstmt->setInt(7, month);
+        pstmt->setInt(8, year);
+        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
+        pstmt->setInt(10, conf.allocationDate.getDay());
+        pstmt->setInt(11, conf.allocationDate.getMonth());
+        pstmt->setInt(12, conf.allocationDate.getYear());
+        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
+        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf.discussDeadline.getDay());
+        pstmt->setInt(23, conf.discussDeadline.getMonth());
+        pstmt->setInt(24, conf.discussDeadline.getYear());
+        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf.reviewersPerPaper);
+	pstmt->setInt(27, conf.postWordLimit);
+	pstmt->setInt(28, confID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Delete
+        pstmt = dbcon->prepareStatement(deleteKeywords);
+        pstmt->setInt(1, confID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Insert
+      	if (conf.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		std::vector<std::string>::const_iterator it;
+      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			pstmt->setInt(1, confID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+std::vector<int> Database::allConfIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> vptr;
+
+        const char* selectall = "select confID from Conference";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr.push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> Database::allConfNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> vptr;
+
+        const char* selectall = "select name from Conference";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr.push_back(aname);
+        }
+
+        return vptr;
+}
+
+std::vector<int> Database::activeConfIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> vptr;
+
+        const char* selectActive = "SELECT confID FROM Conference WHERE active = 1";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectActive);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr.push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> Database::activeConfNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> vptr;
+
+        const char* selectActive = "SELECT name FROM Conference WHERE active = 1";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectActive);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr.push_back(aname);
+        }
+
+        return vptr;
+}
+
+PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperSummary = "SELECT paperName FROM Paper WHERE paperID=?";
+
+        // =======================================
+        // Paper Summary 
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperSummary);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return PaperSummary();
+	}
+
+        std::string paperName = rs->getString(1);
+
+        delete rs;
+        delete pstmt;
+
+        PaperSummary papSum(key, paperName);
+	
+	return papSum;
+}
+
+std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int authorID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and paperID IN (SELECT paperID FROM paperAuthors WHERE authorID=?))";
+
+        // =======================================
+        // Paper Summary 
+	std::vector<PaperSummary> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperSummary);
+	pstmt->setInt(1, confID);
+	pstmt->setInt(2, authorID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+        	std::string paperName = rs->getString(1);
+        	int paperID = rs->getInt(2);
+        	PaperSummary papSum(paperID, paperName);
+                vec.push_back(papSum);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+Paper Database::fetchPaper(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaper = "SELECT * FROM Paper WHERE paperID=?";
+	const char* getConfKeyword = "SELECT keyword FROM Keywords WHERE keywordID=(SELECT keywordID FROM Paper WHERE paperID=?)";
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
+	
+	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
+
+	const char* getDiscussPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
+
+	const char* getReviews = "SELECT * FROM Review WHERE (paperID=? and confID=?)";
+	
+        // =======================================
+        // Paper
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaper);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Paper();
+	}
+
+    	int paperID = rs->getInt(1);
+	int confID = rs->getInt(3);
+    	int leadAuthorID = rs->getInt(2);
+    	std::string title = rs->getString(5);
+    	std::string abstract = rs->getString(6);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // confKeyword
+	pstmt = dbcon->prepareStatement(getConfKeyword);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+	haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Paper();
+	}
+
+	std::string confKeyword = rs->getString(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Paper Keywords
+        std::vector<std::string> keywords;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Authors 
+        std::vector<PersonalInfo> authors;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int infoID = rs->getInt(1);
+		std::string name = rs->getString(3);
+		std::string email = rs->getString(4);
+		std::string organisation = rs->getString(5);
+		std::string phone = rs->getString(6);
+		PersonalInfo pInfo(name, email, organisation, phone, infoID);
+                authors.push_back(pInfo);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Discussion
+        std::list<DiscussionPost> discussion;
+	
+	pstmt = dbcon->prepareStatement(getDiscussPost);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string comment = rs->getString(1);
+		int reviewerID = rs->getInt(2);
+		int commentID = rs->getInt(3);
+		DiscussionPost discuss(comment, reviewerID, commentID);
+                discussion.push_back(discuss);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Reviews
+        std::vector<Review> reviews;
+	
+	pstmt = dbcon->prepareStatement(getReviews);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int reviewerID = rs->getInt(3);
+		int overall = rs->getInt(5);
+		int confidence = rs->getInt(6);
+		int relevance = rs->getInt(7);
+		int originality = rs->getInt(8);
+		int significance = rs->getInt(9);
+		int presentation = rs->getInt(10);
+		int techQuality = rs->getInt(11);
+		int evaluation = rs->getInt(12);
+  		std::string commentsStrength = rs->getString(13);
+  		std::string commentsWeakness = rs->getString(14);
+  		std::string commentsSuggestions = rs->getString(15);
+  		std::string commentsShortPaper = rs->getString(16);
+  		std::string commentsBestAward = rs->getString(17);
+
+		Review review(paperID, 
+			reviewerID, 
+			overall, 
+			confidence, 
+			relevance, 
+			originality, 
+			significance, 
+			presentation, 
+			techQuality, 
+			evaluation, 
+			commentsStrength, 
+			commentsWeakness, 
+			commentsSuggestions, 
+			commentsShortPaper, 
+			commentsBestAward);
+		reviews.push_back(review);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	Paper paper(
+		paperID,
+		confID,
+		leadAuthorID,
+		title,
+		abstract,
+		authors,
+		keywords,
+		confKeyword,
+		reviews,
+		discussion);
+
+	return paper;
+}
+
+void Database::createPaper(Paper paper, std::string pdf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertPaper = "INSERT INTO Paper(paperID, leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(NULL, ?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?), ?, ?, ?)";
+	const char* getPaperID = "SELECT LAST_INSERT_ID()";
+	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
+
+	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Paper
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertPaper);
+        pstmt->setInt(1, paper.leadAuthorID);
+        pstmt->setInt(2, paper.confID);
+        pstmt->setString(3, paper.confKeyword);
+        pstmt->setString(4, paper.title);
+        pstmt->setString(5, paper.abstract);
+        pstmt->setString(6, pdf);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store paperID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int paperID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Paper Authors
+        pstmt = dbcon->prepareStatement(insertAuthors);
+
+	std::vector<PersonalInfo>::const_iterator it;
+	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
+	{
+		PersonalInfo pInfo = *it;	
+
+		pstmt->setInt(1, paperID);
+		pstmt->setInt(2, pInfo.infoID);
+
+	        pstmt->executeUpdate();
+	}
+	delete pstmt;
+
+        // =======================================
+        // Keywords
+      	if (paper.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		std::vector<std::string>::const_iterator it;
+      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			
+			pstmt->setInt(1, paperID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+
+}
+
+void Database::updatePaper(Paper paper)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* updatePaper = "UPDATE Paper SET leadAuthorID=?, confID=?, keywordID=(SELECT keywordID FROM Keywords WHERE keyword=?), paperTitle=?, paperAbstract=? WHERE paperID=?";
+        const char* deleteAuthors = "DELETE FROM paperAuthors WHERE paperID=?";
+	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
+
+        const char* deleteKeywords = "DELETE FROM PaperKeywords WHERE paperID=?";
+	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Paper
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(updatePaper);
+        pstmt->setInt(1, paper.leadAuthorID);
+        pstmt->setInt(1, paper.confID);
+        pstmt->setString(3, paper.confKeyword);
+        pstmt->setString(4, paper.title);
+        pstmt->setString(5, paper.abstract);
+        pstmt->setInt(3, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Authors Delete
+        pstmt = dbcon->prepareStatement(deleteAuthors);
+        pstmt->setInt(1, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Paper Authors
+        pstmt = dbcon->prepareStatement(insertAuthors);
+
+	std::vector<PersonalInfo>::const_iterator it;
+	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
+	{
+		PersonalInfo pInfo = *it;	
+
+		pstmt->setInt(1, paper.paperID);
+		pstmt->setInt(2, pInfo.infoID);
+
+	        pstmt->executeUpdate();
+	}
+	delete pstmt;
+
+        // =======================================
+        // Keywords Delete
+        pstmt = dbcon->prepareStatement(deleteKeywords);
+        pstmt->setInt(1, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Insert
+      	if (paper.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		std::vector<std::string>::const_iterator it;
+      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			pstmt->setInt(1, paper.paperID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+Review Database::fetchReview(int paperID, int reviewerID, int confID) throw (const char*)
+{
+	const char* getReview = "SELECT * FROM Review WHERE (paperID=? and reviewerID=? and confID=?)";
+        // =======================================
+        // Review
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReview);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, reviewerID);
+	pstmt->setInt(3, confID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Review();
+	}
+
+        int reportID = rs->getInt(1);
+        int overall = rs->getInt(5);
+        int confidence = rs->getInt(6);
+        int relevance = rs->getInt(7);
+        int originality = rs->getInt(8);
+        int significance = rs->getInt(9);
+        int presentation = rs->getInt(10);
+        int techQuality = rs->getInt(11);
+        int evaluation = rs->getInt(12);
+        std::string commentsStrength = rs->getString(13);
+        std::string commentsWeakness = rs->getString(14);
+        std::string commentsSuggestions = rs->getString(15);
+        std::string commentsShortPaper = rs->getString(16);
+        std::string commentsBestAward = rs->getString(17);
+
+	Review review(reportID
+		paperID, 
+		reviewerID, 
+		overall, 
+		confidence, 
+		relevance, 
+		originality, 
+		significance, 
+		presentation, 
+		techQuality, 
+		evaluation, 
+		commentsStrength, 
+		commentsWeakness, 
+		commentsSuggestions, 
+		commentsShortPaper, 
+		commentsBestAward);
+
+        delete rs;
+        delete pstmt;
+
+	return review
+}
+
+void Database::modifyReview(Review review, int confID) throw (const char*)
+{
+	const char* insertReview = "INSERT INTO Review(paperID, reviewerID, confID, overall, confidence, relevance, originality, significance, presentation, techQuality, evaluation, commentsStrength, commentsWeakness, commentsSuggestions, commentsShortPaper, commentsBestAward) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 
+	const char* updateReview = "UPDATE Review SET paperID=?, reviewerID=?, confID=?, overall=?, confidence=?, relevance=?, originality=?, significance=?, presentation=?, techQuality=?, evaluation=?, commentsStrength=?, commentsWeakness=?, commentsSuggestions=?, commentsShortPaper=?, commentsBestAward=? WHERE reportID=?"; 
+        // =======================================
+        // Reviews
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertReview);
+	std::vector<Review>::const_iterator it;
+	for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
+	{
+		Review review = *it;	
+
+		if (review.reportID==0)
+		{
+			pstmt = dbcon->prepareStatement(insertReview);
+
+			pstmt->setInt(1, paper.paperID);
+			pstmt->setInt(2, review.reviewerID);
+			pstmt->setInt(3, paper.confID);
+			pstmt->setInt(4, review.overall);
+			pstmt->setInt(5, review.confidence);
+			pstmt->setInt(6, review.relevance);
+			pstmt->setInt(7, review.originality);
+			pstmt->setInt(8, review.significance);
+			pstmt->setInt(9, review.presentation);
+			pstmt->setInt(10, review.techQuality);
+			pstmt->setInt(11, review.evaluation);
+			pstmt->setString(12, review.commentsStrength);
+			pstmt->setString(13, review.commentsWeakness);
+			pstmt->setString(14, review.commentsSuggestions);
+			pstmt->setString(15, review.commentsShortPaper);
+			pstmt->setString(16, review.commentsBestAward);
+
+	        	pstmt->executeUpdate();
+		}
+		else
+		{
+			pstmt = dbcon->prepareStatement(updateReview);
+
+			pstmt->setInt(1, paper.paperID);
+			pstmt->setInt(2, review.reviewerID);
+			pstmt->setInt(3, paper.confID);
+			pstmt->setInt(4, review.overall);
+			pstmt->setInt(5, review.confidence);
+			pstmt->setInt(6, review.relevance);
+			pstmt->setInt(7, review.originality);
+			pstmt->setInt(8, review.significance);
+			pstmt->setInt(9, review.presentation);
+			pstmt->setInt(10, review.techQuality);
+			pstmt->setInt(11, review.evaluation);
+			pstmt->setString(12, review.commentsStrength);
+			pstmt->setString(13, review.commentsWeakness);
+			pstmt->setString(14, review.commentsSuggestions);
+			pstmt->setString(15, review.commentsShortPaper);
+			pstmt->setString(16, review.commentsBestAward);
+			pstmt->setInt(17, review.reportID);
+
+	        	pstmt->executeUpdate();
+		}
+	}
+	delete pstmt;
+}
+
+Discussion Database::fetchDiscussion(int paperID, int confID) throw (const char*)
+{
+	const char* getDiscussion = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
+        // =======================================
+        // Discussion
+        std::list<DiscussionPost> discussion;
+	
+	pstmt = dbcon->prepareStatement(getDiscussion);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string comment = rs->getString(1);
+		int reviewerID = rs->getInt(2);
+		int commentID = rs->getInt(3);
+		DiscussionPost discuss(comment, reviewerID, commentID);
+                discussion.push_back(discuss);
+        }
+
+        delete rs;
+        delete pstmt;
+}
+
+DiscussionPost Database::fetchRebuttal(int paperID, int userId, int confID) throw (const char*)
+{
+	const char* getDiscussionPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and reviewerID=? and confID=?)";
+
+        // =======================================
+        // Discussion Post
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getDiscussion);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, userID);
+	pstmt->setInt(3, confID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return DiscussionPost();
+	}
+
+	std::string comment = rs->getString(1);
+	int reviewerID = rs->getInt(2);
+	int commentID = rs->getInt(3);
+	DiscussionPost discuss(comment, reviewerID, commentID);
+
+        delete rs;
+        delete pstmt;
+	
+	return discuss
+}
+
+void Database::createDiscussionPost(DiscussionPost discussionPost, int paperID, int confID) throw (const char*)
+{
+	const char* insertDiscussPost = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
+        // =======================================
+        // Discussion
+        sql::PreparedStatement *pstmt = NULL;
+
+	pstmt = dbcon->prepareStatement(insertDiscussPost);
+	
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+	pstmt->setInt(3, discussionPost.reviewerID);
+	pstmt->setString(4, discussionPost.comment);
+
+	pstmt->executeUpdate();
+
+	delete pstmt;
+}
+
+std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAuthors = "SELECT authorID FROM paperAuthors WHERE paperID=?";
+
+        // =======================================
+        // Authors
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setInt(1, paperID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int authorID = rs->getInt(1);
+                vec.push_back(authorID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<std::string> Database::getOrganisationForAuthor(int infoID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getOrg = "SELECT organisation FROM PersonalInfo WHERE infoID=?";
+
+        // =======================================
+        // Org
+	std::vector<std::string> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getOrg);
+	pstmt->setInt(1, infoID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string org = rs->getString(1);
+                vec.push_back(org);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and userID IN (SELECT userID FROM PersonalInfo WHERE (userID IS NOT NULL and organisation=?))";
+
+        // =======================================
+        // Reviewers
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewers);
+	pstmt->setString(1, org);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int reviewerID = rs->getInt(1);
+                vec.push_back(reviewerID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<int> Database::getPapersForAuthor(int authorID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPapers = "SELECT paperID FROM paperAuthors WHERE authorID=?";
+
+        // =======================================
+        // Papers
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPapers);
+	pstmt->setInt(1, authorID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<std::string> Database::getKeywordsForPaper(int paperID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
+
+        // =======================================
+        // Paper Keywords
+        std::vector<std::string> keywords;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, paperID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return keywords;
+}
+
+std::vector<std::string> Database::getKeywordsForUser(int userID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
+
+        // =======================================
+        // Expertise Keywords
+        std::vector<std::string> keywords;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserKeywords);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return keywords;
+}
+
+std::vector<int> Database::getReviewersForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and confID=?)";
+
+        // =======================================
+        // Reviewers
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewers);
+	pstmt->setInt(1, confID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int userID = rs->getInt(1);
+                vec.push_back(userID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+int Database::getReviewerPreference(int userID, int confID, int paperID) throw (const char*)
+{
+	const char* getReviewerPreference = "SELECT preference FROM ReviewerPreference WHERE (userID=? and confID=? and paperID=?)";
+
+        // =======================================
+        // Reviewer Preference
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewerPreference);
+	pstmt->setInt(1, userID);
+	pstmt->setInt(2, confID);
+	pstmt->setInt(3, paperID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return -1;
+	}
+
+    	int preference = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+	
+	return preference;
+}
+
+std::vector<int> Database::getPaperIDsForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE confID=?";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM PaperAssigned WHERE (reviewerID=? and confID)";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, reviewerID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE (leadAuthorID=? and confID=?)";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, leadAuthorID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+std::vector<int> Database::getUserIDsForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserIDs = "SELECT userID FROM UserType WHERE confID=?";
+
+        // =======================================
+        // User ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserIDs);
+	pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+
+
+//
+//std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//        // Laboured
+//        // First get a list of the ids with the role, then one by one get the
+//        // complete records.
+//        const char* getrolepersons = "selects personid from roles where _role=?";
+//
+//        sql::PreparedStatement *pstmt = NULL;
+//        sql::ResultSet * rs = NULL;
+//
+//        pstmt = dbcon->prepareStatement(getrolepersons);
+//        pstmt->setString(1, role);
+//        rs = pstmt->executeQuery();
+//
+//        bool haveRecord = rs->next();
+//        if (!haveRecord)
+//        {
+//                delete rs;
+//                delete pstmt;
+//                return NULL;
+//        }
+//
+//        std::vector<std::string> people;
+//
+//        // rc = sqlite3_step(stmt);
+//
+//        while (rs->next()) {
+//                std::string apersonid = std::string(rs->getString(1));
+////              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
+//                people.push_back(apersonid);
+//        }
+//
+//        // Maybe there weren't any
+//        if (people.size() == 0)
+//                return NULL;
+//
+//        // Build collection by getting each record
+//        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+//
+//        std::vector<std::string>::const_iterator it;
+//        for (it = people.begin(); it != people.end(); it++) {
+//                std::string aperson = *it;
+//                MyRecord* rec = this->get(aperson.c_str());
+//                roleholders->push_back(rec);
+//        }
+//
+//        return roleholders;
+//}
+//
+
+//bool Database::deleteUser(int* key) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//        // explicitly delete subordinate records in Phones, Address, others and Roles
+//        // then delete the myrecord entry
+//        // recreating the prepared statements for each operation - costly
+//        const char* deletephones = "delete from phones where personid=?";
+//        const char* deleteaddress = "delete from addresses where personid=?";
+//        const char* deleteother = "delete from other where personid=?";
+//        const char* deleteroles = "delete from roles where personid=?";
+//        const char* deletemyrecord = "delete from myrecord where _id=?";
+//        const char* unused; // Pointer to unused part of sql string (?)
+//        sql::PreparedStatement *pstmt = NULL;
+//        // Phones
+//        pstmt = dbcon->prepareStatement(deletephones);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        // Addresses
+//        pstmt = dbcon->prepareStatement(deleteaddress);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        //Other
+//        pstmt = dbcon->prepareStatement(deleteother);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        // Roles
+//        pstmt = dbcon->prepareStatement(deleteroles);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        // Finally
+//        pstmt = dbcon->prepareStatement(deletemyrecord);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        return true;
+//}
+//
+//
+//MyRecord *Database::get(const char* key) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//        // Again laborious
+//        // Load the MyRecord from its table, then add data from Other tables.
+//        const char* getrecord = "select * from myrecord where _id=?";
+//        const char* getroles = "select role from roles where personid=?";
+//        const char* getphones = "select type, number from phones where personid=?";
+//        const char* getaddress = "select type, address from addresses where personid=?";
+//        const char* getother = "select key, valyue from other where personid=?";
+//
+//        sql::PreparedStatement *pstmt = NULL;
+//        sql::ResultSet *rs = NULL;
+//
+//        pstmt = dbcon->prepareStatement(getrecord);
+//        pstmt->setString(1, key);
+//        rs = pstmt->executeQuery();
+//        bool haveRecord = rs->next();
+//        if (!haveRecord)
+//        {
+//                delete rs;
+//                delete pstmt;
+//                return NULL;
+//        }
+//
+//        std::string id = rs->getString(1);
+//        std::string name = rs->getString(2);
+//        std::string email = rs->getString(3);
+//        std::string info = rs->getString(4);
+//        std::string image = rs->getString(5);
+//
+//        MyRecord *arec = new MyRecord(id);
+//        arec->setName(name);
+//        arec->setEmail(email);
+//        arec->setInfo(info);
+//        arec->setImage(image);
+//
+//        delete rs;
+//        delete pstmt;
+//        // =======================================
+//        // Now ask about roles
+//        pstmt = dbcon->prepareStatement(getroles);
+//        pstmt->setString(1, key);
+//        rs = pstmt->executeQuery();
+//        while (rs->next())
+//        {
+//                std::string arole = rs->getString(1);
+//                arec->addRole(arole);
+//        }
+//        delete rs;
+//        delete pstmt;
+//}
+//
+//void Database::recordToTables(const MyRecord* data)
+//{
+//        if (invalid)
+//                throw (noDB);
+//
+//        // Insert the myrecord data first, then deal with Other data tables
+//
+//        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
+//        const char* putrole = "insert into roles values(?, ?)";
+//        const char* putphone = "insert into phones values (?, ?, ?)";
+//        const char* putaddress = "insert into addresses values (?, ?, ?)";
+//        const char* putother = "insert into other values (?, ?, ?)";
+//
+//        sql::PreparedStatement *pstmt = NULL;
+//        pstmt = dbcon->prepareStatement(putmyrecord);
+//        pstmt->setString(1, data->getID());
+//        pstmt->setString(2, data->getName());
+//        pstmt->setString(3, data->getEmail());
+//        pstmt->setString(4, data->getInfo());
+//        pstmt->setString(5, data->getImage());
+//
+//        pstmt->executeUpdate();
+//
+//        delete pstmt;
+//
+//        // Role 
+////      if (data->getOtherKV().size() > 0)
+////      {
+////              pstmt = dbcon->prepareStatement(putother);
+////              std::map<std::string, std::string>::const_iterator it;
+////              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
+////              {
+////                      std::string akey = it->first;
+////                      std::string avalue = it->second;
+////                      pstmt->setString(1, data->getID());
+////                      pstmt->setString(2, akey);
+////                      pstmt->setString(3, avalue);
+////                      pstmt->executeUpdate();
+////              }
+////              delete pstmt;
+////
+////      }
+//
+////      // Other
+////      if (data->getOtherKV().size() > 0)
+////      {
+////              pstmt = dbcon->prepareStatement(putother);
+////              std::map<std::string, std::string>::const_iterator it;
+////              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+////              {
+////                      std::string akey = it->first;
+////                      std::string avalue = it->second;
+////                      pstmt->setString(1, data->getID());
+////                      pstmt->setString(2, akey);
+////                      pstmt->setString(3, avalue);
+////                      pstmt->executeUpdate();
+////              }
+////              delete pstmt;
+////
+////      }
+//}

commit 7abb13a55dd220ccb6a19931b3109b7f7f3ef0ff
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 01:59:18 2014 +1100

    Update create_tables.txt

commit 32f62d000e890ef5164589a7709102c9a51188eb
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 01:36:13 2014 +1100

    Update Conference.hpp

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index ab42838..7d2c61e 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -194,14 +194,14 @@ inline QDataStream& operator>>(QDataStream& in, Conference* conf)
     
     in >> conf->isActive;
     in >> tempQstring;
-    conf->title = tempQstring.toStlString();
+    conf->title = tempQstring.toStdString();
     in >> conf->confID;
-    tempQstring = QString::fromStdString(conf->topic);
     in >> tempQstring;
-    tempQstring = QString::fromStdString(conf->description);
+    conf->topic = tempQstring.toStdString();
     in >> tempQstring;
-    tempQstring = QString::fromStdString(conf->location);
+    conf->description = tempQstring.toStdString();
     in >> tempQstring;
+    conf->location = tempQstring.toStdString();
     
     in >>  tempQvector;
     for (unsigned int i = 0; i < tempQvector.size(); ++i)
@@ -229,15 +229,15 @@ inline QDataStream& operator>>(QDataStream& in, Conference& conf)
     QVector<QString> tempQvector;
     
     in >> conf.isActive;
-    tempQstring = QString::fromStdString(conf.title);
     in >> tempQstring;
+    conf.title = tempQstring.toStdString();
     in >> conf.confID;
-    tempQstring = QString::fromStdString(conf.topic);
     in >> tempQstring;
-    tempQstring = QString::fromStdString(conf.description);
+    conf.topic = tempQstring.toStdString();
     in >> tempQstring;
-    tempQstring = QString::fromStdString(conf.location);
+    conf.description = tempQstring.toStdString();
     in >> tempQstring;
+    conf.location = tempQstring.toStdString();
     
     in >>  tempQvector;
     for (unsigned int i = 0; i < tempQvector.size(); ++i)
@@ -256,6 +256,7 @@ inline QDataStream& operator>>(QDataStream& in, Conference& conf)
     in >>  conf.discussDeadline;
     in >>  conf.reviewersPerPaper;
     in >>  conf.postWordLimit;
+    return in;
 }
 
 #endif

commit c4699d8baea7e1c392b190f4fa94b9c03ec805f1
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 01:29:06 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index d6d2d00..f258b7e 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -164,7 +164,6 @@ CREATE TABLE `Review` (
 	`commentsSuggestions` text,
 	`commentsShortPaper` text,
 	`commentsBestAward` text,
-	`authorRebuttal` text,
 	PRIMARY KEY(`reportID`),
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
 	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`),

commit 5d10789bdfe8e69de171585fc026911b92d79b28
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Mon Oct 27 01:25:41 2014 +1100

    Update Conference.hpp

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index e19dc60..ab42838 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -193,8 +193,8 @@ inline QDataStream& operator>>(QDataStream& in, Conference* conf)
     QVector<QString> tempQvector;
     
     in >> conf->isActive;
-    tempQstring = QString::fromStdString(conf->title);
     in >> tempQstring;
+    conf->title = tempQstring.toStlString();
     in >> conf->confID;
     tempQstring = QString::fromStdString(conf->topic);
     in >> tempQstring;

commit f23fbb904c8367e9040ccdb2d55d3a5313d82195
Merge: 4ba429d fb6f079
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 01:19:24 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 4ba429dc6ddad715a0a13341eca615fb63f337d1
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 01:19:14 2014 +1100

    added qdatastream operators

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index f4e3970..e19dc60 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -5,6 +5,9 @@
 
 #include <string>
 #include <vector>
+#include <QString>
+#include <QVector>
+#include <QDataStream>
 
 struct Conference {
   Conference() {}
@@ -109,21 +112,21 @@ Conference(bool iisActive, //no confID
 
 };
 
-inline QDataStream& operator<<(QDataStream& out, const Conference* conf)
+inline QDataStream& operator<<(QDataStream& out, Conference* conf)
 {
     QString tempQstring;
     QVector<QString> tempQvector;
     
     out << conf->isActive;
     tempQstring = QString::fromStdString(conf->title);
-    out << conf->tempQstring;
-    out << conf->confID{0};
+    out << tempQstring;
+    out << conf->confID;
     tempQstring = QString::fromStdString(conf->topic);
-    out << conf->tempQstring;
+    out << tempQstring;
     tempQstring = QString::fromStdString(conf->description);
-    out << conf->tempQstring;
+    out << tempQstring;
     tempQstring = QString::fromStdString(conf->location);
-    out << conf->tempQstring;
+    out << tempQstring;
     
     for (unsigned int i = 0; i < conf->keywords.size(); ++i)
     {
@@ -148,21 +151,21 @@ inline QDataStream& operator<<(QDataStream& out, const Conference* conf)
     return out;
 }
 
-inline QDataStream& operator<<(QDataStream& out, const Conference& conf)
+inline QDataStream& operator<<(QDataStream& out, Conference& conf)
 {
     QString tempQstring;
     QVector<QString> tempQvector;
     
     out << conf.isActive;
     tempQstring = QString::fromStdString(conf.title);
-    out << conf.tempQstring;
-    out << conf.confID{0};
+    out << tempQstring;
+    out << conf.confID;
     tempQstring = QString::fromStdString(conf.topic);
-    out << conf.tempQstring;
+    out << tempQstring;
     tempQstring = QString::fromStdString(conf.description);
-    out << conf.tempQstring;
+    out << tempQstring;
     tempQstring = QString::fromStdString(conf.location);
-    out << conf.tempQstring;
+    out << tempQstring;
     
     for (unsigned int i = 0; i < conf.keywords.size(); ++i)
         tempQvector.append(QString::fromStdString(conf.keywords[i]));
@@ -189,16 +192,16 @@ inline QDataStream& operator>>(QDataStream& in, Conference* conf)
     QString tempQstring;
     QVector<QString> tempQvector;
     
-    in >>  conf->isActive;
+    in >> conf->isActive;
     tempQstring = QString::fromStdString(conf->title);
-    in >>  conf->tempQstring;
-    in >>  conf->confID{0};
+    in >> tempQstring;
+    in >> conf->confID;
     tempQstring = QString::fromStdString(conf->topic);
-    in >>  conf->tempQstring;
+    in >> tempQstring;
     tempQstring = QString::fromStdString(conf->description);
-    in >>  conf->tempQstring;
+    in >> tempQstring;
     tempQstring = QString::fromStdString(conf->location);
-    in >>  conf->tempQstring;
+    in >> tempQstring;
     
     in >>  tempQvector;
     for (unsigned int i = 0; i < tempQvector.size(); ++i)
@@ -220,21 +223,21 @@ inline QDataStream& operator>>(QDataStream& in, Conference* conf)
     return in;
 }
 
-inline QDataStream& operator>>(QDataStream& in, const Conference& conf)
+inline QDataStream& operator>>(QDataStream& in, Conference& conf)
 {
     QString tempQstring;
     QVector<QString> tempQvector;
     
-    in >>  conf.isActive;
+    in >> conf.isActive;
     tempQstring = QString::fromStdString(conf.title);
-    in >>  conf.tempQstring;
-    in >>  conf.confID{0};
+    in >> tempQstring;
+    in >> conf.confID;
     tempQstring = QString::fromStdString(conf.topic);
-    in >>  conf.tempQstring;
+    in >> tempQstring;
     tempQstring = QString::fromStdString(conf.description);
-    in >>  conf.tempQstring;
+    in >> tempQstring;
     tempQstring = QString::fromStdString(conf.location);
-    in >>  conf.tempQstring;
+    in >> tempQstring;
     
     in >>  tempQvector;
     for (unsigned int i = 0; i < tempQvector.size(); ++i)
@@ -255,5 +258,4 @@ inline QDataStream& operator>>(QDataStream& in, const Conference& conf)
     in >>  conf.postWordLimit;
 }
 
-
 #endif
diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
index e57ad2b..53907fc 100644
--- a/DataAll/Date.hpp
+++ b/DataAll/Date.hpp
@@ -2,6 +2,7 @@
 #define DATE_H
 
 #include <sstream>
+#include <QDataStream>
 
 class Date {
     
@@ -60,35 +61,43 @@ private:
     
 };
 
-inline QDataStream& operator<<(QDataStream& out, const Date* d)
+inline QDataStream& operator<<(QDataStream& out, Date* d)
 {
-    out << d->day;
-    out << d->month;
-    out << d->year;
+    out << d->getDay();
+    out << d->getMonth();
+    out << d->getYear();
     return out;
 }
 
-inline QDataStream& operator<<(QDataStream& out, const Date& d)
+inline QDataStream& operator<<(QDataStream& out, Date& d)
 {
-    out << d.day;
-    out << d.month;
-    out << d.year;
+    out << d.getDay();
+    out << d.getMonth();
+    out << d.getYear();
     return out;
 }
 
 inline QDataStream& operator>>(QDataStream& in, Date* d)
 {
-    in >> d->day;
-    in >> d->month;
-    in >> d->year;
+    int tmp;
+    in >> tmp;
+    d->setDay(tmp);
+    in >> tmp;
+    d->setMonth(tmp);
+    in >> tmp;
+    d->setYear(tmp);
     return in;
 }
 
-inline QDataStream& operator>>(QDataStream& in, const Date& d)
+inline QDataStream& operator>>(QDataStream& in, Date& d)
 {
-    in >> d.day;
-    in >> d.month;
-    in >> d.year;
+    int tmp;
+    in >> tmp;
+    d.setDay(tmp);
+    in >> tmp;
+    d.setMonth(tmp);
+    in >> tmp;
+    d.setYear(tmp);
     return in;
 }
 
diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index e057313..6139e18 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -26,7 +26,7 @@ struct PersonalInfo {
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
-         const std::string& iphone,
+         const std::string& iphone
          ):
          name(iname),
          email(iemail),

commit fb6f0796e5d2d1fec60b459448daa3df3829d731
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 01:15:55 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 3107637..c39da37 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -25,6 +25,7 @@ public:
   //bool deleteDiscPost(int);
   void modifyDiscPost(int);
   //bool deleteReview(int);
+  void addReview();
   void modifyReview(int);
   //bool deletePaper(int);
   void sendPaper(); //just send a paper

commit 1ac2351f2aa3c05101853173ab29f10153aac8f7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 01:15:52 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index bba3095..f5ed05f 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -3,12 +3,6 @@ void PaperManager::fetchPaper(int paperID)
   *currentPaper = database->fetchPaper(paperID);
 }
 
-void PaperManager::sendPaper(int paperID)
-{
-  fetchPaper(paperID);
- //send *currentPaper to the client
-}
-
 void PaperManager::addPaper(const std::string& pdf)
 {
   database->createPaper(*currentPaper, pdf);
@@ -25,6 +19,22 @@ void PaperManager::modifyPDF(int paperID, int confID, const std::string& pdf)
    database->updatePDF(paperID, confID, pdf);
 }
 
+void PaperManager::addReview()
+{
+ 
+}
+
+void PaperManager::modifyReview(int confID, int reportID)
+{
+ 
+}
+
+void PaperManager::sendPaper(int paperID)
+{
+  fetchPaper(paperID);
+ //send *currentPaper to the client
+}
+
 void PaperManager::sendPaperSummaryBatch(int confID)
 {
   std::vector<int> paperIDsOfConf = database->getPaperIDsForConf(confID);

commit b72111a65e6273c0375dc99881774b70351eb313
Merge: b523fb4 b5d3130
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 01:04:36 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit b523fb4f51fea85ea70091d96fc239defed5493c
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Mon Oct 27 01:04:27 2014 +1100

    wip compile database

diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
index a1bba23..9b98d0c 100644
--- a/DataAll/Review.hpp
+++ b/DataAll/Review.hpp
@@ -14,7 +14,7 @@ struct Review {
     int isignificance,
     int ipresentation,
     int itechQuality,
-    int ievalution,
+    int ievaluation,
     const std::string& icommentsStrength,
     const std::string& icommentsWeakness,
     const std::string& icommentsSuggestions,
@@ -29,7 +29,7 @@ struct Review {
     significance(isignificance),
     presentation(ipresentation),
     techQuality(itechQuality),
-    evalution(ievalution),
+    evaluation(ievaluation),
     commentsStrength(icommentsStrength),
     commentsWeakness(icommentsWeakness),
     commentsSuggestions(icommentsSuggestions),
@@ -47,7 +47,7 @@ struct Review {
     int isignificance,
     int ipresentation,
     int itechQuality,
-    int ievalution,
+    int ievaluation,
     const std::string& icommentsStrength,
     const std::string& icommentsWeakness,
     const std::string& icommentsSuggestions,
@@ -63,7 +63,7 @@ struct Review {
     significance(isignificance),
     presentation(ipresentation),
     techQuality(itechQuality),
-    evalution(ievalution),
+    evaluation(ievaluation),
     commentsStrength(icommentsStrength),
     commentsWeakness(icommentsWeakness),
     commentsSuggestions(icommentsSuggestions),
@@ -81,7 +81,7 @@ struct Review {
   int significance{0};
   int presentation{0};
   int techQuality{0};
-  int evalution{0};
+  int evaluation{0};
   std::string commentsStrength{""};
   std::string commentsWeakness{""};
   std::string commentsSuggestions{""};
diff --git a/Database/Database.cpp b/Database/Database.cpp
index dbedb16..1c51c4a 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1202,6 +1202,7 @@ void Database::updatePaper(Paper paper)
 
         // =======================================
         // Paper
+        sql::PreparedStatement *pstmt = NULL;
         pstmt = dbcon->prepareStatement(updatePaper);
         pstmt->setInt(1, paper.leadAuthorID);
         pstmt->setInt(1, paper.confID);
@@ -1232,7 +1233,7 @@ void Database::updatePaper(Paper paper)
 	{
 		PersonalInfo pInfo = *it;	
 
-		pstmt->setInt(1, paperID);
+		pstmt->setInt(1, paper.paperID);
 		pstmt->setInt(2, pInfo.infoID);
 
 	        pstmt->executeUpdate();
@@ -1242,7 +1243,7 @@ void Database::updatePaper(Paper paper)
         // =======================================
         // Keywords Delete
         pstmt = dbcon->prepareStatement(deleteKeywords);
-        pstmt->setInt(1, userID);
+        pstmt->setInt(1, paper.paperID);
 
         pstmt->executeUpdate();
 
@@ -1261,7 +1262,7 @@ void Database::updatePaper(Paper paper)
 			{
 				this->addKeyword(word);
 			}
-			pstmt->setInt(1, paperID);
+			pstmt->setInt(1, paper.paperID);
 			pstmt->setString(2, word);
 
       		        pstmt->executeUpdate();
@@ -1280,12 +1281,12 @@ void Database::updatePaper(Paper paper)
 		{
 			DiscussionPost discuss = *it;	
 
-        		if (discuss->postID==0)
+        		if (discuss.postID==0)
 			{
-				pstmt->setInt(1, paperID);
+				pstmt->setInt(1, paper.paperID);
 				pstmt->setInt(2, paper.confID);
-				pstmt->setInt(3, discuss->reviewerID);
-				pstmt->setString(4, discuss->comment);
+				pstmt->setInt(3, discuss.reviewerID);
+				pstmt->setString(4, discuss.comment);
 
       		        	pstmt->executeUpdate();
 			}
@@ -1304,26 +1305,26 @@ void Database::updatePaper(Paper paper)
 		{
 			Review review = *it;	
 
-        		if (review->reportID==0)
+        		if (review.reportID==0)
 			{
       				pstmt = dbcon->prepareStatement(insertReview);
 
-				pstmt->setInt(1, paperID);
-				pstmt->setInt(2, review->reviewerID);
+				pstmt->setInt(1, paper.paperID);
+				pstmt->setInt(2, review.reviewerID);
 				pstmt->setInt(3, paper.confID);
-				pstmt->setInt(4, review->overall);
-				pstmt->setInt(5, review->confidence);
-				pstmt->setInt(6, review->relevance);
-				pstmt->setInt(7, review->originality);
-				pstmt->setInt(8, review->significance);
-				pstmt->setInt(9, review->presentation);
-				pstmt->setInt(10, review->techQuality);
-				pstmt->setInt(11, review->evaluation);
-				pstmt->setString(12, review->commentsStrength);
-				pstmt->setString(13, review->commentsWeakness);
-				pstmt->setString(14, review->commentsSuggestions);
-				pstmt->setString(15, review->commentsShortPaper);
-				pstmt->setString(16, review->commentsBestAward);
+				pstmt->setInt(4, review.overall);
+				pstmt->setInt(5, review.confidence);
+				pstmt->setInt(6, review.relevance);
+				pstmt->setInt(7, review.originality);
+				pstmt->setInt(8, review.significance);
+				pstmt->setInt(9, review.presentation);
+				pstmt->setInt(10, review.techQuality);
+				pstmt->setInt(11, review.evaluation);
+				pstmt->setString(12, review.commentsStrength);
+				pstmt->setString(13, review.commentsWeakness);
+				pstmt->setString(14, review.commentsSuggestions);
+				pstmt->setString(15, review.commentsShortPaper);
+				pstmt->setString(16, review.commentsBestAward);
 
       		        	pstmt->executeUpdate();
 			}
@@ -1331,23 +1332,23 @@ void Database::updatePaper(Paper paper)
 			{
       				pstmt = dbcon->prepareStatement(updateReview);
 
-				pstmt->setInt(1, paperID);
-				pstmt->setInt(2, review->reviewerID);
+				pstmt->setInt(1, paper.paperID);
+				pstmt->setInt(2, review.reviewerID);
 				pstmt->setInt(3, paper.confID);
-				pstmt->setInt(4, review->overall);
-				pstmt->setInt(5, review->confidence);
-				pstmt->setInt(6, review->relevance);
-				pstmt->setInt(7, review->originality);
-				pstmt->setInt(8, review->significance);
-				pstmt->setInt(9, review->presentation);
-				pstmt->setInt(10, review->techQuality);
-				pstmt->setInt(11, review->evaluation);
-				pstmt->setString(12, review->commentsStrength);
-				pstmt->setString(13, review->commentsWeakness);
-				pstmt->setString(14, review->commentsSuggestions);
-				pstmt->setString(15, review->commentsShortPaper);
-				pstmt->setString(16, review->commentsBestAward);
-				pstmt->setInt(17, review->reportID);
+				pstmt->setInt(4, review.overall);
+				pstmt->setInt(5, review.confidence);
+				pstmt->setInt(6, review.relevance);
+				pstmt->setInt(7, review.originality);
+				pstmt->setInt(8, review.significance);
+				pstmt->setInt(9, review.presentation);
+				pstmt->setInt(10, review.techQuality);
+				pstmt->setInt(11, review.evaluation);
+				pstmt->setString(12, review.commentsStrength);
+				pstmt->setString(13, review.commentsWeakness);
+				pstmt->setString(14, review.commentsSuggestions);
+				pstmt->setString(15, review.commentsShortPaper);
+				pstmt->setString(16, review.commentsBestAward);
+				pstmt->setInt(17, review.reportID);
 
       		        	pstmt->executeUpdate();
 			}

commit b5d31302f4fc3ab10f5392b6c63b254c3d2a97b7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:55:25 2014 +1100

    Update main.cpp

diff --git a/Database/main.cpp b/Database/main.cpp
index c0ae757..9341699 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -74,8 +74,9 @@ db.putConf(title, conferencetemp);
 
 PersonalInfo infotemp("a", "b", "c", "d");
 
+const int CONFID = 7;
 Paper papertemp(5,
-7,
+CONFID,
 "fee",
 "fi",
 std::vector<PersonalInfo>(infotemp),
@@ -111,6 +112,24 @@ std::vector theUsers{usertemp, usertemp2}; */
                 User user = db.fetchUser(key);
                 std::cout << user.userName << " " << user.name << " " <<  user.keywords[0] << " " << user.email << " " << key << std::endl;
         }
+        
+        std::vector<int> ConfIDs{db.activeConfIDs()};
+        std::vector<int>::iterator confiter;
+        for(confiter=ConfIDs.begin(); confiter!=ConfIDs.end(); confiter++)
+        {
+        	int key = (*iter);
+        	Conference conference = db.fetchConference(key);
+        	std::cout << conference.title << " " << conference.keywords[0] << std::endl;
+        }
+        
+        std::vector<int> PaperIDs{db.getPaperIDsForConf(CONFID)};
+        std::vector<int>::iterator paperiter;
+        for(paperiter=PaperIDs.begin(); paperiter!=PaperIDs.end(); paperiter++)
+        {
+        	int key = (*iter);
+        	Paper paper = db.fetchPaper(key);
+        	std::cout << paper.paperID << " " << paper.confID << " " << paper.leadAuthorID << " " << paper.keywords[0] << std::endl;
+        }
 //        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
 //        {
 //                userPtr ptr = (*it);

commit c216e19c215da7003310f915e6d62fa0d2df0583
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 00:48:21 2014 +1100

    update Paper

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 074e558..6d45323 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -48,6 +48,7 @@ public:
         std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
         Paper fetchPaper(int key) throw (const char*);
         void createPaper(Paper paper, std::string pdf);
+        void updatePaper(Paper paper);
 
 	// ALGO
 	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);

commit 298536a6fbcfc87fe8841b5e4e622ce084f29f51
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 00:48:02 2014 +1100

    update Paper

diff --git a/Database/Database.cpp b/Database/Database.cpp
index e17f0b3..dbedb16 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1107,12 +1107,11 @@ void Database::createPaper(Paper paper, std::string pdf)
         if (invalid)
                 throw (noDB);
 
-	const char* insertPaper = "INSERT INTO Paper(paperID, leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(NULL, ?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?) ?, ?, ?)";
+	const char* insertPaper = "INSERT INTO Paper(paperID, leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(NULL, ?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?), ?, ?, ?)";
 	const char* getPaperID = "SELECT LAST_INSERT_ID()";
 	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
 
 	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
-	const char* insertDiscuss = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
 
         // =======================================
         // Paper
@@ -1183,53 +1182,178 @@ void Database::createPaper(Paper paper, std::string pdf)
 
       	}
 
-//        // =======================================
-//        // Discussion
-//      	if (paper.discussion.discussion.size() > 0)
-//      	{
-//      		pstmt = dbcon->prepareStatement(insertDiscuss);
-//		std::list<DiscussionPost>::const_iterator it;
-//      		for (it = paper.discussion.discussion.begin(); it != paper.discussion.discussion.end(); it ++)
-//		{
-//			DiscussionPost discuss = *it;	
-//
-//        		if (discuss->postID==0)
-//			{
-//				pstmt->setInt(1, paperID);
-//				pstmt->setInt(2, paper.confID);
-//				pstmt->setInt(3, discuss->reviewerID);
-//				pstmt->setString(4, discuss->comment);
-//
-//      		        	pstmt->executeUpdate();
-//			}
-//		}
-//      		delete pstmt;
-//
-//      	}
-//
-//        // =======================================
-//        // Reviews
-//      	if (paper.reviews.size() > 0)
-//      	{
-//      		pstmt = dbcon->prepareStatement(insertReview);
-//		std::vector<Review>::const_iterator it;
-//      		for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
-//		{
-//			Review review = *it;	
-//
-//        		if (discuss->postID==0)
-//			{
-//				pstmt->setInt(1, paperID);
-//				pstmt->setInt(2, paper.confID);
-//				pstmt->setInt(3, discuss->reviewerID);
-//				pstmt->setString(4, discuss->comment);
-//
-//      		        	pstmt->executeUpdate();
-//			}
-//		}
-//      		delete pstmt;
-//
-//      	}
+}
+
+void Database::updatePaper(Paper paper)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* updatePaper = "UPDATE Paper SET leadAuthorID=?, confID=?, keywordID=(SELECT keywordID FROM Keywords WHERE keyword=?), paperTitle=?, paperAbstract=? WHERE paperID=?";
+        const char* deleteAuthors = "DELETE FROM paperAuthors WHERE paperID=?";
+	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
+
+        const char* deleteKeywords = "DELETE FROM PaperKeywords WHERE paperID=?";
+	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+	const char* insertDiscuss = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
+	const char* insertReview = "INSERT INTO Review(paperID, reviewerID, confID, overall, confidence, relevance, originality, significance, presentation, techQuality, evaluation, commentsStrength, commentsWeakness, commentsSuggestions, commentsShortPaper, commentsBestAward) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 
+	const char* updateReview = "UPDATE Review SET paperID=?, reviewerID=?, confID=?, overall=?, confidence=?, relevance=?, originality=?, significance=?, presentation=?, techQuality=?, evaluation=?, commentsStrength=?, commentsWeakness=?, commentsSuggestions=?, commentsShortPaper=?, commentsBestAward=? WHERE reportID=?"; 
+
+
+        // =======================================
+        // Paper
+        pstmt = dbcon->prepareStatement(updatePaper);
+        pstmt->setInt(1, paper.leadAuthorID);
+        pstmt->setInt(1, paper.confID);
+        pstmt->setString(3, paper.confKeyword);
+        pstmt->setString(4, paper.title);
+        pstmt->setString(5, paper.abstract);
+        pstmt->setInt(3, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Authors Delete
+        pstmt = dbcon->prepareStatement(deleteAuthors);
+        pstmt->setInt(1, paper.paperID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Paper Authors
+        pstmt = dbcon->prepareStatement(insertAuthors);
+
+	std::vector<PersonalInfo>::const_iterator it;
+	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
+	{
+		PersonalInfo pInfo = *it;	
+
+		pstmt->setInt(1, paperID);
+		pstmt->setInt(2, pInfo.infoID);
+
+	        pstmt->executeUpdate();
+	}
+	delete pstmt;
+
+        // =======================================
+        // Keywords Delete
+        pstmt = dbcon->prepareStatement(deleteKeywords);
+        pstmt->setInt(1, userID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Insert
+      	if (paper.keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		std::vector<std::string>::const_iterator it;
+      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
+		{
+			std::string word = *it;	
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			pstmt->setInt(1, paperID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+
+        // =======================================
+        // Discussion
+      	if (paper.discussion.discussion.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertDiscuss);
+		std::list<DiscussionPost>::const_iterator it;
+      		for (it = paper.discussion.discussion.begin(); it != paper.discussion.discussion.end(); it ++)
+		{
+			DiscussionPost discuss = *it;	
+
+        		if (discuss->postID==0)
+			{
+				pstmt->setInt(1, paperID);
+				pstmt->setInt(2, paper.confID);
+				pstmt->setInt(3, discuss->reviewerID);
+				pstmt->setString(4, discuss->comment);
+
+      		        	pstmt->executeUpdate();
+			}
+		}
+      		delete pstmt;
+
+      	}
+
+        // =======================================
+        // Reviews
+      	if (paper.reviews.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertReview);
+		std::vector<Review>::const_iterator it;
+      		for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
+		{
+			Review review = *it;	
+
+        		if (review->reportID==0)
+			{
+      				pstmt = dbcon->prepareStatement(insertReview);
+
+				pstmt->setInt(1, paperID);
+				pstmt->setInt(2, review->reviewerID);
+				pstmt->setInt(3, paper.confID);
+				pstmt->setInt(4, review->overall);
+				pstmt->setInt(5, review->confidence);
+				pstmt->setInt(6, review->relevance);
+				pstmt->setInt(7, review->originality);
+				pstmt->setInt(8, review->significance);
+				pstmt->setInt(9, review->presentation);
+				pstmt->setInt(10, review->techQuality);
+				pstmt->setInt(11, review->evaluation);
+				pstmt->setString(12, review->commentsStrength);
+				pstmt->setString(13, review->commentsWeakness);
+				pstmt->setString(14, review->commentsSuggestions);
+				pstmt->setString(15, review->commentsShortPaper);
+				pstmt->setString(16, review->commentsBestAward);
+
+      		        	pstmt->executeUpdate();
+			}
+			else
+			{
+      				pstmt = dbcon->prepareStatement(updateReview);
+
+				pstmt->setInt(1, paperID);
+				pstmt->setInt(2, review->reviewerID);
+				pstmt->setInt(3, paper.confID);
+				pstmt->setInt(4, review->overall);
+				pstmt->setInt(5, review->confidence);
+				pstmt->setInt(6, review->relevance);
+				pstmt->setInt(7, review->originality);
+				pstmt->setInt(8, review->significance);
+				pstmt->setInt(9, review->presentation);
+				pstmt->setInt(10, review->techQuality);
+				pstmt->setInt(11, review->evaluation);
+				pstmt->setString(12, review->commentsStrength);
+				pstmt->setString(13, review->commentsWeakness);
+				pstmt->setString(14, review->commentsSuggestions);
+				pstmt->setString(15, review->commentsShortPaper);
+				pstmt->setString(16, review->commentsBestAward);
+				pstmt->setInt(17, review->reportID);
+
+      		        	pstmt->executeUpdate();
+			}
+		}
+      		delete pstmt;
+      	}
 }
 
 std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)

commit 303ba740450ebdb6686a8c98c4d0cc247271eefb
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 00:47:20 2014 +1100

    reportID added to review

diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
index e10e769..a1bba23 100644
--- a/DataAll/Review.hpp
+++ b/DataAll/Review.hpp
@@ -36,6 +36,42 @@ struct Review {
     commentsShortPaper(icommentsShortPaper),
     commentsBestAward(icommentsBestAward)
     { }
+
+  Review(int ireportID,
+    int ipaperID,
+    int ireviewerID,
+    int ioverall,
+    int iconfidence,
+    int irelevance,
+    int ioriginality,
+    int isignificance,
+    int ipresentation,
+    int itechQuality,
+    int ievalution,
+    const std::string& icommentsStrength,
+    const std::string& icommentsWeakness,
+    const std::string& icommentsSuggestions,
+    const std::string& icommentsShortPaper,
+    const std::string& icommentsBestAward):
+    reportID(ireportID),
+    paperID(ipaperID),
+    reviewerID(ireviewerID),
+    overall(ioverall),
+    confidence(iconfidence),
+    relevance(irelevance),
+    originality(ioriginality),
+    significance(isignificance),
+    presentation(ipresentation),
+    techQuality(itechQuality),
+    evalution(ievalution),
+    commentsStrength(icommentsStrength),
+    commentsWeakness(icommentsWeakness),
+    commentsSuggestions(icommentsSuggestions),
+    commentsShortPaper(icommentsShortPaper),
+    commentsBestAward(icommentsBestAward)
+    { }
+
+  int reportID{0};
   int paperID{0};
   int reviewerID{0};
   int overall{0};

commit 7451e89acbc214a7ffc038c8d48e03b9ae026eff
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:39:19 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index acc0d89..bba3095 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -9,9 +9,9 @@ void PaperManager::sendPaper(int paperID)
  //send *currentPaper to the client
 }
 
-void PaperManager::addPaper()
+void PaperManager::addPaper(const std::string& pdf)
 {
-  database->createPaper(*currentPaper);
+  database->createPaper(*currentPaper, pdf);
 }
 
 void PaperManager::modifyPaper(int paperID)

commit ae6367ffa6e83f3e44d8cf47d84b5bea57db1a2d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:37:21 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 2611e47..3107637 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -20,7 +20,7 @@ public:
   Database* getDatabase() {return database;}
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addPaper();
-  void modifyPaper(int);
+  void modifyPaper(int, const std::string&);
   void modifyPdf(int, int, const std::string&);
   //bool deleteDiscPost(int);
   void modifyDiscPost(int);

commit d0ee2d704bc1b00c4c310a91679b8c41306796d4
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:29:22 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 5b8aa53..2611e47 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -21,6 +21,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addPaper();
   void modifyPaper(int);
+  void modifyPdf(int, int, const std::string&);
   //bool deleteDiscPost(int);
   void modifyDiscPost(int);
   //bool deleteReview(int);

commit 491ac5284aabec74e565fa850a21e611d68fdbbe
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:28:43 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index f7d8ae8..acc0d89 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -14,11 +14,17 @@ void PaperManager::addPaper()
   database->createPaper(*currentPaper);
 }
 
-void PaperManager::modifyPaper()
+void PaperManager::modifyPaper(int paperID)
 {
+  fetchPaper(int paperID);
   database->updatePaper(*currentPaper);
 }
 
+void PaperManager::modifyPDF(int paperID, int confID, const std::string& pdf)
+{
+   database->updatePDF(paperID, confID, pdf);
+}
+
 void PaperManager::sendPaperSummaryBatch(int confID)
 {
   std::vector<int> paperIDsOfConf = database->getPaperIDsForConf(confID);

commit 02c3e0db117adad43a1d6e99e56a7a8f7ca8c91a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:19:44 2014 +1100

    Update main.cpp

diff --git a/Database/main.cpp b/Database/main.cpp
index f7aecb6..c0ae757 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -51,6 +51,39 @@ std::vector<std::string>{"mathematics","science"});
 std::string key = usertemp.userName;
 db.putUser(key, usertemp);
 
+Conference conferencetemp(true, 
+"baz",
+"blah",
+"boo",
+"flop",
+std::vector<std::string>("one", "two"),
+TRUE,
+Date(1,12,30),
+TRUE,
+Date(1,12,30),
+TRUE,
+Date(1,12,30),
+TRUE,
+Date(1,12,30),
+TRUE,
+Date(1,12,30),
+4,
+250);
+std::string title = conferencetemp.title;
+db.putConf(title, conferencetemp);
+
+PersonalInfo infotemp("a", "b", "c", "d");
+
+Paper papertemp(5,
+7,
+"fee",
+"fi",
+std::vector<PersonalInfo>(infotemp),
+std::vector<std::string>("fo", "fum"),
+"giants");
+std::string pdf = "whyyougoanddothesethings";
+db.createPaper(papertemp, pdf);
+
 /* User usertemp2("dick",
 "wrong",
 "Dick",

commit 87c1d235bd8b78685b3c0408c6d0e9f5b6ff2541
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Mon Oct 27 00:18:40 2014 +1100

    added qdatastream operators

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index 73663c0..f4e3970 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -108,4 +108,152 @@ Conference(bool iisActive, //no confID
   int postWordLimit{0};
 
 };
+
+inline QDataStream& operator<<(QDataStream& out, const Conference* conf)
+{
+    QString tempQstring;
+    QVector<QString> tempQvector;
+    
+    out << conf->isActive;
+    tempQstring = QString::fromStdString(conf->title);
+    out << conf->tempQstring;
+    out << conf->confID{0};
+    tempQstring = QString::fromStdString(conf->topic);
+    out << conf->tempQstring;
+    tempQstring = QString::fromStdString(conf->description);
+    out << conf->tempQstring;
+    tempQstring = QString::fromStdString(conf->location);
+    out << conf->tempQstring;
+    
+    for (unsigned int i = 0; i < conf->keywords.size(); ++i)
+    {
+        tempQstring = QString::fromStdString(conf->keywords[i]);
+        tempQvector.append(tempQstring);
+    }
+    out << tempQvector;
+    tempQvector.clear();
+  
+    out << conf->isBeforePaperDeadline;
+    out << conf->paperDeadline;
+    out << conf->isBeforeAllocationDate;
+    out << conf->allocationDate;
+    out << conf->isBeforeSoftReviewDeadline;
+    out << conf->reviewDeadlineSoft;
+    out << conf->isBeforeHardReviewDeadline;
+    out << conf->reviewDeadlineHard;
+    out << conf->isBeforeDiscussDeadline;
+    out << conf->discussDeadline;
+    out << conf->reviewersPerPaper;
+    out << conf->postWordLimit;
+    return out;
+}
+
+inline QDataStream& operator<<(QDataStream& out, const Conference& conf)
+{
+    QString tempQstring;
+    QVector<QString> tempQvector;
+    
+    out << conf.isActive;
+    tempQstring = QString::fromStdString(conf.title);
+    out << conf.tempQstring;
+    out << conf.confID{0};
+    tempQstring = QString::fromStdString(conf.topic);
+    out << conf.tempQstring;
+    tempQstring = QString::fromStdString(conf.description);
+    out << conf.tempQstring;
+    tempQstring = QString::fromStdString(conf.location);
+    out << conf.tempQstring;
+    
+    for (unsigned int i = 0; i < conf.keywords.size(); ++i)
+        tempQvector.append(QString::fromStdString(conf.keywords[i]));
+    out << tempQvector;
+    tempQvector.clear();
+  
+    out << conf.isBeforePaperDeadline;
+    out << conf.paperDeadline;
+    out << conf.isBeforeAllocationDate;
+    out << conf.allocationDate;
+    out << conf.isBeforeSoftReviewDeadline;
+    out << conf.reviewDeadlineSoft;
+    out << conf.isBeforeHardReviewDeadline;
+    out << conf.reviewDeadlineHard;
+    out << conf.isBeforeDiscussDeadline;
+    out << conf.discussDeadline;
+    out << conf.reviewersPerPaper;
+    out << conf.postWordLimit;
+    return out;
+}
+
+inline QDataStream& operator>>(QDataStream& in, Conference* conf)
+{
+    QString tempQstring;
+    QVector<QString> tempQvector;
+    
+    in >>  conf->isActive;
+    tempQstring = QString::fromStdString(conf->title);
+    in >>  conf->tempQstring;
+    in >>  conf->confID{0};
+    tempQstring = QString::fromStdString(conf->topic);
+    in >>  conf->tempQstring;
+    tempQstring = QString::fromStdString(conf->description);
+    in >>  conf->tempQstring;
+    tempQstring = QString::fromStdString(conf->location);
+    in >>  conf->tempQstring;
+    
+    in >>  tempQvector;
+    for (unsigned int i = 0; i < tempQvector.size(); ++i)
+        conf->keywords.push_back(tempQvector[i].toStdString());
+    tempQvector.clear();
+  
+    in >>  conf->isBeforePaperDeadline;
+    in >>  conf->paperDeadline;
+    in >>  conf->isBeforeAllocationDate;
+    in >>  conf->allocationDate;
+    in >>  conf->isBeforeSoftReviewDeadline;
+    in >>  conf->reviewDeadlineSoft;
+    in >>  conf->isBeforeHardReviewDeadline;
+    in >>  conf->reviewDeadlineHard;
+    in >>  conf->isBeforeDiscussDeadline;
+    in >>  conf->discussDeadline;
+    in >>  conf->reviewersPerPaper;
+    in >>  conf->postWordLimit;
+    return in;
+}
+
+inline QDataStream& operator>>(QDataStream& in, const Conference& conf)
+{
+    QString tempQstring;
+    QVector<QString> tempQvector;
+    
+    in >>  conf.isActive;
+    tempQstring = QString::fromStdString(conf.title);
+    in >>  conf.tempQstring;
+    in >>  conf.confID{0};
+    tempQstring = QString::fromStdString(conf.topic);
+    in >>  conf.tempQstring;
+    tempQstring = QString::fromStdString(conf.description);
+    in >>  conf.tempQstring;
+    tempQstring = QString::fromStdString(conf.location);
+    in >>  conf.tempQstring;
+    
+    in >>  tempQvector;
+    for (unsigned int i = 0; i < tempQvector.size(); ++i)
+        conf.keywords.push_back(tempQvector[i].toStdString());
+    tempQvector.clear();
+  
+    in >>  conf.isBeforePaperDeadline;
+    in >>  conf.paperDeadline;
+    in >>  conf.isBeforeAllocationDate;
+    in >>  conf.allocationDate;
+    in >>  conf.isBeforeSoftReviewDeadline;
+    in >>  conf.reviewDeadlineSoft;
+    in >>  conf.isBeforeHardReviewDeadline;
+    in >>  conf.reviewDeadlineHard;
+    in >>  conf.isBeforeDiscussDeadline;
+    in >>  conf.discussDeadline;
+    in >>  conf.reviewersPerPaper;
+    in >>  conf.postWordLimit;
+}
+
+
 #endif

commit 571043e871dbf2e70d7052d8f71d608804de8262
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Mon Oct 27 00:14:38 2014 +1100

    added qdatastream operators

diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
index 4450690..e57ad2b 100644
--- a/DataAll/Date.hpp
+++ b/DataAll/Date.hpp
@@ -60,4 +60,36 @@ private:
     
 };
 
+inline QDataStream& operator<<(QDataStream& out, const Date* d)
+{
+    out << d->day;
+    out << d->month;
+    out << d->year;
+    return out;
+}
+
+inline QDataStream& operator<<(QDataStream& out, const Date& d)
+{
+    out << d.day;
+    out << d.month;
+    out << d.year;
+    return out;
+}
+
+inline QDataStream& operator>>(QDataStream& in, Date* d)
+{
+    in >> d->day;
+    in >> d->month;
+    in >> d->year;
+    return in;
+}
+
+inline QDataStream& operator>>(QDataStream& in, const Date& d)
+{
+    in >> d.day;
+    in >> d.month;
+    in >> d.year;
+    return in;
+}
+
 #endif

commit 3ad3bef22cc2a1b38a0b456c24349db6b9fc6163
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:13:16 2014 +1100

    Update PersonalInfo.hpp

diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index f8d302a..e057313 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -27,7 +27,6 @@ struct PersonalInfo {
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
-         const std::string& ipassword
          ):
          name(iname),
          email(iemail),

commit 561d88e9563c1763e71f8f9e391863996cbb5075
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 27 00:08:22 2014 +1100

    Update Paper.hpp

diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index d403fed..6ad5083 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -34,6 +34,24 @@ struct Paper {
       reviews(ireviews),
       discussion(idiscussion)
       { }
+
+    Paper(
+      const int iconfID,
+      const int ileadAuthorID,
+      const std::string& ititle,
+      const std::string& iabstract,
+      const std::vector<PersonalInfo>& iauthors,
+      const std::vector<std::string>& ikeywords,
+      const std::string& iconfKeyword)
+      :
+      confID(iconfID),
+      leadAuthorID(ileadAuthorID),
+      title(ititle),
+      abstract(iabstract),
+      authors(iauthors),
+      keywords(ikeywords),
+      confKeyword(iconfKeyword)
+      { }
     // no assignment operator or copy constructor deemed necessary at this point
     int paperID{0};
     int confID{0};

commit ea5039c9548383382685398609191464262da82e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Mon Oct 27 00:01:25 2014 +1100

    added second constructor without confid

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
index cd888a2..73663c0 100644
--- a/DataAll/Conference.hpp
+++ b/DataAll/Conference.hpp
@@ -49,6 +49,44 @@ struct Conference {
   postWordLimit(ipostWordLimit)
   { }
 
+Conference(bool iisActive, //no confID
+  std::string& ititle,
+  std::string& itopic,
+  std::string& idescription,
+  std::string& ilocation,
+  std::vector<std::string>& ikeywords,
+  bool iisBeforePaperDeadline,
+  Date& ipaperDeadline,
+  bool iisBeforeAllocationDate,
+  Date& iallocationDate,
+  bool iisBeforeSoftReviewDeadline,
+  Date& ireviewDeadlineSoft,
+  bool iisBeforeHardReviewDeadline,
+  Date& ireviewDeadlineHard,
+  bool iisBeforeDiscussDeadline,
+  Date& idiscussDeadline,
+  int ireviewersPerPaper,
+  int ipostWordLimit):
+  isActive(iisActive),
+  title(ititle),
+  topic(itopic),
+  description(idescription),
+  location(ilocation),
+  keywords(ikeywords),
+  isBeforePaperDeadline(iisBeforePaperDeadline),
+  paperDeadline(ipaperDeadline),
+  isBeforeAllocationDate(iisBeforeAllocationDate),
+  allocationDate(iallocationDate),
+  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
+  reviewDeadlineSoft(ireviewDeadlineSoft),
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
+  reviewDeadlineHard(ireviewDeadlineHard),
+  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
+  discussDeadline(idiscussDeadline),
+  reviewersPerPaper(ireviewersPerPaper),
+  postWordLimit(ipostWordLimit)
+  { }
+
   bool isActive;
   std::string title{""};
   int confID{0};

commit 4c4986fb571cd5e281215f11af9ca2edacf1d586
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 23:46:01 2014 +1100

    more fixes for database pointers

diff --git a/Database/Database.cpp b/Database/Database.cpp
index be0ecb1..e17f0b3 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -201,10 +201,10 @@ void Database::createUser(User user)
         // Personal Info
         sql::PreparedStatement *pstmt = NULL;
         pstmt = dbcon->prepareStatement(insertPersonalInfo);
-        pstmt->setString(1, user->name);
-        pstmt->setString(2, user->email);
-        pstmt->setString(3, user->organisation);
-        pstmt->setString(4, user->phone);
+        pstmt->setString(1, user.name);
+        pstmt->setString(2, user.email);
+        pstmt->setString(3, user.organisation);
+        pstmt->setString(4, user.phone);
 
         pstmt->executeUpdate();
 
@@ -213,8 +213,8 @@ void Database::createUser(User user)
         // =======================================
         // user account
         pstmt = dbcon->prepareStatement(insertUser);
-        pstmt->setString(1, user->userName);
-        pstmt->setString(2, user->password);
+        pstmt->setString(1, user.userName);
+        pstmt->setString(2, user.password);
 
         pstmt->executeUpdate();
 
@@ -244,11 +244,11 @@ void Database::createUser(User user)
 
         // =======================================
         // Expertise
-      	if (user->keywords.size() > 0)
+      	if (user.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertExpertise);
 		std::vector<std::string>::const_iterator it;
-      		for (it = user->keywords.begin(); it != user->keywords.end(); it ++)
+      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
 		{
 			std::string word = *it;	
 
@@ -285,7 +285,7 @@ void Database::updateUser(User user)
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getUserID);
-        pstmt->setString(1, user->userName);
+        pstmt->setString(1, user.userName);
 
 	rs = pstmt->executeQuery();
 	bool haveRecord = rs->next();
@@ -298,8 +298,8 @@ void Database::updateUser(User user)
         // =======================================
         // user account
         pstmt = dbcon->prepareStatement(updateUser);
-        pstmt->setString(1, user->userName);
-        pstmt->setString(2, user->password);
+        pstmt->setString(1, user.userName);
+        pstmt->setString(2, user.password);
         pstmt->setInt(3, userID);
 
         pstmt->executeUpdate();
@@ -309,10 +309,10 @@ void Database::updateUser(User user)
         // =======================================
         // Personal Info
         pstmt = dbcon->prepareStatement(updatePersonalInfo);
-        pstmt->setString(1, user->name);
-        pstmt->setString(2, user->email);
-        pstmt->setString(3, user->organisation);
-        pstmt->setString(4, user->phone);
+        pstmt->setString(1, user.name);
+        pstmt->setString(2, user.email);
+        pstmt->setString(3, user.organisation);
+        pstmt->setString(4, user.phone);
         pstmt->setInt(5, userID);
 
         pstmt->executeUpdate();
@@ -330,11 +330,11 @@ void Database::updateUser(User user)
 
         // =======================================
         // Expertise Insert
-      	if (user->keywords.size() > 0)
+      	if (user.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertExpertise);
 		std::vector<std::string>::const_iterator it;
-      		for (it = user->keywords.begin(); it != user->keywords.end(); it ++)
+      		for (it = user.keywords.begin(); it != user.keywords.end(); it ++)
 		{
 			std::string word = *it;	
         		if (!this->existsKeyword(word))
@@ -595,33 +595,33 @@ void Database::createConf(Conference conf)
         sql::PreparedStatement *pstmt = NULL;
         pstmt = dbcon->prepareStatement(insertConference);
 
-        pstmt->setString(1, conf->title);
-        pstmt->setString(2, conf->topic);
-        pstmt->setString(3, conf->description);
-        pstmt->setString(4, conf->location);
-        pstmt->setBoolean(5, conf->isActive);
-        pstmt->setInt(6, conf->paperDeadline.getDay());
-        pstmt->setInt(7, conf->paperDeadline.getMonth());
-        pstmt->setInt(8, conf->paperDeadline.getYear());
-        pstmt->setBoolean(9, conf->isBeforePaperDeadline);
-        pstmt->setInt(10, conf->allocationDate.getDay());
-        pstmt->setInt(11, conf->allocationDate.getMonth());
-        pstmt->setInt(12, conf->allocationDate.getYear());
-        pstmt->setBoolean(13, conf->isBeforeAllocationDate);
-        pstmt->setInt(14, conf->reviewDeadlineSoft.getDay());
-        pstmt->setInt(15, conf->reviewDeadlineSoft.getMonth());
-        pstmt->setInt(16, conf->reviewDeadlineSoft.getYear());
-        pstmt->setBoolean(17, conf->isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf->reviewDeadlineHard.getDay());
-        pstmt->setInt(19, conf->reviewDeadlineHard.getMonth());
-        pstmt->setInt(20, conf->reviewDeadlineHard.getYear());
-        pstmt->setBoolean(21, conf->isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf->discussDeadline.getDay());
-        pstmt->setInt(23, conf->discussDeadline.getMonth());
-        pstmt->setInt(24, conf->discussDeadline.getYear());
-        pstmt->setBoolean(25, conf->isBeforeDiscussDeadline);
-	pstmt->setInt(26, conf->reviewersPerPaper);
-	pstmt->setInt(27, conf->postWordLimit);
+        pstmt->setString(1, conf.title);
+        pstmt->setString(2, conf.topic);
+        pstmt->setString(3, conf.description);
+        pstmt->setString(4, conf.location);
+        pstmt->setBoolean(5, conf.isActive);
+        pstmt->setInt(6, conf.paperDeadline.getDay());
+        pstmt->setInt(7, conf.paperDeadline.getMonth());
+        pstmt->setInt(8, conf.paperDeadline.getYear());
+        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
+        pstmt->setInt(10, conf.allocationDate.getDay());
+        pstmt->setInt(11, conf.allocationDate.getMonth());
+        pstmt->setInt(12, conf.allocationDate.getYear());
+        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
+        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf.discussDeadline.getDay());
+        pstmt->setInt(23, conf.discussDeadline.getMonth());
+        pstmt->setInt(24, conf.discussDeadline.getYear());
+        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf.reviewersPerPaper);
+	pstmt->setInt(27, conf.postWordLimit);
 
         pstmt->executeUpdate();
 
@@ -643,11 +643,11 @@ void Database::createConf(Conference conf)
 
         // =======================================
         // Expertise
-      	if (conf->keywords.size() > 0)
+      	if (conf.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertConfKeyword);
 		std::vector<std::string>::const_iterator it;
-      		for (it = conf->keywords.begin(); it != conf->keywords.end(); it ++)
+      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
 		{
 			std::string word = *it;	
 
@@ -684,7 +684,7 @@ void Database::updateConf(Conference conf)
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getConfID);
-        pstmt->setString(1, conf->title);
+        pstmt->setString(1, conf.title);
 
 	rs = pstmt->executeQuery();
 	bool haveRecord = rs->next();
@@ -698,36 +698,36 @@ void Database::updateConf(Conference conf)
         // Conference
         pstmt = dbcon->prepareStatement(updateConference);
 
-        pstmt->setString(1, conf->title);
-        pstmt->setString(2, conf->topic);
-        pstmt->setString(3, conf->description);
-        pstmt->setString(4, conf->location);
-        pstmt->setBoolean(5, conf->isActive);
-	int day = conf->paperDeadline.getDay();
-	int month = conf->paperDeadline.getMonth();
-	int year = conf->paperDeadline.getYear();
+        pstmt->setString(1, conf.title);
+        pstmt->setString(2, conf.topic);
+        pstmt->setString(3, conf.description);
+        pstmt->setString(4, conf.location);
+        pstmt->setBoolean(5, conf.isActive);
+	int day = conf.paperDeadline.getDay();
+	int month = conf.paperDeadline.getMonth();
+	int year = conf.paperDeadline.getYear();
         pstmt->setInt(6, day);
         pstmt->setInt(7, month);
         pstmt->setInt(8, year);
-        pstmt->setBoolean(9, conf->isBeforePaperDeadline);
-        pstmt->setInt(10, conf->allocationDate.getDay());
-        pstmt->setInt(11, conf->allocationDate.getMonth());
-        pstmt->setInt(12, conf->allocationDate.getYear());
-        pstmt->setBoolean(13, conf->isBeforeAllocationDate);
-        pstmt->setInt(14, conf->reviewDeadlineSoft.getDay());
-        pstmt->setInt(15, conf->reviewDeadlineSoft.getMonth());
-        pstmt->setInt(16, conf->reviewDeadlineSoft.getYear());
-        pstmt->setBoolean(17, conf->isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf->reviewDeadlineHard.getDay());
-        pstmt->setInt(19, conf->reviewDeadlineHard.getMonth());
-        pstmt->setInt(20, conf->reviewDeadlineHard.getYear());
-        pstmt->setBoolean(21, conf->isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf->discussDeadline.getDay());
-        pstmt->setInt(23, conf->discussDeadline.getMonth());
-        pstmt->setInt(24, conf->discussDeadline.getYear());
-        pstmt->setBoolean(25, conf->isBeforeDiscussDeadline);
-	pstmt->setInt(26, conf->reviewersPerPaper);
-	pstmt->setInt(27, conf->postWordLimit);
+        pstmt->setBoolean(9, conf.isBeforePaperDeadline);
+        pstmt->setInt(10, conf.allocationDate.getDay());
+        pstmt->setInt(11, conf.allocationDate.getMonth());
+        pstmt->setInt(12, conf.allocationDate.getYear());
+        pstmt->setBoolean(13, conf.isBeforeAllocationDate);
+        pstmt->setInt(14, conf.reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf.reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf.reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf.isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf.reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf.reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf.reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf.isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf.discussDeadline.getDay());
+        pstmt->setInt(23, conf.discussDeadline.getMonth());
+        pstmt->setInt(24, conf.discussDeadline.getYear());
+        pstmt->setBoolean(25, conf.isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf.reviewersPerPaper);
+	pstmt->setInt(27, conf.postWordLimit);
 	pstmt->setInt(28, confID);
 
         pstmt->executeUpdate();
@@ -745,11 +745,11 @@ void Database::updateConf(Conference conf)
 
         // =======================================
         // Keywords Insert
-      	if (conf->keywords.size() > 0)
+      	if (conf.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertKeywords);
 		std::vector<std::string>::const_iterator it;
-      		for (it = conf->keywords.begin(); it != conf->keywords.end(); it ++)
+      		for (it = conf.keywords.begin(); it != conf.keywords.end(); it ++)
 		{
 			std::string word = *it;	
         		if (!this->existsKeyword(word))
@@ -1118,11 +1118,11 @@ void Database::createPaper(Paper paper, std::string pdf)
         // Paper
         sql::PreparedStatement *pstmt = NULL;
         pstmt = dbcon->prepareStatement(insertPaper);
-        pstmt->setInt(1, paper->leadAuthorID);
-        pstmt->setInt(2, paper->confID);
-        pstmt->setString(3, paper->confKeyword);
-        pstmt->setString(4, paper->title);
-        pstmt->setString(5, paper->abstract);
+        pstmt->setInt(1, paper.leadAuthorID);
+        pstmt->setInt(2, paper.confID);
+        pstmt->setString(3, paper.confKeyword);
+        pstmt->setString(4, paper.title);
+        pstmt->setString(5, paper.abstract);
         pstmt->setString(6, pdf);
 
         pstmt->executeUpdate();
@@ -1148,7 +1148,7 @@ void Database::createPaper(Paper paper, std::string pdf)
         pstmt = dbcon->prepareStatement(insertAuthors);
 
 	std::vector<PersonalInfo>::const_iterator it;
-	for (it = paper->authors.begin(); it != paper->authors.end(); it ++)
+	for (it = paper.authors.begin(); it != paper.authors.end(); it ++)
 	{
 		PersonalInfo pInfo = *it;	
 
@@ -1161,11 +1161,11 @@ void Database::createPaper(Paper paper, std::string pdf)
 
         // =======================================
         // Keywords
-      	if (paper->keywords.size() > 0)
+      	if (paper.keywords.size() > 0)
       	{
       		pstmt = dbcon->prepareStatement(insertKeywords);
 		std::vector<std::string>::const_iterator it;
-      		for (it = paper->keywords.begin(); it != paper->keywords.end(); it ++)
+      		for (it = paper.keywords.begin(); it != paper.keywords.end(); it ++)
 		{
 			std::string word = *it;	
 
@@ -1185,18 +1185,18 @@ void Database::createPaper(Paper paper, std::string pdf)
 
 //        // =======================================
 //        // Discussion
-//      	if (paper->discussion.discussion.size() > 0)
+//      	if (paper.discussion.discussion.size() > 0)
 //      	{
 //      		pstmt = dbcon->prepareStatement(insertDiscuss);
 //		std::list<DiscussionPost>::const_iterator it;
-//      		for (it = paper->discussion.discussion.begin(); it != paper->discussion.discussion.end(); it ++)
+//      		for (it = paper.discussion.discussion.begin(); it != paper.discussion.discussion.end(); it ++)
 //		{
 //			DiscussionPost discuss = *it;	
 //
 //        		if (discuss->postID==0)
 //			{
 //				pstmt->setInt(1, paperID);
-//				pstmt->setInt(2, paper->confID);
+//				pstmt->setInt(2, paper.confID);
 //				pstmt->setInt(3, discuss->reviewerID);
 //				pstmt->setString(4, discuss->comment);
 //
@@ -1209,18 +1209,18 @@ void Database::createPaper(Paper paper, std::string pdf)
 //
 //        // =======================================
 //        // Reviews
-//      	if (paper->reviews.size() > 0)
+//      	if (paper.reviews.size() > 0)
 //      	{
 //      		pstmt = dbcon->prepareStatement(insertReview);
 //		std::vector<Review>::const_iterator it;
-//      		for (it = paper->reviews.begin(); it != paper->reviews.end(); it ++)
+//      		for (it = paper.reviews.begin(); it != paper.reviews.end(); it ++)
 //		{
 //			Review review = *it;	
 //
 //        		if (discuss->postID==0)
 //			{
 //				pstmt->setInt(1, paperID);
-//				pstmt->setInt(2, paper->confID);
+//				pstmt->setInt(2, paper.confID);
 //				pstmt->setInt(3, discuss->reviewerID);
 //				pstmt->setString(4, discuss->comment);
 //
diff --git a/Database/main.cpp b/Database/main.cpp
index a4d1385..f7aecb6 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -64,7 +64,7 @@ std::vector theUsers{usertemp, usertemp2}; */
         for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
         {
                 User ptr = *it;
-                std::string key = ptr->userName;
+                std::string key = ptr.userName;
                 db.putUser(key, ptr);
                 std::cout << "Wrote record " << key << std::endl;
         }
@@ -92,7 +92,6 @@ static void createUsers()
 {
         // Hard code procedural creation of a few records so that can
         // have some data to show in the Qt based GUI
-        userPtr next;
         std::string username;
         std::string password;
         std::string name;

commit 11b37f101a12022f124d9ff9c083fcc8e9fd7b19
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:39:45 2014 +1100

    remove pointers for insert into Database

diff --git a/Database/main.cpp b/Database/main.cpp
index 10f6d9b..a4d1385 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -11,8 +11,7 @@
 
 #include <vector>
 
-typedef User* userPtr;
-std::vector<userPtr> g_theUsers;
+std::vector<User> g_theUsers;
 
 static void createUsers();
 
@@ -61,10 +60,10 @@ db.putUser(key, usertemp);
 std::vector<std::string>{"geographyt","english"});
 std::vector theUsers{usertemp, usertemp2}; */
 
-        std::vector<userPtr>::const_iterator it;
+        std::vector<User>::const_iterator it;
         for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
         {
-                userPtr ptr = (*it);
+                User ptr = *it;
                 std::string key = ptr->userName;
                 db.putUser(key, ptr);
                 std::cout << "Wrote record " << key << std::endl;
@@ -113,7 +112,7 @@ static void createUsers()
                 phone = "04666666666";
 		keywords.push_back("mathematics");
 		keywords.push_back("science");
-		next = new User(
+		User user(
 			username,
 			name,
 			email,
@@ -122,7 +121,7 @@ static void createUsers()
 			password,
 			keywords);
 
-                g_theUsers.push_back(next);
+                g_theUsers.push_back(user);
         }
         {
 		std::vector<std::string> keywords;
@@ -135,7 +134,7 @@ static void createUsers()
                 phone = "04666667666";
 		keywords.push_back("geographyt");
 		keywords.push_back("english");
-		next = new User(
+		User user(
 			username,
 			name,
 			email,
@@ -144,6 +143,6 @@ static void createUsers()
 			password,
 			keywords);
 
-                g_theUsers.push_back(next);
+                g_theUsers.push_back(user);
         }
 }

commit 71c4f2557ac9eadf39adecee1b3b82331c359373
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 23:37:16 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 053ebc6..883eb5e 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -27,7 +27,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addConference() 
   {
-    database->putConf(currentConference->title, currentConference);
+    database->putConf(currentConference->title, *currentConference);
   }
   void modifyConference(int confID)
   {

commit 7980b60e5063994d5102e29c1c02eb2d465002b0
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:36:44 2014 +1100

    remove pointers for insert into Database

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 01fb19a..be0ecb1 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -171,7 +171,7 @@ bool Database::existsUserName(std::string key) throw (const char*)
         return count == 1;
 }
 
-void Database::putUser(std::string key, User *user) throw (const char*)
+void Database::putUser(std::string key, User user) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -186,7 +186,7 @@ void Database::putUser(std::string key, User *user) throw (const char*)
 	}
 }
 
-void Database::createUser(User* user)
+void Database::createUser(User user)
 {
         if (invalid)
                 throw (noDB);
@@ -267,7 +267,7 @@ void Database::createUser(User* user)
       	}
 }
 
-void Database::updateUser(User* user)
+void Database::updateUser(User user)
 {
         if (invalid)
                 throw (noDB);
@@ -565,7 +565,7 @@ bool Database::existsConfName(std::string key) throw (const char*)
         return count == 1;
 }
 
-void Database::putConf(std::string key, Conference *conf) throw (const char*)
+void Database::putConf(std::string key, Conference conf) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -580,7 +580,7 @@ void Database::putConf(std::string key, Conference *conf) throw (const char*)
 	}
 }
 
-void Database::createConf(Conference* conf)
+void Database::createConf(Conference conf)
 {
         if (invalid)
                 throw (noDB);
@@ -666,7 +666,7 @@ void Database::createConf(Conference* conf)
       	}
 }
 
-void Database::updateConf(Conference* conf)
+void Database::updateConf(Conference conf)
 {
         if (invalid)
                 throw (noDB);
@@ -1102,7 +1102,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 	return paper;
 }
 
-void Database::createPaper(Paper* paper, std::string pdf)
+void Database::createPaper(Paper paper, std::string pdf)
 {
         if (invalid)
                 throw (noDB);

commit 506dce75a42d92aa24a01bcbc59cd2fb8fbc6513
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 23:36:07 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 61ccdd3..30b294c 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -24,7 +24,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addUser() 
   {
-    database->putUser(currentUser->name, currentUser);
+    database->putUser(currentUser->name, *currentUser);
   }
   void modifyUser()
   {

commit f3e2193c7ec3379db217ad42110eef25d9bc45f7
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:35:12 2014 +1100

     remove pointers for insert into Database

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 13889ea..074e558 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -26,7 +26,7 @@ public:
 	// USER
 	User fetchUser(std::string key) throw (const char*);
         bool existsUserName(std::string key) throw (const char*);
-        void putUser(std::string key, User *user) throw (const char*);
+        void putUser(std::string key, User user) throw (const char*);
         std::vector<int> allUserIDs();
         std::vector<std::string> allUserNames();
 
@@ -37,7 +37,7 @@ public:
 	// CONFERENCE
 	Conference fetchConference(int key) throw (const char*);
         bool existsConfName(std::string key) throw (const char*);
-        void putConf(std::string key, Conference *conf) throw (const char*);
+        void putConf(std::string key, Conference conf) throw (const char*);
         std::vector<int> allConfIDs();
         std::vector<std::string> allConfNames();
         std::vector<int> activeConfIDs();
@@ -47,7 +47,7 @@ public:
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
         std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
         Paper fetchPaper(int key) throw (const char*);
-        void createPaper(Paper *paper, std::string pdf);
+        void createPaper(Paper paper, std::string pdf);
 
 	// ALGO
 	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);
@@ -91,12 +91,12 @@ private:
 //        void recordToTables(const MyRecord *data);
 
 	// USER
-        void createUser(User *user);
-        void updateUser(User *user);
+        void createUser(User user);
+        void updateUser(User user);
 
 	// CONF
-        void createConf(Conference *conf);
-        void updateConf(Conference *conf);
+        void createConf(Conference conf);
+        void updateConf(Conference conf);
 
 };
 #endif

commit f051d5935821f8763e2d9dfac6b9cf8e2cf5bcc7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 23:35:00 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 111f5aa..f7d8ae8 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -44,8 +44,7 @@ void PaperManager::sendPaperSummariesToReview(int userID, int confID)
 
 void PaperManager::sendAuthoredPaperSummaries(int leadAuthorID, int confID)
 {
- std::vector<int> paperIDsAuthored = database->fetchPapersFromLeadAuthorIDAndConfID(leadAuthorID, confID); 
- //or something like that
+ std::vector<int> paperIDsAuthored = database->getPaperIDsForLeadAuthor(leadAuthorID, confID); 
  std::vector<PaperSummary> papersAuthored;
  for(unsigned int i = 0; i < paperIDsAuthored.size(); ++i)
  {

commit a5fea932f27ca41a583b28d64479758c1960e6aa
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 23:32:34 2014 +1100

    fixed UserPtr in main vector

diff --git a/Database/main.cpp b/Database/main.cpp
index a20c47e..10f6d9b 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -61,7 +61,7 @@ db.putUser(key, usertemp);
 std::vector<std::string>{"geographyt","english"});
 std::vector theUsers{usertemp, usertemp2}; */
 
-        std::vector<User>::const_iterator it;
+        std::vector<userPtr>::const_iterator it;
         for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
         {
                 userPtr ptr = (*it);

commit bdd3f758cf3e9061824c73e46a9e469b9d7f7f5f
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:29:03 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 7b4d843..13889ea 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -61,6 +61,7 @@ public:
 	
 	std::vector<int> getPaperIDsForConf(int confID) throw (const char*);	
 	std::vector<int> getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*);
+	std::vector<int> getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*);
 	
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);

commit dc05aaec8ee302a23d523fb2681cb55b1ae465d2
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:28:32 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index e8ad3a3..01fb19a 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1523,6 +1523,36 @@ std::vector<int> Database::getPaperIDsForAllocatedReviewer(int reviewerID, int c
 	return vec;
 }
 
+std::vector<int> Database::getPaperIDsForLeadAuthor(int leadAuthorID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE (leadAuthorID=? and confID=?)";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, leadAuthorID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
 
 
 //

commit 939cc98c66447e07ec9ff35d8d9a9e8339b0b97c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 23:25:03 2014 +1100

    Update main.cpp

diff --git a/Database/main.cpp b/Database/main.cpp
index ac9e716..a20c47e 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -25,8 +25,43 @@ int main(int arc, char *argv[])
                 std::cout << "Failed to open database file" << std::endl;
                 exit(1);
         }
+/*std::vector<std::string> keywords;
+username = "tom";
+password = "fake";
+name = "Thomas";
+email = "boos_tom@ourcompany.com.au";
+organisation = "University of Wollongong";
+phone = "04666666666";
+keywords.push_back("mathematics");
+keywords.push_back("science");
+User usertemp(
+username,
+name,
+email,
+organisation,
+phone,
+password,
+keywords);*/
+User usertemp("foo",
+"bar",
+"thefoo",
+"boos_tom@ourcompany.com.au",
+"University of Wollongong",
+"04666666666",
+std::vector<std::string>{"mathematics","science"});
+std::string key = usertemp.userName;
+db.putUser(key, usertemp);
 
-        vector<userPtr>::const_iterator it;
+/* User usertemp2("dick",
+"wrong",
+"Dick",
+"clever_dick@ourcompany.com.au",
+"University of Wollongong",
+"04666667666",
+std::vector<std::string>{"geographyt","english"});
+std::vector theUsers{usertemp, usertemp2}; */
+
+        std::vector<User>::const_iterator it;
         for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
         {
                 userPtr ptr = (*it);

commit e56587f6c4046238f3e87bbb2b4c34f1d07f443e
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 23:24:07 2014 +1100

    removed pointer

diff --git a/Database/Database.cpp b/Database/Database.cpp
index e5cf0d4..e8ad3a3 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1147,13 +1147,13 @@ void Database::createPaper(Paper* paper, std::string pdf)
         // Paper Authors
         pstmt = dbcon->prepareStatement(insertAuthors);
 
-	std::vector<std::string>::const_iterator it;
+	std::vector<PersonalInfo>::const_iterator it;
 	for (it = paper->authors.begin(); it != paper->authors.end(); it ++)
 	{
 		PersonalInfo pInfo = *it;	
 
 		pstmt->setInt(1, paperID);
-		pstmt->setInt(2, pInfo->infoID);
+		pstmt->setInt(2, pInfo.infoID);
 
 	        pstmt->executeUpdate();
 	}

commit 1c8b19628fb0c94aa3ff276b64cbc10a9e63bd03
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 23:21:08 2014 +1100

    renamed ui elements to more indicative names

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index 2b4ecda..005302f 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -42,7 +42,7 @@
        </rect>
       </property>
       <property name="currentIndex">
-       <number>3</number>
+       <number>5</number>
       </property>
       <widget class="QWidget" name="loginTab">
        <attribute name="title">
@@ -524,7 +524,7 @@ p, li { white-space: pre-wrap; }
           </spacer>
          </item>
          <item>
-          <widget class="QPushButton" name="apply_2">
+          <widget class="QPushButton" name="applyChair">
            <property name="text">
             <string>Apply</string>
            </property>
@@ -951,7 +951,7 @@ p, li { white-space: pre-wrap; }
           <widget class="QComboBox" name="selectPaperReviewer"/>
          </item>
          <item row="2" column="1">
-          <widget class="QPushButton" name="download_2">
+          <widget class="QPushButton" name="downloadReviewer">
            <property name="text">
             <string>Download</string>
            </property>
@@ -967,7 +967,7 @@ p, li { white-space: pre-wrap; }
        <attribute name="title">
         <string>Paper Management</string>
        </attribute>
-       <widget class="QTableWidget" name="tableWidget">
+       <widget class="QTableWidget" name="papersTable">
         <property name="geometry">
          <rect>
           <x>20</x>
@@ -1015,7 +1015,7 @@ p, li { white-space: pre-wrap; }
           </widget>
          </item>
          <item row="2" column="1">
-          <widget class="QPushButton" name="download_3">
+          <widget class="QPushButton" name="downloadChair">
            <property name="text">
             <string>Download</string>
            </property>
@@ -1299,7 +1299,7 @@ p, li { white-space: pre-wrap; }
        <attribute name="title">
         <string>User Management</string>
        </attribute>
-       <widget class="QTableWidget" name="tableWidget_2">
+       <widget class="QTableWidget" name="usersTable">
         <property name="geometry">
          <rect>
           <x>20</x>
@@ -1544,7 +1544,7 @@ p, li { white-space: pre-wrap; }
             </widget>
            </item>
            <item>
-            <widget class="QSpinBox" name="spinBox_8"/>
+            <widget class="QSpinBox" name="presentation"/>
            </item>
           </layout>
          </item>
@@ -1689,7 +1689,7 @@ p, li { white-space: pre-wrap; }
           </widget>
          </item>
          <item row="2" column="1">
-          <widget class="QPushButton" name="download">
+          <widget class="QPushButton" name="downloadReview">
            <property name="text">
             <string>Download</string>
            </property>
@@ -1707,6 +1707,19 @@ p, li { white-space: pre-wrap; }
          </item>
         </layout>
        </widget>
+       <widget class="QPushButton" name="submitReview">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>550</y>
+          <width>75</width>
+          <height>23</height>
+         </rect>
+        </property>
+        <property name="text">
+         <string>Submit</string>
+        </property>
+       </widget>
       </widget>
      </widget>
     </widget>

commit 1c93a68e5f4cd3e78a43b0015221e4ebf1775777
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 23:20:02 2014 +1100

    client server integration fns

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 4f2f0d6..ab8d385 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -23,7 +23,7 @@ public:
     ~MainWindow();
 
 private slots:
-    void on_login_clicked();
+    void on_login_clicked();//server stuff here
 
     void on_quit_clicked();
 
@@ -33,11 +33,11 @@ private slots:
 
     void on_passwordLogin_returnPressed();
 
-    void on_createAccount_clicked();
+    void on_createAccount_clicked();//server stuff here
 
-    void on_apply_clicked();
+    void on_apply_clicked();//server things here
 
-    void on_apply_2_clicked();
+    void on_applyChair_clicked();//server things here
 
     void on_addConfKey_clicked();
 
@@ -61,6 +61,30 @@ private slots:
 
     void on_tabWidget_currentChanged(int index);
 
+    void on_submit_clicked();//server stuff here
+
+    void on_submitBid_clicked();//server stuff here
+
+    void on_downloadReviewer_clicked();//see downloadPaper()
+
+    void on_submitPosts_clicked();//server stuff here
+
+    void on_downloadChair_clicked(); //see downloadPaper()
+
+    void on_acceptPaper_clicked();//server stuff here
+
+    void on_rejectPaper_clicked();//probably are faking this part
+
+    void on_downloadReview_clicked();//see downloadPaper()
+
+    void downloadPaper();//server stuff here
+
+    void on_submitReview_clicked();//server shit here
+
+    void on_addAsReviewer_clicked();//server shit here
+
+    void on_addAsReviewer_2_clicked();//server shit here
+
 private:
     void setUser(/*UserType_t*/ int userType);
     void noUser();

commit 2a7e2a829b7fe66e608818f2fa95eab18d72d1cd
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 23:19:21 2014 +1100

    client server integration fns

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index bebc855..c9ab2ab 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,5 +1,7 @@
 #include "mainwindow.hpp"
 #include "ui_mainwindow.h"
+#include "../DataAll/Review.hpp"
+//can probably be rid of the above review include
 
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),
@@ -95,11 +97,14 @@ void MainWindow::on_createAccount_clicked()
 void MainWindow::on_apply_clicked()
 {
     //send user details to server
+    //no response needed from server
 }
 
-void MainWindow::on_apply_2_clicked()
+void MainWindow::on_applyChair_clicked()
 {
     //send user details to server
+    //send conference details to  server
+    //no response needed from server
 }
 
 void MainWindow::on_addConfKey_clicked()
@@ -109,8 +114,6 @@ void MainWindow::on_addConfKey_clicked()
 
 void MainWindow::on_rmvConfKey_clicked()
 {
-    //for(int i = 0; i < ui->confKeyList->selectedItems().size(); i++)
-    //    ui->confKeyList->(ui->confKeyList->selectedItems().at(i));
     delete ui->confKeyList->currentItem();
 }
 
@@ -118,15 +121,6 @@ void MainWindow::on_addAuthor_clicked()
 {
     int row = ui->authorsTable->rowCount();
     ui->authorsTable->insertRow(row);
-//    QTableWidgetItem item[4];
-//    item[0].setText(ui->newAuthorName->text());
-//    item[1].setText(ui->newAuthorEmail->text());
-//    item[2].setText(ui->newAuthorOrg->text());
-//    item[3].setText(ui->newAuthorPhone->text());
-//    ui->authorsTable->setItem(row, 0 , &item[0]);
-//    ui->authorsTable->setItem(row, 1 , &item[1]);
-//    ui->authorsTable->setItem(row, 2 , &item[2]);
-//    ui->authorsTable->setItem(row, 3 , &item[3]);
 }
 
 void MainWindow::on_rmvAuthor_clicked()
@@ -198,112 +192,224 @@ void MainWindow::on_tabWidget_currentChanged(int index)
 //    }
 }
 
-//void MainWindow::populate_infoTabAuthor()
-//{
-//    User* user;
-//    if(loginMgr.currentAuthor != nullptr)
-//        user = dynamic_cast<User*>(currentAuthor);
-//    if(loginMgr.currentReviewer != nullptr)
-//        user = dynamic_cast<User*>(currentReviewer);
-
-//    ui->username->setText(user->username);
-//    ui->userid->setText(user->getUserId());
-//    ui->name->setText(user->getName());
-//    ui->email->setText(user->getEmail());
-//    ui->organisation->setText(user->getOrganisation());
-//    ui->phone->setText(user->getPhone());
-
-//    if(loginMgr.currentAuthor != nullptr)
-//        for(std::vector<std::string>::iterator it = loginMgr.currentAuthor->keywords.begin(); it != loginMgr.currentAuthor->keywords.end(); ++it)
-//            ui->authKeyList->addItem(*it);
-//    if(loginMgr.currentReviewer != nullptr)
-//        for(std::vector<std::string>::iterator it = loginMgr.currentReviewer->keywords.begin(); it != loginMgr.currentReviewer->keywords.end(); ++it)
-//            ui->authKeyList->addItem(*it);
-
-//    ui->conferenceName->setText(loginMgr.activeConference->title);
-//    ui->confTopic->setText(loginMgr.activeConference->topic);
-//    ui->confLocation->setText(loginMgr.activeConference->location);
-//    ui->confDesc->setText(loginMgr.activeConference->description);
-//    for(std::vector<std::string>::iterator it = loginMgr.activeConference->keywords.begin(); it != loginMgr.activeConference->keywords.end(); ++it)
-//        ui->confKeyList->addItem(*it);
-//    ui->subDate->setText(loginMgr.activeConference->paperDeadline.toString());
-//    ui->discDate->setText(loginMgr.activeConference->discussDeadline.toString());
-//    ui->hReviewDate->setText(loginMgr.activeConference->reviewDeadlineHard.toString());
-//    ui->sReviewDate->setText(loginMgr.activeConference->reviewDeadlineSoft.toString());
-//    //ui->allocDate->setText(loginMgr.activeConference->);
-//}
-
-//void MainWindow::populate_infoTabChair()
-//{
-//    PCChair* user = loginMgr.currentPCChair;
-//    Conference* conf = loginMgr.activeConference;
-
-//    ui->username->setText(user->username);
-//    ui->userid->setText(user->getUserId());
-//    ui->name->setText(user->getName());
-//    ui->email->setText(user->getEmail());
-//    ui->organisation->setText(user->getOrganisation());
-//    ui->phone->setText(user->getPhone());
-
-//    ui->conferenceName->setText(conf->title);
-//    ui->confTopic->setText(conf->topic);
-//    ui->confLocation->setText(conf->location);
-//    ui->confDesc->setText(conf->description);
-//    for(std::vector<std::string>::iterator it = conf->keywords.begin(); it != conf->keywords.end(); ++it)
-//        ui->confKeyList->addItem(*it);
-//    ui->subDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
-//    //ui->allocDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
-//    ui->sReviewDateEdit->date().setDate(conf->reviewDeadlineSoft.day, conf->reviewDeadlineSoft.month, conf->reviewDeadlineSoft.year);
-//    ui->hReviewDateEdit->date().setDate(conf->reviewDeadlineHard.day, conf->reviewDeadlineHard.month, conf->reviewDeadlineHard.year);
-//    ui->discDateEdit->date().setDate(conf->discussDeadline.day, conf->discussDeadline.month, conf->discussDeadline.year);
-//}
-
-//void MainWindow::populate_authorTab()
-//{
-//    Author* user = loginMgr.currentAuthor;
-//    std::vector<PaperSummary> papers = user->getOwnPapers();
-//    std::vector<std::string> keys = user->getCurrentPaper().getKeywords();
-//    std::vector<User> authors = user->getCurrentPaper().getAuthors();
-
-//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
-//        ui->selectPaperAuthor->addItem(it->paperName);
-
-//    ui->paperAbstract->setText(user->getCurrentPaper().getAbstract());
-//    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
-//        ui->paperKeyListAuth->addItem(*it);
-
-//    for(std::vector<User>::iterator it = authors.begin(); it != authors.end(); ++it){
-//        int rows = ui->authorsTable->rowCount();
-//        ui->authorsTable->insertRow(rows);
-//        QTableWidgetItem* newItem = new QTableWidgetItem(it->getName());
-//        ui->authorsTable->setItem(rows, 0, newItem);
-//        newItem = new QTableWidgetItem(it->getName());
-//        ui->authorsTable->setItem(rows, 1, newItem);
-//        newItem = new QTableWidgetItem(it->getOrganisation());
-//        ui->authorsTable->setItem(rows, 2, newItem);
-//        newItem = new QTableWidgetItem(it->getPhone());
-//        ui->authorsTable->setItem(rows, 3, newItem);
-//    }
+void MainWindow::populate_infoTabAuthor()
+{
+    User* user;
+    if(loginMgr.currentAuthor != nullptr)
+        user = dynamic_cast<User*>(currentAuthor);
+    if(loginMgr.currentReviewer != nullptr)
+        user = dynamic_cast<User*>(currentReviewer);
+
+    ui->username->setText(user->username);
+    ui->userid->setText(user->getUserId());
+    ui->name->setText(user->getName());
+    ui->email->setText(user->getEmail());
+    ui->organisation->setText(user->getOrganisation());
+    ui->phone->setText(user->getPhone());
+
+    if(loginMgr.currentAuthor != nullptr)
+        for(std::vector<std::string>::iterator it = loginMgr.currentAuthor->keywords.begin(); it != loginMgr.currentAuthor->keywords.end(); ++it)
+            ui->authKeyList->addItem(*it);
+    if(loginMgr.currentReviewer != nullptr)
+        for(std::vector<std::string>::iterator it = loginMgr.currentReviewer->keywords.begin(); it != loginMgr.currentReviewer->keywords.end(); ++it)
+            ui->authKeyList->addItem(*it);
+
+    ui->conferenceName->setText(loginMgr.activeConference->title);
+    ui->confTopic->setText(loginMgr.activeConference->topic);
+    ui->confLocation->setText(loginMgr.activeConference->location);
+    ui->confDesc->setText(loginMgr.activeConference->description);
+    for(std::vector<std::string>::iterator it = loginMgr.activeConference->keywords.begin(); it != loginMgr.activeConference->keywords.end(); ++it)
+        ui->confKeyList->addItem(*it);
+    ui->subDate->setText(loginMgr.activeConference->paperDeadline.toString());
+    ui->discDate->setText(loginMgr.activeConference->discussDeadline.toString());
+    ui->hReviewDate->setText(loginMgr.activeConference->reviewDeadlineHard.toString());
+    ui->sReviewDate->setText(loginMgr.activeConference->reviewDeadlineSoft.toString());
+    //ui->allocDate->setText(loginMgr.activeConference->);
+}
+
+void MainWindow::populate_infoTabChair()
+{
+    PCChair* user = loginMgr.currentPCChair;
+    Conference* conf = loginMgr.activeConference;
+
+    ui->username->setText(user->username);
+    ui->userid->setText(user->getUserId());
+    ui->name->setText(user->getName());
+    ui->email->setText(user->getEmail());
+    ui->organisation->setText(user->getOrganisation());
+    ui->phone->setText(user->getPhone());
+
+    ui->conferenceName->setText(conf->title);
+    ui->confTopic->setText(conf->topic);
+    ui->confLocation->setText(conf->location);
+    ui->confDesc->setText(conf->description);
+    for(std::vector<std::string>::iterator it = conf->keywords.begin(); it != conf->keywords.end(); ++it)
+        ui->confKeyList->addItem(*it);
+    ui->subDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
+    //ui->allocDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
+    ui->sReviewDateEdit->date().setDate(conf->reviewDeadlineSoft.day, conf->reviewDeadlineSoft.month, conf->reviewDeadlineSoft.year);
+    ui->hReviewDateEdit->date().setDate(conf->reviewDeadlineHard.day, conf->reviewDeadlineHard.month, conf->reviewDeadlineHard.year);
+    ui->discDateEdit->date().setDate(conf->discussDeadline.day, conf->discussDeadline.month, conf->discussDeadline.year);
+}
+
+void MainWindow::populate_authorTab()
+{
+    Author* user = loginMgr.currentAuthor;
+    std::vector<PaperSummary> papers = user->getOwnPapers();
+    std::vector<std::string> keys = user->getCurrentPaper().getKeywords();
+    std::vector<User> authors = user->getCurrentPaper().getAuthors();
+
+    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+        ui->selectPaperAuthor->addItem(it->paperName);
+
+    ui->paperAbstract->setText(user->getCurrentPaper().getAbstract());
+    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+        ui->paperKeyListAuth->addItem(*it);
+
+    for(std::vector<User>::iterator it = authors.begin(); it != authors.end(); ++it){
+        int rows = ui->authorsTable->rowCount();
+        ui->authorsTable->insertRow(rows);
+        QTableWidgetItem* newItem = new QTableWidgetItem(it->getName());
+        ui->authorsTable->setItem(rows, 0, newItem);
+        newItem = new QTableWidgetItem(it->getName());
+        ui->authorsTable->setItem(rows, 1, newItem);
+        newItem = new QTableWidgetItem(it->getOrganisation());
+        ui->authorsTable->setItem(rows, 2, newItem);
+        newItem = new QTableWidgetItem(it->getPhone());
+        ui->authorsTable->setItem(rows, 3, newItem);
+    }
+
+    ui->filenameAuth->setText(user->getCurrentPaper().getFname());
+}
+
+void MainWindow::populate_papersTab()
+{
+
+}
+
+void MainWindow::populate_reviewerTab()
+{
+
+}
+
+void MainWindow::populate_reviewTab()
+{
+
+}
+
+void MainWindow::populate_usersTab()
+{
+
+
+}
+
+void MainWindow::on_submit_clicked()
+{
+    //paper is the getCurrentPaper()
+
+    //send paper (as in the paper details) as well as the actual paper pdf to server
+    //no response from server
+}
+
+void MainWindow::on_submitBid_clicked()
+{
+    int bid = ui->selectBid->currentText().toInt();
+    int userId = loginMgr->getCurrentUser()->getUserID();
+    int paperId;
+    //paperId = user->getCurrentPaper();
+
+    //send users bid on a paper to the server
+    //no response from server
+}
+
+void MainWindow::downloadPaper(int paperId)
+{
+    int paperId = loginMgr->getCurrentUser()->getCurrentPaper().paperID;
+
+    //send request to server for paper pdf along with the paper id of the wanted paper
+    //hopes to receive the pdf
+
+    //after receiving pdf will just create the file in the working directory blah blah blah ill do that
+}
+
+void MainWindow::on_downloadReviewer_clicked()
+{
+    downloadPaper();
+}
+
+void MainWindow::on_downloadChair_clicked()
+{
+    downloadPaper();
+}
+
+void MainWindow::on_downloadReview_clicked()
+{
+    downloadPaper();
+}
+
+void MainWindow::on_submitPosts_clicked()
+{
+    QString post = ui->postBody->toPlainText();
+
+    //send discussion post data to server
+    //no response from server
+}
 
-//    ui->filenameAuth->setText(user->getCurrentPaper().getFname());
-//}
 
-//void MainWindow::populate_papersTab()
-//{
 
-//}
+void MainWindow::on_acceptPaper_clicked()
+{
+    int paperId = loginMgr->getCurrentUser()->getCurrentPaper().paperID;
+    int confId  = loginMgr->getActiveConference().confID;
 
-//void MainWindow::populate_reviewerTab()
-//{
+    //send paper id, conf id to server
+    //no response from server
+}
 
-//}
+void MainWindow::on_rejectPaper_clicked()
+{
+    //this probably does dick all
+}
+void MainWindow::on_submitReview_clicked()
+{
+    Review rev;
+    rev.confidence = ui->confidence->text().toInt();
+    rev.evalution = ui->evaluation->text().toInt();
+    rev.originality = ui->originality->text().toInt();
+    rev.overall = ui->overall->text().toInt();
+    rev.presentation = ui->presentation->text().toInt();
+    rev.relevance = ui->relevance->text().toInt();
+    rev.significance = ui->significance->text().toInt();
+    rev.techQuality = ui->techQuality->text().toInt();
+    rev.commentsBestAward = ui->commentsBestAward->toPlainText();
+    rev.commentsShortPaper = ui->commentsShortPaper->toPlainText();
+    rev.commentsStrength = ui->commentsStrengths->toPlainText();
+    rev.commentsSuggestions = ui->commentsSuggestions->toPlainText();
+    rev.commentsWeakness = ui->commentsWeaknesses->toPlainText();
+    rev.paperID = loginMgr->getCurrentUser()->getCurrentPaper.paperID;
+    rev.reviewerID = loginMgr->getCurrentUser()->getUserID();
+    //probably going to move some of the above functionality to elsewhere
+    
+
+    //submit review to the server
+    //no response from server
+}
 
-//void MainWindow::populate_reviewTab()
-//{
+void MainWindow::on_addAsReviewer_clicked()
+{
+    int paperId = ui->toReview->text().toInt();
+    int userId = ui->usersTable->item(ui->usersTable->currentRow(), 2)->text().toInt();
 
-//}
+    //send paper id and user id to server to add a paper assigned table entry
+    //no response from server
+}
 
-//void MainWindow::populate_usersTab()
-//{
+void MainWindow::on_addAsReviewer_2_clicked()
+{
+    int paperId = ui->toReview_2->text().toInt();
+    //int userId = ui->reviewersTable->item(ui->usersTable->currentRow(), 2)->text().toInt();
+    //above doesnt quite work may add uid field to table
 
-//}
+    //send paper id and user id to server to add a paper assigned table entry
+    //no response from server
+}

commit 43a5b8cbf233d3eaae59feed0b6de2c60f611f08
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:08:42 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index dc50a70..d6d2d00 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -104,7 +104,6 @@ CREATE TABLE `Paper` (
 	`keywordID` int NOT NULL,
 	`paperTitle` varchar(512) NOT NULL,
 	`paperAbstract` varchar(4096) NOT NULL,
-	`paperStatus` ENUM('accepted', 'rejected', 'submitted', 'assigned', 'reviewed'),
 	`paper` blob NOT NULL,
 	PRIMARY KEY(`paperID`),
 	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
@@ -126,6 +125,8 @@ CREATE TABLE `paperAuthors` (
 	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
+ALTER TABLE `paperAuthors` ADD UNIQUE `unique_index`(`paperID`, `authorID`);
+
 CREATE TABLE `PaperKeywords` (
 	`paperID` int NOT NULL,
 	`keywordID` int NOT NULL,

commit d593441ea49af4db0d54e9ac2f06661999bdd4f0
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:07:30 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index d573c75..e5cf0d4 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1102,6 +1102,136 @@ Paper Database::fetchPaper(int key) throw (const char*)
 	return paper;
 }
 
+void Database::createPaper(Paper* paper, std::string pdf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertPaper = "INSERT INTO Paper(paperID, leadAuthorID, confID, keywordID, paperTitle, paperAbstract, paper) VALUES(NULL, ?, ?, (SELECT keywordID FROM Keywords WHERE keyword=?) ?, ?, ?)";
+	const char* getPaperID = "SELECT LAST_INSERT_ID()";
+	const char* insertAuthors = "INSERT IGNORE INTO paperAuthors(paperID, authorID) VALUES(?, ?)";
+
+	const char* insertKeywords = "INSERT IGNORE INTO PaperKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+	const char* insertDiscuss = "INSERT INTO ReviewerDiscussion(paperID, confID, reviewerID, comment) VALUES(?, ?, ?, ?)";
+
+        // =======================================
+        // Paper
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertPaper);
+        pstmt->setInt(1, paper->leadAuthorID);
+        pstmt->setInt(2, paper->confID);
+        pstmt->setString(3, paper->confKeyword);
+        pstmt->setString(4, paper->title);
+        pstmt->setString(5, paper->abstract);
+        pstmt->setString(6, pdf);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store paperID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int paperID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Paper Authors
+        pstmt = dbcon->prepareStatement(insertAuthors);
+
+	std::vector<std::string>::const_iterator it;
+	for (it = paper->authors.begin(); it != paper->authors.end(); it ++)
+	{
+		PersonalInfo pInfo = *it;	
+
+		pstmt->setInt(1, paperID);
+		pstmt->setInt(2, pInfo->infoID);
+
+	        pstmt->executeUpdate();
+	}
+	delete pstmt;
+
+        // =======================================
+        // Keywords
+      	if (paper->keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		std::vector<std::string>::const_iterator it;
+      		for (it = paper->keywords.begin(); it != paper->keywords.end(); it ++)
+		{
+			std::string word = *it;	
+
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			
+			pstmt->setInt(1, paperID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+
+//        // =======================================
+//        // Discussion
+//      	if (paper->discussion.discussion.size() > 0)
+//      	{
+//      		pstmt = dbcon->prepareStatement(insertDiscuss);
+//		std::list<DiscussionPost>::const_iterator it;
+//      		for (it = paper->discussion.discussion.begin(); it != paper->discussion.discussion.end(); it ++)
+//		{
+//			DiscussionPost discuss = *it;	
+//
+//        		if (discuss->postID==0)
+//			{
+//				pstmt->setInt(1, paperID);
+//				pstmt->setInt(2, paper->confID);
+//				pstmt->setInt(3, discuss->reviewerID);
+//				pstmt->setString(4, discuss->comment);
+//
+//      		        	pstmt->executeUpdate();
+//			}
+//		}
+//      		delete pstmt;
+//
+//      	}
+//
+//        // =======================================
+//        // Reviews
+//      	if (paper->reviews.size() > 0)
+//      	{
+//      		pstmt = dbcon->prepareStatement(insertReview);
+//		std::vector<Review>::const_iterator it;
+//      		for (it = paper->reviews.begin(); it != paper->reviews.end(); it ++)
+//		{
+//			Review review = *it;	
+//
+//        		if (discuss->postID==0)
+//			{
+//				pstmt->setInt(1, paperID);
+//				pstmt->setInt(2, paper->confID);
+//				pstmt->setInt(3, discuss->reviewerID);
+//				pstmt->setString(4, discuss->comment);
+//
+//      		        	pstmt->executeUpdate();
+//			}
+//		}
+//      		delete pstmt;
+//
+//      	}
+}
+
 std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
 {
         if (invalid)

commit 123cf99d2f4d73fb2e40e0a2266189f63aa68256
Merge: be359a6 0bf7497
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 23:05:48 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit be359a6719c91055091dc750f0ff107a57d72e32
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 23:05:37 2014 +1100

    changed to use same port as user

diff --git a/AdminClient/AdminClient.cpp b/AdminClient/AdminClient.cpp
index 277a431..e4a1c5c 100644
--- a/AdminClient/AdminClient.cpp
+++ b/AdminClient/AdminClient.cpp
@@ -25,7 +25,7 @@ int main(int argc, char *argv[]) {
 QTcpSocket *establishConnection() {
     // just connect on localhost
     std::string servername = "10.64.32.150";//"127.0.0.1";
-    std::string pnumstr = "23457";
+    std::string pnumstr = "23456";
     /*QRegExp portChk("^\\d{4,5}$");
     QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
     std::cout << "Enter ip address (IP-IV) of server : ";

commit 0bf7497b53a209cbdf778080c5aaa050a0c04cd1
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 23:05:13 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index d47e449..7b4d843 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -47,7 +47,7 @@ public:
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
         std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
         Paper fetchPaper(int key) throw (const char*);
-	void createPaper(Paper *paper) throw (const char*);
+        void createPaper(Paper *paper, std::string pdf);
 
 	// ALGO
 	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);

commit 25a1bc1deab914ab1258cc8828a44afe3f708af9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:57:31 2014 +1100

    fixed up allocate papers and checkdeadlines now runs algo if need be

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 587f331..c4bc112 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -4,69 +4,6 @@
 #include "ConferenceManager.hpp"
 #include "../DataAll/Date.hpp"
 
-/*int main() {
-    time_t t = time(0);   // get time now
-    struct tm * now = localtime( & t );
-    int foo = now->tm_year + 1900;
-    std::cout << (foo) << '-'
-         << (now->tm_mon + 1) << '-'
-         <<  now->tm_mday
-         << endl;
-}*/
-
-void ConferenceManager::checkDeadlines(Conference* in)
-{
-    if (in == nullptr) {
-        return;
-    }
-    
-    const bool oldisBeforePaperDeadline = in->isBeforePaperDeadline;
-    const bool oldisBeforeAllocationDate = in->isBeforeAllocationDate;
-    const bool oldisBeforeSoftReviewDeadline = in->isBeforeSoftReviewDeadline;
-    const bool oldisBeforeHardReviewDeadline = in->isBeforeHardReviewDeadline;
-    const bool oldisBeforeDiscussDeadline = in->isBeforeDiscussDeadline;
-    
-    time_t t = time(0);   // get time now
-    struct tm * now = localtime( & t );
-    Date today(now->tm_year + 1900,
-               now->tm_mon + 1,
-               now->tm_mday);
-    Date yesterday(now->tm_year + 1900,
-               now->tm_mon + 1,
-               now->tm_mday - 1);
-    in->isBeforePaperDeadline = in->paperDeadline.compare(today);
-    in->isBeforeAllocationDate = in->allocationDate.compare(yesterday);
-    //for deadlines, you can still submit papers on the day of the paper deadline
-    //for dates, it occurs on the day, so if it is the day of the allocation date or after, allocation is done
-    //this means that it occurs one day earlier, this is why we use yesterday
-    if(!in->isBeforeAllocationDate) {
-        //run allocation
-        //algo is responsible for updating the database with the reviwere paper allocations
-    }
-    in->isBeforeSoftReviewDeadline = in->reviewDeadlineSoft.compare(today);
-    in->isBeforeHardReviewDeadline = in->reviewDeadlineHard.compare(today);
-    in->isBeforeDiscussDeadline = in->discussDeadline.compare(today);
-    
-    if(!(oldisBeforePaperDeadline == in->isBeforePaperDeadline && //ie something changed
-    oldisBeforeAllocationDate == in->isBeforeAllocationDate &&
-    oldisBeforeSoftReviewDeadline == in->isBeforeSoftReviewDeadline &&
-    oldisBeforeHardReviewDeadline == in->isBeforeHardReviewDeadline &&
-    oldisBeforeDiscussDeadline == in->isBeforeDiscussDeadline))
-    {
-        updateConference(*in); // update conference in database if something changed
-    }
-
-}
-
-void ConferenceManager::checkAllDeadlines()
-{
-    std::vector<Conference> in = getAllConferences(); //gets all conferences in database
-    
-    for (unsigned i = 0; i < in.size(); i++) {
-      checkDeadlines(&in[i])
-  }
-}
-
 std:vector<Conferences> ConferenceManager::getAllActiveConferences()
 {
     std::vector<int> activeConfs = database->activeConfIDs();
@@ -121,3 +58,57 @@ void ConferenceManager::sendConferenceBatch()
 {
     //send getAllActiveConferences to the client
 }
+
+void ConferenceManager::checkDeadlines(Conference* in)
+{
+    if (in == nullptr) {
+        return;
+    }
+    
+    const bool oldisBeforePaperDeadline = in->isBeforePaperDeadline;
+    const bool oldisBeforeAllocationDate = in->isBeforeAllocationDate;
+    const bool oldisBeforeSoftReviewDeadline = in->isBeforeSoftReviewDeadline;
+    const bool oldisBeforeHardReviewDeadline = in->isBeforeHardReviewDeadline;
+    const bool oldisBeforeDiscussDeadline = in->isBeforeDiscussDeadline;
+    
+    time_t t = time(0);   // get time now
+    struct tm * now = localtime( & t );
+    Date today(now->tm_year + 1900,
+               now->tm_mon + 1,
+               now->tm_mday);
+    Date yesterday(now->tm_year + 1900,
+               now->tm_mon + 1,
+               now->tm_mday - 1);
+    in->isBeforePaperDeadline = in->paperDeadline.compare(today);
+    in->isBeforeAllocationDate = in->allocationDate.compare(yesterday);
+    //for deadlines, you can still submit papers on the day of the paper deadline
+    //for dates, it occurs on the day, so if it is the day of the allocation date or after, allocation is done
+    //this means that it occurs one day earlier, this is why we use yesterday
+    if(!in->isBeforeAllocationDate) {
+        allocatePapers();
+        //run allocation
+        //algo is responsible for updating the database with the reviwere paper allocations
+    }
+    in->isBeforeSoftReviewDeadline = in->reviewDeadlineSoft.compare(today);
+    in->isBeforeHardReviewDeadline = in->reviewDeadlineHard.compare(today);
+    in->isBeforeDiscussDeadline = in->discussDeadline.compare(today);
+    
+    if(!(oldisBeforePaperDeadline == in->isBeforePaperDeadline && //ie something changed
+    oldisBeforeAllocationDate == in->isBeforeAllocationDate &&
+    oldisBeforeSoftReviewDeadline == in->isBeforeSoftReviewDeadline &&
+    oldisBeforeHardReviewDeadline == in->isBeforeHardReviewDeadline &&
+    oldisBeforeDiscussDeadline == in->isBeforeDiscussDeadline))
+    {
+        updateConference(*in); // update conference in database if something changed
+    }
+
+}
+
+void ConferenceManager::checkAllDeadlines()
+{
+    std::vector<Conference> in = getAllConferences(); //gets all conferences in database
+    
+    for (unsigned i = 0; i < in.size(); ++i) {
+      checkDeadlines(&in[i])
+  }
+}

commit 124dcdfd5a1859f73da76a1db439b3bfea5df062
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:56:08 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 7c0537e..587f331 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -105,7 +105,11 @@ void ConferenceManager::allocatePapers()
 {
         //for each paper!!!!
         //NEED LOOP HERE
-        PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
+        std::vector<int> paperIDsForConf = database->getPaperIDsForConf(*currentConference.confID);
+        for(unsigned int i = 0; i < paperIDsForConf.size(); ++i)
+        {
+          PaperForReview(paperIDsForConf[i], currentConference, currentConference->reviewersPerPaper, database());
+        }
 }   
     
 void ConferenceManager::sendConference()

commit 0deefaa57e62c44eb8c2e763df7e145e795276d9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:49:51 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index ae23ad6..053ebc6 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -29,9 +29,10 @@ public:
   {
     database->putConf(currentConference->title, currentConference);
   }
-  void modifyConference(int)
+  void modifyConference(int confID)
   {
-    addConference;
+    fetchConference(confID);
+    addConference();
   }
   //bool deleteConference(int);
   void sendConference();

commit 469fbbda324893ed977130dd692638fa75053f44
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:42:14 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 847c500..d47e449 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -1,3 +1,5 @@
+#ifndef DATABASE_H
+#define DATABASE_H
 #include <string>
 #include <vector>
 #include "mysql_connection.h"
@@ -96,3 +98,4 @@ private:
         void updateConf(Conference *conf);
 
 };
+#endif

commit d1275b9c6023804af017bae27ec6ead9634819b6
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:35:40 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 387ba42..ae23ad6 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -27,7 +27,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addConference() 
   {
-    db->putConf(currentConference->title, currentConference);
+    database->putConf(currentConference->title, currentConference);
   }
   void modifyConference(int)
   {

commit eb189e71647f331ae8eacdbfa6b2f889cff1ae04
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:34:44 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 89643b8..61ccdd3 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -24,7 +24,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addUser() 
   {
-    db->putUser(currentUser->name, currentUser);
+    database->putUser(currentUser->name, currentUser);
   }
   void modifyUser()
   {
@@ -35,7 +35,7 @@ public:
   void sendUser();
   void sendUserBatch(int);
   void fetchUser(std::string);
-  std:vector<User> getAllUsers();
+  std::vector<User> getAllUsers();
 
 
 private:

commit 9a80ab7dac6d00535223dc32e87e68f7daeb396e
Merge: 0cfb253 773b415
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 22:33:16 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 0cfb253b87bf36ad69c9946f3f886fa834959520
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 22:33:04 2014 +1100

    adding network connectivity to server

diff --git a/Server/Server.cpp b/Server/Server.cpp
index 104922e..737d5c6 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -4,35 +4,22 @@
 #include "PaperManager.hpp"
 #include "UserManager.hpp"
 
-int main()
-{
-  Database* db;
-  PaperManager* pm;
-  ConferenceManager* cm;
-  UserManager* um;
-  
-  
-  db = new Database(/*CONSTRUCTOR*/);
-  pm = new PaperManager(nullptr, db);
-  cm = new ConferenceManager(std::vector<Conference*>(), db, nullptr);
-  um = new UserManager(nullptr, db);
-  
-  delete um;
-  delete cm;
-  delete pm;
-  delete db;
-
-  return 0;
-}
-
-/*
-
-
 #include <iostream>
 #include <QApplication>
-#include "ServerMain.h"
+#include "ServerMain.hpp"
 
-int main(int argc, char *argv[]) {
+int main(int argc, char *argv[])
+{
+//  Database* db;
+//  PaperManager* pm;
+//  ConferenceManager* cm;
+//  UserManager* um;
+//    
+//  db = new Database(/*CONSTRUCTOR*/);
+//  pm = new PaperManager(nullptr, db);
+//  cm = new ConferenceManager(std::vector<Conference*>(), db, nullptr);
+//  um = new UserManager(nullptr, db);
+  
 
     std::cout << "Server application starting" << std::endl;
     std::cout << "Initializing QT framework" << std::endl;
@@ -45,10 +32,19 @@ int main(int argc, char *argv[]) {
         std::cout << "Failed" << std::endl;
         std::exit(1);
     }
+  
     
     // create and show your widgets here
 //    gDialogptr = new Dialog();
 //    return gDialogptr->exec();
-    return app.exec();
+  
+    // GO! GO! GO!
+    int rtnValue = app.exec();
+   
+//  delete um;
+//  delete cm;
+//  delete pm;
+//  delete db;
+
+  return rtnValue;
 }
-*/
diff --git a/Server/ServerMain.cpp b/Server/ServerMain.cpp
new file mode 100644
index 0000000..1a1aa7d
--- /dev/null
+++ b/Server/ServerMain.cpp
@@ -0,0 +1,47 @@
+/* 
+ * File:   ServerMain.cpp
+ * Author: ubuntu
+ * 
+ * Created on 23 October 2014, 2:40 AM
+ */
+
+#include <stdlib.h>
+#include "ServerMain.hpp"
+#include "ClientHandler.hpp"
+#include <QtNetwork>
+#include <iostream>
+
+ServerMain::ServerMain(QObject *parent) : QTcpServer(parent) {
+    const char* arbitraryPort = "23456";
+    this->portnum = arbitraryPort;
+
+    QList<QHostAddress> ipAddressesList = QNetworkInterface::allAddresses();
+    // use the first non-localhost IPv4 address
+    for (int i = 0; i < ipAddressesList.size(); ++i) {
+        if (ipAddressesList.at(i) != QHostAddress::LocalHost
+                && ipAddressesList.at(i).toIPv4Address()) {
+            this->ipAddress = ipAddressesList.at(i);
+            break;
+        }
+    }
+    // if we did not find one, use IPv4 localhost
+    if (this->ipAddress.isNull())
+        ipAddress = QHostAddress(QHostAddress::LocalHost);
+
+    if (!this->listen(ipAddress,atoi(arbitraryPort))) {
+        //using namespace std;
+        std::cout << "Unable to initialize server listening port. Abort." << std::endl;
+        exit(1);
+    }
+}
+
+void ServerMain::incomingConnection(int socketDescriptor) {
+
+    ClientHandler *handler = new ClientHandler(socketDescriptor, this);
+    connect(handler, SIGNAL(finished()), handler, SLOT(deleteLater()));
+    handler->start();
+}
+
+bool ServerMain::serverIsOK() {
+    return this->isListening(); 
+}
diff --git a/Server/ServerMain.hpp b/Server/ServerMain.hpp
new file mode 100644
index 0000000..1e63079
--- /dev/null
+++ b/Server/ServerMain.hpp
@@ -0,0 +1,34 @@
+/* 
+ * File:   ServerMain.h
+ * Author: ubuntu
+ *
+ * Created on 23 October 2014, 2:40 AM
+ */
+
+#ifndef SERVERMAIN_H
+#define	SERVERMAIN_H
+
+#include <QTcpServer>
+
+class ServerMain : public QTcpServer {
+    Q_OBJECT
+    
+public:
+    ServerMain(QObject *parent = 0);
+    QString listeningPort() { return this->portnum; }
+    QString getIpAddress() { return this->ipAddress.toString(); }
+    
+    bool serverIsOK();
+    
+protected:
+    void incomingConnection(int socketDescriptor);
+
+private:
+    QString portnum;
+    QHostAddress ipAddress;
+
+};
+
+
+#endif	/* SERVERMAIN_H */
+

commit 773b4156476a36a83d6ca6d29dc26b1e2801aca4
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:29:46 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 72c3f97..7c0537e 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -69,13 +69,13 @@ void ConferenceManager::checkAllDeadlines()
 
 std:vector<Conferences> ConferenceManager::getAllActiveConferences()
 {
-    std::vector<int> activeConfs = db->activeConfIDs();
+    std::vector<int> activeConfs = database->activeConfIDs();
     
     std::vector<Conference> conferences;
     
     for(unsigned int i = 0; i < activeConfs.size(); ++i)
     {
-        conferences.push_back(db->fetchConference(activeConfs[i]));
+        conferences.push_back(database->fetchConference(activeConfs[i]));
     }
     
     return conferences;
@@ -83,13 +83,13 @@ std:vector<Conferences> ConferenceManager::getAllActiveConferences()
 
 std:vector<Conference> ConferenceManager::getAllConferences()
 {
-    std::vector<int> allConfs = db->allConfIDs();
+    std::vector<int> allConfs = database->allConfIDs();
     
     std::vector<Conference> conferences;
     
     for(unsigned int i = 0; i < activeConfs.size(); ++i)
     {
-        conferences.push_back(db->fetchConference(allConfs[i]));
+        conferences.push_back(database->fetchConference(allConfs[i]));
     }
     
     return conferences;
@@ -97,7 +97,7 @@ std:vector<Conference> ConferenceManager::getAllConferences()
 
 void ConferenceManager::fetchConference(int confID)
 {
-    *currentConference = db->fetchConference(confID);
+    *currentConference = database->fetchConference(confID);
 }
 
 

commit f3ae983cde20e324a96d305ffd0748efc223b4ac
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:29:21 2014 +1100

    Update UserManager.cpp

diff --git a/Server/UserManager.cpp b/Server/UserManager.cpp
index 05b2209..a90c1a9 100644
--- a/Server/UserManager.cpp
+++ b/Server/UserManager.cpp
@@ -2,17 +2,17 @@
 
 void UserManager::fetchUser(std::string userName)
 {
-  *currentUser = db->fetchUser(userName);
+  *currentUser = database->fetchUser(userName);
 }
 
 std::vector UserManager::getAllUsers()
 {
-  std::vector<std::string> allUsers = db->allUserNames();
+  std::vector<std::string> allUsers = database->allUserNames();
   
   std::vector<User> users;
   for(int i = 0; i < allUsers.size(); ++i)
   {
-    users.push_back(db->fetchUser(allUsers[i]));
+    users.push_back(database->fetchUser(allUsers[i]));
   }
   return users;
 }

commit 39dca78b00462203a81f762ed222eeb937b4f6d8
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:28:58 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 028a256..111f5aa 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -1,6 +1,6 @@
 void PaperManager::fetchPaper(int paperID)
 {
-  *currentPaper = db->fetchPaper(paperID);
+  *currentPaper = database->fetchPaper(paperID);
 }
 
 void PaperManager::sendPaper(int paperID)
@@ -11,17 +11,17 @@ void PaperManager::sendPaper(int paperID)
 
 void PaperManager::addPaper()
 {
-  db->createPaper(*currentPaper);
+  database->createPaper(*currentPaper);
 }
 
 void PaperManager::modifyPaper()
 {
-  db->updatePaper(*currentPaper);
+  database->updatePaper(*currentPaper);
 }
 
 void PaperManager::sendPaperSummaryBatch(int confID)
 {
-  std::vector<int> paperIDsOfConf = db->getPaperIDsForConf(confID);
+  std::vector<int> paperIDsOfConf = database->getPaperIDsForConf(confID);
   //returns all paperSummaries using that confID
   std::vector<PaperSummary> papersOfConf;
   for(unsigned int i = 0; i < paperIDsOfConf.size(); ++i)
@@ -33,7 +33,7 @@ void PaperManager::sendPaperSummaryBatch(int confID)
 
 void PaperManager::sendPaperSummariesToReview(int userID, int confID)
 {
- std::vector<int> paperIDsToReview = db->getPaperIDsForAllocatedReviewer(userID, confID); //or something like that
+ std::vector<int> paperIDsToReview = database->getPaperIDsForAllocatedReviewer(userID, confID); //or something like that
  std::vector<PaperSummary> papersToReview;
  for(unsigned int i = 0; i < paperIDsToReview.size(); ++i)
  {
@@ -44,7 +44,7 @@ void PaperManager::sendPaperSummariesToReview(int userID, int confID)
 
 void PaperManager::sendAuthoredPaperSummaries(int leadAuthorID, int confID)
 {
- std::vector<int> paperIDsAuthored = db->fetchPapersFromLeadAuthorIDAndConfID(leadAuthorID, confID); 
+ std::vector<int> paperIDsAuthored = database->fetchPapersFromLeadAuthorIDAndConfID(leadAuthorID, confID); 
  //or something like that
  std::vector<PaperSummary> papersAuthored;
  for(unsigned int i = 0; i < paperIDsAuthored.size(); ++i)

commit 0f21ecb43951166e56c049e9f3f871d7a173a193
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:23:20 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 3cfa033..028a256 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -9,27 +9,35 @@ void PaperManager::sendPaper(int paperID)
  //send *currentPaper to the client
 }
 
+void PaperManager::addPaper()
+{
+  db->createPaper(*currentPaper);
+}
+
+void PaperManager::modifyPaper()
+{
+  db->updatePaper(*currentPaper);
+}
+
 void PaperManager::sendPaperSummaryBatch(int confID)
 {
   std::vector<int> paperIDsOfConf = db->getPaperIDsForConf(confID);
   //returns all paperSummaries using that confID
-  std::vector<PaperSummaries> papersOfConf;
+  std::vector<PaperSummary> papersOfConf;
   for(unsigned int i = 0; i < paperIDsOfConf.size(); ++i)
   {
-    fetchPaper(paperIDsOfConf[i]); //curentPaper now points to it
-    papersOfConf[i] = PaperSummary(currentPaper->paperID, currentPaper->title);
+    papersOfConf[i] = fetchPaperSummary(paperIDsOfConf[i]);
   }
   //send papersOfConf to the client
 }
 
 void PaperManager::sendPaperSummariesToReview(int userID, int confID)
 {
- std::vector<int> paperIDsToReview = db->fetchPapersFromUserIDAndConfID(userID, confID); //or something like that
- std::vector<PaperSummaries> papersToReview;
+ std::vector<int> paperIDsToReview = db->getPaperIDsForAllocatedReviewer(userID, confID); //or something like that
+ std::vector<PaperSummary> papersToReview;
  for(unsigned int i = 0; i < paperIDsToReview.size(); ++i)
  {
-   fetchPaper(paperIDsToReview[i]); //curentPaper now points to it
-   papersToReview[i] = PaperSummary(currentPaper->paperID, currentPaper->title);
+   papersToReview[i] = fetchPaperSummary(paperIDsToReview[i]);
  }
   //send papersToReview to the client
 }
@@ -38,11 +46,10 @@ void PaperManager::sendAuthoredPaperSummaries(int leadAuthorID, int confID)
 {
  std::vector<int> paperIDsAuthored = db->fetchPapersFromLeadAuthorIDAndConfID(leadAuthorID, confID); 
  //or something like that
- std::vector<PaperSummaries> papersAuthored;
+ std::vector<PaperSummary> papersAuthored;
  for(unsigned int i = 0; i < paperIDsAuthored.size(); ++i)
  {
-   fetchPaper(paperIDsAuthored[i]); //curentPaper now points to it
-   papersAuthored[i] = PaperSummary(currentPaper->paperID, currentPaper->title);
+   papersAuthored[i] = fetchPaperSummary(paperIDsAuthored[i]);
  }
   //send papersAuthored to the client
 }

commit 3147d5f856aa32a569d62fd6c5e6c8ce67313407
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:18:29 2014 +1100

    Update UserManager.cpp

diff --git a/Server/UserManager.cpp b/Server/UserManager.cpp
index 3564903..05b2209 100644
--- a/Server/UserManager.cpp
+++ b/Server/UserManager.cpp
@@ -16,3 +16,13 @@ std::vector UserManager::getAllUsers()
   }
   return users;
 }
+
+void UserManager::sendUser()
+{
+ //send *currentUser to the client
+}
+
+void UserManager::sendUserBatch()
+{
+  //std::vector<std::string> userID = db->
+}

commit 57fbbc8590b2ac34f88a71f3671102410589e84a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:12:51 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index d98dc5c..89643b8 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -33,7 +33,7 @@ public:
   
   //bool deleteUser(int);
   void sendUser();
-  void sendUserBatch();
+  void sendUserBatch(int);
   void fetchUser(std::string);
   std:vector<User> getAllUsers();
 

commit b8ed59750f8e6a67534f16e5271c5d6edc9a4d2a
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 22:09:16 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index e5df965..847c500 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -45,6 +45,7 @@ public:
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
         std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
         Paper fetchPaper(int key) throw (const char*);
+	void createPaper(Paper *paper) throw (const char*);
 
 	// ALGO
 	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);
@@ -57,6 +58,7 @@ public:
 	int getReviewerPreference(int userID, int confID, int paperID) throw (const char*);
 	
 	std::vector<int> getPaperIDsForConf(int confID) throw (const char*);	
+	std::vector<int> getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*);
 	
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);

commit 0ca68f13f90135978ac2300c0255157ff83453e7
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 22:08:52 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index b65771c..d573c75 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1363,6 +1363,36 @@ std::vector<int> Database::getPaperIDsForConf(int confID) throw (const char*)
 	return vec;
 }
 
+std::vector<int> Database::getPaperIDsForAllocatedReviewer(int reviewerID, int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM PaperAssigned WHERE (reviewerID=? and confID)";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, reviewerID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
 
 
 //

commit 250aa304de96f2447c8f144ae89b929874e84261
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 22:08:04 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index 214ebfc..dc50a70 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -138,8 +138,10 @@ ALTER TABLE `PaperKeywords` ADD UNIQUE `unique_index`(`paperID`, `keywordID`);
 CREATE TABLE `PaperAssigned` (
 	`paperID` int NOT NULL,
 	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
 	`reviewed` boolean NOT NULL DEFAULT 0,
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
 	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 	

commit 8633f31f349f3097f2602bec39e085fa443eb4de
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 22:07:34 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 4c261b7..3cfa033 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -3,25 +3,49 @@ void PaperManager::fetchPaper(int paperID)
   *currentPaper = db->fetchPaper(paperID);
 }
 
-void PaperManager::sendAuthoredPaper(int paperID)
+void PaperManager::sendPaper(int paperID)
 {
- fetchPaper(paperID);
-  //send Paper to client
+  fetchPaper(paperID);
+ //send *currentPaper to the client
 }
 
-void PaperManager::sendPapersToReview(int userID)
+void PaperManager::sendPaperSummaryBatch(int confID)
 {
- std::vector<int> paperIDsToReview = db->fetchPapersFromUserID(userID); //or something like that
- std::vector<Paper> papersToReview;
+  std::vector<int> paperIDsOfConf = db->getPaperIDsForConf(confID);
+  //returns all paperSummaries using that confID
+  std::vector<PaperSummaries> papersOfConf;
+  for(unsigned int i = 0; i < paperIDsOfConf.size(); ++i)
+  {
+    fetchPaper(paperIDsOfConf[i]); //curentPaper now points to it
+    papersOfConf[i] = PaperSummary(currentPaper->paperID, currentPaper->title);
+  }
+  //send papersOfConf to the client
+}
+
+void PaperManager::sendPaperSummariesToReview(int userID, int confID)
+{
+ std::vector<int> paperIDsToReview = db->fetchPapersFromUserIDAndConfID(userID, confID); //or something like that
+ std::vector<PaperSummaries> papersToReview;
  for(unsigned int i = 0; i < paperIDsToReview.size(); ++i)
  {
-   fetchPaper; //curentPaper now points to it
-   papersToReview[i] = *currentPaper;
+   fetchPaper(paperIDsToReview[i]); //curentPaper now points to it
+   papersToReview[i] = PaperSummary(currentPaper->paperID, currentPaper->title);
  }
-  //send this vector to the client
+  //send papersToReview to the client
 }
 
-void PaperManager::sendPaper()
+void PaperManager::sendAuthoredPaperSummaries(int leadAuthorID, int confID)
 {
- //send *currentPaper to the client
+ std::vector<int> paperIDsAuthored = db->fetchPapersFromLeadAuthorIDAndConfID(leadAuthorID, confID); 
+ //or something like that
+ std::vector<PaperSummaries> papersAuthored;
+ for(unsigned int i = 0; i < paperIDsAuthored.size(); ++i)
+ {
+   fetchPaper(paperIDsAuthored[i]); //curentPaper now points to it
+   papersAuthored[i] = PaperSummary(currentPaper->paperID, currentPaper->title);
+ }
+  //send papersAuthored to the client
 }
+
+
+

commit 49020f30258e886b4e9f07ec87abee03fe705d59
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 22:02:45 2014 +1100

    added temp networking

diff --git a/Server/Server.cpp b/Server/Server.cpp
index d27645e..104922e 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -24,3 +24,31 @@ int main()
 
   return 0;
 }
+
+/*
+
+
+#include <iostream>
+#include <QApplication>
+#include "ServerMain.h"
+
+int main(int argc, char *argv[]) {
+
+    std::cout << "Server application starting" << std::endl;
+    std::cout << "Initializing QT framework" << std::endl;
+    QApplication app(argc, argv);
+    std::cout << "Creating threaded network server" << std::endl;
+    ServerMain *theServer = new ServerMain();
+    std::cout << "Server location: " << theServer->getIpAddress().toStdString()
+              << ":" << theServer->listeningPort().toStdString() << std::endl;
+    if(!theServer->serverIsOK()) {
+        std::cout << "Failed" << std::endl;
+        std::exit(1);
+    }
+    
+    // create and show your widgets here
+//    gDialogptr = new Dialog();
+//    return gDialogptr->exec();
+    return app.exec();
+}
+*/

commit 34889d97b63ad10919dc182bbc1d76b401f70451
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:50:55 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 01edd61..5b8aa53 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -26,10 +26,10 @@ public:
   //bool deleteReview(int);
   void modifyReview(int);
   //bool deletePaper(int);
-  void sendPaper();
-  void sendPaperSummaryBatch(int);
-  void sendAuthoredPaper(int);
-  void sendPaperSummariesToReview(int);
+  void sendPaper(); //just send a paper
+  void sendPaperSummaryBatch(int); //all papers for a conf
+  void sendAuthoredPaperSummaries(int, int); //
+  void sendPaperSummariesToReview(int, int); //all papers for a reviewer in a conference
 
 private:
 void fetchPaper(int);

commit c9cdee6041ebc3b79185fbfa5fcf792a3ef390fd
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:50:18 2014 +1100

    fixes for database compile

diff --git a/Database/Database.cpp b/Database/Database.cpp
index bdf36be..b65771c 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -13,6 +13,7 @@
 #include <vector>
 #include <map>
 #include <string>
+#include <list>
 
 using namespace sql;
 
@@ -1033,7 +1034,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 		int reviewerID = rs->getInt(2);
 		int commentID = rs->getInt(3);
 		DiscussionPost discuss(comment, reviewerID, commentID);
-                discussion.push_back(disucss);
+                discussion.push_back(discuss);
         }
 
         delete rs;
@@ -1087,7 +1088,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
         delete pstmt;
 
 	Paper paper(
-		paperId,
+		paperID,
 		confID,
 		leadAuthorID,
 		title,
@@ -1095,8 +1096,8 @@ Paper Database::fetchPaper(int key) throw (const char*)
 		authors,
 		keywords,
 		confKeyword,
-		discussion,
-		reviews);
+		reviews,
+		discussion);
 
 	return paper;
 }
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 73c2160..e5df965 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -9,6 +9,9 @@
 #include "../DataAll/PersonalInfo.hpp"
 #include "../DataAll/Paper.hpp"
 #include "../DataAll/PaperSummary.hpp"
+#include "../DataAll/Review.hpp"
+#include "../DataAll/Discussion.hpp"
+#include "../DataAll/DiscussionPost.hpp"
 
 class Database {
 public:

commit 0db0a376208b3701cfc2f4258dd75fd22bded8bf
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 21:46:03 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 37bdd8e..bdf36be 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -931,6 +931,10 @@ Paper Database::fetchPaper(int key) throw (const char*)
 	
 	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
 
+	const char* getDiscussPost = "SELECT comment, reviewerID, commentID FROM ReviewerDiscussion WHERE (paperID=? and confID=?)";
+
+	const char* getReviews = "SELECT * FROM Review WHERE (paperID=? and confID=?)";
+	
         // =======================================
         // Paper
 	sql::PreparedStatement *pstmt = NULL;

commit 35054e789ec2b731ef66ee0b04f892dffb238096
Merge: fecab58 f3f63a0
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:43:42 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit f3f63a0716b0f839c963c4d07f89f9bc2306fd39
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 21:43:26 2014 +1100

    finished fetchPaper

diff --git a/Database/Database.cpp b/Database/Database.cpp
index fc50f2c..37bdd8e 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1014,31 +1014,87 @@ Paper Database::fetchPaper(int key) throw (const char*)
         delete rs;
         delete pstmt;
 
+        // =======================================
+        // Discussion
+        std::list<DiscussionPost> discussion;
+	
+	pstmt = dbcon->prepareStatement(getDiscussPost);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string comment = rs->getString(1);
+		int reviewerID = rs->getInt(2);
+		int commentID = rs->getInt(3);
+		DiscussionPost discuss(comment, reviewerID, commentID);
+                discussion.push_back(disucss);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Reviews
+        std::vector<Review> reviews;
+	
+	pstmt = dbcon->prepareStatement(getReviews);
+	pstmt->setInt(1, paperID);
+	pstmt->setInt(2, confID);
 
+	rs = pstmt->executeQuery();
 
-//        Conference conf(
-//		isActive,
-//		title,
-//		confID,
-//		topic,
-//		description,
-//		location,
-//		vec,
-//		isBeforePaperDeadline,
-//		paperDeadline,
-//		isBeforeAllocationDate,
-//		allocationDate,
-//		isBeforeSoftReviewDeadline,
-//		reviewDeadlineSoft,
-//		isBeforeHardReviewDeadline,
-//		reviewDeadlineHard,
-//		isBeforeDiscussDeadline,
-//		discussDeadline,
-//		reviewersPerPaper,
-//		postWordLimit
-//		);
-//	
-//	return conf;
+        while (rs->next()) {
+		int reviewerID = rs->getInt(3);
+		int overall = rs->getInt(5);
+		int confidence = rs->getInt(6);
+		int relevance = rs->getInt(7);
+		int originality = rs->getInt(8);
+		int significance = rs->getInt(9);
+		int presentation = rs->getInt(10);
+		int techQuality = rs->getInt(11);
+		int evaluation = rs->getInt(12);
+  		std::string commentsStrength = rs->getString(13);
+  		std::string commentsWeakness = rs->getString(14);
+  		std::string commentsSuggestions = rs->getString(15);
+  		std::string commentsShortPaper = rs->getString(16);
+  		std::string commentsBestAward = rs->getString(17);
+
+		Review review(paperID, 
+			reviewerID, 
+			overall, 
+			confidence, 
+			relevance, 
+			originality, 
+			significance, 
+			presentation, 
+			techQuality, 
+			evaluation, 
+			commentsStrength, 
+			commentsWeakness, 
+			commentsSuggestions, 
+			commentsShortPaper, 
+			commentsBestAward);
+		reviews.push_back(review);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	Paper paper(
+		paperId,
+		confID,
+		leadAuthorID,
+		title,
+		abstract,
+		authors,
+		keywords,
+		confKeyword,
+		discussion,
+		reviews);
+
+	return paper;
 }
 
 std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)

commit fecab581729e5e9ad4cab531bf0945bbce54c617
Merge: 6f2db06 5bf569a
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:43:11 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 6f2db069366283a1c49c8d8e260c5c0bc97c3d96
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:43:01 2014 +1100

    fixed minor typos

diff --git a/AdminClient/mainwindow.cpp b/AdminClient/mainwindow.cpp
index 94419a5..85c4ebd 100644
--- a/AdminClient/mainwindow.cpp
+++ b/AdminClient/mainwindow.cpp
@@ -21,7 +21,8 @@ void MainWindow::on_addConf_clicked()
 
 void MainWindow::on_rmvConf_clicked()
 {
-    ui->confTable->removeRow(ui->confTable->currentRow());
+//    error: ‘class Ui::MainWindow’ has no member named ‘confTable’
+//    ui->confTable->removeRow(ui->confTable->currentRow());
 }
 
 void MainWindow::on_addUserKey_clicked()

commit 5bf569a6cea16e33bbce8c3ffa122a479a44321c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:41:35 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 95df9ea..01edd61 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -27,9 +27,9 @@ public:
   void modifyReview(int);
   //bool deletePaper(int);
   void sendPaper();
-  void sendPaperBatch(int);
+  void sendPaperSummaryBatch(int);
   void sendAuthoredPaper(int);
-  void sendPapersToReview(int);
+  void sendPaperSummariesToReview(int);
 
 private:
 void fetchPaper(int);

commit a3a7b1da1dbe29b214a7714d3359562cfac212c7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:39:09 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 0034d49..72c3f97 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -112,3 +112,8 @@ void ConferenceManager::sendConference()
 {
     //send *currentConference to the user
 }
+
+void ConferenceManager::sendConferenceBatch()
+{
+    //send getAllActiveConferences to the client
+}

commit a8d7c2fb7b80a783e1eff96c3ff08e3f0b340b32
Merge: f0f0ebf a7ee9e1
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:37:24 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit f0f0ebf8c2d9ece9c9e16fbcd9116720f6976847
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:37:17 2014 +1100

    fixed minor typos

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 25d155a..fc50f2c 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1119,7 +1119,7 @@ std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (c
 
         while (rs->next()) {
 		int reviewerID = rs->getInt(1);
-                vec.push_back(reviewersID);
+                vec.push_back(reviewerID);
         }
 
         delete rs;
@@ -1198,7 +1198,7 @@ std::vector<std::string> Database::getKeywordsForUser(int userID) throw (const c
 	sql::PreparedStatement *pstmt = NULL;
 	sql::ResultSet *rs = NULL;
 	
-	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt = dbcon->prepareStatement(getUserKeywords);
 	pstmt->setInt(1, userID);
 	rs = pstmt->executeQuery();
 
@@ -1227,7 +1227,7 @@ std::vector<int> Database::getReviewersForConf(int confID) throw (const char*)
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getReviewers);
-	pstmt->setInt(1, key);
+	pstmt->setInt(1, confID);
 	rs = pstmt->executeQuery();
 
         while (rs->next()) {
@@ -1250,7 +1250,7 @@ int Database::getReviewerPreference(int userID, int confID, int paperID) throw (
 	sql::PreparedStatement *pstmt = NULL;
 	sql::ResultSet *rs = NULL;
 	
-	pstmt = dbcon->prepareStatement(getPaper);
+	pstmt = dbcon->prepareStatement(getReviewerPreference);
 	pstmt->setInt(1, userID);
 	pstmt->setInt(2, confID);
 	pstmt->setInt(3, paperID);
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index aa0d561..0e1de2e 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -108,7 +108,7 @@ class Reviewer : public Author {
     void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
       for(unsigned int i = 0; i < reviews.size(); ++i)
       {
-        if(reviews[i].paper->paperID() == reviewToRemove) {
+        if(reviews[i].paperID == reviewToRemove) {
           reviews.erase(reviews.begin() + i);
           return;
         }

commit a7ee9e1c9c6e1cc1da1eaac7b4281eee53f05cc5
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:37:05 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 0929d1c..0034d49 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -108,4 +108,7 @@ void ConferenceManager::allocatePapers()
         PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
 }   
     
-
+void ConferenceManager::sendConference()
+{
+    //send *currentConference to the user
+}

commit f1bf3b650544b4935a6d522acff3ca2e5d171510
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:35:35 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 7c3d356..4c261b7 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -3,9 +3,25 @@ void PaperManager::fetchPaper(int paperID)
   *currentPaper = db->fetchPaper(paperID);
 }
 
-PaperManager::sendAuthoredPaper(int paperID)
+void PaperManager::sendAuthoredPaper(int paperID)
 {
  fetchPaper(paperID);
   //send Paper to client
 }
 
+void PaperManager::sendPapersToReview(int userID)
+{
+ std::vector<int> paperIDsToReview = db->fetchPapersFromUserID(userID); //or something like that
+ std::vector<Paper> papersToReview;
+ for(unsigned int i = 0; i < paperIDsToReview.size(); ++i)
+ {
+   fetchPaper; //curentPaper now points to it
+   papersToReview[i] = *currentPaper;
+ }
+  //send this vector to the client
+}
+
+void PaperManager::sendPaper()
+{
+ //send *currentPaper to the client
+}

commit 5aa7f72b3515a1d83bd247b6eb5757a25130d317
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:27:27 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index de2d60a..7c3d356 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -2,3 +2,10 @@ void PaperManager::fetchPaper(int paperID)
 {
   *currentPaper = db->fetchPaper(paperID);
 }
+
+PaperManager::sendAuthoredPaper(int paperID)
+{
+ fetchPaper(paperID);
+  //send Paper to client
+}
+

commit 212a205bc25694a1577326f0743bde90efd0d46b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:19:01 2014 +1100

    Update PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
index 759d7f4..de2d60a 100644
--- a/Server/PaperManager.cpp
+++ b/Server/PaperManager.cpp
@@ -1,4 +1,4 @@
-PaperManager::fetchPaper(int paperID)
+void PaperManager::fetchPaper(int paperID)
 {
   *currentPaper = db->fetchPaper(paperID);
 }

commit 7524b3f20b4fede6764dba7432f755edeeab25cc
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:16:56 2014 +1100

    Create PaperManager.cpp

diff --git a/Server/PaperManager.cpp b/Server/PaperManager.cpp
new file mode 100644
index 0000000..759d7f4
--- /dev/null
+++ b/Server/PaperManager.cpp
@@ -0,0 +1,4 @@
+PaperManager::fetchPaper(int paperID)
+{
+  *currentPaper = db->fetchPaper(paperID);
+}

commit 3b61e62b0f96855a024ca62b6e8e56d14dd87dcd
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:11:51 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index fc8438d..95df9ea 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -21,11 +21,11 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addPaper();
   void modifyPaper(int);
-  bool deleteDiscPost(int);
+  //bool deleteDiscPost(int);
   void modifyDiscPost(int);
-  bool deleteReview(int);
+  //bool deleteReview(int);
   void modifyReview(int);
-  bool deletePaper(int);
+  //bool deletePaper(int);
   void sendPaper();
   void sendPaperBatch(int);
   void sendAuthoredPaper(int);

commit 7da751a309a617be59eadefe85d9ade63d4b3102
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 21:11:39 2014 +1100

    paperID for conf

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 1efc470..73c2160 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -53,6 +53,8 @@ public:
 	std::vector<int> getReviewersForConf(int confID) throw (const char*);
 	int getReviewerPreference(int userID, int confID, int paperID) throw (const char*);
 	
+	std::vector<int> getPaperIDsForConf(int confID) throw (const char*);	
+	
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);
 //        // Put - insert/replace a record; returns false if failed

commit edd3dea19da21b5720a047a82e765a55ac7e3487
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 21:11:03 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 25fb6aa..25d155a 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1273,6 +1273,34 @@ int Database::getReviewerPreference(int userID, int confID, int paperID) throw (
 	return preference;
 }
 
+std::vector<int> Database::getPaperIDsForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperIDs = "SELECT paperID FROM Paper WHERE confID=?";
+
+        // =======================================
+        // Paper ID
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperIDs);
+	pstmt->setInt(1, confID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
 
 
 

commit fd3418b88f1a85f52f8cafa39e6bbdcc2346bc34
Merge: e85e020 23940c3
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:06:05 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit e85e020a1bf1e515c9437584fc828dfa47bd88dc
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:05:59 2014 +1100

    moved common data to DataAll and updated references

diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
deleted file mode 100644
index 9ee5459..0000000
--- a/AdminClient/Review.hpp
+++ /dev/null
@@ -1,51 +0,0 @@
-#ifndef REVIEW_H
-#define REVIEW_H
-#include <string>
-
-struct Review {
-  Review(int reviewerID,
-  int ioverall,
-  int iconfidence,
-  int irelevance,
-  int ioriginality,
-  int isignificance,
-  int ipresentation,
-  int itechQuality,
-  int ievalution,
-  const std::string& icommentsStrength,
-  const std::string& icommentsWeakness,
-  const std::string& icommentsSuggestions,
-  const std::string& icommentsShortPaper,
-  const std::string& icommentsBestAward):
-  reviewerID(ireviewerID),
-  overall(ioverall),
-  confidence(iconfidence),
-  relevance(irelevance),
-  originality(ioriginality),
-  significance(isignificance),
-  presentation(ipresentation),
-  techQuality(itechQuality),
-  evalution(ievalution),
-  commentsStrength(icommentsStrength),
-  commentsWeakness(icommentsWeakness),
-  commentsSuggestions(icommentsSuggestions),
-  commentsShortPaper(icommentsShortPaper),
-  commentsBestAward(icommentsBestAward)
-  { }
-  int reviewerID{0};
-  int overall{0};
-  int confidence{0};
-  int relevance{0};
-  int originality{0};
-  int significance{0};
-  int presentation{0};
-  int techQuality{0};
-  int evalution{0};
-  std::string commentsStrength{""};
-  std::string commentsWeakness{""};
-  std::string commentsSuggestions{""};
-  std::string commentsShortPaper{""};
-  std::string commentsBestAward{""};
-
-};
-#endif
diff --git a/Server/Review.hpp b/Server/Review.hpp
deleted file mode 100644
index f959fd2..0000000
--- a/Server/Review.hpp
+++ /dev/null
@@ -1,52 +0,0 @@
-#ifndef REVIEW_H
-#define REVIEW_H
-#include <string>
-
-struct Review {
-  Review(
-  int ireviewerID,
-  int ioverall,
-  int iconfidence,
-  int irelevance,
-  int ioriginality,
-  int isignificance,
-  int ipresentation,
-  int itechQuality,
-  int ievalution,
-  const std::string& icommentsStrength,
-  const std::string& icommentsWeakness,
-  const std::string& icommentsSuggestions,
-  const std::string& icommentsShortPaper,
-  const std::string& icommentsBestAward):
-  reviewerID(ireviewerID),
-  overall(ioverall),
-  confidence(iconfidence),
-  relevance(irelevance),
-  originality(ioriginality),
-  significance(isignificance),
-  presentation(ipresentation),
-  techQuality(itechQuality),
-  evalution(ievalution),
-  commentsStrength(icommentsStrength),
-  commentsWeakness(icommentsWeakness),
-  commentsSuggestions(icommentsSuggestions),
-  commentsShortPaper(icommentsShortPaper),
-  commentsBestAward(icommentsBestAward)
-  { }
-  int reviewerID{0};
-  int overall{0};
-  int confidence{0};
-  int relevance{0};
-  int originality{0};
-  int significance{0};
-  int presentation{0};
-  int techQuality{0};
-  int evalution{0};
-  std::string commentsStrength{""};
-  std::string commentsWeakness{""};
-  std::string commentsSuggestions{""};
-  std::string commentsShortPaper{""};
-  std::string commentsBestAward{""};
-
-};
-#endif
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
deleted file mode 100644
index e10e769..0000000
--- a/UserClient/Review.hpp
+++ /dev/null
@@ -1,56 +0,0 @@
-#ifndef REVIEW_H
-#define REVIEW_H
-
-struct Paper;
-
-struct Review {
-  Review() { }
-  Review(int ipaperID,
-    int ireviewerID,
-    int ioverall,
-    int iconfidence,
-    int irelevance,
-    int ioriginality,
-    int isignificance,
-    int ipresentation,
-    int itechQuality,
-    int ievalution,
-    const std::string& icommentsStrength,
-    const std::string& icommentsWeakness,
-    const std::string& icommentsSuggestions,
-    const std::string& icommentsShortPaper,
-    const std::string& icommentsBestAward):
-    paperID(ipaperID),
-    reviewerID(ireviewerID),
-    overall(ioverall),
-    confidence(iconfidence),
-    relevance(irelevance),
-    originality(ioriginality),
-    significance(isignificance),
-    presentation(ipresentation),
-    techQuality(itechQuality),
-    evalution(ievalution),
-    commentsStrength(icommentsStrength),
-    commentsWeakness(icommentsWeakness),
-    commentsSuggestions(icommentsSuggestions),
-    commentsShortPaper(icommentsShortPaper),
-    commentsBestAward(icommentsBestAward)
-    { }
-  int paperID{0};
-  int reviewerID{0};
-  int overall{0};
-  int confidence{0};
-  int relevance{0};
-  int originality{0};
-  int significance{0};
-  int presentation{0};
-  int techQuality{0};
-  int evalution{0};
-  std::string commentsStrength{""};
-  std::string commentsWeakness{""};
-  std::string commentsSuggestions{""};
-  std::string commentsShortPaper{""};
-  std::string commentsBestAward{""};
-
-};
-#endif

commit 23940c37815b9108ce0fcaebc798b77c539d130e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:05:27 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 20825a9..387ba42 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -25,9 +25,15 @@ public:
   void setCurrentConference(Conference* icurrentConference) {currentConference = icurrentConference;}
   Database* getDatabase() {return database;}
   void setDatabase(Database* idatabase) {database = idatabase;}
-  void addConference();
-  void modifyConference(int);
-  bool deleteConference(int);
+  void addConference() 
+  {
+    db->putConf(currentConference->title, currentConference);
+  }
+  void modifyConference(int)
+  {
+    addConference;
+  }
+  //bool deleteConference(int);
   void sendConference();
   void sendConferenceBatch();
   void checkAllDeadlines();

commit 4327ffd544ef75b0e3d720cd9b38e8ba43761d7a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:05:11 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 4fa3eaf..d98dc5c 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -24,7 +24,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addUser() 
   {
-    db->putUser(currentUser->name, *currentUser);
+    db->putUser(currentUser->name, currentUser);
   }
   void modifyUser()
   {

commit b6fbb6252d36a45aebc84d4a2e58902ad923233e
Merge: ada59b2 e45eba2
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:04:46 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit ada59b2327bccfea9a3870e32d68250680580ef9
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 21:04:39 2014 +1100

    moved common data to DataAll and updated references

diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
index 7bda436..d403fed 100644
--- a/DataAll/Paper.hpp
+++ b/DataAll/Paper.hpp
@@ -3,8 +3,8 @@
 #define PAPER_H
 
 #include "../DataAll/Discussion.hpp"
-#include "Review.hpp"
-#include "User.hpp"
+#include "../DataAll/Review.hpp"
+//#include "User.hpp"
 #include "../DataAll/PersonalInfo.hpp"
 
 #include <vector>
diff --git a/DataAll/PaperSummary.hpp b/DataAll/PaperSummary.hpp
index 69f2420..52f5f86 100644
--- a/DataAll/PaperSummary.hpp
+++ b/DataAll/PaperSummary.hpp
@@ -6,11 +6,11 @@
 struct PaperSummary {
 	PaperSummary() {}
 
-	PaperSummary(int ipaperId, const std::string& ipaperName) :
-	paperId(ipaperId), paperName(ipaperName)
+	PaperSummary(int ipaperID, const std::string& ipaperName) :
+	paperID(ipaperID), paperName(ipaperName)
 	{ }
 
-	int paperId{0};
+	int paperID{0};
 	std::string paperName{""};
 };
 #endif
diff --git a/DataAll/Review.hpp b/DataAll/Review.hpp
new file mode 100644
index 0000000..e10e769
--- /dev/null
+++ b/DataAll/Review.hpp
@@ -0,0 +1,56 @@
+#ifndef REVIEW_H
+#define REVIEW_H
+
+struct Paper;
+
+struct Review {
+  Review() { }
+  Review(int ipaperID,
+    int ireviewerID,
+    int ioverall,
+    int iconfidence,
+    int irelevance,
+    int ioriginality,
+    int isignificance,
+    int ipresentation,
+    int itechQuality,
+    int ievalution,
+    const std::string& icommentsStrength,
+    const std::string& icommentsWeakness,
+    const std::string& icommentsSuggestions,
+    const std::string& icommentsShortPaper,
+    const std::string& icommentsBestAward):
+    paperID(ipaperID),
+    reviewerID(ireviewerID),
+    overall(ioverall),
+    confidence(iconfidence),
+    relevance(irelevance),
+    originality(ioriginality),
+    significance(isignificance),
+    presentation(ipresentation),
+    techQuality(itechQuality),
+    evalution(ievalution),
+    commentsStrength(icommentsStrength),
+    commentsWeakness(icommentsWeakness),
+    commentsSuggestions(icommentsSuggestions),
+    commentsShortPaper(icommentsShortPaper),
+    commentsBestAward(icommentsBestAward)
+    { }
+  int paperID{0};
+  int reviewerID{0};
+  int overall{0};
+  int confidence{0};
+  int relevance{0};
+  int originality{0};
+  int significance{0};
+  int presentation{0};
+  int techQuality{0};
+  int evalution{0};
+  std::string commentsStrength{""};
+  std::string commentsWeakness{""};
+  std::string commentsSuggestions{""};
+  std::string commentsShortPaper{""};
+  std::string commentsBestAward{""};
+
+};
+#endif
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index e736da5..566c82b 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -8,7 +8,7 @@
 #include "../DataAll/DiscussionPost.hpp"
 #include "../DataAll/Paper.hpp"
 #include "PaperManager.hpp"
-#include "Review.hpp"
+#include "../DataAll/Review.hpp"
 #include "User.hpp"
 #include "UserManager.hpp"
 
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index 9bf8b8b..e10e769 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -1,13 +1,11 @@
 #ifndef REVIEW_H
 #define REVIEW_H
 
-//#include "../DataAll/Paper.hpp"
-
-class Paper;
+struct Paper;
 
 struct Review {
   Review() { }
-  Review(Paper* ipaper,
+  Review(int ipaperID,
     int ireviewerID,
     int ioverall,
     int iconfidence,
@@ -22,7 +20,7 @@ struct Review {
     const std::string& icommentsSuggestions,
     const std::string& icommentsShortPaper,
     const std::string& icommentsBestAward):
-    paper(ipaper),
+    paperID(ipaperID),
     reviewerID(ireviewerID),
     overall(ioverall),
     confidence(iconfidence),
@@ -38,7 +36,7 @@ struct Review {
     commentsShortPaper(icommentsShortPaper),
     commentsBestAward(icommentsBestAward)
     { }
-  Paper* paper{nullptr};
+  int paperID{0};
   int reviewerID{0};
   int overall{0};
   int confidence{0};
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index d490f63..aa0d561 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -3,7 +3,7 @@
 
 #include "Author.hpp"
 #include "../DataAll/PaperSummary.hpp"
-#include "Review.hpp"
+#include "../DataAll/Review.hpp"
 
 class Reviewer : public Author {
   public:
@@ -108,7 +108,7 @@ class Reviewer : public Author {
     void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
       for(unsigned int i = 0; i < reviews.size(); ++i)
       {
-        if(reviews[i].paper->getPaperID() == reviewToRemove) {
+        if(reviews[i].paper->paperID() == reviewToRemove) {
           reviews.erase(reviews.begin() + i);
           return;
         }
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index de3fe2e..4d7e99f 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -5,8 +5,6 @@
 
 #include <string>
 
-//class Paper;
-
 enum UserType_t {AUTHOR, REVIEWER, PCCHAIR};
 
 class User {

commit e45eba20b1619eea631b91e97362dcffb838070f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 21:01:19 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index ab85247..4fa3eaf 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -24,7 +24,7 @@ public:
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addUser() 
   {
-    putUser(currentUser->name, *currentUser);
+    db->putUser(currentUser->name, *currentUser);
   }
   void modifyUser()
   {

commit ed7d88d7d089c2358da20f592a69f69674ec9648
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 20:59:58 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 086b599..0929d1c 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -95,9 +95,9 @@ std:vector<Conference> ConferenceManager::getAllConferences()
     return conferences;
 }
 
-void ConferenceManager::fetchConference(int confId)
+void ConferenceManager::fetchConference(int confID)
 {
-    *currentConference = db->fetchConference(confId);
+    *currentConference = db->fetchConference(confID);
 }
 
 
@@ -105,7 +105,7 @@ void ConferenceManager::allocatePapers()
 {
         //for each paper!!!!
         //NEED LOOP HERE
-        //PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
+        PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
 }   
     
 

commit 57f43dd320a0da2ea88c2d79e1932bf65efcc1d2
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 20:54:58 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index 3ac7b89..214ebfc 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -180,4 +180,14 @@ CREATE TABLE `ReviewerDiscussion` (
 	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+CREATE TABLE `ReviewerPreference`(
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	`preference` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
 SET foreign_key_checks = 1;

commit 6220d56fca918cc3dee91b201f20e315706da657
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 20:54:36 2014 +1100

    rest of Algos

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 9fd78a9..25fb6aa 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1041,7 +1041,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 //	return conf;
 }
 
-std::vector<int> Database::getAuthorsForPaper(int key) throw (const char*)
+std::vector<int> Database::getAuthorsForPaper(int paperID) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -1055,7 +1055,7 @@ std::vector<int> Database::getAuthorsForPaper(int key) throw (const char*)
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getAuthors);
-	pstmt->setInt(1, key);
+	pstmt->setInt(1, paperID);
 
 	rs = pstmt->executeQuery();
 
@@ -1070,7 +1070,7 @@ std::vector<int> Database::getAuthorsForPaper(int key) throw (const char*)
 	return vec;
 }
 
-std::vector<std::string> Database::getOrganisationForAuthor(int key) throw (const char*)
+std::vector<std::string> Database::getOrganisationForAuthor(int infoID) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -1084,7 +1084,7 @@ std::vector<std::string> Database::getOrganisationForAuthor(int key) throw (cons
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getOrg);
-	pstmt->setInt(1, key);
+	pstmt->setInt(1, infoID);
 
 	rs = pstmt->executeQuery();
 
@@ -1099,27 +1099,27 @@ std::vector<std::string> Database::getOrganisationForAuthor(int key) throw (cons
 	return vec;
 }
 
-std::vector<int> Database::getAuthorsForOrganisation(std::string org) throw (const char*)
+std::vector<int> Database::getReviewersForOrganisation(std::string org) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
 
-	const char* getAuthors = "SELECT infoID FROM PersonalInfo WHERE organisation=?";
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and userID IN (SELECT userID FROM PersonalInfo WHERE (userID IS NOT NULL and organisation=?))";
 
         // =======================================
-        // Authors
+        // Reviewers
 	std::vector<int> vec;
 	sql::PreparedStatement *pstmt = NULL;
 	sql::ResultSet *rs = NULL;
 	
-	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt = dbcon->prepareStatement(getReviewers);
 	pstmt->setString(1, org);
 
 	rs = pstmt->executeQuery();
 
         while (rs->next()) {
-		int authorID = rs->getInt(1);
-                vec.push_back(authorID);
+		int reviewerID = rs->getInt(1);
+                vec.push_back(reviewersID);
         }
 
         delete rs;
@@ -1128,6 +1128,152 @@ std::vector<int> Database::getAuthorsForOrganisation(std::string org) throw (con
 	return vec;
 }
 
+std::vector<int> Database::getPapersForAuthor(int authorID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPapers = "SELECT paperID FROM paperAuthors WHERE authorID=?";
+
+        // =======================================
+        // Papers
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPapers);
+	pstmt->setInt(1, authorID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int paperID = rs->getInt(1);
+                vec.push_back(paperID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<std::string> Database::getKeywordsForPaper(int paperID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
+
+        // =======================================
+        // Paper Keywords
+        std::vector<std::string> keywords;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, paperID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return keywords;
+}
+
+std::vector<std::string> Database::getKeywordsForUser(int userID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getUserKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
+
+        // =======================================
+        // Expertise Keywords
+        std::vector<std::string> keywords;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return keywords;
+}
+
+std::vector<int> Database::getReviewersForConf(int confID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getReviewers = "SELECT userID FROM UserType WHERE (userType='pc' and confID=?)";
+
+        // =======================================
+        // Reviewers
+        std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getReviewers);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                int userID = rs->getInt(1);
+                vec.push_back(userID);
+        }
+
+        delete rs;
+        delete pstmt;
+
+	return vec;
+}
+
+int Database::getReviewerPreference(int userID, int confID, int paperID) throw (const char*)
+{
+	const char* getReviewerPreference = "SELECT preference FROM ReviewerPreference WHERE (userID=? and confID=? and paperID=?)";
+
+        // =======================================
+        // Reviewer Preference
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaper);
+	pstmt->setInt(1, userID);
+	pstmt->setInt(2, confID);
+	pstmt->setInt(3, paperID);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return -1;
+	}
+
+    	int preference = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+	
+	return preference;
+}
+
+
 
 
 //

commit f2235193a4a64b3da5898b5265240891a4de7b20
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 20:53:12 2014 +1100

    rest of Algos

diff --git a/Database/Database.hpp b/Database/Database.hpp
index ce37988..1efc470 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -44,8 +44,14 @@ public:
         Paper fetchPaper(int key) throw (const char*);
 
 	// ALGO
-	std::vector<int> getAuthorsForPaper(int key) throw (const char*);
-	std::vector<std::string> getOrganisationForAuthor(int key) throw (const char*);
+	std::vector<int> getAuthorsForPaper(int paperID) throw (const char*);
+	std::vector<std::string> getOrganisationForAuthor(int infoID) throw (const char*);
+	std::vector<int> getReviewersForOrganisation(std::string org) throw (const char*);
+	std::vector<int> getPapersForAuthor(int authorID) throw (const char*);
+	std::vector<std::string> getKeywordsForPaper(int paperID) throw (const char*);
+	std::vector<std::string> getKeywordsForUser(int userID) throw (const char*);
+	std::vector<int> getReviewersForConf(int confID) throw (const char*);
+	int getReviewerPreference(int userID, int confID, int paperID) throw (const char*);
 	
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);

commit 01170e447f72f903b9142c50830af48cb879d56e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 20:43:46 2014 +1100

    added database connectivity

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 90f7987..ab85247 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -22,9 +22,16 @@ public:
   void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
   Database* getDatabase() {return database;}
   void setDatabase(Database* idatabase) {database = idatabase;}
-  void addUser();
-  void modifyUser();
-  bool deleteUser(int);
+  void addUser() 
+  {
+    putUser(currentUser->name, *currentUser);
+  }
+  void modifyUser()
+  {
+    addUser(); 
+  }
+  
+  //bool deleteUser(int);
   void sendUser();
   void sendUserBatch();
   void fetchUser(std::string);

commit 6ee09fb4be6574158512eb89564dfdc8276c06bd
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 20:42:02 2014 +1100

    moved common data to DataAll and updated references

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
deleted file mode 100644
index 234ee21..0000000
--- a/AdminClient/Paper.hpp
+++ /dev/null
@@ -1,50 +0,0 @@
-//incomplete
-#ifndef PAPER_H
-#define PAPER_H
-
-#include "../DataAll/Discussion.hpp"
-#include "Review.hpp"
-#include "User.hpp"
-
-#include <vector>
-
-struct Paper {
-
-    std::string title{""};
-    std::string abstract{""};
-    std::vector<User> authors;
-    std::vector<std::string> keywords;
-    std::string confKeyword{""};
-    std::vector<Review> reviews;
-    Discussion discussion;
-    int paperID{0};
-    int confID{0};
-    int leadAuthorID{0};
-
-    Paper() { }
-    Paper(const std::string& ititle,
-      const std::string& iabstract,
-      const std::vector<User>& iauthors,
-      const std::vector<std::string>& ikeywords,
-      const std::string& iconfKeyword,
-      const std::vector<Review>& ireviews,
-      const Discussion& idiscussion,
-      int ipaperID,
-      int iconfID,
-      int ileadAuthorID)
-      :
-      title(ititle),
-      abstract(iabstract),
-      authors(iauthors),
-      keywords(ikeywords),
-      confKeyword(iconfKeyword),
-      reviews(ireviews),
-      discussion(idiscussion),
-      paperID(ipaperID),
-      confID(iconfID),
-      leadAuthorID(ileadAuthorID)
-      { }
-    
-    // no assignment operator or copy constructor deemed necessary at this point
-};
-#endif
diff --git a/Server/Paper.hpp b/Server/Paper.hpp
deleted file mode 100644
index 7bda436..0000000
--- a/Server/Paper.hpp
+++ /dev/null
@@ -1,50 +0,0 @@
-//incomplete
-#ifndef PAPER_H
-#define PAPER_H
-
-#include "../DataAll/Discussion.hpp"
-#include "Review.hpp"
-#include "User.hpp"
-#include "../DataAll/PersonalInfo.hpp"
-
-#include <vector>
-
-struct Paper {
-
-    Paper() { }
-    Paper(const int ipaperID,
-      const int iconfID,
-      const int ileadAuthorID,
-      const std::string& ititle,
-      const std::string& iabstract,
-      const std::vector<PersonalInfo>& iauthors,
-      const std::vector<std::string>& ikeywords,
-      const std::string& iconfKeyword,
-      const std::vector<Review>& ireviews,
-      const Discussion& idiscussion)
-      :
-      paperID(ipaperID),
-      confID(iconfID),
-      leadAuthorID(ileadAuthorID),
-      title(ititle),
-      abstract(iabstract),
-      authors(iauthors),
-      keywords(ikeywords),
-      confKeyword(iconfKeyword),
-      reviews(ireviews),
-      discussion(idiscussion)
-      { }
-    // no assignment operator or copy constructor deemed necessary at this point
-    int paperID{0};
-    int confID{0};
-    int leadAuthorID{0};
-    std::string title{""};
-    std::string abstract{""};
-    std::vector<PersonalInfo> authors;
-    std::vector<std::string> keywords;
-    std::string confKeyword;
-
-    Discussion discussion;
-    std::vector<Review> reviews;
-};
-#endif
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
deleted file mode 100644
index 7bf2a98..0000000
--- a/UserClient/Paper.hpp
+++ /dev/null
@@ -1,73 +0,0 @@
-#ifndef PAPER_H
-#define PAPER_H
-
-#include "../DataAll/Discussion.hpp"
-#include "Review.hpp"
-
-#include <vector>
-
-class User;
-//class Review;
-
-struct Paper {
-  public:
-    Paper() { }
-    Paper(const std::string& ititle,
-      const std::string& iabstract,
-      const std::vector<User>& iauthors,
-      const std::vector<std::string>& ikeywords,
-      const std::string& iconfKeyword,
-      const std::vector<Review>& ireviews,
-      const Discussion& idiscussion,
-      int ipaperID,
-      int iconfID,
-      int ileadAuthorID)
-      :
-      title(ititle),
-      abstract(iabstract),
-      authors(iauthors),
-      keywords(ikeywords),
-      confKeyword(iconfKeyword),
-      reviews(ireviews),
-      discussion(idiscussion),
-      paperID(ipaperID),
-      confID(iconfID),
-      leadAuthorID(ileadAuthorID)
-      { } 
-
-// assignment operator or copy constructor deemed not needed at this time
-
-    std::string getTitle() {return title;}
-    std::string getAbstract() {return abstract;}
-    std::vector<User> getAuthors() {return authors;}
-    std::vector<std::string> getKeywords() {return keywords;}
-    std::string getConfKeyword() {return confKeyword;}
-    std::vector<Review> getReviews() {return reviews;}
-    Discussion getDiscussion() {return discussion;}
-    int getPaperID() {return paperID;}
-    int getConfID() {return confID;}
-    int getLeadAuthorID() {return leadAuthorID;}
-    
-    void setTitle(const std::string& ititle) {title = ititle;}
-    void setAbstract(const std::string& iabstract) {abstract = iabstract;}
-    void setAuthors(const std::vector<User>& iauthors) {authors = iauthors;}
-    void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
-    void setConfKeyWord(const std::string& iconfKeyword) {confKeyword = iconfKeyword;}
-    void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
-    void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
-    void setPaperID(int ipaperID) {paperID = ipaperID;}
-    void setConfID(int iconfID) {confID = iconfID;}
-    void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
-
-    std::string title{""};
-    std::string abstract{""};
-    std::vector<User> authors;
-    std::vector<std::string> keywords;
-    std::string confKeyword{""};
-    std::vector<Review> reviews;
-    Discussion discussion;
-    int paperID{0};
-    int confID{0};
-    int leadAuthorID{0};
-};
-#endif

commit 3e4ff9b90a63d2d2431109d5d7e96c1cabce14f8
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 20:40:04 2014 +1100

    moved common data to DataAll and updated references

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 2848a17..1988ac1 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -1,6 +1,6 @@
 #ifndef PAPER_MANAGER_H
 #define PAPER_MANAGER_H
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 
 class PaperManager {
 public:
diff --git a/DataAll/Paper.hpp b/DataAll/Paper.hpp
new file mode 100644
index 0000000..7bda436
--- /dev/null
+++ b/DataAll/Paper.hpp
@@ -0,0 +1,50 @@
+//incomplete
+#ifndef PAPER_H
+#define PAPER_H
+
+#include "../DataAll/Discussion.hpp"
+#include "Review.hpp"
+#include "User.hpp"
+#include "../DataAll/PersonalInfo.hpp"
+
+#include <vector>
+
+struct Paper {
+
+    Paper() { }
+    Paper(const int ipaperID,
+      const int iconfID,
+      const int ileadAuthorID,
+      const std::string& ititle,
+      const std::string& iabstract,
+      const std::vector<PersonalInfo>& iauthors,
+      const std::vector<std::string>& ikeywords,
+      const std::string& iconfKeyword,
+      const std::vector<Review>& ireviews,
+      const Discussion& idiscussion)
+      :
+      paperID(ipaperID),
+      confID(iconfID),
+      leadAuthorID(ileadAuthorID),
+      title(ititle),
+      abstract(iabstract),
+      authors(iauthors),
+      keywords(ikeywords),
+      confKeyword(iconfKeyword),
+      reviews(ireviews),
+      discussion(idiscussion)
+      { }
+    // no assignment operator or copy constructor deemed necessary at this point
+    int paperID{0};
+    int confID{0};
+    int leadAuthorID{0};
+    std::string title{""};
+    std::string abstract{""};
+    std::vector<PersonalInfo> authors;
+    std::vector<std::string> keywords;
+    std::string confKeyword;
+
+    Discussion discussion;
+    std::vector<Review> reviews;
+};
+#endif
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 3baf48a..ce37988 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -7,7 +7,7 @@
 #include "../DataAll/Conference.hpp"
 #include "../DataAll/Date.hpp"
 #include "../DataAll/PersonalInfo.hpp"
-#include "../Server/Paper.hpp"
+#include "../DataAll/Paper.hpp"
 #include "../DataAll/PaperSummary.hpp"
 
 class Database {
diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 19f0677..fc8438d 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -1,7 +1,7 @@
 #ifndef PAPER_MANAGER_H
 #define PAPER_MANAGER_H
 
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 #include "../Database/Database.hpp"
 
 class PaperManager {
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index 25655f7..e736da5 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -6,7 +6,7 @@
 #include "../DataAll/Date.hpp"
 #include "../DataAll/Discussion.hpp"
 #include "../DataAll/DiscussionPost.hpp"
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 #include "PaperManager.hpp"
 #include "Review.hpp"
 #include "User.hpp"
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index ec1022a..7d715dd 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -1,7 +1,7 @@
 #ifndef AUTHOR_H
 #define AUTHOR_H
 
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 #include "../DataAll/PaperSummary.hpp"
 #include "User.hpp"
 
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 78707ac..0756f06 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -1,7 +1,7 @@
 #ifndef P_C_CHAIR_H
 #define P_C_CHAIR_H
 
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 #include "../DataAll/PaperSummary.hpp"
 #include "User.hpp"
 #include "../DataAll/Conference.hpp" // for activeConference memeber variable
diff --git a/UserClient/PaperManager.hpp b/UserClient/PaperManager.hpp
index 417d4c0..5429d4e 100644
--- a/UserClient/PaperManager.hpp
+++ b/UserClient/PaperManager.hpp
@@ -1,6 +1,6 @@
 #ifndef PAPER_MANAGER_H
 #define PAPER_MANAGER_H
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 
 class PaperManager {
 public:
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index ce0f0bd..9bf8b8b 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -1,7 +1,7 @@
 #ifndef REVIEW_H
 #define REVIEW_H
 
-//#include "Paper.hpp"
+//#include "../DataAll/Paper.hpp"
 
 class Paper;
 
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index 81ca179..de3fe2e 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -1,7 +1,7 @@
 #ifndef USER_H
 #define USER_H
 
-#include "Paper.hpp"
+#include "../DataAll/Paper.hpp"
 
 #include <string>
 

commit ecfd940d65878ce053124a1d14a16c1aff93f0ab
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 20:29:40 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 1bd975c..7bf2a98 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -9,7 +9,7 @@
 class User;
 //class Review;
 
-class Paper {
+struct Paper {
   public:
     Paper() { }
     Paper(const std::string& ititle,
@@ -59,7 +59,6 @@ class Paper {
     void setConfID(int iconfID) {confID = iconfID;}
     void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
 
-  private:
     std::string title{""};
     std::string abstract{""};
     std::vector<User> authors;

commit 9c95ff5b6ddeb1cc05770775b690f6650292e55f
Merge: 47dcbef b091f25
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:59:12 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 47dcbefeac647c1bc60ddfa44ed2b40903fb0f94
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:59:04 2014 +1100

    fixed minor errors

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index bd251c5..086b599 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -20,11 +20,11 @@ void ConferenceManager::checkDeadlines(Conference* in)
         return;
     }
     
-    const bool oldisBeforePaperDeadline = isBeforePaperDeadline;
-    const bool oldisBeforeAllocationDate = isBeforeAllocationDate;
-    const bool oldisBeforeSoftReviewDeadline = isBeforeSoftReviewDeadline;
-    const bool oldisBeforeHardReviewDeadline = isBeforeHardReviewDeadline;
-    const bool oldisBeforeDiscussDeadline = isBeforeDiscussDeadline;
+    const bool oldisBeforePaperDeadline = in->isBeforePaperDeadline;
+    const bool oldisBeforeAllocationDate = in->isBeforeAllocationDate;
+    const bool oldisBeforeSoftReviewDeadline = in->isBeforeSoftReviewDeadline;
+    const bool oldisBeforeHardReviewDeadline = in->isBeforeHardReviewDeadline;
+    const bool oldisBeforeDiscussDeadline = in->isBeforeDiscussDeadline;
     
     time_t t = time(0);   // get time now
     struct tm * now = localtime( & t );
@@ -39,7 +39,7 @@ void ConferenceManager::checkDeadlines(Conference* in)
     //for deadlines, you can still submit papers on the day of the paper deadline
     //for dates, it occurs on the day, so if it is the day of the allocation date or after, allocation is done
     //this means that it occurs one day earlier, this is why we use yesterday
-    if(!isBeforeAllocationDate) {
+    if(!in->isBeforeAllocationDate) {
         //run allocation
         //algo is responsible for updating the database with the reviwere paper allocations
     }
@@ -47,11 +47,11 @@ void ConferenceManager::checkDeadlines(Conference* in)
     in->isBeforeHardReviewDeadline = in->reviewDeadlineHard.compare(today);
     in->isBeforeDiscussDeadline = in->discussDeadline.compare(today);
     
-    if(!(oldisBeforePaperDeadline == isBeforePaperDeadline && //ie something changed
-    oldisBeforeAllocationDate == isBeforeAllocationDate &&
-    oldisBeforeSoftReviewDeadline == isBeforeSoftReviewDeadline &&
-    oldisBeforeHardReviewDeadline == isBeforeHardReviewDeadline &&
-    oldisBeforeDiscussDeadline == isBeforeDiscussDeadline))
+    if(!(oldisBeforePaperDeadline == in->isBeforePaperDeadline && //ie something changed
+    oldisBeforeAllocationDate == in->isBeforeAllocationDate &&
+    oldisBeforeSoftReviewDeadline == in->isBeforeSoftReviewDeadline &&
+    oldisBeforeHardReviewDeadline == in->isBeforeHardReviewDeadline &&
+    oldisBeforeDiscussDeadline == in->isBeforeDiscussDeadline))
     {
         updateConference(*in); // update conference in database if something changed
     }
@@ -81,7 +81,7 @@ std:vector<Conferences> ConferenceManager::getAllActiveConferences()
     return conferences;
 }
 
-std:vector<Conferences> ConferenceManager::getAllConferences()
+std:vector<Conference> ConferenceManager::getAllConferences()
 {
     std::vector<int> allConfs = db->allConfIDs();
     
@@ -105,7 +105,7 @@ void ConferenceManager::allocatePapers()
 {
         //for each paper!!!!
         //NEED LOOP HERE
-        PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
+        //PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
 }   
     
 
diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 37a54f9..20825a9 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -32,8 +32,8 @@ public:
   void sendConferenceBatch();
   void checkAllDeadlines();
   void allocatePapers();
-  std::vector<Conferences> getAllActiveConferences();
-  std::vector<Conferences> getAllConferences();
+  std::vector<Conference> getAllActiveConferences();
+  std::vector<Conference> getAllConferences();
 
 
 

commit b091f255756b84b6cc720e8d43c35d6b294a8abf
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 19:57:30 2014 +1100

    Create PaperManager.hpp

diff --git a/UserClient/PaperManager.hpp b/UserClient/PaperManager.hpp
new file mode 100644
index 0000000..417d4c0
--- /dev/null
+++ b/UserClient/PaperManager.hpp
@@ -0,0 +1,65 @@
+#ifndef PAPER_MANAGER_H
+#define PAPER_MANAGER_H
+#include "Paper.hpp"
+
+class PaperManager {
+public:
+  PaperManager() { }
+  PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
+  ~PaperManager() { if(currentPaper != nullptr)
+                     delete currentPaper;}
+  Paper* getCurrentPaper() {return currentPaper;}
+  void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+
+  void downloadPaper();
+void addToKeywords(const std::string& in) {
+      currentPaper->keywords.push_back(in);
+    }
+    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < currentPaper->keywords.size(); ++i)
+      {
+        if(currentPaper->keywords[i] == keywordToRemove) {
+          currentPaper->keywords.erase(currentPaper->keywords.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToAuthors(const User& in) {
+      currentPaper->authors.push_back(in);
+    }
+    void removeAuthor(int userToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < currentPaper->authors.size(); ++i)
+      {
+        if(currentPaper->authors[i].userID == userToRemove) {
+          currentPaper->authors.erase(currentPaper->authors.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToReviews(const Review& in) {
+      currentPaper->reviews.push_back(in);
+    }
+    void removeReview(int reviewToRemove) { //remove by reviewer ID
+      for(unsigned int i = 0; i < currentPaper->reviews.size(); ++i)
+      {
+        if(currentPaper->reviews[i].reviewerID == reviewToRemove) {
+          currentPaper->reviews.erase(currentPaper->reviews.begin() + i);
+          return;
+        }
+      }
+    }
+
+private:
+/*  void viewDiscussion();
+  void addDiscPost();
+  void removeDiscPost();
+  void editDiscPost();
+  void addReview();
+  void listReviews();
+  void editReview();
+  void removeReview(); */
+
+  Paper* currentPaper{nullptr};
+
+};
+#endif

commit 6bd5a6eedfa1ae3649936c711335d52d55c93615
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 19:57:04 2014 +1100

    moved methods to paper manager

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 09ab8c5..1bd975c 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -58,43 +58,7 @@ class Paper {
     void setPaperID(int ipaperID) {paperID = ipaperID;}
     void setConfID(int iconfID) {confID = iconfID;}
     void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
-    void downloadPaper();
-    void addToKeywords(const std::string& in) {
-      keywords.push_back(in);
-    }
-    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < keywords.size(); ++i)
-      {
-        if(keywords[i] == keywordToRemove) {
-          keywords.erase(keywords.begin() + i);
-          return;
-        }
-      }
-    }
-    void addToAuthors(const User& in) {
-      authors.push_back(in);
-    }
-    void removeAuthor(int userToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < authors.size(); ++i)
-      {
-        if(authors[i].getUserID() == userToRemove) {
-          authors.erase(authors.begin() + i);
-          return;
-        }
-      }
-    }
-    void addToReviews(const Review& in) {
-      reviews.push_back(in);
-    }
-    void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
-      for(unsigned int i = 0; i < reviews.size(); ++i)
-      {
-        if(reviews[i].paper->paperID == reviewToRemove) {
-          reviews.erase(reviews.begin() + i);
-          return;
-        }
-      }
-    } 
+
   private:
     std::string title{""};
     std::string abstract{""};

commit 1fe0c063dd801c8fecafac5a06d573c61bc14c13
Merge: 54a27ed c2d3f85
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:51:49 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 54a27ed24bc44e4037f8b0493037dbea7b759cb2
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:51:42 2014 +1100

    fixed typos

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index e702e75..37a54f9 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -32,8 +32,8 @@ public:
   void sendConferenceBatch();
   void checkAllDeadlines();
   void allocatePapers();
-  std:vector<Conferences> getAllActiveConferences();
-  std:vector<Conferences> getAllConferences();
+  std::vector<Conferences> getAllActiveConferences();
+  std::vector<Conferences> getAllConferences();
 
 
 
diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 77dc0c3..19f0677 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -1,8 +1,8 @@
 #ifndef PAPER_MANAGER_H
 #define PAPER_MANAGER_H
 
-#include "../Database/Database.hpp"
 #include "Paper.hpp"
+#include "../Database/Database.hpp"
 
 class PaperManager {
 public:
diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index e724a61..90f7987 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -1,8 +1,8 @@
 #ifndef USER_MANAGER_H
 #define USER_MANAGER_H
 
-#include "../Database/Database.hpp"
 #include "User.hpp"
+#include "../Database/Database.hpp"
 
 #include <string>
 #include <vector>

commit c2d3f85f8b9728d37fa0e0e673f8500b017fe2e9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 19:50:48 2014 +1100

    moved functions from paper to paper manager

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index a684d29..234ee21 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -45,42 +45,6 @@ struct Paper {
       leadAuthorID(ileadAuthorID)
       { }
     
-    void addToKeywords(const std::string& in) {
-      keywords.push_back(in);
-    }
-    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < keywords.size(); ++i)
-      {
-        if(keywords[i] == keywordToRemove) {
-          keywords.erase(keywords.begin() + i);
-          return;
-        }
-      }
-    }
-    void addToAuthors(const User& in) {
-      authors.push_back(in);
-    }
-    void removeAuthor(int userToRemove) { //remove by paperID
-      for(unsigned int i = 0; i < authors.size(); ++i)
-      {
-        if(authors[i].userID == userToRemove) {
-          authors.erase(authors.begin() + i);
-          return;
-        }
-      }
-    }
-    void addToReviews(const Review& in) {
-      reviews.push_back(in);
-    }
-    void removeReview(int reviewToRemove) { //remove by reviewer ID
-      for(unsigned int i = 0; i < reviews.size(); ++i)
-      {
-        if(reviews[i].reviewerID == reviewToRemove) {
-          reviews.erase(reviews.begin() + i);
-          return;
-        }
-      }
-    }
     // no assignment operator or copy constructor deemed necessary at this point
 };
 #endif

commit def84ecf9005ee309f104956f63bee0e5b0b47ef
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 19:49:56 2014 +1100

    moved functions from paper to paper manager

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 62873ce..2848a17 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -17,6 +17,42 @@ public:
   void viewPaper();
   void editPaper();
   void downloadPaper();
+  void addToKeywords(const std::string& in) {
+      currentPaper->keywords.push_back(in);
+    }
+    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < currentPaper->keywords.size(); ++i)
+      {
+        if(currentPaper->keywords[i] == keywordToRemove) {
+          currentPaper->keywords.erase(currentPaper->keywords.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToAuthors(const User& in) {
+      currentPaper->authors.push_back(in);
+    }
+    void removeAuthor(int userToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < currentPaper->authors.size(); ++i)
+      {
+        if(currentPaper->authors[i].userID == userToRemove) {
+          currentPaper->authors.erase(currentPaper->authors.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToReviews(const Review& in) {
+      currentPaper->reviews.push_back(in);
+    }
+    void removeReview(int reviewToRemove) { //remove by reviewer ID
+      for(unsigned int i = 0; i < currentPaper->reviews.size(); ++i)
+      {
+        if(currentPaper->reviews[i].reviewerID == reviewToRemove) {
+          currentPaper->reviews.erase(currentPaper->reviews.begin() + i);
+          return;
+        }
+      }
+    }
 
 private:
   void viewDiscussion();

commit 24018bca08c4ce769fd953ab7aed869312959dc7
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 19:49:25 2014 +1100

    initial Algo querys

diff --git a/Database/Database.hpp b/Database/Database.hpp
index c977862..3baf48a 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -43,6 +43,10 @@ public:
         std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
         Paper fetchPaper(int key) throw (const char*);
 
+	// ALGO
+	std::vector<int> getAuthorsForPaper(int key) throw (const char*);
+	std::vector<std::string> getOrganisationForAuthor(int key) throw (const char*);
+	
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);
 //        // Put - insert/replace a record; returns false if failed

commit 4b81c3b1a945464dbb8c81641b0498f6e8ef1321
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 19:48:44 2014 +1100

    initial Algo querys

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 68a346d..9fd78a9 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1041,6 +1041,94 @@ Paper Database::fetchPaper(int key) throw (const char*)
 //	return conf;
 }
 
+std::vector<int> Database::getAuthorsForPaper(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAuthors = "SELECT authorID FROM paperAuthors WHERE paperID=?";
+
+        // =======================================
+        // Authors
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int authorID = rs->getInt(1);
+                vec.push_back(authorID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<std::string> Database::getOrganisationForAuthor(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getOrg = "SELECT organisation FROM PersonalInfo WHERE infoID=?";
+
+        // =======================================
+        // Org
+	std::vector<std::string> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getOrg);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		std::string org = rs->getString(1);
+                vec.push_back(org);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+std::vector<int> Database::getAuthorsForOrganisation(std::string org) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getAuthors = "SELECT infoID FROM PersonalInfo WHERE organisation=?";
+
+        // =======================================
+        // Authors
+	std::vector<int> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setString(1, org);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int authorID = rs->getInt(1);
+                vec.push_back(authorID);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
+
 
 //
 //std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)

commit b8f2645d0305374479f887a2c4de18337862c2ce
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:46:24 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 896dfb8..bd251c5 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -104,8 +104,8 @@ void ConferenceManager::fetchConference(int confId)
 void ConferenceManager::allocatePapers()
 {
         //for each paper!!!!
-        
-        PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper);
+        //NEED LOOP HERE
+        PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper, getDatabase());
 }   
     
 

commit b3804b6460ae334fc125333eb266e9f087067fbc
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:42:54 2014 +1100

    moved common data to DataAll and updated references

diff --git a/AdminClient/mainwindow.cpp b/AdminClient/mainwindow.cpp
index 6e74aad..94419a5 100644
--- a/AdminClient/mainwindow.cpp
+++ b/AdminClient/mainwindow.cpp
@@ -15,7 +15,8 @@ MainWindow::~MainWindow()
 
 void MainWindow::on_addConf_clicked()
 {
-    ui->confTable->insertRow(ui->confTable->rowCount());
+//    error: ‘class Ui::MainWindow’ has no member named ‘confTable’    
+//    ui->confTable->insertRow(ui->confTable->rowCount());
 }
 
 void MainWindow::on_rmvConf_clicked()
diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index a71b8d7..50f82e1 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -1,7 +1,7 @@
 #ifndef DISCUSSION_H
 #define DISCUSSION_H
 
-#include "../Server/DiscussionPost.hpp"
+#include "../DataAll/DiscussionPost.hpp"
 
 #include <list>
 
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index dd782b5..25655f7 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -5,7 +5,7 @@
 #include "ConferenceManager.hpp"
 #include "../DataAll/Date.hpp"
 #include "../DataAll/Discussion.hpp"
-#include "DiscussionPost.hpp"
+#include "../DataAll/DiscussionPost.hpp"
 #include "Paper.hpp"
 #include "PaperManager.hpp"
 #include "Review.hpp"
diff --git a/UserClient/ui_mainwindow.h b/UserClient/ui_mainwindow.h
deleted file mode 100644
index c2f58f6..0000000
--- a/UserClient/ui_mainwindow.h
+++ /dev/null
@@ -1,1682 +0,0 @@
-/********************************************************************************
-** Form generated from reading UI file 'mainwindow.ui'
-**
-** Created by: Qt User Interface Compiler version 5.2.1
-**
-** WARNING! All changes made in this file will be lost when recompiling UI file!
-********************************************************************************/
-
-#ifndef UI_MAINWINDOW_H
-#define UI_MAINWINDOW_H
-
-#include <QtCore/QVariant>
-#include <QtWidgets/QAction>
-#include <QtWidgets/QApplication>
-#include <QtWidgets/QButtonGroup>
-#include <QtWidgets/QComboBox>
-#include <QtWidgets/QFormLayout>
-#include <QtWidgets/QGridLayout>
-#include <QtWidgets/QHBoxLayout>
-#include <QtWidgets/QHeaderView>
-#include <QtWidgets/QLabel>
-#include <QtWidgets/QLineEdit>
-#include <QtWidgets/QListWidget>
-#include <QtWidgets/QMainWindow>
-#include <QtWidgets/QPushButton>
-#include <QtWidgets/QSpacerItem>
-#include <QtWidgets/QSpinBox>
-#include <QtWidgets/QTabWidget>
-#include <QtWidgets/QTableWidget>
-#include <QtWidgets/QTextBrowser>
-#include <QtWidgets/QTextEdit>
-#include <QtWidgets/QVBoxLayout>
-#include <QtWidgets/QWidget>
-
-QT_BEGIN_NAMESPACE
-
-class Ui_MainWindow
-{
-public:
-    QWidget *centralWidget;
-    QWidget *centralwidget;
-    QTabWidget *tabWidget;
-    QWidget *loginTab;
-    QWidget *verticalLayoutWidget_2;
-    QVBoxLayout *verticalLayout_2;
-    QLabel *label_7;
-    QHBoxLayout *horizontalLayout_7;
-    QSpacerItem *horizontalSpacer_4;
-    QLabel *label_9;
-    QLineEdit *usernameLogin;
-    QSpacerItem *horizontalSpacer_5;
-    QHBoxLayout *horizontalLayout;
-    QSpacerItem *horizontalSpacer_2;
-    QLabel *label_8;
-    QLineEdit *passwordLogin;
-    QSpacerItem *horizontalSpacer_3;
-    QHBoxLayout *horizontalLayout_10;
-    QPushButton *login;
-    QPushButton *createAccount;
-    QPushButton *quit;
-    QWidget *infoTabAuthor;
-    QWidget *verticalLayoutWidget;
-    QVBoxLayout *verticalLayout;
-    QHBoxLayout *horizontalLayout_2;
-    QLabel *username;
-    QLabel *userid;
-    QLineEdit *name;
-    QLineEdit *email;
-    QLineEdit *organisation;
-    QLineEdit *phone;
-    QLabel *label;
-    QHBoxLayout *horizontalLayout_21;
-    QListWidget *authKeyList;
-    QVBoxLayout *verticalLayout_15;
-    QLineEdit *authKeyEntry;
-    QPushButton *addAuthKey;
-    QPushButton *rmvAuthKey;
-    QSpacerItem *verticalSpacer_8;
-    QPushButton *apply;
-    QPushButton *logout;
-    QWidget *verticalLayoutWidget_14;
-    QVBoxLayout *verticalLayout_16;
-    QLabel *conferenceName;
-    QLabel *label_2;
-    QLabel *label_3;
-    QHBoxLayout *horizontalLayout_22;
-    QLabel *label_26;
-    QListWidget *confKeyListNoEdit;
-    QTextBrowser *textBrowser_2;
-    QWidget *infoTabChair;
-    QWidget *verticalLayoutWidget_3;
-    QVBoxLayout *verticalLayout_3;
-    QHBoxLayout *horizontalLayout_3;
-    QLabel *username_2;
-    QLabel *userid_2;
-    QLineEdit *name_2;
-    QLineEdit *email_2;
-    QLineEdit *organisation_2;
-    QLineEdit *phone_2;
-    QSpacerItem *verticalSpacer_9;
-    QPushButton *apply_2;
-    QPushButton *logout_2;
-    QWidget *verticalLayoutWidget_4;
-    QVBoxLayout *verticalLayout_4;
-    QLineEdit *lineEdit;
-    QLineEdit *lineEdit_2;
-    QLineEdit *lineEdit_3;
-    QTextEdit *textEdit_2;
-    QLabel *label_25;
-    QHBoxLayout *horizontalLayout_20;
-    QListWidget *confKeyList;
-    QVBoxLayout *verticalLayout_11;
-    QLineEdit *confKeyEntry;
-    QPushButton *addConfKey;
-    QPushButton *rmvConfKey;
-    QWidget *authorTab;
-    QWidget *gridLayoutWidget_3;
-    QGridLayout *gridLayout_3;
-    QVBoxLayout *verticalLayout_8;
-    QTableWidget *authorsTable;
-    QComboBox *selectMainKey;
-    QComboBox *selectPaperAuthor;
-    QTextEdit *paperAbstract;
-    QVBoxLayout *verticalLayout_14;
-    QHBoxLayout *horizontalLayout_4;
-    QLineEdit *paperKeyEntry;
-    QPushButton *addPaperKey;
-    QPushButton *rmvPaperKey;
-    QListWidget *paperKeyListAuth;
-    QVBoxLayout *verticalLayout_10;
-    QPushButton *addAuthor;
-    QPushButton *rmvAuthor;
-    QLineEdit *filename;
-    QPushButton *selectFile;
-    QPushButton *submit;
-    QWidget *reviewerTab;
-    QWidget *gridLayoutWidget_4;
-    QGridLayout *gridLayout_4;
-    QLabel *discussionLabel_2;
-    QPushButton *submitPosts;
-    QTextEdit *postBody;
-    QTextBrowser *discussionBody_2;
-    QWidget *horizontalLayoutWidget;
-    QHBoxLayout *horizontalLayout_5;
-    QSpacerItem *horizontalSpacer;
-    QLabel *bidlabel;
-    QComboBox *selectBid;
-    QPushButton *submitBid;
-    QWidget *gridLayoutWidget_5;
-    QGridLayout *gridLayout_5;
-    QLabel *paperName_3;
-    QLabel *mainKey_3;
-    QLabel *fileName_2;
-    QComboBox *selectPaperReviewer;
-    QPushButton *download_2;
-    QListWidget *paperKeyListRev;
-    QWidget *papersTab;
-    QTableWidget *tableWidget;
-    QWidget *gridLayoutWidget_6;
-    QGridLayout *gridLayout_6;
-    QLabel *paperName_4;
-    QLabel *fileName_3;
-    QPushButton *download_3;
-    QLabel *mainKey_4;
-    QTableWidget *authorsTableMng;
-    QListWidget *paperKeyListMng;
-    QWidget *verticalLayoutWidget_11;
-    QVBoxLayout *verticalLayout_12;
-    QGridLayout *gridLayout_7;
-    QLabel *discussionLabel_3;
-    QTextBrowser *discussionBody_3;
-    QVBoxLayout *verticalLayout_5;
-    QTableWidget *reviewersTable;
-    QHBoxLayout *horizontalLayout_9;
-    QLabel *label_5;
-    QLineEdit *toReview_2;
-    QPushButton *addAsReviewer_2;
-    QLabel *label_6;
-    QVBoxLayout *verticalLayout_13;
-    QLabel *label_41;
-    QTextBrowser *commentsBrowser;
-    QFormLayout *formLayout;
-    QLabel *label_24;
-    QLabel *overallScore;
-    QLabel *label_27;
-    QLabel *confidenceScore;
-    QLabel *label_29;
-    QLabel *relevanceScore;
-    QLabel *label_31;
-    QLabel *originalityScore;
-    QLabel *label_33;
-    QLabel *significanceScore;
-    QLabel *label_35;
-    QLabel *presentationScore;
-    QLabel *label_37;
-    QLabel *techqualScore;
-    QLabel *label_39;
-    QLabel *evaluationScore;
-    QPushButton *acceptPaper;
-    QPushButton *rejectPaper;
-    QWidget *usersTab;
-    QTableWidget *tableWidget_2;
-    QWidget *verticalLayoutWidget_6;
-    QVBoxLayout *verticalLayout_6;
-    QHBoxLayout *horizontalLayout_8;
-    QLabel *username_5;
-    QLabel *userid_5;
-    QLabel *name_5;
-    QLabel *email_5;
-    QLabel *organisation_5;
-    QLabel *phone_5;
-    QLabel *label_10;
-    QListWidget *userKeyList;
-    QWidget *horizontalLayoutWidget_2;
-    QHBoxLayout *horizontalLayout_6;
-    QLabel *label_4;
-    QLineEdit *toReview;
-    QPushButton *addAsReviewer;
-    QWidget *verticalLayoutWidget_15;
-    QVBoxLayout *verticalLayout_17;
-    QHBoxLayout *horizontalLayout_23;
-    QLabel *label_30;
-    QLabel *label_28;
-    QHBoxLayout *horizontalLayout_24;
-    QListWidget *authoredPapers;
-    QListWidget *assignedPapers;
-    QWidget *reviewTab;
-    QWidget *verticalLayoutWidget_7;
-    QVBoxLayout *verticalLayout_7;
-    QHBoxLayout *horizontalLayout_11;
-    QLabel *label_11;
-    QSpinBox *overall;
-    QLabel *label_12;
-    QSpinBox *confidence;
-    QHBoxLayout *horizontalLayout_12;
-    QLabel *label_13;
-    QSpinBox *relevance;
-    QLabel *label_14;
-    QSpinBox *originality;
-    QHBoxLayout *horizontalLayout_13;
-    QLabel *label_15;
-    QSpinBox *significance;
-    QLabel *label_16;
-    QSpinBox *spinBox_8;
-    QHBoxLayout *horizontalLayout_14;
-    QLabel *label_17;
-    QSpinBox *techQuality;
-    QLabel *label_18;
-    QSpinBox *evaluation;
-    QHBoxLayout *horizontalLayout_15;
-    QLabel *label_19;
-    QLabel *label_20;
-    QHBoxLayout *horizontalLayout_16;
-    QTextEdit *commentsStrengths;
-    QTextEdit *commentsWeaknesses;
-    QHBoxLayout *horizontalLayout_17;
-    QLabel *label_21;
-    QLabel *label_22;
-    QHBoxLayout *horizontalLayout_18;
-    QTextEdit *commentsShortPaper;
-    QTextEdit *commentsBestAward;
-    QHBoxLayout *horizontalLayout_19;
-    QLabel *label_23;
-    QTextEdit *commentsSuggestions;
-    QWidget *gridLayoutWidget;
-    QGridLayout *gridLayout;
-    QLabel *mainKey;
-    QLabel *fileName;
-    QTextBrowser *textBrowser;
-    QPushButton *download;
-    QLabel *paperName;
-    QComboBox *selectPaperReview;
-
-    void setupUi(QMainWindow *MainWindow)
-    {
-        if (MainWindow->objectName().isEmpty())
-            MainWindow->setObjectName(QStringLiteral("MainWindow"));
-        MainWindow->resize(790, 606);
-        centralWidget = new QWidget(MainWindow);
-        centralWidget->setObjectName(QStringLiteral("centralWidget"));
-        centralwidget = new QWidget(centralWidget);
-        centralwidget->setObjectName(QStringLiteral("centralwidget"));
-        centralwidget->setGeometry(QRect(0, 0, 801, 601));
-        tabWidget = new QTabWidget(centralwidget);
-        tabWidget->setObjectName(QStringLiteral("tabWidget"));
-        tabWidget->setGeometry(QRect(0, 0, 871, 651));
-        loginTab = new QWidget();
-        loginTab->setObjectName(QStringLiteral("loginTab"));
-        verticalLayoutWidget_2 = new QWidget(loginTab);
-        verticalLayoutWidget_2->setObjectName(QStringLiteral("verticalLayoutWidget_2"));
-        verticalLayoutWidget_2->setGeometry(QRect(210, 150, 353, 211));
-        verticalLayout_2 = new QVBoxLayout(verticalLayoutWidget_2);
-        verticalLayout_2->setSpacing(6);
-        verticalLayout_2->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_2->setObjectName(QStringLiteral("verticalLayout_2"));
-        verticalLayout_2->setContentsMargins(0, 0, 0, 0);
-        label_7 = new QLabel(verticalLayoutWidget_2);
-        label_7->setObjectName(QStringLiteral("label_7"));
-        QFont font;
-        font.setPointSize(18);
-        label_7->setFont(font);
-
-        verticalLayout_2->addWidget(label_7);
-
-        horizontalLayout_7 = new QHBoxLayout();
-        horizontalLayout_7->setSpacing(6);
-        horizontalLayout_7->setObjectName(QStringLiteral("horizontalLayout_7"));
-        horizontalSpacer_4 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
-
-        horizontalLayout_7->addItem(horizontalSpacer_4);
-
-        label_9 = new QLabel(verticalLayoutWidget_2);
-        label_9->setObjectName(QStringLiteral("label_9"));
-
-        horizontalLayout_7->addWidget(label_9);
-
-        usernameLogin = new QLineEdit(verticalLayoutWidget_2);
-        usernameLogin->setObjectName(QStringLiteral("usernameLogin"));
-
-        horizontalLayout_7->addWidget(usernameLogin);
-
-        horizontalSpacer_5 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
-
-        horizontalLayout_7->addItem(horizontalSpacer_5);
-
-
-        verticalLayout_2->addLayout(horizontalLayout_7);
-
-        horizontalLayout = new QHBoxLayout();
-        horizontalLayout->setSpacing(6);
-        horizontalLayout->setObjectName(QStringLiteral("horizontalLayout"));
-        horizontalSpacer_2 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
-
-        horizontalLayout->addItem(horizontalSpacer_2);
-
-        label_8 = new QLabel(verticalLayoutWidget_2);
-        label_8->setObjectName(QStringLiteral("label_8"));
-
-        horizontalLayout->addWidget(label_8);
-
-        passwordLogin = new QLineEdit(verticalLayoutWidget_2);
-        passwordLogin->setObjectName(QStringLiteral("passwordLogin"));
-
-        horizontalLayout->addWidget(passwordLogin);
-
-        horizontalSpacer_3 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
-
-        horizontalLayout->addItem(horizontalSpacer_3);
-
-
-        verticalLayout_2->addLayout(horizontalLayout);
-
-        horizontalLayout_10 = new QHBoxLayout();
-        horizontalLayout_10->setSpacing(6);
-        horizontalLayout_10->setObjectName(QStringLiteral("horizontalLayout_10"));
-        login = new QPushButton(verticalLayoutWidget_2);
-        login->setObjectName(QStringLiteral("login"));
-
-        horizontalLayout_10->addWidget(login);
-
-        createAccount = new QPushButton(verticalLayoutWidget_2);
-        createAccount->setObjectName(QStringLiteral("createAccount"));
-
-        horizontalLayout_10->addWidget(createAccount);
-
-
-        verticalLayout_2->addLayout(horizontalLayout_10);
-
-        quit = new QPushButton(verticalLayoutWidget_2);
-        quit->setObjectName(QStringLiteral("quit"));
-
-        verticalLayout_2->addWidget(quit);
-
-        tabWidget->addTab(loginTab, QString());
-        infoTabAuthor = new QWidget();
-        infoTabAuthor->setObjectName(QStringLiteral("infoTabAuthor"));
-        verticalLayoutWidget = new QWidget(infoTabAuthor);
-        verticalLayoutWidget->setObjectName(QStringLiteral("verticalLayoutWidget"));
-        verticalLayoutWidget->setGeometry(QRect(20, 10, 233, 551));
-        verticalLayout = new QVBoxLayout(verticalLayoutWidget);
-        verticalLayout->setSpacing(6);
-        verticalLayout->setContentsMargins(11, 11, 11, 11);
-        verticalLayout->setObjectName(QStringLiteral("verticalLayout"));
-        verticalLayout->setContentsMargins(0, 0, 0, 0);
-        horizontalLayout_2 = new QHBoxLayout();
-        horizontalLayout_2->setSpacing(6);
-        horizontalLayout_2->setObjectName(QStringLiteral("horizontalLayout_2"));
-        username = new QLabel(verticalLayoutWidget);
-        username->setObjectName(QStringLiteral("username"));
-
-        horizontalLayout_2->addWidget(username);
-
-        userid = new QLabel(verticalLayoutWidget);
-        userid->setObjectName(QStringLiteral("userid"));
-
-        horizontalLayout_2->addWidget(userid);
-
-
-        verticalLayout->addLayout(horizontalLayout_2);
-
-        name = new QLineEdit(verticalLayoutWidget);
-        name->setObjectName(QStringLiteral("name"));
-
-        verticalLayout->addWidget(name);
-
-        email = new QLineEdit(verticalLayoutWidget);
-        email->setObjectName(QStringLiteral("email"));
-
-        verticalLayout->addWidget(email);
-
-        organisation = new QLineEdit(verticalLayoutWidget);
-        organisation->setObjectName(QStringLiteral("organisation"));
-
-        verticalLayout->addWidget(organisation);
-
-        phone = new QLineEdit(verticalLayoutWidget);
-        phone->setObjectName(QStringLiteral("phone"));
-
-        verticalLayout->addWidget(phone);
-
-        label = new QLabel(verticalLayoutWidget);
-        label->setObjectName(QStringLiteral("label"));
-
-        verticalLayout->addWidget(label);
-
-        horizontalLayout_21 = new QHBoxLayout();
-        horizontalLayout_21->setSpacing(6);
-        horizontalLayout_21->setObjectName(QStringLiteral("horizontalLayout_21"));
-        authKeyList = new QListWidget(verticalLayoutWidget);
-        authKeyList->setObjectName(QStringLiteral("authKeyList"));
-
-        horizontalLayout_21->addWidget(authKeyList);
-
-        verticalLayout_15 = new QVBoxLayout();
-        verticalLayout_15->setSpacing(6);
-        verticalLayout_15->setObjectName(QStringLiteral("verticalLayout_15"));
-        authKeyEntry = new QLineEdit(verticalLayoutWidget);
-        authKeyEntry->setObjectName(QStringLiteral("authKeyEntry"));
-
-        verticalLayout_15->addWidget(authKeyEntry);
-
-        addAuthKey = new QPushButton(verticalLayoutWidget);
-        addAuthKey->setObjectName(QStringLiteral("addAuthKey"));
-
-        verticalLayout_15->addWidget(addAuthKey);
-
-        rmvAuthKey = new QPushButton(verticalLayoutWidget);
-        rmvAuthKey->setObjectName(QStringLiteral("rmvAuthKey"));
-
-        verticalLayout_15->addWidget(rmvAuthKey);
-
-
-        horizontalLayout_21->addLayout(verticalLayout_15);
-
-
-        verticalLayout->addLayout(horizontalLayout_21);
-
-        verticalSpacer_8 = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding);
-
-        verticalLayout->addItem(verticalSpacer_8);
-
-        apply = new QPushButton(verticalLayoutWidget);
-        apply->setObjectName(QStringLiteral("apply"));
-
-        verticalLayout->addWidget(apply);
-
-        logout = new QPushButton(verticalLayoutWidget);
-        logout->setObjectName(QStringLiteral("logout"));
-
-        verticalLayout->addWidget(logout);
-
-        verticalLayoutWidget_14 = new QWidget(infoTabAuthor);
-        verticalLayoutWidget_14->setObjectName(QStringLiteral("verticalLayoutWidget_14"));
-        verticalLayoutWidget_14->setGeometry(QRect(270, 10, 501, 551));
-        verticalLayout_16 = new QVBoxLayout(verticalLayoutWidget_14);
-        verticalLayout_16->setSpacing(6);
-        verticalLayout_16->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_16->setObjectName(QStringLiteral("verticalLayout_16"));
-        verticalLayout_16->setContentsMargins(0, 0, 0, 0);
-        conferenceName = new QLabel(verticalLayoutWidget_14);
-        conferenceName->setObjectName(QStringLiteral("conferenceName"));
-        QFont font1;
-        font1.setPointSize(16);
-        font1.setBold(true);
-        font1.setItalic(true);
-        font1.setWeight(75);
-        conferenceName->setFont(font1);
-        conferenceName->setScaledContents(false);
-
-        verticalLayout_16->addWidget(conferenceName);
-
-        label_2 = new QLabel(verticalLayoutWidget_14);
-        label_2->setObjectName(QStringLiteral("label_2"));
-
-        verticalLayout_16->addWidget(label_2);
-
-        label_3 = new QLabel(verticalLayoutWidget_14);
-        label_3->setObjectName(QStringLiteral("label_3"));
-
-        verticalLayout_16->addWidget(label_3);
-
-        horizontalLayout_22 = new QHBoxLayout();
-        horizontalLayout_22->setSpacing(6);
-        horizontalLayout_22->setObjectName(QStringLiteral("horizontalLayout_22"));
-        label_26 = new QLabel(verticalLayoutWidget_14);
-        label_26->setObjectName(QStringLiteral("label_26"));
-
-        horizontalLayout_22->addWidget(label_26);
-
-        confKeyListNoEdit = new QListWidget(verticalLayoutWidget_14);
-        confKeyListNoEdit->setObjectName(QStringLiteral("confKeyListNoEdit"));
-
-        horizontalLayout_22->addWidget(confKeyListNoEdit);
-
-
-        verticalLayout_16->addLayout(horizontalLayout_22);
-
-        textBrowser_2 = new QTextBrowser(verticalLayoutWidget_14);
-        textBrowser_2->setObjectName(QStringLiteral("textBrowser_2"));
-
-        verticalLayout_16->addWidget(textBrowser_2);
-
-        tabWidget->addTab(infoTabAuthor, QString());
-        infoTabChair = new QWidget();
-        infoTabChair->setObjectName(QStringLiteral("infoTabChair"));
-        verticalLayoutWidget_3 = new QWidget(infoTabChair);
-        verticalLayoutWidget_3->setObjectName(QStringLiteral("verticalLayoutWidget_3"));
-        verticalLayoutWidget_3->setGeometry(QRect(20, 10, 233, 551));
-        verticalLayout_3 = new QVBoxLayout(verticalLayoutWidget_3);
-        verticalLayout_3->setSpacing(6);
-        verticalLayout_3->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_3->setObjectName(QStringLiteral("verticalLayout_3"));
-        verticalLayout_3->setContentsMargins(0, 0, 0, 0);
-        horizontalLayout_3 = new QHBoxLayout();
-        horizontalLayout_3->setSpacing(6);
-        horizontalLayout_3->setObjectName(QStringLiteral("horizontalLayout_3"));
-        username_2 = new QLabel(verticalLayoutWidget_3);
-        username_2->setObjectName(QStringLiteral("username_2"));
-
-        horizontalLayout_3->addWidget(username_2);
-
-        userid_2 = new QLabel(verticalLayoutWidget_3);
-        userid_2->setObjectName(QStringLiteral("userid_2"));
-
-        horizontalLayout_3->addWidget(userid_2);
-
-
-        verticalLayout_3->addLayout(horizontalLayout_3);
-
-        name_2 = new QLineEdit(verticalLayoutWidget_3);
-        name_2->setObjectName(QStringLiteral("name_2"));
-
-        verticalLayout_3->addWidget(name_2);
-
-        email_2 = new QLineEdit(verticalLayoutWidget_3);
-        email_2->setObjectName(QStringLiteral("email_2"));
-
-        verticalLayout_3->addWidget(email_2);
-
-        organisation_2 = new QLineEdit(verticalLayoutWidget_3);
-        organisation_2->setObjectName(QStringLiteral("organisation_2"));
-
-        verticalLayout_3->addWidget(organisation_2);
-
-        phone_2 = new QLineEdit(verticalLayoutWidget_3);
-        phone_2->setObjectName(QStringLiteral("phone_2"));
-
-        verticalLayout_3->addWidget(phone_2);
-
-        verticalSpacer_9 = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding);
-
-        verticalLayout_3->addItem(verticalSpacer_9);
-
-        apply_2 = new QPushButton(verticalLayoutWidget_3);
-        apply_2->setObjectName(QStringLiteral("apply_2"));
-
-        verticalLayout_3->addWidget(apply_2);
-
-        logout_2 = new QPushButton(verticalLayoutWidget_3);
-        logout_2->setObjectName(QStringLiteral("logout_2"));
-
-        verticalLayout_3->addWidget(logout_2);
-
-        verticalLayoutWidget_4 = new QWidget(infoTabChair);
-        verticalLayoutWidget_4->setObjectName(QStringLiteral("verticalLayoutWidget_4"));
-        verticalLayoutWidget_4->setGeometry(QRect(280, 10, 481, 551));
-        verticalLayout_4 = new QVBoxLayout(verticalLayoutWidget_4);
-        verticalLayout_4->setSpacing(6);
-        verticalLayout_4->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_4->setObjectName(QStringLiteral("verticalLayout_4"));
-        verticalLayout_4->setContentsMargins(0, 0, 0, 0);
-        lineEdit = new QLineEdit(verticalLayoutWidget_4);
-        lineEdit->setObjectName(QStringLiteral("lineEdit"));
-
-        verticalLayout_4->addWidget(lineEdit);
-
-        lineEdit_2 = new QLineEdit(verticalLayoutWidget_4);
-        lineEdit_2->setObjectName(QStringLiteral("lineEdit_2"));
-
-        verticalLayout_4->addWidget(lineEdit_2);
-
-        lineEdit_3 = new QLineEdit(verticalLayoutWidget_4);
-        lineEdit_3->setObjectName(QStringLiteral("lineEdit_3"));
-
-        verticalLayout_4->addWidget(lineEdit_3);
-
-        textEdit_2 = new QTextEdit(verticalLayoutWidget_4);
-        textEdit_2->setObjectName(QStringLiteral("textEdit_2"));
-
-        verticalLayout_4->addWidget(textEdit_2);
-
-        label_25 = new QLabel(verticalLayoutWidget_4);
-        label_25->setObjectName(QStringLiteral("label_25"));
-
-        verticalLayout_4->addWidget(label_25);
-
-        horizontalLayout_20 = new QHBoxLayout();
-        horizontalLayout_20->setSpacing(6);
-        horizontalLayout_20->setObjectName(QStringLiteral("horizontalLayout_20"));
-        confKeyList = new QListWidget(verticalLayoutWidget_4);
-        confKeyList->setObjectName(QStringLiteral("confKeyList"));
-
-        horizontalLayout_20->addWidget(confKeyList);
-
-        verticalLayout_11 = new QVBoxLayout();
-        verticalLayout_11->setSpacing(6);
-        verticalLayout_11->setObjectName(QStringLiteral("verticalLayout_11"));
-        confKeyEntry = new QLineEdit(verticalLayoutWidget_4);
-        confKeyEntry->setObjectName(QStringLiteral("confKeyEntry"));
-
-        verticalLayout_11->addWidget(confKeyEntry);
-
-        addConfKey = new QPushButton(verticalLayoutWidget_4);
-        addConfKey->setObjectName(QStringLiteral("addConfKey"));
-
-        verticalLayout_11->addWidget(addConfKey);
-
-        rmvConfKey = new QPushButton(verticalLayoutWidget_4);
-        rmvConfKey->setObjectName(QStringLiteral("rmvConfKey"));
-
-        verticalLayout_11->addWidget(rmvConfKey);
-
-
-        horizontalLayout_20->addLayout(verticalLayout_11);
-
-
-        verticalLayout_4->addLayout(horizontalLayout_20);
-
-        tabWidget->addTab(infoTabChair, QString());
-        authorTab = new QWidget();
-        authorTab->setObjectName(QStringLiteral("authorTab"));
-        gridLayoutWidget_3 = new QWidget(authorTab);
-        gridLayoutWidget_3->setObjectName(QStringLiteral("gridLayoutWidget_3"));
-        gridLayoutWidget_3->setGeometry(QRect(20, 10, 741, 531));
-        gridLayout_3 = new QGridLayout(gridLayoutWidget_3);
-        gridLayout_3->setSpacing(6);
-        gridLayout_3->setContentsMargins(11, 11, 11, 11);
-        gridLayout_3->setObjectName(QStringLiteral("gridLayout_3"));
-        gridLayout_3->setContentsMargins(0, 0, 0, 0);
-        verticalLayout_8 = new QVBoxLayout();
-        verticalLayout_8->setSpacing(6);
-        verticalLayout_8->setObjectName(QStringLiteral("verticalLayout_8"));
-        authorsTable = new QTableWidget(gridLayoutWidget_3);
-        if (authorsTable->columnCount() < 4)
-            authorsTable->setColumnCount(4);
-        QTableWidgetItem *__qtablewidgetitem = new QTableWidgetItem();
-        authorsTable->setHorizontalHeaderItem(0, __qtablewidgetitem);
-        QTableWidgetItem *__qtablewidgetitem1 = new QTableWidgetItem();
-        authorsTable->setHorizontalHeaderItem(1, __qtablewidgetitem1);
-        QTableWidgetItem *__qtablewidgetitem2 = new QTableWidgetItem();
-        authorsTable->setHorizontalHeaderItem(2, __qtablewidgetitem2);
-        QTableWidgetItem *__qtablewidgetitem3 = new QTableWidgetItem();
-        authorsTable->setHorizontalHeaderItem(3, __qtablewidgetitem3);
-        authorsTable->setObjectName(QStringLiteral("authorsTable"));
-
-        verticalLayout_8->addWidget(authorsTable);
-
-
-        gridLayout_3->addLayout(verticalLayout_8, 2, 0, 1, 1);
-
-        selectMainKey = new QComboBox(gridLayoutWidget_3);
-        selectMainKey->setObjectName(QStringLiteral("selectMainKey"));
-
-        gridLayout_3->addWidget(selectMainKey, 1, 1, 1, 1);
-
-        selectPaperAuthor = new QComboBox(gridLayoutWidget_3);
-        selectPaperAuthor->setObjectName(QStringLiteral("selectPaperAuthor"));
-        selectPaperAuthor->setEditable(true);
-
-        gridLayout_3->addWidget(selectPaperAuthor, 1, 0, 1, 1);
-
-        paperAbstract = new QTextEdit(gridLayoutWidget_3);
-        paperAbstract->setObjectName(QStringLiteral("paperAbstract"));
-
-        gridLayout_3->addWidget(paperAbstract, 5, 1, 1, 1);
-
-        verticalLayout_14 = new QVBoxLayout();
-        verticalLayout_14->setSpacing(6);
-        verticalLayout_14->setObjectName(QStringLiteral("verticalLayout_14"));
-        horizontalLayout_4 = new QHBoxLayout();
-        horizontalLayout_4->setSpacing(6);
-        horizontalLayout_4->setObjectName(QStringLiteral("horizontalLayout_4"));
-        paperKeyEntry = new QLineEdit(gridLayoutWidget_3);
-        paperKeyEntry->setObjectName(QStringLiteral("paperKeyEntry"));
-
-        horizontalLayout_4->addWidget(paperKeyEntry);
-
-        addPaperKey = new QPushButton(gridLayoutWidget_3);
-        addPaperKey->setObjectName(QStringLiteral("addPaperKey"));
-
-        horizontalLayout_4->addWidget(addPaperKey);
-
-        rmvPaperKey = new QPushButton(gridLayoutWidget_3);
-        rmvPaperKey->setObjectName(QStringLiteral("rmvPaperKey"));
-
-        horizontalLayout_4->addWidget(rmvPaperKey);
-
-
-        verticalLayout_14->addLayout(horizontalLayout_4);
-
-        paperKeyListAuth = new QListWidget(gridLayoutWidget_3);
-        paperKeyListAuth->setObjectName(QStringLiteral("paperKeyListAuth"));
-
-        verticalLayout_14->addWidget(paperKeyListAuth);
-
-
-        gridLayout_3->addLayout(verticalLayout_14, 2, 1, 1, 1);
-
-        verticalLayout_10 = new QVBoxLayout();
-        verticalLayout_10->setSpacing(6);
-        verticalLayout_10->setObjectName(QStringLiteral("verticalLayout_10"));
-        addAuthor = new QPushButton(gridLayoutWidget_3);
-        addAuthor->setObjectName(QStringLiteral("addAuthor"));
-
-        verticalLayout_10->addWidget(addAuthor);
-
-        rmvAuthor = new QPushButton(gridLayoutWidget_3);
-        rmvAuthor->setObjectName(QStringLiteral("rmvAuthor"));
-
-        verticalLayout_10->addWidget(rmvAuthor);
-
-        filename = new QLineEdit(gridLayoutWidget_3);
-        filename->setObjectName(QStringLiteral("filename"));
-
-        verticalLayout_10->addWidget(filename);
-
-        selectFile = new QPushButton(gridLayoutWidget_3);
-        selectFile->setObjectName(QStringLiteral("selectFile"));
-
-        verticalLayout_10->addWidget(selectFile);
-
-        submit = new QPushButton(gridLayoutWidget_3);
-        submit->setObjectName(QStringLiteral("submit"));
-
-        verticalLayout_10->addWidget(submit);
-
-
-        gridLayout_3->addLayout(verticalLayout_10, 5, 0, 1, 1);
-
-        tabWidget->addTab(authorTab, QString());
-        reviewerTab = new QWidget();
-        reviewerTab->setObjectName(QStringLiteral("reviewerTab"));
-        gridLayoutWidget_4 = new QWidget(reviewerTab);
-        gridLayoutWidget_4->setObjectName(QStringLiteral("gridLayoutWidget_4"));
-        gridLayoutWidget_4->setGeometry(QRect(20, 200, 741, 351));
-        gridLayout_4 = new QGridLayout(gridLayoutWidget_4);
-        gridLayout_4->setSpacing(6);
-        gridLayout_4->setContentsMargins(11, 11, 11, 11);
-        gridLayout_4->setObjectName(QStringLiteral("gridLayout_4"));
-        gridLayout_4->setContentsMargins(0, 0, 0, 0);
-        discussionLabel_2 = new QLabel(gridLayoutWidget_4);
-        discussionLabel_2->setObjectName(QStringLiteral("discussionLabel_2"));
-
-        gridLayout_4->addWidget(discussionLabel_2, 0, 0, 1, 1);
-
-        submitPosts = new QPushButton(gridLayoutWidget_4);
-        submitPosts->setObjectName(QStringLiteral("submitPosts"));
-
-        gridLayout_4->addWidget(submitPosts, 2, 1, 1, 1);
-
-        postBody = new QTextEdit(gridLayoutWidget_4);
-        postBody->setObjectName(QStringLiteral("postBody"));
-
-        gridLayout_4->addWidget(postBody, 1, 1, 1, 1);
-
-        discussionBody_2 = new QTextBrowser(gridLayoutWidget_4);
-        discussionBody_2->setObjectName(QStringLiteral("discussionBody_2"));
-
-        gridLayout_4->addWidget(discussionBody_2, 1, 0, 1, 1);
-
-        horizontalLayoutWidget = new QWidget(reviewerTab);
-        horizontalLayoutWidget->setObjectName(QStringLiteral("horizontalLayoutWidget"));
-        horizontalLayoutWidget->setGeometry(QRect(20, 160, 741, 31));
-        horizontalLayout_5 = new QHBoxLayout(horizontalLayoutWidget);
-        horizontalLayout_5->setSpacing(6);
-        horizontalLayout_5->setContentsMargins(11, 11, 11, 11);
-        horizontalLayout_5->setObjectName(QStringLiteral("horizontalLayout_5"));
-        horizontalLayout_5->setContentsMargins(0, 0, 0, 0);
-        horizontalSpacer = new QSpacerItem(40, 20, QSizePolicy::Ignored, QSizePolicy::Minimum);
-
-        horizontalLayout_5->addItem(horizontalSpacer);
-
-        bidlabel = new QLabel(horizontalLayoutWidget);
-        bidlabel->setObjectName(QStringLiteral("bidlabel"));
-
-        horizontalLayout_5->addWidget(bidlabel);
-
-        selectBid = new QComboBox(horizontalLayoutWidget);
-        selectBid->setObjectName(QStringLiteral("selectBid"));
-
-        horizontalLayout_5->addWidget(selectBid);
-
-        submitBid = new QPushButton(horizontalLayoutWidget);
-        submitBid->setObjectName(QStringLiteral("submitBid"));
-
-        horizontalLayout_5->addWidget(submitBid);
-
-        gridLayoutWidget_5 = new QWidget(reviewerTab);
-        gridLayoutWidget_5->setObjectName(QStringLiteral("gridLayoutWidget_5"));
-        gridLayoutWidget_5->setGeometry(QRect(20, 10, 741, 151));
-        gridLayout_5 = new QGridLayout(gridLayoutWidget_5);
-        gridLayout_5->setSpacing(6);
-        gridLayout_5->setContentsMargins(11, 11, 11, 11);
-        gridLayout_5->setObjectName(QStringLiteral("gridLayout_5"));
-        gridLayout_5->setContentsMargins(0, 0, 0, 0);
-        paperName_3 = new QLabel(gridLayoutWidget_5);
-        paperName_3->setObjectName(QStringLiteral("paperName_3"));
-
-        gridLayout_5->addWidget(paperName_3, 0, 1, 1, 1);
-
-        mainKey_3 = new QLabel(gridLayoutWidget_5);
-        mainKey_3->setObjectName(QStringLiteral("mainKey_3"));
-
-        gridLayout_5->addWidget(mainKey_3, 1, 0, 1, 1);
-
-        fileName_2 = new QLabel(gridLayoutWidget_5);
-        fileName_2->setObjectName(QStringLiteral("fileName_2"));
-
-        gridLayout_5->addWidget(fileName_2, 2, 0, 1, 1);
-
-        selectPaperReviewer = new QComboBox(gridLayoutWidget_5);
-        selectPaperReviewer->setObjectName(QStringLiteral("selectPaperReviewer"));
-
-        gridLayout_5->addWidget(selectPaperReviewer, 0, 0, 1, 1);
-
-        download_2 = new QPushButton(gridLayoutWidget_5);
-        download_2->setObjectName(QStringLiteral("download_2"));
-
-        gridLayout_5->addWidget(download_2, 2, 1, 1, 1);
-
-        paperKeyListRev = new QListWidget(gridLayoutWidget_5);
-        paperKeyListRev->setObjectName(QStringLiteral("paperKeyListRev"));
-
-        gridLayout_5->addWidget(paperKeyListRev, 1, 1, 1, 1);
-
-        tabWidget->addTab(reviewerTab, QString());
-        papersTab = new QWidget();
-        papersTab->setObjectName(QStringLiteral("papersTab"));
-        tableWidget = new QTableWidget(papersTab);
-        if (tableWidget->columnCount() < 2)
-            tableWidget->setColumnCount(2);
-        QTableWidgetItem *__qtablewidgetitem4 = new QTableWidgetItem();
-        tableWidget->setHorizontalHeaderItem(0, __qtablewidgetitem4);
-        QTableWidgetItem *__qtablewidgetitem5 = new QTableWidgetItem();
-        __qtablewidgetitem5->setText(QStringLiteral("id"));
-        tableWidget->setHorizontalHeaderItem(1, __qtablewidgetitem5);
-        tableWidget->setObjectName(QStringLiteral("tableWidget"));
-        tableWidget->setGeometry(QRect(20, 20, 211, 531));
-        gridLayoutWidget_6 = new QWidget(papersTab);
-        gridLayoutWidget_6->setObjectName(QStringLiteral("gridLayoutWidget_6"));
-        gridLayoutWidget_6->setGeometry(QRect(250, 20, 511, 151));
-        gridLayout_6 = new QGridLayout(gridLayoutWidget_6);
-        gridLayout_6->setSpacing(6);
-        gridLayout_6->setContentsMargins(11, 11, 11, 11);
-        gridLayout_6->setObjectName(QStringLiteral("gridLayout_6"));
-        gridLayout_6->setContentsMargins(0, 0, 0, 0);
-        paperName_4 = new QLabel(gridLayoutWidget_6);
-        paperName_4->setObjectName(QStringLiteral("paperName_4"));
-
-        gridLayout_6->addWidget(paperName_4, 0, 0, 1, 1);
-
-        fileName_3 = new QLabel(gridLayoutWidget_6);
-        fileName_3->setObjectName(QStringLiteral("fileName_3"));
-
-        gridLayout_6->addWidget(fileName_3, 2, 0, 1, 1);
-
-        download_3 = new QPushButton(gridLayoutWidget_6);
-        download_3->setObjectName(QStringLiteral("download_3"));
-
-        gridLayout_6->addWidget(download_3, 2, 1, 1, 1);
-
-        mainKey_4 = new QLabel(gridLayoutWidget_6);
-        mainKey_4->setObjectName(QStringLiteral("mainKey_4"));
-
-        gridLayout_6->addWidget(mainKey_4, 0, 1, 1, 1);
-
-        authorsTableMng = new QTableWidget(gridLayoutWidget_6);
-        if (authorsTableMng->columnCount() < 4)
-            authorsTableMng->setColumnCount(4);
-        QTableWidgetItem *__qtablewidgetitem6 = new QTableWidgetItem();
-        authorsTableMng->setHorizontalHeaderItem(0, __qtablewidgetitem6);
-        QTableWidgetItem *__qtablewidgetitem7 = new QTableWidgetItem();
-        authorsTableMng->setHorizontalHeaderItem(1, __qtablewidgetitem7);
-        QTableWidgetItem *__qtablewidgetitem8 = new QTableWidgetItem();
-        authorsTableMng->setHorizontalHeaderItem(2, __qtablewidgetitem8);
-        QTableWidgetItem *__qtablewidgetitem9 = new QTableWidgetItem();
-        authorsTableMng->setHorizontalHeaderItem(3, __qtablewidgetitem9);
-        authorsTableMng->setObjectName(QStringLiteral("authorsTableMng"));
-
-        gridLayout_6->addWidget(authorsTableMng, 1, 0, 1, 1);
-
-        paperKeyListMng = new QListWidget(gridLayoutWidget_6);
-        paperKeyListMng->setObjectName(QStringLiteral("paperKeyListMng"));
-
-        gridLayout_6->addWidget(paperKeyListMng, 1, 1, 1, 1);
-
-        verticalLayoutWidget_11 = new QWidget(papersTab);
-        verticalLayoutWidget_11->setObjectName(QStringLiteral("verticalLayoutWidget_11"));
-        verticalLayoutWidget_11->setGeometry(QRect(250, 190, 511, 361));
-        verticalLayout_12 = new QVBoxLayout(verticalLayoutWidget_11);
-        verticalLayout_12->setSpacing(6);
-        verticalLayout_12->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_12->setObjectName(QStringLiteral("verticalLayout_12"));
-        verticalLayout_12->setContentsMargins(0, 0, 0, 0);
-        gridLayout_7 = new QGridLayout();
-        gridLayout_7->setSpacing(6);
-        gridLayout_7->setObjectName(QStringLiteral("gridLayout_7"));
-        discussionLabel_3 = new QLabel(verticalLayoutWidget_11);
-        discussionLabel_3->setObjectName(QStringLiteral("discussionLabel_3"));
-
-        gridLayout_7->addWidget(discussionLabel_3, 0, 0, 1, 1);
-
-        discussionBody_3 = new QTextBrowser(verticalLayoutWidget_11);
-        discussionBody_3->setObjectName(QStringLiteral("discussionBody_3"));
-
-        gridLayout_7->addWidget(discussionBody_3, 1, 0, 1, 1);
-
-        verticalLayout_5 = new QVBoxLayout();
-        verticalLayout_5->setSpacing(6);
-        verticalLayout_5->setObjectName(QStringLiteral("verticalLayout_5"));
-        reviewersTable = new QTableWidget(verticalLayoutWidget_11);
-        if (reviewersTable->columnCount() < 4)
-            reviewersTable->setColumnCount(4);
-        QTableWidgetItem *__qtablewidgetitem10 = new QTableWidgetItem();
-        reviewersTable->setHorizontalHeaderItem(0, __qtablewidgetitem10);
-        QTableWidgetItem *__qtablewidgetitem11 = new QTableWidgetItem();
-        reviewersTable->setHorizontalHeaderItem(1, __qtablewidgetitem11);
-        QTableWidgetItem *__qtablewidgetitem12 = new QTableWidgetItem();
-        reviewersTable->setHorizontalHeaderItem(2, __qtablewidgetitem12);
-        QTableWidgetItem *__qtablewidgetitem13 = new QTableWidgetItem();
-        reviewersTable->setHorizontalHeaderItem(3, __qtablewidgetitem13);
-        reviewersTable->setObjectName(QStringLiteral("reviewersTable"));
-
-        verticalLayout_5->addWidget(reviewersTable);
-
-        horizontalLayout_9 = new QHBoxLayout();
-        horizontalLayout_9->setSpacing(6);
-        horizontalLayout_9->setObjectName(QStringLiteral("horizontalLayout_9"));
-        label_5 = new QLabel(verticalLayoutWidget_11);
-        label_5->setObjectName(QStringLiteral("label_5"));
-
-        horizontalLayout_9->addWidget(label_5);
-
-        toReview_2 = new QLineEdit(verticalLayoutWidget_11);
-        toReview_2->setObjectName(QStringLiteral("toReview_2"));
-
-        horizontalLayout_9->addWidget(toReview_2);
-
-        addAsReviewer_2 = new QPushButton(verticalLayoutWidget_11);
-        addAsReviewer_2->setObjectName(QStringLiteral("addAsReviewer_2"));
-
-        horizontalLayout_9->addWidget(addAsReviewer_2);
-
-
-        verticalLayout_5->addLayout(horizontalLayout_9);
-
-
-        gridLayout_7->addLayout(verticalLayout_5, 1, 1, 1, 1);
-
-        label_6 = new QLabel(verticalLayoutWidget_11);
-        label_6->setObjectName(QStringLiteral("label_6"));
-
-        gridLayout_7->addWidget(label_6, 0, 1, 1, 1);
-
-        verticalLayout_13 = new QVBoxLayout();
-        verticalLayout_13->setSpacing(6);
-        verticalLayout_13->setObjectName(QStringLiteral("verticalLayout_13"));
-        label_41 = new QLabel(verticalLayoutWidget_11);
-        label_41->setObjectName(QStringLiteral("label_41"));
-
-        verticalLayout_13->addWidget(label_41);
-
-        commentsBrowser = new QTextBrowser(verticalLayoutWidget_11);
-        commentsBrowser->setObjectName(QStringLiteral("commentsBrowser"));
-
-        verticalLayout_13->addWidget(commentsBrowser);
-
-
-        gridLayout_7->addLayout(verticalLayout_13, 2, 1, 1, 1);
-
-        formLayout = new QFormLayout();
-        formLayout->setSpacing(6);
-        formLayout->setObjectName(QStringLiteral("formLayout"));
-        formLayout->setFieldGrowthPolicy(QFormLayout::AllNonFixedFieldsGrow);
-        label_24 = new QLabel(verticalLayoutWidget_11);
-        label_24->setObjectName(QStringLiteral("label_24"));
-
-        formLayout->setWidget(0, QFormLayout::LabelRole, label_24);
-
-        overallScore = new QLabel(verticalLayoutWidget_11);
-        overallScore->setObjectName(QStringLiteral("overallScore"));
-
-        formLayout->setWidget(0, QFormLayout::FieldRole, overallScore);
-
-        label_27 = new QLabel(verticalLayoutWidget_11);
-        label_27->setObjectName(QStringLiteral("label_27"));
-
-        formLayout->setWidget(1, QFormLayout::LabelRole, label_27);
-
-        confidenceScore = new QLabel(verticalLayoutWidget_11);
-        confidenceScore->setObjectName(QStringLiteral("confidenceScore"));
-
-        formLayout->setWidget(1, QFormLayout::FieldRole, confidenceScore);
-
-        label_29 = new QLabel(verticalLayoutWidget_11);
-        label_29->setObjectName(QStringLiteral("label_29"));
-
-        formLayout->setWidget(2, QFormLayout::LabelRole, label_29);
-
-        relevanceScore = new QLabel(verticalLayoutWidget_11);
-        relevanceScore->setObjectName(QStringLiteral("relevanceScore"));
-
-        formLayout->setWidget(2, QFormLayout::FieldRole, relevanceScore);
-
-        label_31 = new QLabel(verticalLayoutWidget_11);
-        label_31->setObjectName(QStringLiteral("label_31"));
-
-        formLayout->setWidget(3, QFormLayout::LabelRole, label_31);
-
-        originalityScore = new QLabel(verticalLayoutWidget_11);
-        originalityScore->setObjectName(QStringLiteral("originalityScore"));
-
-        formLayout->setWidget(3, QFormLayout::FieldRole, originalityScore);
-
-        label_33 = new QLabel(verticalLayoutWidget_11);
-        label_33->setObjectName(QStringLiteral("label_33"));
-
-        formLayout->setWidget(4, QFormLayout::LabelRole, label_33);
-
-        significanceScore = new QLabel(verticalLayoutWidget_11);
-        significanceScore->setObjectName(QStringLiteral("significanceScore"));
-
-        formLayout->setWidget(4, QFormLayout::FieldRole, significanceScore);
-
-        label_35 = new QLabel(verticalLayoutWidget_11);
-        label_35->setObjectName(QStringLiteral("label_35"));
-
-        formLayout->setWidget(5, QFormLayout::LabelRole, label_35);
-
-        presentationScore = new QLabel(verticalLayoutWidget_11);
-        presentationScore->setObjectName(QStringLiteral("presentationScore"));
-
-        formLayout->setWidget(5, QFormLayout::FieldRole, presentationScore);
-
-        label_37 = new QLabel(verticalLayoutWidget_11);
-        label_37->setObjectName(QStringLiteral("label_37"));
-
-        formLayout->setWidget(6, QFormLayout::LabelRole, label_37);
-
-        techqualScore = new QLabel(verticalLayoutWidget_11);
-        techqualScore->setObjectName(QStringLiteral("techqualScore"));
-
-        formLayout->setWidget(6, QFormLayout::FieldRole, techqualScore);
-
-        label_39 = new QLabel(verticalLayoutWidget_11);
-        label_39->setObjectName(QStringLiteral("label_39"));
-
-        formLayout->setWidget(7, QFormLayout::LabelRole, label_39);
-
-        evaluationScore = new QLabel(verticalLayoutWidget_11);
-        evaluationScore->setObjectName(QStringLiteral("evaluationScore"));
-
-        formLayout->setWidget(7, QFormLayout::FieldRole, evaluationScore);
-
-        acceptPaper = new QPushButton(verticalLayoutWidget_11);
-        acceptPaper->setObjectName(QStringLiteral("acceptPaper"));
-
-        formLayout->setWidget(8, QFormLayout::LabelRole, acceptPaper);
-
-        rejectPaper = new QPushButton(verticalLayoutWidget_11);
-        rejectPaper->setObjectName(QStringLiteral("rejectPaper"));
-
-        formLayout->setWidget(8, QFormLayout::FieldRole, rejectPaper);
-
-
-        gridLayout_7->addLayout(formLayout, 2, 0, 1, 1);
-
-
-        verticalLayout_12->addLayout(gridLayout_7);
-
-        tabWidget->addTab(papersTab, QString());
-        tableWidget->raise();
-        gridLayoutWidget_6->raise();
-        verticalLayoutWidget_11->raise();
-        usersTab = new QWidget();
-        usersTab->setObjectName(QStringLiteral("usersTab"));
-        tableWidget_2 = new QTableWidget(usersTab);
-        if (tableWidget_2->columnCount() < 3)
-            tableWidget_2->setColumnCount(3);
-        QTableWidgetItem *__qtablewidgetitem14 = new QTableWidgetItem();
-        tableWidget_2->setHorizontalHeaderItem(0, __qtablewidgetitem14);
-        QTableWidgetItem *__qtablewidgetitem15 = new QTableWidgetItem();
-        tableWidget_2->setHorizontalHeaderItem(1, __qtablewidgetitem15);
-        QTableWidgetItem *__qtablewidgetitem16 = new QTableWidgetItem();
-        tableWidget_2->setHorizontalHeaderItem(2, __qtablewidgetitem16);
-        tableWidget_2->setObjectName(QStringLiteral("tableWidget_2"));
-        tableWidget_2->setGeometry(QRect(20, 10, 311, 531));
-        verticalLayoutWidget_6 = new QWidget(usersTab);
-        verticalLayoutWidget_6->setObjectName(QStringLiteral("verticalLayoutWidget_6"));
-        verticalLayoutWidget_6->setGeometry(QRect(370, 10, 291, 381));
-        verticalLayout_6 = new QVBoxLayout(verticalLayoutWidget_6);
-        verticalLayout_6->setSpacing(6);
-        verticalLayout_6->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_6->setObjectName(QStringLiteral("verticalLayout_6"));
-        verticalLayout_6->setContentsMargins(0, 0, 0, 0);
-        horizontalLayout_8 = new QHBoxLayout();
-        horizontalLayout_8->setSpacing(6);
-        horizontalLayout_8->setObjectName(QStringLiteral("horizontalLayout_8"));
-        username_5 = new QLabel(verticalLayoutWidget_6);
-        username_5->setObjectName(QStringLiteral("username_5"));
-
-        horizontalLayout_8->addWidget(username_5);
-
-        userid_5 = new QLabel(verticalLayoutWidget_6);
-        userid_5->setObjectName(QStringLiteral("userid_5"));
-
-        horizontalLayout_8->addWidget(userid_5);
-
-
-        verticalLayout_6->addLayout(horizontalLayout_8);
-
-        name_5 = new QLabel(verticalLayoutWidget_6);
-        name_5->setObjectName(QStringLiteral("name_5"));
-
-        verticalLayout_6->addWidget(name_5);
-
-        email_5 = new QLabel(verticalLayoutWidget_6);
-        email_5->setObjectName(QStringLiteral("email_5"));
-
-        verticalLayout_6->addWidget(email_5);
-
-        organisation_5 = new QLabel(verticalLayoutWidget_6);
-        organisation_5->setObjectName(QStringLiteral("organisation_5"));
-
-        verticalLayout_6->addWidget(organisation_5);
-
-        phone_5 = new QLabel(verticalLayoutWidget_6);
-        phone_5->setObjectName(QStringLiteral("phone_5"));
-
-        verticalLayout_6->addWidget(phone_5);
-
-        label_10 = new QLabel(verticalLayoutWidget_6);
-        label_10->setObjectName(QStringLiteral("label_10"));
-
-        verticalLayout_6->addWidget(label_10);
-
-        userKeyList = new QListWidget(verticalLayoutWidget_6);
-        userKeyList->setObjectName(QStringLiteral("userKeyList"));
-
-        verticalLayout_6->addWidget(userKeyList);
-
-        horizontalLayoutWidget_2 = new QWidget(usersTab);
-        horizontalLayoutWidget_2->setObjectName(QStringLiteral("horizontalLayoutWidget_2"));
-        horizontalLayoutWidget_2->setGeometry(QRect(370, 500, 291, 41));
-        horizontalLayout_6 = new QHBoxLayout(horizontalLayoutWidget_2);
-        horizontalLayout_6->setSpacing(6);
-        horizontalLayout_6->setContentsMargins(11, 11, 11, 11);
-        horizontalLayout_6->setObjectName(QStringLiteral("horizontalLayout_6"));
-        horizontalLayout_6->setContentsMargins(0, 0, 0, 0);
-        label_4 = new QLabel(horizontalLayoutWidget_2);
-        label_4->setObjectName(QStringLiteral("label_4"));
-
-        horizontalLayout_6->addWidget(label_4);
-
-        toReview = new QLineEdit(horizontalLayoutWidget_2);
-        toReview->setObjectName(QStringLiteral("toReview"));
-
-        horizontalLayout_6->addWidget(toReview);
-
-        addAsReviewer = new QPushButton(horizontalLayoutWidget_2);
-        addAsReviewer->setObjectName(QStringLiteral("addAsReviewer"));
-
-        horizontalLayout_6->addWidget(addAsReviewer);
-
-        verticalLayoutWidget_15 = new QWidget(usersTab);
-        verticalLayoutWidget_15->setObjectName(QStringLiteral("verticalLayoutWidget_15"));
-        verticalLayoutWidget_15->setGeometry(QRect(370, 400, 291, 101));
-        verticalLayout_17 = new QVBoxLayout(verticalLayoutWidget_15);
-        verticalLayout_17->setSpacing(6);
-        verticalLayout_17->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_17->setObjectName(QStringLiteral("verticalLayout_17"));
-        verticalLayout_17->setContentsMargins(0, 0, 0, 0);
-        horizontalLayout_23 = new QHBoxLayout();
-        horizontalLayout_23->setSpacing(6);
-        horizontalLayout_23->setObjectName(QStringLiteral("horizontalLayout_23"));
-        label_30 = new QLabel(verticalLayoutWidget_15);
-        label_30->setObjectName(QStringLiteral("label_30"));
-
-        horizontalLayout_23->addWidget(label_30);
-
-        label_28 = new QLabel(verticalLayoutWidget_15);
-        label_28->setObjectName(QStringLiteral("label_28"));
-
-        horizontalLayout_23->addWidget(label_28);
-
-
-        verticalLayout_17->addLayout(horizontalLayout_23);
-
-        horizontalLayout_24 = new QHBoxLayout();
-        horizontalLayout_24->setSpacing(6);
-        horizontalLayout_24->setObjectName(QStringLiteral("horizontalLayout_24"));
-        authoredPapers = new QListWidget(verticalLayoutWidget_15);
-        authoredPapers->setObjectName(QStringLiteral("authoredPapers"));
-
-        horizontalLayout_24->addWidget(authoredPapers);
-
-        assignedPapers = new QListWidget(verticalLayoutWidget_15);
-        assignedPapers->setObjectName(QStringLiteral("assignedPapers"));
-
-        horizontalLayout_24->addWidget(assignedPapers);
-
-
-        verticalLayout_17->addLayout(horizontalLayout_24);
-
-        tabWidget->addTab(usersTab, QString());
-        reviewTab = new QWidget();
-        reviewTab->setObjectName(QStringLiteral("reviewTab"));
-        verticalLayoutWidget_7 = new QWidget(reviewTab);
-        verticalLayoutWidget_7->setObjectName(QStringLiteral("verticalLayoutWidget_7"));
-        verticalLayoutWidget_7->setGeometry(QRect(10, 150, 761, 401));
-        verticalLayout_7 = new QVBoxLayout(verticalLayoutWidget_7);
-        verticalLayout_7->setSpacing(6);
-        verticalLayout_7->setContentsMargins(11, 11, 11, 11);
-        verticalLayout_7->setObjectName(QStringLiteral("verticalLayout_7"));
-        verticalLayout_7->setContentsMargins(0, 0, 0, 0);
-        horizontalLayout_11 = new QHBoxLayout();
-        horizontalLayout_11->setSpacing(6);
-        horizontalLayout_11->setObjectName(QStringLiteral("horizontalLayout_11"));
-        label_11 = new QLabel(verticalLayoutWidget_7);
-        label_11->setObjectName(QStringLiteral("label_11"));
-
-        horizontalLayout_11->addWidget(label_11);
-
-        overall = new QSpinBox(verticalLayoutWidget_7);
-        overall->setObjectName(QStringLiteral("overall"));
-
-        horizontalLayout_11->addWidget(overall);
-
-        label_12 = new QLabel(verticalLayoutWidget_7);
-        label_12->setObjectName(QStringLiteral("label_12"));
-
-        horizontalLayout_11->addWidget(label_12);
-
-        confidence = new QSpinBox(verticalLayoutWidget_7);
-        confidence->setObjectName(QStringLiteral("confidence"));
-
-        horizontalLayout_11->addWidget(confidence);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_11);
-
-        horizontalLayout_12 = new QHBoxLayout();
-        horizontalLayout_12->setSpacing(6);
-        horizontalLayout_12->setObjectName(QStringLiteral("horizontalLayout_12"));
-        label_13 = new QLabel(verticalLayoutWidget_7);
-        label_13->setObjectName(QStringLiteral("label_13"));
-
-        horizontalLayout_12->addWidget(label_13);
-
-        relevance = new QSpinBox(verticalLayoutWidget_7);
-        relevance->setObjectName(QStringLiteral("relevance"));
-
-        horizontalLayout_12->addWidget(relevance);
-
-        label_14 = new QLabel(verticalLayoutWidget_7);
-        label_14->setObjectName(QStringLiteral("label_14"));
-
-        horizontalLayout_12->addWidget(label_14);
-
-        originality = new QSpinBox(verticalLayoutWidget_7);
-        originality->setObjectName(QStringLiteral("originality"));
-
-        horizontalLayout_12->addWidget(originality);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_12);
-
-        horizontalLayout_13 = new QHBoxLayout();
-        horizontalLayout_13->setSpacing(6);
-        horizontalLayout_13->setObjectName(QStringLiteral("horizontalLayout_13"));
-        label_15 = new QLabel(verticalLayoutWidget_7);
-        label_15->setObjectName(QStringLiteral("label_15"));
-
-        horizontalLayout_13->addWidget(label_15);
-
-        significance = new QSpinBox(verticalLayoutWidget_7);
-        significance->setObjectName(QStringLiteral("significance"));
-
-        horizontalLayout_13->addWidget(significance);
-
-        label_16 = new QLabel(verticalLayoutWidget_7);
-        label_16->setObjectName(QStringLiteral("label_16"));
-
-        horizontalLayout_13->addWidget(label_16);
-
-        spinBox_8 = new QSpinBox(verticalLayoutWidget_7);
-        spinBox_8->setObjectName(QStringLiteral("spinBox_8"));
-
-        horizontalLayout_13->addWidget(spinBox_8);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_13);
-
-        horizontalLayout_14 = new QHBoxLayout();
-        horizontalLayout_14->setSpacing(6);
-        horizontalLayout_14->setObjectName(QStringLiteral("horizontalLayout_14"));
-        label_17 = new QLabel(verticalLayoutWidget_7);
-        label_17->setObjectName(QStringLiteral("label_17"));
-
-        horizontalLayout_14->addWidget(label_17);
-
-        techQuality = new QSpinBox(verticalLayoutWidget_7);
-        techQuality->setObjectName(QStringLiteral("techQuality"));
-
-        horizontalLayout_14->addWidget(techQuality);
-
-        label_18 = new QLabel(verticalLayoutWidget_7);
-        label_18->setObjectName(QStringLiteral("label_18"));
-
-        horizontalLayout_14->addWidget(label_18);
-
-        evaluation = new QSpinBox(verticalLayoutWidget_7);
-        evaluation->setObjectName(QStringLiteral("evaluation"));
-
-        horizontalLayout_14->addWidget(evaluation);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_14);
-
-        horizontalLayout_15 = new QHBoxLayout();
-        horizontalLayout_15->setSpacing(6);
-        horizontalLayout_15->setObjectName(QStringLiteral("horizontalLayout_15"));
-        label_19 = new QLabel(verticalLayoutWidget_7);
-        label_19->setObjectName(QStringLiteral("label_19"));
-
-        horizontalLayout_15->addWidget(label_19);
-
-        label_20 = new QLabel(verticalLayoutWidget_7);
-        label_20->setObjectName(QStringLiteral("label_20"));
-
-        horizontalLayout_15->addWidget(label_20);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_15);
-
-        horizontalLayout_16 = new QHBoxLayout();
-        horizontalLayout_16->setSpacing(6);
-        horizontalLayout_16->setObjectName(QStringLiteral("horizontalLayout_16"));
-        commentsStrengths = new QTextEdit(verticalLayoutWidget_7);
-        commentsStrengths->setObjectName(QStringLiteral("commentsStrengths"));
-
-        horizontalLayout_16->addWidget(commentsStrengths);
-
-        commentsWeaknesses = new QTextEdit(verticalLayoutWidget_7);
-        commentsWeaknesses->setObjectName(QStringLiteral("commentsWeaknesses"));
-
-        horizontalLayout_16->addWidget(commentsWeaknesses);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_16);
-
-        horizontalLayout_17 = new QHBoxLayout();
-        horizontalLayout_17->setSpacing(6);
-        horizontalLayout_17->setObjectName(QStringLiteral("horizontalLayout_17"));
-        label_21 = new QLabel(verticalLayoutWidget_7);
-        label_21->setObjectName(QStringLiteral("label_21"));
-
-        horizontalLayout_17->addWidget(label_21);
-
-        label_22 = new QLabel(verticalLayoutWidget_7);
-        label_22->setObjectName(QStringLiteral("label_22"));
-
-        horizontalLayout_17->addWidget(label_22);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_17);
-
-        horizontalLayout_18 = new QHBoxLayout();
-        horizontalLayout_18->setSpacing(6);
-        horizontalLayout_18->setObjectName(QStringLiteral("horizontalLayout_18"));
-        commentsShortPaper = new QTextEdit(verticalLayoutWidget_7);
-        commentsShortPaper->setObjectName(QStringLiteral("commentsShortPaper"));
-
-        horizontalLayout_18->addWidget(commentsShortPaper);
-
-        commentsBestAward = new QTextEdit(verticalLayoutWidget_7);
-        commentsBestAward->setObjectName(QStringLiteral("commentsBestAward"));
-
-        horizontalLayout_18->addWidget(commentsBestAward);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_18);
-
-        horizontalLayout_19 = new QHBoxLayout();
-        horizontalLayout_19->setSpacing(6);
-        horizontalLayout_19->setObjectName(QStringLiteral("horizontalLayout_19"));
-        label_23 = new QLabel(verticalLayoutWidget_7);
-        label_23->setObjectName(QStringLiteral("label_23"));
-
-        horizontalLayout_19->addWidget(label_23);
-
-        commentsSuggestions = new QTextEdit(verticalLayoutWidget_7);
-        commentsSuggestions->setObjectName(QStringLiteral("commentsSuggestions"));
-
-        horizontalLayout_19->addWidget(commentsSuggestions);
-
-
-        verticalLayout_7->addLayout(horizontalLayout_19);
-
-        gridLayoutWidget = new QWidget(reviewTab);
-        gridLayoutWidget->setObjectName(QStringLiteral("gridLayoutWidget"));
-        gridLayoutWidget->setGeometry(QRect(10, 20, 761, 128));
-        gridLayout = new QGridLayout(gridLayoutWidget);
-        gridLayout->setSpacing(6);
-        gridLayout->setContentsMargins(11, 11, 11, 11);
-        gridLayout->setObjectName(QStringLiteral("gridLayout"));
-        gridLayout->setContentsMargins(0, 0, 0, 0);
-        mainKey = new QLabel(gridLayoutWidget);
-        mainKey->setObjectName(QStringLiteral("mainKey"));
-
-        gridLayout->addWidget(mainKey, 1, 0, 1, 1);
-
-        fileName = new QLabel(gridLayoutWidget);
-        fileName->setObjectName(QStringLiteral("fileName"));
-
-        gridLayout->addWidget(fileName, 2, 0, 1, 1);
-
-        textBrowser = new QTextBrowser(gridLayoutWidget);
-        textBrowser->setObjectName(QStringLiteral("textBrowser"));
-
-        gridLayout->addWidget(textBrowser, 1, 1, 1, 1);
-
-        download = new QPushButton(gridLayoutWidget);
-        download->setObjectName(QStringLiteral("download"));
-
-        gridLayout->addWidget(download, 2, 1, 1, 1);
-
-        paperName = new QLabel(gridLayoutWidget);
-        paperName->setObjectName(QStringLiteral("paperName"));
-
-        gridLayout->addWidget(paperName, 0, 1, 1, 1);
-
-        selectPaperReview = new QComboBox(gridLayoutWidget);
-        selectPaperReview->setObjectName(QStringLiteral("selectPaperReview"));
-
-        gridLayout->addWidget(selectPaperReview, 0, 0, 1, 1);
-
-        tabWidget->addTab(reviewTab, QString());
-        MainWindow->setCentralWidget(centralWidget);
-
-        retranslateUi(MainWindow);
-
-        tabWidget->setCurrentIndex(3);
-
-
-        QMetaObject::connectSlotsByName(MainWindow);
-    } // setupUi
-
-    void retranslateUi(QMainWindow *MainWindow)
-    {
-        MainWindow->setWindowTitle(QApplication::translate("MainWindow", "MainWindow", 0));
-        label_7->setText(QApplication::translate("MainWindow", "Conference Management System", 0));
-        label_9->setText(QApplication::translate("MainWindow", "UserName", 0));
-        label_8->setText(QApplication::translate("MainWindow", "Password", 0));
-        login->setText(QApplication::translate("MainWindow", "Login", 0));
-        createAccount->setText(QApplication::translate("MainWindow", "Create Account", 0));
-        quit->setText(QApplication::translate("MainWindow", "Quit", 0));
-        tabWidget->setTabText(tabWidget->indexOf(loginTab), QApplication::translate("MainWindow", "Login", 0));
-        username->setText(QApplication::translate("MainWindow", "USERNAME", 0));
-        userid->setText(QApplication::translate("MainWindow", "USERID", 0));
-        name->setText(QApplication::translate("MainWindow", "NAME", 0));
-        email->setText(QApplication::translate("MainWindow", "EMAIL", 0));
-        organisation->setText(QApplication::translate("MainWindow", "ORGANISATION", 0));
-        phone->setText(QApplication::translate("MainWindow", "PHONE", 0));
-        label->setText(QApplication::translate("MainWindow", "Keywords", 0));
-        addAuthKey->setText(QApplication::translate("MainWindow", "Add Keyword", 0));
-        rmvAuthKey->setText(QApplication::translate("MainWindow", "Remove Keyword", 0));
-        apply->setText(QApplication::translate("MainWindow", "Apply", 0));
-        logout->setText(QApplication::translate("MainWindow", "Logout", 0));
-        conferenceName->setText(QApplication::translate("MainWindow", "CONFERENCENAME", 0));
-        label_2->setText(QApplication::translate("MainWindow", "CONFERENCETOPIC", 0));
-        label_3->setText(QApplication::translate("MainWindow", "CONFERENCELOCATION", 0));
-        label_26->setText(QApplication::translate("MainWindow", "Keywords", 0));
-        textBrowser_2->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">CONFERENCE DESCRIPTION</span></p></body></html>", 0));
-        tabWidget->setTabText(tabWidget->indexOf(infoTabAuthor), QApplication::translate("MainWindow", "Information", 0));
-        username_2->setText(QApplication::translate("MainWindow", "USERNAME", 0));
-        userid_2->setText(QApplication::translate("MainWindow", "USERID", 0));
-        name_2->setText(QApplication::translate("MainWindow", "NAME", 0));
-        email_2->setText(QApplication::translate("MainWindow", "EMAIL", 0));
-        organisation_2->setText(QApplication::translate("MainWindow", "ORGANISATION", 0));
-        phone_2->setText(QApplication::translate("MainWindow", "PHONE", 0));
-        apply_2->setText(QApplication::translate("MainWindow", "Apply", 0));
-        logout_2->setText(QApplication::translate("MainWindow", "Logout", 0));
-        lineEdit->setText(QApplication::translate("MainWindow", "CONFERENCE NAME", 0));
-        lineEdit_2->setText(QApplication::translate("MainWindow", "CONFERENCE TOPIC", 0));
-        lineEdit_3->setText(QApplication::translate("MainWindow", "CONFERENCE LOCATION", 0));
-        textEdit_2->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">CONFERENCE DESCRIPTION</span></p></body></html>", 0));
-        label_25->setText(QApplication::translate("MainWindow", "Keywords", 0));
-        addConfKey->setText(QApplication::translate("MainWindow", "Add Keyword", 0));
-        rmvConfKey->setText(QApplication::translate("MainWindow", "Remove Keyword", 0));
-        tabWidget->setTabText(tabWidget->indexOf(infoTabChair), QApplication::translate("MainWindow", "Information", 0));
-        QTableWidgetItem *___qtablewidgetitem = authorsTable->horizontalHeaderItem(0);
-        ___qtablewidgetitem->setText(QApplication::translate("MainWindow", "Name", 0));
-        QTableWidgetItem *___qtablewidgetitem1 = authorsTable->horizontalHeaderItem(1);
-        ___qtablewidgetitem1->setText(QApplication::translate("MainWindow", "Email", 0));
-        QTableWidgetItem *___qtablewidgetitem2 = authorsTable->horizontalHeaderItem(2);
-        ___qtablewidgetitem2->setText(QApplication::translate("MainWindow", "Org", 0));
-        QTableWidgetItem *___qtablewidgetitem3 = authorsTable->horizontalHeaderItem(3);
-        ___qtablewidgetitem3->setText(QApplication::translate("MainWindow", "Phone", 0));
-        selectPaperAuthor->clear();
-        selectPaperAuthor->insertItems(0, QStringList()
-         << QApplication::translate("MainWindow", "*NEW*", 0)
-        );
-        paperAbstract->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">ABSTRACT</span></p></body></html>", 0));
-        addPaperKey->setText(QApplication::translate("MainWindow", "Add Key", 0));
-        rmvPaperKey->setText(QApplication::translate("MainWindow", "Remove Key", 0));
-        addAuthor->setText(QApplication::translate("MainWindow", "Add Author", 0));
-        rmvAuthor->setText(QApplication::translate("MainWindow", "Remove Author", 0));
-        filename->setText(QApplication::translate("MainWindow", "FILENAME", 0));
-        selectFile->setText(QApplication::translate("MainWindow", "Select File", 0));
-        submit->setText(QApplication::translate("MainWindow", "Submit", 0));
-        tabWidget->setTabText(tabWidget->indexOf(authorTab), QApplication::translate("MainWindow", "Author", 0));
-        discussionLabel_2->setText(QApplication::translate("MainWindow", "Discussion", 0));
-        submitPosts->setText(QApplication::translate("MainWindow", "Submit Post", 0));
-        postBody->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">POST INPUT</span></p></body></html>", 0));
-        discussionBody_2->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">DISCUSSION POSTS</span></p></body></html>", 0));
-        bidlabel->setText(QApplication::translate("MainWindow", "Bid:", 0));
-        submitBid->setText(QApplication::translate("MainWindow", "Submit Bid", 0));
-        paperName_3->setText(QApplication::translate("MainWindow", "PAPERNAME", 0));
-        mainKey_3->setText(QApplication::translate("MainWindow", "MAINKEY", 0));
-        fileName_2->setText(QApplication::translate("MainWindow", "FILENAME", 0));
-        download_2->setText(QApplication::translate("MainWindow", "Download", 0));
-        tabWidget->setTabText(tabWidget->indexOf(reviewerTab), QApplication::translate("MainWindow", "Reviewer", 0));
-        QTableWidgetItem *___qtablewidgetitem4 = tableWidget->horizontalHeaderItem(0);
-        ___qtablewidgetitem4->setText(QApplication::translate("MainWindow", "Title", 0));
-        paperName_4->setText(QApplication::translate("MainWindow", "PAPERNAME", 0));
-        fileName_3->setText(QApplication::translate("MainWindow", "FILENAME", 0));
-        download_3->setText(QApplication::translate("MainWindow", "Download", 0));
-        mainKey_4->setText(QApplication::translate("MainWindow", "MAINKEY", 0));
-        QTableWidgetItem *___qtablewidgetitem5 = authorsTableMng->horizontalHeaderItem(0);
-        ___qtablewidgetitem5->setText(QApplication::translate("MainWindow", "Name", 0));
-        QTableWidgetItem *___qtablewidgetitem6 = authorsTableMng->horizontalHeaderItem(1);
-        ___qtablewidgetitem6->setText(QApplication::translate("MainWindow", "Email", 0));
-        QTableWidgetItem *___qtablewidgetitem7 = authorsTableMng->horizontalHeaderItem(2);
-        ___qtablewidgetitem7->setText(QApplication::translate("MainWindow", "Org", 0));
-        QTableWidgetItem *___qtablewidgetitem8 = authorsTableMng->horizontalHeaderItem(3);
-        ___qtablewidgetitem8->setText(QApplication::translate("MainWindow", "Phone", 0));
-        discussionLabel_3->setText(QApplication::translate("MainWindow", "Discussion", 0));
-        discussionBody_3->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">DISCUSSION POSTS</span></p></body></html>", 0));
-        QTableWidgetItem *___qtablewidgetitem9 = reviewersTable->horizontalHeaderItem(0);
-        ___qtablewidgetitem9->setText(QApplication::translate("MainWindow", "Name", 0));
-        QTableWidgetItem *___qtablewidgetitem10 = reviewersTable->horizontalHeaderItem(1);
-        ___qtablewidgetitem10->setText(QApplication::translate("MainWindow", "Email", 0));
-        QTableWidgetItem *___qtablewidgetitem11 = reviewersTable->horizontalHeaderItem(2);
-        ___qtablewidgetitem11->setText(QApplication::translate("MainWindow", "Org", 0));
-        QTableWidgetItem *___qtablewidgetitem12 = reviewersTable->horizontalHeaderItem(3);
-        ___qtablewidgetitem12->setText(QApplication::translate("MainWindow", "Phone", 0));
-        label_5->setText(QApplication::translate("MainWindow", "User:", 0));
-        addAsReviewer_2->setText(QApplication::translate("MainWindow", "Add as Reviewer", 0));
-        label_6->setText(QApplication::translate("MainWindow", "Reviewers", 0));
-        label_41->setText(QApplication::translate("MainWindow", "Comments", 0));
-        label_24->setText(QApplication::translate("MainWindow", "Overall", 0));
-        overallScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_27->setText(QApplication::translate("MainWindow", "Confidence", 0));
-        confidenceScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_29->setText(QApplication::translate("MainWindow", "Relevance", 0));
-        relevanceScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_31->setText(QApplication::translate("MainWindow", "Originality", 0));
-        originalityScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_33->setText(QApplication::translate("MainWindow", "Significance", 0));
-        significanceScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_35->setText(QApplication::translate("MainWindow", "Presentation", 0));
-        presentationScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_37->setText(QApplication::translate("MainWindow", "Technical Quality", 0));
-        techqualScore->setText(QApplication::translate("MainWindow", "-", 0));
-        label_39->setText(QApplication::translate("MainWindow", "Evaluation", 0));
-        evaluationScore->setText(QApplication::translate("MainWindow", "-", 0));
-        acceptPaper->setText(QApplication::translate("MainWindow", "Accept Paper", 0));
-        rejectPaper->setText(QApplication::translate("MainWindow", "Reject Paper", 0));
-        tabWidget->setTabText(tabWidget->indexOf(papersTab), QApplication::translate("MainWindow", "Paper Management", 0));
-        QTableWidgetItem *___qtablewidgetitem13 = tableWidget_2->horizontalHeaderItem(0);
-        ___qtablewidgetitem13->setText(QApplication::translate("MainWindow", "Name", 0));
-        QTableWidgetItem *___qtablewidgetitem14 = tableWidget_2->horizontalHeaderItem(1);
-        ___qtablewidgetitem14->setText(QApplication::translate("MainWindow", "User Name", 0));
-        QTableWidgetItem *___qtablewidgetitem15 = tableWidget_2->horizontalHeaderItem(2);
-        ___qtablewidgetitem15->setText(QApplication::translate("MainWindow", "id", 0));
-        username_5->setText(QApplication::translate("MainWindow", "USERNAME", 0));
-        userid_5->setText(QApplication::translate("MainWindow", "USERID", 0));
-        name_5->setText(QApplication::translate("MainWindow", "NAME", 0));
-        email_5->setText(QApplication::translate("MainWindow", "EMAIL", 0));
-        organisation_5->setText(QApplication::translate("MainWindow", "ORGANISATION", 0));
-        phone_5->setText(QApplication::translate("MainWindow", "PHONE", 0));
-        label_10->setText(QApplication::translate("MainWindow", "Keywords", 0));
-        label_4->setText(QApplication::translate("MainWindow", "Paper:", 0));
-        addAsReviewer->setText(QApplication::translate("MainWindow", "Add to Review", 0));
-        label_30->setText(QApplication::translate("MainWindow", "Authored Papers", 0));
-        label_28->setText(QApplication::translate("MainWindow", "Assigned to Review", 0));
-        tabWidget->setTabText(tabWidget->indexOf(usersTab), QApplication::translate("MainWindow", "User Management", 0));
-        label_11->setText(QApplication::translate("MainWindow", "Overall", 0));
-        label_12->setText(QApplication::translate("MainWindow", "Confidence", 0));
-        label_13->setText(QApplication::translate("MainWindow", "Relevance", 0));
-        label_14->setText(QApplication::translate("MainWindow", "Originality", 0));
-        label_15->setText(QApplication::translate("MainWindow", "Significance", 0));
-        label_16->setText(QApplication::translate("MainWindow", "Presentation", 0));
-        label_17->setText(QApplication::translate("MainWindow", "Technical Quality", 0));
-        label_18->setText(QApplication::translate("MainWindow", "Evaluation", 0));
-        label_19->setText(QApplication::translate("MainWindow", "Strengths of the paper", 0));
-        label_20->setText(QApplication::translate("MainWindow", "Weaknesses of the paper", 0));
-        label_21->setText(QApplication::translate("MainWindow", "Would this paper be suitable as a short paper?", 0));
-        label_22->setText(QApplication::translate("MainWindow", "Should this paper be considered for a best paper award?", 0));
-        label_23->setText(QApplication::translate("MainWindow", "Detailed comments and suggestions", 0));
-        commentsSuggestions->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;\"><br /></p></body></html>", 0));
-        mainKey->setText(QApplication::translate("MainWindow", "MAINKEY", 0));
-        fileName->setText(QApplication::translate("MainWindow", "FILENAME", 0));
-        textBrowser->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
-"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
-"p, li { white-space: pre-wrap; }\n"
-"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">KEYWORDS</span></p>\n"
-"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">SEMI COLON DELIMITED</span></p></body></html>", 0));
-        download->setText(QApplication::translate("MainWindow", "Download", 0));
-        paperName->setText(QApplication::translate("MainWindow", "PAPERNAME", 0));
-        tabWidget->setTabText(tabWidget->indexOf(reviewTab), QApplication::translate("MainWindow", "Review", 0));
-    } // retranslateUi
-
-};
-
-namespace Ui {
-    class MainWindow: public Ui_MainWindow {};
-} // namespace Ui
-
-QT_END_NAMESPACE
-
-#endif // UI_MAINWINDOW_H

commit ae695676143a2d8b2c7f751857fcb263f9d66b43
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:40:47 2014 +1100

    Takes Database pointer

diff --git a/Algorithm/Algo b/Algorithm/Algo
index c8c9330..bd2b87f 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -31,10 +31,11 @@ struct ReviewerBid
 class PaperForReview
 {
 	private:
-		PapersForReview(int, int, int);
+		PapersForReview(int, int, int,Database*);
 		~PapersForReview();
 		int paperID;
 		int conferenceID;
+		Database* db;
 		
 		std::vector<ReviewerBid> reviewerBids;
 		
@@ -111,10 +112,11 @@ PaperForReview::~PaperForReview()
 
 }
 
-PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers)
+PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers, Database* database)
 {
 	paperID = newPaperID
 	conferenceID = confID;
+	db = database;
 	
 	numOfReqReviewrs = numReviewers;
 	

commit 55a5b4f814cc92d0f5ebff9b7c5df47853d584dd
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:40:20 2014 +1100

    Delete DiscussionPost.hpp

diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
deleted file mode 100644
index 6aee447..0000000
--- a/AdminClient/DiscussionPost.hpp
+++ /dev/null
@@ -1,17 +0,0 @@
-#ifndef DISCUSSION_POST_H
-#define DISCUSSION_POST_H
-#include <string>
-
-struct DiscussionPost {
-  DiscussionPost(const std::string& icomment,
-                 int ireviewerID,
-                 int ipostID):
-                 comment(icomment),
-                 reviewerID(ireviewerID),
-                 postID(ipostID)
-                 { }
-  std::string comment{""};
-  int reviewerID{0};
-  int postID{0};
-};
-#endif

commit c927a142191aea6967365fb45dcc12dd2a6ed540
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:40:17 2014 +1100

    Delete DiscussionPost.hpp

diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
deleted file mode 100644
index 6583c98..0000000
--- a/UserClient/DiscussionPost.hpp
+++ /dev/null
@@ -1,15 +0,0 @@
-#ifndef DISCUSSION_POST_H
-#define DISCUSSION_POST_H
-
-#include <string>
-
-struct DiscussionPost {
-  DiscussionPost(const std::string& icomment,
-                 int ireviewerID):
-                 comment(icomment),
-                 reviewerID(ireviewerID)
-                 { }
-  std::string comment{""};
-  int reviewerID{0};
-};
-#endif

commit 1f236f11272ba32f2046350c617bc92a2e8678d9
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:40:15 2014 +1100

    Delete DiscussionPost.hpp

diff --git a/Server/DiscussionPost.hpp b/Server/DiscussionPost.hpp
deleted file mode 100644
index 6aee447..0000000
--- a/Server/DiscussionPost.hpp
+++ /dev/null
@@ -1,17 +0,0 @@
-#ifndef DISCUSSION_POST_H
-#define DISCUSSION_POST_H
-#include <string>
-
-struct DiscussionPost {
-  DiscussionPost(const std::string& icomment,
-                 int ireviewerID,
-                 int ipostID):
-                 comment(icomment),
-                 reviewerID(ireviewerID),
-                 postID(ipostID)
-                 { }
-  std::string comment{""};
-  int reviewerID{0};
-  int postID{0};
-};
-#endif

commit 01b42da20b607412eebc7b011d866e1c8ab23597
Merge: e411627 14e6eb5
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:17:22 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit e41162720e5b9057f52924a3c452d4b9eb08af37
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:17:13 2014 +1100

    updated Database.cpp to compile

diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
index 5943341..f8d302a 100644
--- a/DataAll/PersonalInfo.hpp
+++ b/DataAll/PersonalInfo.hpp
@@ -1,5 +1,5 @@
-#ifndef USER_H
-#define USER_H
+#ifndef PERSONAL_INFO_H 
+#define PERSONAL_INFO_H
 
 #include <string>
 #include <vector>
@@ -13,14 +13,12 @@ struct PersonalInfo {
          std::string& iemail,
          std::string& iorganisation,
          std::string& iphone,
-         std::string& ipassword,
-         int iinfoID,
+         int iinfoID
          ):
          name(iname),
          email(iemail),
          organisation(iorganisation),
          phone(iphone),
-         password(ipassword),
          infoID(iinfoID)
          { }
 
@@ -29,13 +27,12 @@ struct PersonalInfo {
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
-         const std::string& ipassword,
+         const std::string& ipassword
          ):
          name(iname),
          email(iemail),
          organisation(iorganisation),
-         phone(iphone),
-         password(ipassword),
+         phone(iphone)
          { }
   int infoID{0};
   std::string name{""};
diff --git a/Database/Database.cpp b/Database/Database.cpp
index 1f7fe5d..68a346d 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -964,7 +964,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 
 	rs = pstmt->executeQuery();
 
-	bool haveRecord = rs->next();
+	haveRecord = rs->next();
 	if (!haveRecord)
 	{
 		delete rs;
@@ -1007,7 +1007,7 @@ Paper Database::fetchPaper(int key) throw (const char*)
 		std::string email = rs->getString(4);
 		std::string organisation = rs->getString(5);
 		std::string phone = rs->getString(6);
-		PersonalInfo pInfo(infoId, name, email, organisation, phone);
+		PersonalInfo pInfo(name, email, organisation, phone, infoID);
                 authors.push_back(pInfo);
         }
 
@@ -1016,29 +1016,29 @@ Paper Database::fetchPaper(int key) throw (const char*)
 
 
 
-        Conference conf(
-		isActive,
-		title,
-		confID,
-		topic,
-		description,
-		location,
-		vec,
-		isBeforePaperDeadline,
-		paperDeadline,
-		isBeforeAllocationDate,
-		allocationDate,
-		isBeforeSoftReviewDeadline,
-		reviewDeadlineSoft,
-		isBeforeHardReviewDeadline,
-		reviewDeadlineHard,
-		isBeforeDiscussDeadline,
-		discussDeadline,
-		reviewersPerPaper,
-		postWordLimit
-		);
-	
-	return conf;
+//        Conference conf(
+//		isActive,
+//		title,
+//		confID,
+//		topic,
+//		description,
+//		location,
+//		vec,
+//		isBeforePaperDeadline,
+//		paperDeadline,
+//		isBeforeAllocationDate,
+//		allocationDate,
+//		isBeforeSoftReviewDeadline,
+//		reviewDeadlineSoft,
+//		isBeforeHardReviewDeadline,
+//		reviewDeadlineHard,
+//		isBeforeDiscussDeadline,
+//		discussDeadline,
+//		reviewersPerPaper,
+//		postWordLimit
+//		);
+//	
+//	return conf;
 }
 
 
diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index 6a588c8..7bda436 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -5,6 +5,7 @@
 #include "../DataAll/Discussion.hpp"
 #include "Review.hpp"
 #include "User.hpp"
+#include "../DataAll/PersonalInfo.hpp"
 
 #include <vector>
 
@@ -16,7 +17,7 @@ struct Paper {
       const int ileadAuthorID,
       const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<std::string>& iauthors,
+      const std::vector<PersonalInfo>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& iconfKeyword,
       const std::vector<Review>& ireviews,
@@ -39,9 +40,9 @@ struct Paper {
     int leadAuthorID{0};
     std::string title{""};
     std::string abstract{""};
-    std::vector<User> authors;
+    std::vector<PersonalInfo> authors;
     std::vector<std::string> keywords;
-    std::string confKeyword
+    std::string confKeyword;
 
     Discussion discussion;
     std::vector<Review> reviews;

commit 14e6eb5bf5a21c2b40efce1bb692224161d2573d
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:10:45 2014 +1100

    Create DiscussionPost.hpp

diff --git a/DataAll/DiscussionPost.hpp b/DataAll/DiscussionPost.hpp
new file mode 100644
index 0000000..6aee447
--- /dev/null
+++ b/DataAll/DiscussionPost.hpp
@@ -0,0 +1,17 @@
+#ifndef DISCUSSION_POST_H
+#define DISCUSSION_POST_H
+#include <string>
+
+struct DiscussionPost {
+  DiscussionPost(const std::string& icomment,
+                 int ireviewerID,
+                 int ipostID):
+                 comment(icomment),
+                 reviewerID(ireviewerID),
+                 postID(ipostID)
+                 { }
+  std::string comment{""};
+  int reviewerID{0};
+  int postID{0};
+};
+#endif

commit 944381d47facd728fc3b5137ffa5eccb45df502a
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 19:04:01 2014 +1100

    moved common data to DataAll and updated references

diff --git a/Database/Database.hpp b/Database/Database.hpp
index d0ea3d3..c977862 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -8,7 +8,7 @@
 #include "../DataAll/Date.hpp"
 #include "../DataAll/PersonalInfo.hpp"
 #include "../Server/Paper.hpp"
-#include "../Server/PaperSummary.hpp"
+#include "../DataAll/PaperSummary.hpp"
 
 class Database {
 public:
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index c075a5d..ec1022a 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -2,7 +2,7 @@
 #define AUTHOR_H
 
 #include "Paper.hpp"
-#include "PaperSummary.hpp"
+#include "../DataAll/PaperSummary.hpp"
 #include "User.hpp"
 
 #include <vector>
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 3363398..78707ac 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -2,7 +2,7 @@
 #define P_C_CHAIR_H
 
 #include "Paper.hpp"
-#include "PaperSummary.hpp"
+#include "../DataAll/PaperSummary.hpp"
 #include "User.hpp"
 #include "../DataAll/Conference.hpp" // for activeConference memeber variable
 
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index fc8c2b6..d490f63 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -2,7 +2,7 @@
 #define REVIEWER_H
 
 #include "Author.hpp"
-#include "PaperSummary.hpp"
+#include "../DataAll/PaperSummary.hpp"
 #include "Review.hpp"
 
 class Reviewer : public Author {

commit 9c3b0863dfa155c5e4003e5ccdc40bc33bed8d28
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 19:02:16 2014 +1100

    Update Discussion.hpp

diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
index 541d728..a71b8d7 100644
--- a/DataAll/Discussion.hpp
+++ b/DataAll/Discussion.hpp
@@ -1,7 +1,7 @@
 #ifndef DISCUSSION_H
 #define DISCUSSION_H
 
-#include "DiscussionPost.hpp"
+#include "../Server/DiscussionPost.hpp"
 
 #include <list>
 

commit 9ae7899d29959f3c113644fc53eceb066cc91c97
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:01:12 2014 +1100

    Delete PaperSummary.hpp

diff --git a/Server/PaperSummary.hpp b/Server/PaperSummary.hpp
deleted file mode 100644
index 69f2420..0000000
--- a/Server/PaperSummary.hpp
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef PAPER_SUMMARY_H
-#define PAPER_SUMMARY_H
-
-#include <string>
-
-struct PaperSummary {
-	PaperSummary() {}
-
-	PaperSummary(int ipaperId, const std::string& ipaperName) :
-	paperId(ipaperId), paperName(ipaperName)
-	{ }
-
-	int paperId{0};
-	std::string paperName{""};
-};
-#endif

commit b48266fe6130a50e26e1acde7c800c4fa4b72bc6
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 19:01:05 2014 +1100

    Delete PaperSummary.hpp

diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
deleted file mode 100644
index 8e474f6..0000000
--- a/UserClient/PaperSummary.hpp
+++ /dev/null
@@ -1,14 +0,0 @@
-#ifndef PAPER_SUMMARY_H
-#define PAPER_SUMMARY_H
-
-#include <string>
-
-struct PaperSummary {
-  PaperSummary(int ipaperID, const std::string& ipaperName) :
-              paperID(ipaperID), paperName(ipaperName)
-              { }
-  int paperID{0};
-  std::string paperName{""};
-};
-
-#endif

commit b3148390d15e29667ccfa30eed3fd22b0f85a2c6
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 18:59:50 2014 +1100

    Create PaperSummary.hpp

diff --git a/DataAll/PaperSummary.hpp b/DataAll/PaperSummary.hpp
new file mode 100644
index 0000000..69f2420
--- /dev/null
+++ b/DataAll/PaperSummary.hpp
@@ -0,0 +1,16 @@
+#ifndef PAPER_SUMMARY_H
+#define PAPER_SUMMARY_H
+
+#include <string>
+
+struct PaperSummary {
+	PaperSummary() {}
+
+	PaperSummary(int ipaperId, const std::string& ipaperName) :
+	paperId(ipaperId), paperName(ipaperName)
+	{ }
+
+	int paperId{0};
+	std::string paperName{""};
+};
+#endif

commit f5ad26ec1536f33547bfbe6cdf397e6442074714
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 18:57:56 2014 +1100

    moved common data to DataAll and updated references

diff --git a/AdminClient/Discussion.hpp b/AdminClient/Discussion.hpp
deleted file mode 100644
index 10a765e..0000000
--- a/AdminClient/Discussion.hpp
+++ /dev/null
@@ -1,18 +0,0 @@
-
-#ifndef DISCUSSION_H
-#define DISCUSSION_H
-#include "DiscussionPost.hpp"
-
-#include <list>
-
-struct Discussion {
-  Discussion() { }
-  Discussion(const std::list<DiscussionPost>& idiscussion):
-               discussion(idiscussion)
-               { }
-    Discussion(const Discussion& in) {
-    discussion = in.discussion;
-  }
-  std::list<DiscussionPost> discussion;
-};
-#endif
diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index b1a83a6..a684d29 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -2,7 +2,7 @@
 #ifndef PAPER_H
 #define PAPER_H
 
-#include "Discussion.hpp"
+#include "../DataAll/Discussion.hpp"
 #include "Review.hpp"
 #include "User.hpp"
 
diff --git a/DataAll/Discussion.hpp b/DataAll/Discussion.hpp
new file mode 100644
index 0000000..541d728
--- /dev/null
+++ b/DataAll/Discussion.hpp
@@ -0,0 +1,18 @@
+#ifndef DISCUSSION_H
+#define DISCUSSION_H
+
+#include "DiscussionPost.hpp"
+
+#include <list>
+
+struct Discussion {
+  Discussion() { }
+  Discussion(const std::list<DiscussionPost>& idiscussion):
+               discussion(idiscussion)
+               { }
+  Discussion(const Discussion& in) {
+    discussion = in.discussion;
+  }
+  std::list<DiscussionPost> discussion;
+};
+#endif
diff --git a/Server/Discussion.hpp b/Server/Discussion.hpp
deleted file mode 100644
index 8940c6a..0000000
--- a/Server/Discussion.hpp
+++ /dev/null
@@ -1,16 +0,0 @@
-#ifndef DISCUSSION_H
-#define DISCUSSION_H
-#include "DiscussionPost.hpp"
-
-#include <list>
-
-struct Discussion {
-  Discussion() { }
-  Discussion(const std::list<DiscussionPost>& idiscussion):
-               discussion(idiscussion)
-               { }
-  Discussion(const Discussion& in) {
-  discussion = in.discussion;}
-  std::list<DiscussionPost> discussion;
-};
-#endif
diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index 9d7934b..6a588c8 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -2,7 +2,7 @@
 #ifndef PAPER_H
 #define PAPER_H
 
-#include "Discussion.hpp"
+#include "../DataAll/Discussion.hpp"
 #include "Review.hpp"
 #include "User.hpp"
 
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index 92b1c03..dd782b5 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -4,7 +4,7 @@
 #include "../DataAll/Conference.hpp"
 #include "ConferenceManager.hpp"
 #include "../DataAll/Date.hpp"
-#include "Discussion.hpp"
+#include "../DataAll/Discussion.hpp"
 #include "DiscussionPost.hpp"
 #include "Paper.hpp"
 #include "PaperManager.hpp"
diff --git a/UserClient/Discussion.hpp b/UserClient/Discussion.hpp
deleted file mode 100644
index 541d728..0000000
--- a/UserClient/Discussion.hpp
+++ /dev/null
@@ -1,18 +0,0 @@
-#ifndef DISCUSSION_H
-#define DISCUSSION_H
-
-#include "DiscussionPost.hpp"
-
-#include <list>
-
-struct Discussion {
-  Discussion() { }
-  Discussion(const std::list<DiscussionPost>& idiscussion):
-               discussion(idiscussion)
-               { }
-  Discussion(const Discussion& in) {
-    discussion = in.discussion;
-  }
-  std::list<DiscussionPost> discussion;
-};
-#endif
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 6b0f898..09ab8c5 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -1,7 +1,7 @@
 #ifndef PAPER_H
 #define PAPER_H
 
-#include "Discussion.hpp"
+#include "../DataAll/Discussion.hpp"
 #include "Review.hpp"
 
 #include <vector>

commit bbc1d422e7e38c5c366a14ea142fa809c206f1f4
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 18:51:21 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 314205a..d0ea3d3 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -7,6 +7,7 @@
 #include "../DataAll/Conference.hpp"
 #include "../DataAll/Date.hpp"
 #include "../DataAll/PersonalInfo.hpp"
+#include "../Server/Paper.hpp"
 #include "../Server/PaperSummary.hpp"
 
 class Database {

commit ceba23750da1c3fbf1c48940a1ff4104c3d1070c
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 18:49:53 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 340921c..314205a 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -6,6 +6,8 @@
 #include "../Server/User.hpp"
 #include "../DataAll/Conference.hpp"
 #include "../DataAll/Date.hpp"
+#include "../DataAll/PersonalInfo.hpp"
+#include "../Server/PaperSummary.hpp"
 
 class Database {
 public:
@@ -37,7 +39,8 @@ public:
 
 	// PAPER
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
-        std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*)
+        std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*);
+        Paper fetchPaper(int key) throw (const char*);
 
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);

commit c1c8a29e63e911c8fb108828bf4ea84cfbf0aa7c
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 18:44:11 2014 +1100

    moved common data to DataAll and updated references

diff --git a/DataAll/Conference.hpp b/DataAll/Conference.hpp
new file mode 100644
index 0000000..cd888a2
--- /dev/null
+++ b/DataAll/Conference.hpp
@@ -0,0 +1,73 @@
+#ifndef CONFERENCE_H
+#define CONFERENCE_H
+
+#include "../DataAll/Date.hpp"
+
+#include <string>
+#include <vector>
+
+struct Conference {
+  Conference() {}
+  
+  Conference(bool iisActive,
+  std::string& ititle,
+  int& iconfID,
+  std::string& itopic,
+  std::string& idescription,
+  std::string& ilocation,
+  std::vector<std::string>& ikeywords,
+  bool iisBeforePaperDeadline,
+  Date& ipaperDeadline,
+  bool iisBeforeAllocationDate,
+  Date& iallocationDate,
+  bool iisBeforeSoftReviewDeadline,
+  Date& ireviewDeadlineSoft,
+  bool iisBeforeHardReviewDeadline,
+  Date& ireviewDeadlineHard,
+  bool iisBeforeDiscussDeadline,
+  Date& idiscussDeadline,
+  int ireviewersPerPaper,
+  int ipostWordLimit):
+  isActive(iisActive),
+  title(ititle),
+  confID(iconfID),
+  topic(itopic),
+  description(idescription),
+  location(ilocation),
+  keywords(ikeywords),
+  isBeforePaperDeadline(iisBeforePaperDeadline),
+  paperDeadline(ipaperDeadline),
+  isBeforeAllocationDate(iisBeforeAllocationDate),
+  allocationDate(iallocationDate),
+  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
+  reviewDeadlineSoft(ireviewDeadlineSoft),
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
+  reviewDeadlineHard(ireviewDeadlineHard),
+  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
+  discussDeadline(idiscussDeadline),
+  reviewersPerPaper(ireviewersPerPaper),
+  postWordLimit(ipostWordLimit)
+  { }
+
+  bool isActive;
+  std::string title{""};
+  int confID{0};
+  std::string topic{""};
+  std::string description{""};
+  std::string location{""};
+  std::vector<std::string> keywords;
+  bool isBeforePaperDeadline;
+  Date paperDeadline;
+  bool isBeforeAllocationDate;
+  Date allocationDate;
+  bool isBeforeSoftReviewDeadline;
+  Date reviewDeadlineSoft;
+  bool isBeforeHardReviewDeadline;
+  Date reviewDeadlineHard;
+  bool isBeforeDiscussDeadline;
+  Date discussDeadline;
+  int reviewersPerPaper{0};
+  int postWordLimit{0};
+
+};
+#endif

commit 3ffcf935a2c4c7bbd872f348ff7e3e3af17dab04
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 18:43:44 2014 +1100

    moved common data to DataAll and updated references

diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
deleted file mode 100644
index 93aeaf5..0000000
--- a/AdminClient/Conference.hpp
+++ /dev/null
@@ -1,70 +0,0 @@
-#ifndef CONFERENCE_H
-#define CONFERENCE_H
-#include "../DataAll/Date.hpp"
-
-#include <string>
-#include <vector>
-
-struct Conference {
-  Conference(bool iisActive,
-  const std::string& ititle,
-  const std::string& iconfID,
-  const std::string& itopic,
-  const std::string& idescription,
-  const std::string& ilocation,
-  const std::vector<std::string>& ikeywords,
-  bool iisBeforePaperDeadline,
-  const Date& ipaperDeadline,
-  bool iisBeforeAllocationDate,
-  const Date& iallocationDate,
-  bool iisBeforeSoftReviewDeadline,
-  const Date& ireviewDeadlineSoft,
-  bool iisBeforeHardReviewDeadline,
-  const Date& ireviewDeadlineHard,
-  bool iisBeforeDiscussDeadline,
-  const Date& idiscussDeadline,
-  int ireviewersPerPaper,
-  int ipostWordLimit):
-  isActive(iisActive),
-  title(ititle),
-  confID(iconfID),
-  topic(itopic),
-  description(idescription),
-  location(ilocation),
-  keywords(ikeywords),
-  isBeforePaperDeadline(iisBeforePaperDeadline),
-  paperDeadline(ipaperDeadline),
-  isBeforeAllocationDate(iisBeforeAllocationDate),
-  allocationDate(iallocationDate),
-  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
-  reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
-  reviewDeadlineHard(ireviewDeadlineHard),
-  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
-  discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper),
-  postWordLimit(ipostWordLimit)
-  { }
-
-  bool isActive;
-  std::string title{""};
-  std::string confID{""};
-  std::string topic{""};
-  std::string description{""};
-  std::string location{""};
-  std::vector<std::string> keywords;
-  bool isBeforePaperDeadline;
-  Date paperDeadline;
-  bool isBeforeAllocationDate;
-  Date allocationDate;
-  bool isBeforeSoftReviewDeadline;
-  Date reviewDeadlineSoft;
-  bool isBeforeHardReviewDeadline;
-  Date reviewDeadlineHard;
-  bool isBeforeDiscussDeadline;
-  Date discussDeadline;
-  int reviewersPerPaper{0};
-  int postWordLimit{0};
-
-};
-#endif
diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index 6f0eb35..7c5e106 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -1,6 +1,6 @@
 #ifndef CONFERENCE_MANAGER_H
 #define CONFERENCE_MANAGER_H
-#include "Conference.hpp"
+#include "../DataAll/Conference.hpp"
 
 class ConferenceManager {
 public:
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 895f999..340921c 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -4,7 +4,7 @@
 #include "mysql_driver.h"
 #include "MyRecord.h"
 #include "../Server/User.hpp"
-#include "../Server/Conference.hpp"
+#include "../DataAll/Conference.hpp"
 #include "../DataAll/Date.hpp"
 
 class Database {
diff --git a/Server/Conference.hpp b/Server/Conference.hpp
deleted file mode 100644
index cd888a2..0000000
--- a/Server/Conference.hpp
+++ /dev/null
@@ -1,73 +0,0 @@
-#ifndef CONFERENCE_H
-#define CONFERENCE_H
-
-#include "../DataAll/Date.hpp"
-
-#include <string>
-#include <vector>
-
-struct Conference {
-  Conference() {}
-  
-  Conference(bool iisActive,
-  std::string& ititle,
-  int& iconfID,
-  std::string& itopic,
-  std::string& idescription,
-  std::string& ilocation,
-  std::vector<std::string>& ikeywords,
-  bool iisBeforePaperDeadline,
-  Date& ipaperDeadline,
-  bool iisBeforeAllocationDate,
-  Date& iallocationDate,
-  bool iisBeforeSoftReviewDeadline,
-  Date& ireviewDeadlineSoft,
-  bool iisBeforeHardReviewDeadline,
-  Date& ireviewDeadlineHard,
-  bool iisBeforeDiscussDeadline,
-  Date& idiscussDeadline,
-  int ireviewersPerPaper,
-  int ipostWordLimit):
-  isActive(iisActive),
-  title(ititle),
-  confID(iconfID),
-  topic(itopic),
-  description(idescription),
-  location(ilocation),
-  keywords(ikeywords),
-  isBeforePaperDeadline(iisBeforePaperDeadline),
-  paperDeadline(ipaperDeadline),
-  isBeforeAllocationDate(iisBeforeAllocationDate),
-  allocationDate(iallocationDate),
-  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
-  reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
-  reviewDeadlineHard(ireviewDeadlineHard),
-  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
-  discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper),
-  postWordLimit(ipostWordLimit)
-  { }
-
-  bool isActive;
-  std::string title{""};
-  int confID{0};
-  std::string topic{""};
-  std::string description{""};
-  std::string location{""};
-  std::vector<std::string> keywords;
-  bool isBeforePaperDeadline;
-  Date paperDeadline;
-  bool isBeforeAllocationDate;
-  Date allocationDate;
-  bool isBeforeSoftReviewDeadline;
-  Date reviewDeadlineSoft;
-  bool isBeforeHardReviewDeadline;
-  Date reviewDeadlineHard;
-  bool isBeforeDiscussDeadline;
-  Date discussDeadline;
-  int reviewersPerPaper{0};
-  int postWordLimit{0};
-
-};
-#endif
diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 190cda3..e702e75 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -1,7 +1,7 @@
 #ifndef CONFERENCE_MANAGER_H
 #define CONFERENCE_MANAGER_H
 
-#include "Conference.hpp"
+#include "../DataAll/Conference.hpp"
 #include "../Database/Database.hpp"
 
 class ConferenceManager {
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index 6cde07e..92b1c03 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -1,7 +1,7 @@
 #include <iostream>
 
 #include "ClientHandler.hpp"
-#include "Conference.hpp"
+#include "../DataAll/Conference.hpp"
 #include "ConferenceManager.hpp"
 #include "../DataAll/Date.hpp"
 #include "Discussion.hpp"
diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
deleted file mode 100644
index fcdc497..0000000
--- a/UserClient/Conference.hpp
+++ /dev/null
@@ -1,73 +0,0 @@
-//incomplete
-#ifndef CONFERENCE_H
-#define CONFERENCE_H
-
-#include "../DataAll/Date.hpp"
-
-
-#include <string>
-#include <vector>
-
-struct Conference {
-  Conference(bool iisActive,
-  const std::string& ititle,
-  const std::string& iconfID,
-  const std::string& itopic,
-  const std::string& idescription,
-  const std::string& ilocation,
-  const std::vector<std::string>& ikeywords,
-  bool iisBeforePaperDeadline,
-  const Date& ipaperDeadline,
-  bool iisBeforeAllocationDate,
-  const Date& iallocationDate,
-  bool iisBeforeSoftReviewDeadline,
-  const Date& ireviewDeadlineSoft,
-  bool iisBeforeHardReviewDeadline,
-  const Date& ireviewDeadlineHard,
-  bool iisBeforeDiscussDeadline,
-  const Date& idiscussDeadline,
-  int ireviewersPerPaper,
-  int ipostWordLimit):
-  isActive(iisActive),
-  title(ititle),
-  confID(iconfID),
-  topic(itopic),
-  description(idescription),
-  location(ilocation),
-  keywords(ikeywords),
-  isBeforePaperDeadline(iisBeforePaperDeadline),
-  paperDeadline(ipaperDeadline),
-  isBeforeAllocationDate(iisBeforeAllocationDate),
-  allocationDate(iallocationDate),
-  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
-  reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
-  reviewDeadlineHard(ireviewDeadlineHard),
-  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
-  discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper),
-  postWordLimit(ipostWordLimit)
-  { }
-
-  bool isActive;
-  std::string title{""};
-  std::string confID{""};
-  std::string topic{""};
-  std::string description{""};
-  std::string location{""};
-  std::vector<std::string> keywords;
-  bool isBeforePaperDeadline;
-  Date paperDeadline;
-  bool isBeforeAllocationDate;
-  Date allocationDate;
-  bool isBeforeSoftReviewDeadline;
-  Date reviewDeadlineSoft;
-  bool isBeforeHardReviewDeadline;
-  Date reviewDeadlineHard;
-  bool isBeforeDiscussDeadline;
-  Date discussDeadline;
-  int reviewersPerPaper;
-  int postWordLimit;
-
-};
-#endif
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 90c383a..32af856 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -2,7 +2,7 @@
 #ifndef LOGIN_MANAGER_H
 #define LOGIN_MANAGER_H
 
-#include "Conference.hpp"
+#include "../DataAll/Conference.hpp"
 #include "User.hpp"
 #include "UserClientStubForServer.hpp"
 //#include "mainwindow.hpp"
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index fdbcf3a..3363398 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -4,7 +4,7 @@
 #include "Paper.hpp"
 #include "PaperSummary.hpp"
 #include "User.hpp"
-#include "Conference.hpp" // for activeConference memeber variable
+#include "../DataAll/Conference.hpp" // for activeConference memeber variable
 
 #include <vector>
 

commit 79c81b52944ce65dfbbd1631da99dd84c9180da3
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 18:35:45 2014 +1100

    Update create_tables.txt

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index e4f31d0..3ac7b89 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -128,10 +128,13 @@ CREATE TABLE `paperAuthors` (
 
 CREATE TABLE `PaperKeywords` (
 	`paperID` int NOT NULL,
-	`keyword` varchar(64) NOT NULL,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+	`keywordID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
+ALTER TABLE `PaperKeywords` ADD UNIQUE `unique_index`(`paperID`, `keywordID`);
+
 CREATE TABLE `PaperAssigned` (
 	`paperID` int NOT NULL,
 	`reviewerID` int NOT NULL,

commit 162f9924a1dc419ac5d14fec5f62db93330adb78
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 18:34:44 2014 +1100

    fetch paper

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 6c7d846..1f7fe5d 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -920,6 +920,128 @@ std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int autho
 	return vec;
 }
 
+Paper Database::fetchPaper(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaper = "SELECT * FROM Paper WHERE paperID=?";
+	const char* getConfKeyword = "SELECT keyword FROM Keywords WHERE keywordID=(SELECT keywordID FROM Paper WHERE paperID=?)";
+	const char* getPaperKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM PaperKeywords where paperID=?)";
+	
+	const char* getAuthors = "SELECT infoID, name, email, organisation, phone FROM PersonalInfo WHERE infoID IN (SELECT authorID FROM paperAuthors WHERE paperID=?)";
+
+        // =======================================
+        // Paper
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaper);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Paper();
+	}
+
+    	int paperID = rs->getInt(1);
+	int confID = rs->getInt(3);
+    	int leadAuthorID = rs->getInt(2);
+    	std::string title = rs->getString(5);
+    	std::string abstract = rs->getString(6);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // confKeyword
+	pstmt = dbcon->prepareStatement(getConfKeyword);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return Paper();
+	}
+
+	std::string confKeyword = rs->getString(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Paper Keywords
+        std::vector<std::string> keywords;
+	
+	pstmt = dbcon->prepareStatement(getPaperKeywords);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(1);
+                keywords.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Authors 
+        std::vector<PersonalInfo> authors;
+	
+	pstmt = dbcon->prepareStatement(getAuthors);
+	pstmt->setInt(1, key);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+		int infoID = rs->getInt(1);
+		std::string name = rs->getString(3);
+		std::string email = rs->getString(4);
+		std::string organisation = rs->getString(5);
+		std::string phone = rs->getString(6);
+		PersonalInfo pInfo(infoId, name, email, organisation, phone);
+                authors.push_back(pInfo);
+        }
+
+        delete rs;
+        delete pstmt;
+
+
+
+        Conference conf(
+		isActive,
+		title,
+		confID,
+		topic,
+		description,
+		location,
+		vec,
+		isBeforePaperDeadline,
+		paperDeadline,
+		isBeforeAllocationDate,
+		allocationDate,
+		isBeforeSoftReviewDeadline,
+		reviewDeadlineSoft,
+		isBeforeHardReviewDeadline,
+		reviewDeadlineHard,
+		isBeforeDiscussDeadline,
+		discussDeadline,
+		reviewersPerPaper,
+		postWordLimit
+		);
+	
+	return conf;
+}
+
+
 //
 //std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
 //{

commit fb06877eec77b59ef14ef46b9457f25534acdeb3
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 18:31:40 2014 +1100

    changed references to common data

diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
index e348cd5..93aeaf5 100644
--- a/AdminClient/Conference.hpp
+++ b/AdminClient/Conference.hpp
@@ -1,6 +1,6 @@
 #ifndef CONFERENCE_H
 #define CONFERENCE_H
-#include "Date.hpp"
+#include "../DataAll/Date.hpp"
 
 #include <string>
 #include <vector>
diff --git a/AdminClient/DateTest.cpp b/AdminClient/DateTest.cpp
index 0217327..9589bd4 100644
--- a/AdminClient/DateTest.cpp
+++ b/AdminClient/DateTest.cpp
@@ -2,7 +2,7 @@
 //#define BOOST_TEST_MODULE CompareTest
 #include <boost/test/unit_test.hpp>
 //#include "C:\Users\Lucha\Documents\Boost\boost\test\unit_test.hpp"
-#include "Date.hpp"
+#include "../DataAll/Date.hpp"
 
 //BOOST_AUTO_TEST_SUITE(CompareTest)
 BOOST_AUTO_TEST_CASE(EqualDates) {
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 23ce984..895f999 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -5,7 +5,7 @@
 #include "MyRecord.h"
 #include "../Server/User.hpp"
 #include "../Server/Conference.hpp"
-#include "../Server/Date.hpp"
+#include "../DataAll/Date.hpp"
 
 class Database {
 public:
diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index f49f905..cd888a2 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -1,7 +1,7 @@
 #ifndef CONFERENCE_H
 #define CONFERENCE_H
 
-#include "Date.hpp"
+#include "../DataAll/Date.hpp"
 
 #include <string>
 #include <vector>
diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index f5dcf57..896dfb8 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -2,7 +2,7 @@
 #include <iostream>
 
 #include "ConferenceManager.hpp"
-#include "Date.hpp"
+#include "../DataAll/Date.hpp"
 
 /*int main() {
     time_t t = time(0);   // get time now
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
index 7213998..6cde07e 100644
--- a/Server/ServerDriver.cpp
+++ b/Server/ServerDriver.cpp
@@ -3,7 +3,7 @@
 #include "ClientHandler.hpp"
 #include "Conference.hpp"
 #include "ConferenceManager.hpp"
-#include "Date.hpp"
+#include "../DataAll/Date.hpp"
 #include "Discussion.hpp"
 #include "DiscussionPost.hpp"
 #include "Paper.hpp"
diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index 7188c6e..fcdc497 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -2,7 +2,7 @@
 #ifndef CONFERENCE_H
 #define CONFERENCE_H
 
-#include "Date.hpp"
+#include "../DataAll/Date.hpp"
 
 
 #include <string>

commit 0de9a41e8ddf56ba05c692601adaf4b3ef3f8f70
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:59:31 2014 +1100

    moved common data to DataAll

diff --git a/DataAll/PersonalInfo.hpp b/DataAll/PersonalInfo.hpp
new file mode 100644
index 0000000..5943341
--- /dev/null
+++ b/DataAll/PersonalInfo.hpp
@@ -0,0 +1,47 @@
+#ifndef USER_H
+#define USER_H
+
+#include <string>
+#include <vector>
+
+
+struct PersonalInfo {
+  PersonalInfo() {}
+  
+  PersonalInfo(
+         std::string& iname,
+         std::string& iemail,
+         std::string& iorganisation,
+         std::string& iphone,
+         std::string& ipassword,
+         int iinfoID,
+         ):
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         infoID(iinfoID)
+         { }
+
+  PersonalInfo(
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         const std::string& ipassword,
+         ):
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         { }
+  int infoID{0};
+  std::string name{""};
+  std::string email{""};
+  std::string organisation{""};
+  std::string phone{""};
+
+};
+#endif
diff --git a/Server/PersonalInfo.hpp b/Server/PersonalInfo.hpp
deleted file mode 100644
index 5943341..0000000
--- a/Server/PersonalInfo.hpp
+++ /dev/null
@@ -1,47 +0,0 @@
-#ifndef USER_H
-#define USER_H
-
-#include <string>
-#include <vector>
-
-
-struct PersonalInfo {
-  PersonalInfo() {}
-  
-  PersonalInfo(
-         std::string& iname,
-         std::string& iemail,
-         std::string& iorganisation,
-         std::string& iphone,
-         std::string& ipassword,
-         int iinfoID,
-         ):
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         password(ipassword),
-         infoID(iinfoID)
-         { }
-
-  PersonalInfo(
-         const std::string& iname,
-         const std::string& iemail,
-         const std::string& iorganisation,
-         const std::string& iphone,
-         const std::string& ipassword,
-         ):
-         name(iname),
-         email(iemail),
-         organisation(iorganisation),
-         phone(iphone),
-         password(ipassword),
-         { }
-  int infoID{0};
-  std::string name{""};
-  std::string email{""};
-  std::string organisation{""};
-  std::string phone{""};
-
-};
-#endif

commit ea5485b0c7a83ddc78181f78e4cfa6749391dac7
Merge: 1e340bb 862d92e
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:55:56 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 1e340bbb966b9db26ad1f44a8dd273658fc33b96
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:55:49 2014 +1100

    moved common data to DataAll

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
deleted file mode 100644
index 4450690..0000000
--- a/AdminClient/Date.hpp
+++ /dev/null
@@ -1,63 +0,0 @@
-#ifndef DATE_H
-#define DATE_H
-
-#include <sstream>
-
-class Date {
-    
-public:
-    Date() { }
-    Date(int iday,
-         int imonth,
-         int iyear):
-         day(iday),
-         month(imonth),
-         year(iyear)
-             { }
-    
-    Date(const Date& in)
-    {
-        day = in.day;
-        month = in.month;
-        year = in.year;
-    }
-    
-// NOTE: changed get functions, new below
-    void setDay(int iday) {day = iday;}
-    void setMonth(int imonth) {month = imonth;}
-    void setYear(int iyear) {year = iyear;}
-    int getDay() {return day;}
-    int getMonth() {return month;}
-    int getYear() {return year;}
-    
-    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-    {
-        if(idate.year != year) {
-            return idate.year < year;
-        } else {
-            if(idate.month != month) {
-                return idate.month < month;
-            } else {
-                if(idate.day != day) {
-                    return idate.day < day;
-                }
-            }
-        }
-        return true;
-    }
-
-  std::string convertToString()
-  {
-    std::stringstream temp;
-    temp << day << "/" << month << "/" << year; 
-    return(temp.str());
-  } 
-    
-private:
-    int day{0};
-    int month{0};
-    int year{0};
-    
-};
-
-#endif
diff --git a/DataAll/Date.hpp b/DataAll/Date.hpp
new file mode 100644
index 0000000..4450690
--- /dev/null
+++ b/DataAll/Date.hpp
@@ -0,0 +1,63 @@
+#ifndef DATE_H
+#define DATE_H
+
+#include <sstream>
+
+class Date {
+    
+public:
+    Date() { }
+    Date(int iday,
+         int imonth,
+         int iyear):
+         day(iday),
+         month(imonth),
+         year(iyear)
+             { }
+    
+    Date(const Date& in)
+    {
+        day = in.day;
+        month = in.month;
+        year = in.year;
+    }
+    
+// NOTE: changed get functions, new below
+    void setDay(int iday) {day = iday;}
+    void setMonth(int imonth) {month = imonth;}
+    void setYear(int iyear) {year = iyear;}
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    
+    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+    {
+        if(idate.year != year) {
+            return idate.year < year;
+        } else {
+            if(idate.month != month) {
+                return idate.month < month;
+            } else {
+                if(idate.day != day) {
+                    return idate.day < day;
+                }
+            }
+        }
+        return true;
+    }
+
+  std::string convertToString()
+  {
+    std::stringstream temp;
+    temp << day << "/" << month << "/" << year; 
+    return(temp.str());
+  } 
+    
+private:
+    int day{0};
+    int month{0};
+    int year{0};
+    
+};
+
+#endif
diff --git a/Server/Date.hpp b/Server/Date.hpp
deleted file mode 100644
index 4450690..0000000
--- a/Server/Date.hpp
+++ /dev/null
@@ -1,63 +0,0 @@
-#ifndef DATE_H
-#define DATE_H
-
-#include <sstream>
-
-class Date {
-    
-public:
-    Date() { }
-    Date(int iday,
-         int imonth,
-         int iyear):
-         day(iday),
-         month(imonth),
-         year(iyear)
-             { }
-    
-    Date(const Date& in)
-    {
-        day = in.day;
-        month = in.month;
-        year = in.year;
-    }
-    
-// NOTE: changed get functions, new below
-    void setDay(int iday) {day = iday;}
-    void setMonth(int imonth) {month = imonth;}
-    void setYear(int iyear) {year = iyear;}
-    int getDay() {return day;}
-    int getMonth() {return month;}
-    int getYear() {return year;}
-    
-    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-    {
-        if(idate.year != year) {
-            return idate.year < year;
-        } else {
-            if(idate.month != month) {
-                return idate.month < month;
-            } else {
-                if(idate.day != day) {
-                    return idate.day < day;
-                }
-            }
-        }
-        return true;
-    }
-
-  std::string convertToString()
-  {
-    std::stringstream temp;
-    temp << day << "/" << month << "/" << year; 
-    return(temp.str());
-  } 
-    
-private:
-    int day{0};
-    int month{0};
-    int year{0};
-    
-};
-
-#endif
diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
deleted file mode 100644
index 4450690..0000000
--- a/UserClient/Date.hpp
+++ /dev/null
@@ -1,63 +0,0 @@
-#ifndef DATE_H
-#define DATE_H
-
-#include <sstream>
-
-class Date {
-    
-public:
-    Date() { }
-    Date(int iday,
-         int imonth,
-         int iyear):
-         day(iday),
-         month(imonth),
-         year(iyear)
-             { }
-    
-    Date(const Date& in)
-    {
-        day = in.day;
-        month = in.month;
-        year = in.year;
-    }
-    
-// NOTE: changed get functions, new below
-    void setDay(int iday) {day = iday;}
-    void setMonth(int imonth) {month = imonth;}
-    void setYear(int iyear) {year = iyear;}
-    int getDay() {return day;}
-    int getMonth() {return month;}
-    int getYear() {return year;}
-    
-    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-    {
-        if(idate.year != year) {
-            return idate.year < year;
-        } else {
-            if(idate.month != month) {
-                return idate.month < month;
-            } else {
-                if(idate.day != day) {
-                    return idate.day < day;
-                }
-            }
-        }
-        return true;
-    }
-
-  std::string convertToString()
-  {
-    std::stringstream temp;
-    temp << day << "/" << month << "/" << year; 
-    return(temp.str());
-  } 
-    
-private:
-    int day{0};
-    int month{0};
-    int year{0};
-    
-};
-
-#endif

commit 862d92e047f0ec38c7c973c2cd6a339cb0dcc2e0
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 17:53:39 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 34a2da6..b1a83a6 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -44,7 +44,43 @@ struct Paper {
       confID(iconfID),
       leadAuthorID(ileadAuthorID)
       { }
-
+    
+    void addToKeywords(const std::string& in) {
+      keywords.push_back(in);
+    }
+    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < keywords.size(); ++i)
+      {
+        if(keywords[i] == keywordToRemove) {
+          keywords.erase(keywords.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToAuthors(const User& in) {
+      authors.push_back(in);
+    }
+    void removeAuthor(int userToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < authors.size(); ++i)
+      {
+        if(authors[i].userID == userToRemove) {
+          authors.erase(authors.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToReviews(const Review& in) {
+      reviews.push_back(in);
+    }
+    void removeReview(int reviewToRemove) { //remove by reviewer ID
+      for(unsigned int i = 0; i < reviews.size(); ++i)
+      {
+        if(reviews[i].reviewerID == reviewToRemove) {
+          reviews.erase(reviews.begin() + i);
+          return;
+        }
+      }
+    }
     // no assignment operator or copy constructor deemed necessary at this point
 };
 #endif

commit a28fecb251013ee7cc6491cf9d5835ea74aef6a9
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:51:59 2014 +1100

    allPaperSummary

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 1a8bd97..6c7d846 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -888,6 +888,38 @@ PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
 	return papSum;
 }
 
+std::vector<PaperSummary> Database::allAuthorsPaperSummary(int confID, int authorID) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperSummary = "SELECT paperName, paperID FROM Paper WHERE (confID=? and paperID IN (SELECT paperID FROM paperAuthors WHERE authorID=?))";
+
+        // =======================================
+        // Paper Summary 
+	std::vector<PaperSummary> vec;
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperSummary);
+	pstmt->setInt(1, confID);
+	pstmt->setInt(2, authorID);
+
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+        	std::string paperName = rs->getString(1);
+        	int paperID = rs->getInt(2);
+        	PaperSummary papSum(paperID, paperName);
+                vec.push_back(papSum);
+        }
+
+        delete rs;
+        delete pstmt;
+	
+	return vec;
+}
+
 //
 //std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
 //{

commit 46842303bdb06e4523b1d522ccd4e2935fe9c6be
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:51:00 2014 +1100

    allPaperSummary

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 8b6f26b..23ce984 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -37,7 +37,7 @@ public:
 
 	// PAPER
 	PaperSummary fetchPaperSummary(int key) throw (const char*);
-
+        std::vector<PaperSummary> allAuthorsPaperSummary(int confID, int authorID) throw (const char*)
 
 //        // Delete - returns false if there wasn't a record with that key
 //        bool deleteRecord(const char* key) throw (const char*);

commit 808321d9e38f99c16c52b431dce482ae31e1c09c
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 17:50:31 2014 +1100

    Update Algo

diff --git a/Algorithm/Algo b/Algorithm/Algo
index 48155a4..c8c9330 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -191,7 +191,7 @@ void PaperForReview::algo(int paperID, int conferenceID)
 					// 1=yes
 					//2=maybe
 					//3=conflict
-			reviewersPreference = ;//(8)GET PREF FROM DATABASE fetchreviewerPreference(userUD, paperID);
+			reviewersPreference = ;//(8)GET PREF FROM DATABASE fetchreviewerPreference(userID, paperID);
 			
 			if(reviewersPreference == 1)
 			{
@@ -225,7 +225,8 @@ void fillVectors(int paperID)
 	// (2)select organisation for each author
 		//add involved organisation
 	
-	// CONFLICTING HERE
+	//CONFLICTING HERE
+		conflictingReviewers();
 }
 
 

commit d6d43c9076e874076f9e723dd37019898716e150
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 17:47:23 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 3f8fab3..6b0f898 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -62,7 +62,7 @@ class Paper {
     void addToKeywords(const std::string& in) {
       keywords.push_back(in);
     }
-    void removeOwnPaper(const std::string& keywordToRemove) { //remove by paperID
+    void removeKeyword(const std::string& keywordToRemove) { //remove by paperID
       for(unsigned int i = 0; i < keywords.size(); ++i)
       {
         if(keywords[i] == keywordToRemove) {
@@ -74,7 +74,7 @@ class Paper {
     void addToAuthors(const User& in) {
       authors.push_back(in);
     }
-    void removeUser(int userToRemove) { //remove by paperID
+    void removeAuthor(int userToRemove) { //remove by paperID
       for(unsigned int i = 0; i < authors.size(); ++i)
       {
         if(authors[i].getUserID() == userToRemove) {

commit eb1a0ed52982bb0d70bd21866a510b9b14d57b97
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 17:46:25 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 41cb291..3f8fab3 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -71,6 +71,18 @@ class Paper {
         }
       }
     }
+    void addToAuthors(const User& in) {
+      authors.push_back(in);
+    }
+    void removeUser(int userToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < authors.size(); ++i)
+      {
+        if(authors[i].getUserID() == userToRemove) {
+          authors.erase(authors.begin() + i);
+          return;
+        }
+      }
+    }
     void addToReviews(const Review& in) {
       reviews.push_back(in);
     }

commit e971b798a7397e3298ac7c4cda31fffd612106d5
Merge: fd05284 f105786
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:45:16 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit fd05284a3931e9bc53f1cad14678ac205c679587
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:45:09 2014 +1100

    made same as others

diff --git a/Server/Date.hpp b/Server/Date.hpp
index c277f03..4450690 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -1,44 +1,63 @@
 #ifndef DATE_H
 #define DATE_H
 
+#include <sstream>
+
 class Date {
+    
 public:
-Date() { }
-Date(int iday,
-int imonth,
-int iyear):
-day(iday),
-month(imonth),
-year(iyear)
-{ }
-Date(const Date& in) {
-day = in.day;
-month = in.month;
-year = in.year;}
-    int getDay() {return day;}
-    int getMonth() {return month;}
-    int getYear() {return year;}
+    Date() { }
+    Date(int iday,
+         int imonth,
+         int iyear):
+         day(iday),
+         month(imonth),
+         year(iyear)
+             { }
+    
+    Date(const Date& in)
+    {
+        day = in.day;
+        month = in.month;
+        year = in.year;
+    }
+    
+// NOTE: changed get functions, new below
     void setDay(int iday) {day = iday;}
     void setMonth(int imonth) {month = imonth;}
     void setYear(int iyear) {year = iyear;}
-bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-{
-if(idate.year != year) {
-return idate.year < year;
-} else {
-if(idate.month != month) {
-return idate.month < month;
-} else {
-if(idate.day != day) {
-return idate.day < day;
-}
-}
-}
-return true;
-}
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    
+    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+    {
+        if(idate.year != year) {
+            return idate.year < year;
+        } else {
+            if(idate.month != month) {
+                return idate.month < month;
+            } else {
+                if(idate.day != day) {
+                    return idate.day < day;
+                }
+            }
+        }
+        return true;
+    }
+
+  std::string convertToString()
+  {
+    std::stringstream temp;
+    temp << day << "/" << month << "/" << year; 
+    return(temp.str());
+  } 
+    
 private:
-int day{0};
-int month{0};
-int year{0};
+    int day{0};
+    int month{0};
+    int year{0};
+    
 };
+
 #endif

commit f105786f87ab9ec67dc8f92c58f5216f8a5cf994
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:39:35 2014 +1100

    paperSummary

diff --git a/Database/Database.hpp b/Database/Database.hpp
index ce603c0..8b6f26b 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -35,6 +35,8 @@ public:
         std::vector<int> activeConfIDs();
         std::vector<std::string> activeConfNames();
 
+	// PAPER
+	PaperSummary fetchPaperSummary(int key) throw (const char*);
 
 
 //        // Delete - returns false if there wasn't a record with that key

commit 7c8fe855fc44dbb23943b0ef306fcdb0ea181f93
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:39:01 2014 +1100

    paperSummary

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 4c87f49..1a8bd97 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -853,6 +853,41 @@ std::vector<std::string> Database::activeConfNames()
         return vptr;
 }
 
+PaperSummary Database::fetchPaperSummary(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getPaperSummary = "SELECT paperName FROM Paper WHERE paperID=?";
+
+        // =======================================
+        // Paper Summary 
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getPaperSummary);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return PaperSummary();
+	}
+
+        std::string paperName = rs->getString(1);
+
+        delete rs;
+        delete pstmt;
+
+        PaperSummary papSum(key, paperName);
+	
+	return papSum;
+}
+
 //
 //std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
 //{

commit e35f2a46b5e9b67c4ed32e1e23c5810be25dc6a2
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 17:36:31 2014 +1100

    added string

diff --git a/PDF/PDF_read_write_example.cpp b/PDF/PDF_read_write_example.cpp
index 4e3b973..a80cd03 100644
--- a/PDF/PDF_read_write_example.cpp
+++ b/PDF/PDF_read_write_example.cpp
@@ -14,6 +14,7 @@ Alex Cremona Oct 2014
 */
 
 #include <fstream>
+#include <string>
 
 
 int main()
@@ -40,6 +41,13 @@ int main()
 	fin.read(buffer, length);
 
 	fin.close();
+	
+	
+	//set string for saving
+	std::string = buffer;
+
+
+
 
 	//open output in Binary and output content elsewhere
 	fout.open(outName, std::ios::out | std::ios::binary);

commit b1879f06f3a25da4c94f8e0c479406cf66318141
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 17:32:54 2014 +1100

    Update LoginManager.hpp

diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 0a13e4c..90c383a 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -70,7 +70,18 @@ class LoginManager {
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
   void setConferences(const std::vector<Conference*>& iconferences) {conferences =  iconferences;}
   std::vector<std::string> searchForKWords(std::string);
-
+  void addToConferences(Conference* in) {
+      conferences.push_back(in);
+  }
+  void removeConference(int conferenceToRemove) { //remove by paperID
+    for(unsigned int i = 0; i < conferences.size(); ++i)
+    {
+      if(conferences[i]->confID == conferenceToRemove) {
+        conferences.erase(conferences.begin() + i);
+        return;
+      }
+    }
+  } 
 
   private:
   User* currentUser{nullptr};

commit d99f9a981d1f1b832bf97a726135e8e8b3691830
Merge: 122cc5d 2f6fa46
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:23:40 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 2f6fa469580721477f5b61c01ff4c6477d8a9503
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 17:23:20 2014 +1100

    Algo to push reviewers. Needs work

diff --git a/Algorithm/Algo b/Algorithm/Algo
index b639447..48155a4 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -51,24 +51,23 @@ class PaperForReview
 		void conflictingReviewers();
 		void algo();
 		void fillVectors();
-		
-	public:
-		//getter
-		std::vector<int> getReviewers(int, int);
+		//push
+		void pushReviewers();
 
 };
 
-std::vector<int> getReviewers(int paperID, int confID)
+std::vector<int> pushReviewers()
 {
 	
-	std::vector<int> reviewers;
-	
 	for(int i=0; i<numOfReqReviewrs; i++)
 	{
-		reviewers.push_back(reviewerBids[i].reviewerID);
+		if(reviewerBids.score[i] > 1)
+		{
+			//Push new Reviewer to the database
+			//db->reviewerAssigned(paperID,ReviewerBid.reviewerID
+		}
 	}
-	
-	return reviewers;
+
 }
 
 void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
@@ -130,6 +129,10 @@ PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers)
 	fillVectors(paperID);
 	
 	algo(PaperID, confID);
+	
+	pushReviewers();
+	
+	//del???
 }
 
 
@@ -160,7 +163,6 @@ void  PaperForReview::conflictingReviewers()
 
 
 //TODO: matching keywords from database returns
-//		vectors?
 int calculateScore(int userID, int paperID)
 {
 	int score = 1;

commit 122cc5d8a6e6bbd7685a295f2136a371b47e5fe4
Merge: 2fa7390 c2a0d89
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:22:46 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 2fa739053a90902605c20822c81ca8e49baa4b35
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:22:38 2014 +1100

    fixed minor typos

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 0ef447b..fdbcf3a 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -47,7 +47,7 @@ class PCChair : public User {
   void removeUser(int userToRemove) { //remove by paperID
     for(unsigned int i = 0; i < allUsers.size(); ++i)
     {
-      if(allUsers[i].userID == userToRemove) {
+      if(allUsers[i].getUserID() == userToRemove) {
         allUsers.erase(allUsers.begin() + i);
         return;
       }
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 89a890f..41cb291 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -2,10 +2,12 @@
 #define PAPER_H
 
 #include "Discussion.hpp"
+#include "Review.hpp"
 
 #include <vector>
 
 class User;
+//class Review;
 
 class Paper {
   public:
@@ -51,7 +53,7 @@ class Paper {
     void setAuthors(const std::vector<User>& iauthors) {authors = iauthors;}
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
     void setConfKeyWord(const std::string& iconfKeyword) {confKeyword = iconfKeyword;}
-    void setReviews(const std::Vector<Review>& ireviews) {reviews = ireviews;}
+    void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
     void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
     void setPaperID(int ipaperID) {paperID = ipaperID;}
     void setConfID(int iconfID) {confID = iconfID;}
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index f8f9bac..ce0f0bd 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -1,12 +1,14 @@
 #ifndef REVIEW_H
 #define REVIEW_H
 
-#include "Paper.hpp"
+//#include "Paper.hpp"
+
+class Paper;
 
 struct Review {
   Review() { }
   Review(Paper* ipaper,
-    int ireviewerID, // NOTE: taken out as should be generated by database
+    int ireviewerID,
     int ioverall,
     int iconfidence,
     int irelevance,
@@ -21,7 +23,7 @@ struct Review {
     const std::string& icommentsShortPaper,
     const std::string& icommentsBestAward):
     paper(ipaper),
-    reviewerID(ireviewerID)
+    reviewerID(ireviewerID),
     overall(ioverall),
     confidence(iconfidence),
     relevance(irelevance),
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 64aa6cc..fc8c2b6 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -108,7 +108,7 @@ class Reviewer : public Author {
     void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
       for(unsigned int i = 0; i < reviews.size(); ++i)
       {
-        if(reviews[i].paper->paperID == reviewToRemove) {
+        if(reviews[i].paper->getPaperID() == reviewToRemove) {
           reviews.erase(reviews.begin() + i);
           return;
         }

commit c2a0d89a949ff3118d05ed1148c29b300ece5353
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:19:20 2014 +1100

    Create PersonalInfo.hpp

diff --git a/Server/PersonalInfo.hpp b/Server/PersonalInfo.hpp
new file mode 100644
index 0000000..5943341
--- /dev/null
+++ b/Server/PersonalInfo.hpp
@@ -0,0 +1,47 @@
+#ifndef USER_H
+#define USER_H
+
+#include <string>
+#include <vector>
+
+
+struct PersonalInfo {
+  PersonalInfo() {}
+  
+  PersonalInfo(
+         std::string& iname,
+         std::string& iemail,
+         std::string& iorganisation,
+         std::string& iphone,
+         std::string& ipassword,
+         int iinfoID,
+         ):
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         infoID(iinfoID)
+         { }
+
+  PersonalInfo(
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         const std::string& ipassword,
+         ):
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         { }
+  int infoID{0};
+  std::string name{""};
+  std::string email{""};
+  std::string organisation{""};
+  std::string phone{""};
+
+};
+#endif

commit b77ce8e5f3237098f7396703fb9338daba56b207
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:18:15 2014 +1100

    Update DiscussionPost.hpp

diff --git a/Server/DiscussionPost.hpp b/Server/DiscussionPost.hpp
index a083450..6aee447 100644
--- a/Server/DiscussionPost.hpp
+++ b/Server/DiscussionPost.hpp
@@ -4,14 +4,14 @@
 
 struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
-                 const std::string& ireviewerUName,
+                 int ireviewerID,
                  int ipostID):
                  comment(icomment),
-                 reviewerUName(ireviewerUName),
+                 reviewerID(ireviewerID),
                  postID(ipostID)
                  { }
   std::string comment{""};
-  std::string reviewerUName{""};
+  int reviewerID{0};
   int postID{0};
 };
 #endif

commit 377625b465ad2f4d6fe6e16ead4ac7f64c91fa4f
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:16:57 2014 +1100

    Update Review.hpp

diff --git a/Server/Review.hpp b/Server/Review.hpp
index a7b1b10..f959fd2 100644
--- a/Server/Review.hpp
+++ b/Server/Review.hpp
@@ -3,8 +3,8 @@
 #include <string>
 
 struct Review {
-  Review(const std::string& ireviewerName,
-  int reviewId,
+  Review(
+  int ireviewerID,
   int ioverall,
   int iconfidence,
   int irelevance,
@@ -18,7 +18,7 @@ struct Review {
   const std::string& icommentsSuggestions,
   const std::string& icommentsShortPaper,
   const std::string& icommentsBestAward):
-  reviewerName(ireviewerName),
+  reviewerID(ireviewerID),
   overall(ioverall),
   confidence(iconfidence),
   relevance(irelevance),
@@ -33,8 +33,7 @@ struct Review {
   commentsShortPaper(icommentsShortPaper),
   commentsBestAward(icommentsBestAward)
   { }
-  std::string reviewerName;
-  int reviewId{0};
+  int reviewerID{0};
   int overall{0};
   int confidence{0};
   int relevance{0};

commit 7477c8bce0b491e776bb0094dd38762e0b95c8ec
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 17:16:29 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 280f2d5..f5dcf57 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -99,3 +99,13 @@ void ConferenceManager::fetchConference(int confId)
 {
     *currentConference = db->fetchConference(confId);
 }
+
+
+void ConferenceManager::allocatePapers()
+{
+        //for each paper!!!!
+        
+        PaperForReview(paperID, &currentConference, currentConference->reviewersPerPaper);
+}   
+    
+

commit 368e6889eac6c807a28655c7688d746fbdf3a6f6
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:14:02 2014 +1100

    Update PaperSummary.hpp

diff --git a/Server/PaperSummary.hpp b/Server/PaperSummary.hpp
index e499dae..69f2420 100644
--- a/Server/PaperSummary.hpp
+++ b/Server/PaperSummary.hpp
@@ -1,11 +1,16 @@
 #ifndef PAPER_SUMMARY_H
 #define PAPER_SUMMARY_H
+
 #include <string>
+
 struct PaperSummary {
-PaperSummary(int ipaperID, const std::string& ipaperName) :
-paperID(ipaperID), paperName(ipaperName)
-{ }
-int paperID{0};
-std::string paperName{""};
+	PaperSummary() {}
+
+	PaperSummary(int ipaperId, const std::string& ipaperName) :
+	paperId(ipaperId), paperName(ipaperName)
+	{ }
+
+	int paperId{0};
+	std::string paperName{""};
 };
 #endif

commit 06f6fcd5f59f41f2ea8380f93cb9061388696f5d
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 17:13:27 2014 +1100

    Update Paper.hpp

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index e09f989..9d7934b 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -12,27 +12,37 @@ struct Paper {
 
     Paper() { }
     Paper(const int ipaperID,
+      const int iconfID,
+      const int ileadAuthorID,
       const std::string& ititle,
       const std::string& iabstract,
       const std::vector<std::string>& iauthors,
       const std::vector<std::string>& ikeywords,
+      const std::string& iconfKeyword,
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion)
       :
       paperID(ipaperID),
+      confID(iconfID),
+      leadAuthorID(ileadAuthorID),
       title(ititle),
       abstract(iabstract),
       authors(iauthors),
       keywords(ikeywords),
+      confKeyword(iconfKeyword),
       reviews(ireviews),
       discussion(idiscussion)
       { }
     // no assignment operator or copy constructor deemed necessary at this point
     int paperID{0};
+    int confID{0};
+    int leadAuthorID{0};
     std::string title{""};
     std::string abstract{""};
     std::vector<User> authors;
     std::vector<std::string> keywords;
+    std::string confKeyword
+
     Discussion discussion;
     std::vector<Review> reviews;
 };

commit a4c70982b36dc848aff8d94645978631edf965ea
Merge: d6f24a2 6951c7b
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:12:00 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit d6f24a25b2ec6fa1efeac0a23ec448c397b8f26a
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 17:11:49 2014 +1100

    updating as to connect to server

diff --git a/AdminClient/AdminClient.cpp b/AdminClient/AdminClient.cpp
new file mode 100644
index 0000000..277a431
--- /dev/null
+++ b/AdminClient/AdminClient.cpp
@@ -0,0 +1,69 @@
+#include <iostream>
+#include <QApplication>
+//#include <qt5/QtWidgets/qwidget.h> // NOTE: might need to be <QtGui/QApplication>
+
+//#include "LoginManager.hpp"
+#include "mainwindow.hpp"
+
+QTcpSocket *establishConnection();
+
+int main(int argc, char *argv[]) {
+    // initialize resources, if needed
+    // Q_INIT_RESOURCE(resfile);
+
+    QApplication app(argc, argv);
+
+    QTcpSocket *server = establishConnection();
+    LoginManager *mainWindow = new LoginManager(server);
+    
+    mainWindow->mWindow = new MainWindow;
+    mainWindow->mWindow->show();
+
+    return app.exec();
+}
+
+QTcpSocket *establishConnection() {
+    // just connect on localhost
+    std::string servername = "10.64.32.150";//"127.0.0.1";
+    std::string pnumstr = "23457";
+    /*QRegExp portChk("^\\d{4,5}$");
+    QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
+    std::cout << "Enter ip address (IP-IV) of server : ";
+    std::string servername;
+    std::cin >> servername;
+
+    int matchpt = ipChk.indexIn(servername.c_str());
+    if(matchpt < 0) {
+        std::cout << "Invalid ip address!";
+        exit(1);
+    }
+    std::cout << "Enter portnumber : ";
+    std::string pnumstr;
+    std::cin >> pnumstr;
+    matchpt = portChk.indexIn(pnumstr.c_str());
+    if(matchpt < 0) {
+        std::cout << "Invalid port number!";
+    }*/
+    QTcpSocket *tcpSocket = new QTcpSocket(0);
+    QString qhost = servername.c_str();
+    QString qport = pnumstr.c_str();
+    tcpSocket->connectToHost(qhost, qport.toInt());
+    // Allow time for connection to establish, then check that all
+    // looks good. If any problems, abort execution.
+    bool ok = tcpSocket->waitForConnected(1000);
+    if (!ok) {
+        std::cout << "Wait for connected didn't work" << std::endl;
+        exit(1);
+    }
+    if (!tcpSocket->isValid()) {
+        std::cout << "Didn't connect completely?" << std::endl;
+        exit(1);
+    } QAbstractSocket::SocketState state;
+    state = tcpSocket->state();
+    if (state != QAbstractSocket::ConnectedState) {
+        std::cout << "Not happy with state" << std::endl;
+        exit(1);
+    }
+    
+    return tcpSocket; 
+} 
diff --git a/AdminClient/AdminClientDriver.cpp b/AdminClient/AdminClientDriver.cpp
deleted file mode 100644
index 26e2b92..0000000
--- a/AdminClient/AdminClientDriver.cpp
+++ /dev/null
@@ -1,24 +0,0 @@
-#include <iostream>
-
-#include "Conference.hpp"
-#include "ConferenceManager.hpp"
-#include "Date.hpp"
-#include "Discussion.hpp"
-#include "DiscussionPost.hpp"
-#include "LoginManager.hpp"
-#include "Paper.hpp"
-#include "PaperManager.hpp"
-#include "Review.hpp"
-#include "SuperUser.hpp"
-#include "User.hpp"
-#include "UserManager.hpp"
-
-
-int main()
-{
-std::cout << "hello world" << std::endl;
-int foo = 6;
-auto bar = foo;
-std::cout << bar << "bar" << std::endl;
-return 0;
-}
diff --git a/AdminClient/AdminClientStubForServer.hpp b/AdminClient/AdminClientStubForServer.hpp
index e3c848d..4775044 100644
--- a/AdminClient/AdminClientStubForServer.hpp
+++ b/AdminClient/AdminClientStubForServer.hpp
@@ -11,16 +11,16 @@
 #ifndef USERCLIENTSTUBFORSERVER_H
 #define	USERCLIENTSTUBFORSERVER_H
 
-#include <qt4/Qt/QtCore>
-#include <qt4/Qt/QtNetwork>
+#include <QtCore>
+#include <QtNetwork>
 
-class MainWindow;
+class LoginManager;
 
 class AdminClientStubForServer : public QObject {
     
     Q_OBJECT;
 public:
-    AdminClientStubForServer(QTcpSocket *aServer, MainWindow* aMainGui) {
+    AdminClientStubForServer(QTcpSocket *aServer, LoginManager* aMainGui) {
         this->theServer = aServer;
         this->mainGui = aMainGui;
         this->busy = false;
@@ -68,7 +68,7 @@ private:
 
     // Collaborators 
     QTcpSocket *theServer;
-    MainWindow *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
+    LoginManager *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
 
 };
 
diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index fdc0229..4450690 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -4,55 +4,60 @@
 #include <sstream>
 
 class Date {
-public:  
-  Date() { }
-  Date(int iday,
-    int imonth,
-    int iyear):
-    day(iday),
-    month(imonth),
-    year(iyear)
-    { }
-
-  Date(const Date& in) {
-  day = in.day;
-  month = in.month;
-  year = in.year;}
-  
-    int getDay() {return day;}
-    int getMonth() {return month;}
-    int getYear() {return year;}
+    
+public:
+    Date() { }
+    Date(int iday,
+         int imonth,
+         int iyear):
+         day(iday),
+         month(imonth),
+         year(iyear)
+             { }
+    
+    Date(const Date& in)
+    {
+        day = in.day;
+        month = in.month;
+        year = in.year;
+    }
+    
+// NOTE: changed get functions, new below
     void setDay(int iday) {day = iday;}
     void setMonth(int imonth) {month = imonth;}
     void setYear(int iyear) {year = iyear;}
-
-  
-  bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-  {
-    if(idate.year != year) {
-      return idate.year < year;
-    } else {
-      if(idate.month != month) {
-        return idate.month < month;
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    
+    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+    {
+        if(idate.year != year) {
+            return idate.year < year;
         } else {
-        if(idate.day != day) {
-      return idate.day < day;
-          }
-        }  
+            if(idate.month != month) {
+                return idate.month < month;
+            } else {
+                if(idate.day != day) {
+                    return idate.day < day;
+                }
+            }
+        }
+        return true;
     }
-    return true;
-  }
-  
+
   std::string convertToString()
   {
     std::stringstream temp;
     temp << day << "/" << month << "/" << year; 
     return(temp.str());
-  }  
-  }
+  } 
+    
 private:
-int day{0};
-int month{0};
-int year{0};
+    int day{0};
+    int month{0};
+    int year{0};
+    
 };
+
 #endif
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index 1f859df..f6a403e 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -2,15 +2,33 @@
 #define LOGIN_MANAGER_H
 
 #include "User.hpp"
+#include "AdminClientStubForServer.hpp"
+
+class MainWindow;
 
 class LoginManager {
 public:
+  LoginManager(QTcpSocket* aServer) {
+    
+    // Connection will mainly be managed by an instance of client stub class
+    AdminClientStubForServer *stub = new AdminClientStubForServer(aServer, this);
+    this->theServer = stub;
+    // but do have some more initialisation to do on the connection
+    aServer->setParent(this->theServer);
+    // Read events generated through TCP connection to be handled by
+    // instance of clientstub class
+    QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
+ 
+  }
   LoginManager(bool iloggedIn) :
     loggedIn(iloggedIn)
     { }
   ~LoginManager() {
     delete currentUser;
   }
+  
+  MainWindow* mWindow;
+  
   bool getLoggedIn() {return loggedIn;}
   User* getCurrentUser() {return currentUser;}
   void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}
@@ -22,5 +40,6 @@ public:
 private:
   bool loggedIn;
   User* currentUser{nullptr};
+  AdminClientStubForServer* theServer;
 };
 #endif
diff --git a/AdminClient/mainwindow.cpp b/AdminClient/mainwindow.cpp
index 5913713..6e74aad 100644
--- a/AdminClient/mainwindow.cpp
+++ b/AdminClient/mainwindow.cpp
@@ -1,4 +1,4 @@
-#include "mainwindow.h"
+#include "mainwindow.hpp"
 #include "ui_mainwindow.h"
 
 MainWindow::MainWindow(QWidget *parent) :
@@ -25,7 +25,8 @@ void MainWindow::on_rmvConf_clicked()
 
 void MainWindow::on_addUserKey_clicked()
 {
-    ui->userKeyList->addItem(ui->userKeyEntry->text());
+//    NOTE: error: ‘class Ui::MainWindow’ has no member named ‘userKeyEntry’
+//    ui->userKeyList->addItem(ui->userKeyEntry->text());
 }
 
 void MainWindow::on_rmvUserKey_clicked()
diff --git a/AdminClient/mainwindow.hpp b/AdminClient/mainwindow.hpp
index 39b7dcd..973af2c 100644
--- a/AdminClient/mainwindow.hpp
+++ b/AdminClient/mainwindow.hpp
@@ -2,6 +2,7 @@
 #define MAINWINDOW_H
 
 #include <QMainWindow>
+#include "LoginManager.hpp"
 
 namespace Ui {
 class MainWindow;
@@ -28,6 +29,9 @@ private slots:
     
 private:
     Ui::MainWindow *ui;
+    LoginManager* loginMgr;
+    QString username;
+    QString password;
 };
 
 #endif // MAINWINDOW_H
diff --git a/UserClient/moc_UserClientStubForServer.cpp b/UserClient/moc_UserClientStubForServer.cpp
deleted file mode 100644
index a519a3e..0000000
--- a/UserClient/moc_UserClientStubForServer.cpp
+++ /dev/null
@@ -1,110 +0,0 @@
-/****************************************************************************
-** Meta object code from reading C++ file 'UserClientStubForServer.hpp'
-**
-** Created by: The Qt Meta Object Compiler version 67 (Qt 5.2.1)
-**
-** WARNING! All changes made in this file will be lost!
-*****************************************************************************/
-
-#include "UserClientStubForServer.hpp"
-#include <QtCore/qbytearray.h>
-#include <QtCore/qmetatype.h>
-#if !defined(Q_MOC_OUTPUT_REVISION)
-#error "The header file 'UserClientStubForServer.hpp' doesn't include <QObject>."
-#elif Q_MOC_OUTPUT_REVISION != 67
-#error "This file was generated using the moc from 5.2.1. It"
-#error "cannot be used with the include files from this version of Qt."
-#error "(The moc has changed too much.)"
-#endif
-
-QT_BEGIN_MOC_NAMESPACE
-struct qt_meta_stringdata_UserClientStubForServer_t {
-    QByteArrayData data[3];
-    char stringdata[43];
-};
-#define QT_MOC_LITERAL(idx, ofs, len) \
-    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
-    offsetof(qt_meta_stringdata_UserClientStubForServer_t, stringdata) + ofs \
-        - idx * sizeof(QByteArrayData) \
-    )
-static const qt_meta_stringdata_UserClientStubForServer_t qt_meta_stringdata_UserClientStubForServer = {
-    {
-QT_MOC_LITERAL(0, 0, 23),
-QT_MOC_LITERAL(1, 24, 16),
-QT_MOC_LITERAL(2, 41, 0)
-    },
-    "UserClientStubForServer\0readResponseData\0"
-    "\0"
-};
-#undef QT_MOC_LITERAL
-
-static const uint qt_meta_data_UserClientStubForServer[] = {
-
- // content:
-       7,       // revision
-       0,       // classname
-       0,    0, // classinfo
-       1,   14, // methods
-       0,    0, // properties
-       0,    0, // enums/sets
-       0,    0, // constructors
-       0,       // flags
-       0,       // signalCount
-
- // slots: name, argc, parameters, tag, flags
-       1,    0,   19,    2, 0x0a,
-
- // slots: parameters
-    QMetaType::Void,
-
-       0        // eod
-};
-
-void UserClientStubForServer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
-{
-    if (_c == QMetaObject::InvokeMetaMethod) {
-        UserClientStubForServer *_t = static_cast<UserClientStubForServer *>(_o);
-        switch (_id) {
-        case 0: _t->readResponseData(); break;
-        default: ;
-        }
-    }
-    Q_UNUSED(_a);
-}
-
-const QMetaObject UserClientStubForServer::staticMetaObject = {
-    { &QObject::staticMetaObject, qt_meta_stringdata_UserClientStubForServer.data,
-      qt_meta_data_UserClientStubForServer,  qt_static_metacall, 0, 0}
-};
-
-
-const QMetaObject *UserClientStubForServer::metaObject() const
-{
-    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
-}
-
-void *UserClientStubForServer::qt_metacast(const char *_clname)
-{
-    if (!_clname) return 0;
-    if (!strcmp(_clname, qt_meta_stringdata_UserClientStubForServer.stringdata))
-        return static_cast<void*>(const_cast< UserClientStubForServer*>(this));
-    return QObject::qt_metacast(_clname);
-}
-
-int UserClientStubForServer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
-{
-    _id = QObject::qt_metacall(_c, _id, _a);
-    if (_id < 0)
-        return _id;
-    if (_c == QMetaObject::InvokeMetaMethod) {
-        if (_id < 1)
-            qt_static_metacall(this, _c, _id, _a);
-        _id -= 1;
-    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
-        if (_id < 1)
-            *reinterpret_cast<int*>(_a[0]) = -1;
-        _id -= 1;
-    }
-    return _id;
-}
-QT_END_MOC_NAMESPACE
diff --git a/UserClient/moc_mainwindow.cpp b/UserClient/moc_mainwindow.cpp
deleted file mode 100644
index d4f6528..0000000
--- a/UserClient/moc_mainwindow.cpp
+++ /dev/null
@@ -1,189 +0,0 @@
-/****************************************************************************
-** Meta object code from reading C++ file 'mainwindow.hpp'
-**
-** Created by: The Qt Meta Object Compiler version 67 (Qt 5.2.1)
-**
-** WARNING! All changes made in this file will be lost!
-*****************************************************************************/
-
-#include "mainwindow.hpp"
-#include <QtCore/qbytearray.h>
-#include <QtCore/qmetatype.h>
-#if !defined(Q_MOC_OUTPUT_REVISION)
-#error "The header file 'mainwindow.hpp' doesn't include <QObject>."
-#elif Q_MOC_OUTPUT_REVISION != 67
-#error "This file was generated using the moc from 5.2.1. It"
-#error "cannot be used with the include files from this version of Qt."
-#error "(The moc has changed too much.)"
-#endif
-
-QT_BEGIN_MOC_NAMESPACE
-struct qt_meta_stringdata_MainWindow_t {
-    QByteArrayData data[22];
-    char stringdata[434];
-};
-#define QT_MOC_LITERAL(idx, ofs, len) \
-    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
-    offsetof(qt_meta_stringdata_MainWindow_t, stringdata) + ofs \
-        - idx * sizeof(QByteArrayData) \
-    )
-static const qt_meta_stringdata_MainWindow_t qt_meta_stringdata_MainWindow = {
-    {
-QT_MOC_LITERAL(0, 0, 10),
-QT_MOC_LITERAL(1, 11, 16),
-QT_MOC_LITERAL(2, 28, 0),
-QT_MOC_LITERAL(3, 29, 15),
-QT_MOC_LITERAL(4, 45, 17),
-QT_MOC_LITERAL(5, 63, 19),
-QT_MOC_LITERAL(6, 83, 30),
-QT_MOC_LITERAL(7, 114, 24),
-QT_MOC_LITERAL(8, 139, 16),
-QT_MOC_LITERAL(9, 156, 18),
-QT_MOC_LITERAL(10, 175, 21),
-QT_MOC_LITERAL(11, 197, 21),
-QT_MOC_LITERAL(12, 219, 20),
-QT_MOC_LITERAL(13, 240, 20),
-QT_MOC_LITERAL(14, 261, 22),
-QT_MOC_LITERAL(15, 284, 22),
-QT_MOC_LITERAL(16, 307, 21),
-QT_MOC_LITERAL(17, 329, 21),
-QT_MOC_LITERAL(18, 351, 30),
-QT_MOC_LITERAL(19, 382, 5),
-QT_MOC_LITERAL(20, 388, 39),
-QT_MOC_LITERAL(21, 428, 4)
-    },
-    "MainWindow\0on_login_clicked\0\0"
-    "on_quit_clicked\0on_logout_clicked\0"
-    "on_logout_2_clicked\0on_passwordLogin_returnPressed\0"
-    "on_createAccount_clicked\0on_apply_clicked\0"
-    "on_apply_2_clicked\0on_addConfKey_clicked\0"
-    "on_rmvConfKey_clicked\0on_addAuthor_clicked\0"
-    "on_rmvAuthor_clicked\0on_addPaperKey_clicked\0"
-    "on_rmvPaperKey_clicked\0on_addAuthKey_clicked\0"
-    "on_rmvAuthKey_clicked\0"
-    "on_selectPaperAuthor_activated\0index\0"
-    "on_selectPaperAuthor_currentTextChanged\0"
-    "arg1\0"
-};
-#undef QT_MOC_LITERAL
-
-static const uint qt_meta_data_MainWindow[] = {
-
- // content:
-       7,       // revision
-       0,       // classname
-       0,    0, // classinfo
-      18,   14, // methods
-       0,    0, // properties
-       0,    0, // enums/sets
-       0,    0, // constructors
-       0,       // flags
-       0,       // signalCount
-
- // slots: name, argc, parameters, tag, flags
-       1,    0,  104,    2, 0x08,
-       3,    0,  105,    2, 0x08,
-       4,    0,  106,    2, 0x08,
-       5,    0,  107,    2, 0x08,
-       6,    0,  108,    2, 0x08,
-       7,    0,  109,    2, 0x08,
-       8,    0,  110,    2, 0x08,
-       9,    0,  111,    2, 0x08,
-      10,    0,  112,    2, 0x08,
-      11,    0,  113,    2, 0x08,
-      12,    0,  114,    2, 0x08,
-      13,    0,  115,    2, 0x08,
-      14,    0,  116,    2, 0x08,
-      15,    0,  117,    2, 0x08,
-      16,    0,  118,    2, 0x08,
-      17,    0,  119,    2, 0x08,
-      18,    1,  120,    2, 0x08,
-      20,    1,  123,    2, 0x08,
-
- // slots: parameters
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void,
-    QMetaType::Void, QMetaType::Int,   19,
-    QMetaType::Void, QMetaType::QString,   21,
-
-       0        // eod
-};
-
-void MainWindow::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
-{
-    if (_c == QMetaObject::InvokeMetaMethod) {
-        MainWindow *_t = static_cast<MainWindow *>(_o);
-        switch (_id) {
-        case 0: _t->on_login_clicked(); break;
-        case 1: _t->on_quit_clicked(); break;
-        case 2: _t->on_logout_clicked(); break;
-        case 3: _t->on_logout_2_clicked(); break;
-        case 4: _t->on_passwordLogin_returnPressed(); break;
-        case 5: _t->on_createAccount_clicked(); break;
-        case 6: _t->on_apply_clicked(); break;
-        case 7: _t->on_apply_2_clicked(); break;
-        case 8: _t->on_addConfKey_clicked(); break;
-        case 9: _t->on_rmvConfKey_clicked(); break;
-        case 10: _t->on_addAuthor_clicked(); break;
-        case 11: _t->on_rmvAuthor_clicked(); break;
-        case 12: _t->on_addPaperKey_clicked(); break;
-        case 13: _t->on_rmvPaperKey_clicked(); break;
-        case 14: _t->on_addAuthKey_clicked(); break;
-        case 15: _t->on_rmvAuthKey_clicked(); break;
-        case 16: _t->on_selectPaperAuthor_activated((*reinterpret_cast< int(*)>(_a[1]))); break;
-        case 17: _t->on_selectPaperAuthor_currentTextChanged((*reinterpret_cast< const QString(*)>(_a[1]))); break;
-        default: ;
-        }
-    }
-}
-
-const QMetaObject MainWindow::staticMetaObject = {
-    { &QMainWindow::staticMetaObject, qt_meta_stringdata_MainWindow.data,
-      qt_meta_data_MainWindow,  qt_static_metacall, 0, 0}
-};
-
-
-const QMetaObject *MainWindow::metaObject() const
-{
-    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
-}
-
-void *MainWindow::qt_metacast(const char *_clname)
-{
-    if (!_clname) return 0;
-    if (!strcmp(_clname, qt_meta_stringdata_MainWindow.stringdata))
-        return static_cast<void*>(const_cast< MainWindow*>(this));
-    return QMainWindow::qt_metacast(_clname);
-}
-
-int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
-{
-    _id = QMainWindow::qt_metacall(_c, _id, _a);
-    if (_id < 0)
-        return _id;
-    if (_c == QMetaObject::InvokeMetaMethod) {
-        if (_id < 18)
-            qt_static_metacall(this, _c, _id, _a);
-        _id -= 18;
-    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
-        if (_id < 18)
-            *reinterpret_cast<int*>(_a[0]) = -1;
-        _id -= 18;
-    }
-    return _id;
-}
-QT_END_MOC_NAMESPACE

commit 6951c7b1a345f8813d9c93e57e9b955608846faa
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 17:11:45 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 3ecb7a7..89a890f 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -57,7 +57,30 @@ class Paper {
     void setConfID(int iconfID) {confID = iconfID;}
     void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
     void downloadPaper();
-
+    void addToKeywords(const std::string& in) {
+      keywords.push_back(in);
+    }
+    void removeOwnPaper(const std::string& keywordToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < keywords.size(); ++i)
+      {
+        if(keywords[i] == keywordToRemove) {
+          keywords.erase(keywords.begin() + i);
+          return;
+        }
+      }
+    }
+    void addToReviews(const Review& in) {
+      reviews.push_back(in);
+    }
+    void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
+      for(unsigned int i = 0; i < reviews.size(); ++i)
+      {
+        if(reviews[i].paper->paperID == reviewToRemove) {
+          reviews.erase(reviews.begin() + i);
+          return;
+        }
+      }
+    } 
   private:
     std::string title{""};
     std::string abstract{""};

commit 51a5e5fc71e9b1edf798d3aca550c851fdb905a3
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 17:03:45 2014 +1100

    Changed reviewerBids to be a vector

diff --git a/Algorithm/Algo b/Algorithm/Algo
index eb55459..b639447 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -1,6 +1,8 @@
 /*
 	Algo to be run on server side at bool variable change "allocationDateBool"
 	See below for arguments
+	
+	//takes in paperID, conferenceID, and numReqReviewers for paper
 */
 
 //Algo:
@@ -29,13 +31,15 @@ struct ReviewerBid
 class PaperForReview
 {
 	private:
-		PapersForReview(int);
+		PapersForReview(int, int, int);
 		~PapersForReview();
 		int paperID;
 		int conferenceID;
 		
-		ReviewerBid reviewerBids[numOfReqReviewrs] ;
-
+		std::vector<ReviewerBid> reviewerBids;
+		
+		int numOfReqReviewrs;
+		
 		std::vector<int> authors;
 		std::vector<int> involvedOrganisation;
 		std::vector<int> conflictingReviewersVec;
@@ -108,14 +112,19 @@ PaperForReview::~PaperForReview()
 
 }
 
-PaperForReview::PaperForReview(int newPaperID, int confID)
+PaperForReview::PaperForReview(int newPaperID, int confID, int numReviewers)
 {
 	paperID = newPaperID
 	conferenceID = confID;
 	
-	for(int i=0; i< NumOfReqReviewrs; i++)
+	numOfReqReviewrs = numReviewers;
+	
+	reviewerBids.resize(numOfReqReviewrs)
+	
+	for(int i=0; i< numOfReqReviewrs; i++)
 	{
 		reviewerBids[i].score = -1;
+		reviewerBids[i].reviewerID = -1;
 	}
 	
 	fillVectors(paperID);
@@ -143,7 +152,7 @@ void  PaperForReview::conflictingReviewers()
 				//PushBack^
 
 	//pastCoAuthors
-		//(4)ForEachAuthor:   selectAllPapers in temp
+		//(4)ForEachAuthor:   selectAllPapers into temp
 			//Select All authors for each paper in temp
 				//pushBack^
 }

commit 1f67420e0903146e3dc065f3cd15558b1502b178
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 17:00:06 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 00ba0da..280f2d5 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -62,7 +62,7 @@ void ConferenceManager::checkAllDeadlines()
 {
     std::vector<Conference> in = getAllConferences(); //gets all conferences in database
     
-    for (unsigned i=0; i < in.size(); i++) {
+    for (unsigned i = 0; i < in.size(); i++) {
       checkDeadlines(&in[i])
   }
 }
@@ -73,7 +73,7 @@ std:vector<Conferences> ConferenceManager::getAllActiveConferences()
     
     std::vector<Conference> conferences;
     
-    for(int i = 0; i < activeConfs.size(); ++i)
+    for(unsigned int i = 0; i < activeConfs.size(); ++i)
     {
         conferences.push_back(db->fetchConference(activeConfs[i]));
     }
@@ -87,7 +87,7 @@ std:vector<Conferences> ConferenceManager::getAllConferences()
     
     std::vector<Conference> conferences;
     
-    for(int i = 0; i < activeConfs.size(); ++i)
+    for(unsigned int i = 0; i < activeConfs.size(); ++i)
     {
         conferences.push_back(db->fetchConference(allConfs[i]));
     }
@@ -98,5 +98,4 @@ std:vector<Conferences> ConferenceManager::getAllConferences()
 void ConferenceManager::fetchConference(int confId)
 {
     *currentConference = db->fetchConference(confId);
-    
 }

commit 34517ec707bb7f060558bad1f0d2caf5506de628
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:59:04 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 191257a..3ecb7a7 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -15,6 +15,7 @@ class Paper {
       const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& iconfKeyword,
+      const std::vector<Review>& ireviews,
       const Discussion& idiscussion,
       int ipaperID,
       int iconfID,
@@ -25,6 +26,7 @@ class Paper {
       authors(iauthors),
       keywords(ikeywords),
       confKeyword(iconfKeyword),
+      reviews(ireviews),
       discussion(idiscussion),
       paperID(ipaperID),
       confID(iconfID),
@@ -38,6 +40,7 @@ class Paper {
     std::vector<User> getAuthors() {return authors;}
     std::vector<std::string> getKeywords() {return keywords;}
     std::string getConfKeyword() {return confKeyword;}
+    std::vector<Review> getReviews() {return reviews;}
     Discussion getDiscussion() {return discussion;}
     int getPaperID() {return paperID;}
     int getConfID() {return confID;}
@@ -48,10 +51,11 @@ class Paper {
     void setAuthors(const std::vector<User>& iauthors) {authors = iauthors;}
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
     void setConfKeyWord(const std::string& iconfKeyword) {confKeyword = iconfKeyword;}
+    void setReviews(const std::Vector<Review>& ireviews) {reviews = ireviews;}
+    void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
     void setPaperID(int ipaperID) {paperID = ipaperID;}
     void setConfID(int iconfID) {confID = iconfID;}
     void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
-    void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
     void downloadPaper();
 
   private:
@@ -60,6 +64,7 @@ class Paper {
     std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string confKeyword{""};
+    std::vector<Review> reviews;
     Discussion discussion;
     int paperID{0};
     int confID{0};

commit e593f48ef04661885be596299dc789f60942f93a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:50:11 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 82fa436..64aa6cc 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -105,10 +105,10 @@ class Reviewer : public Author {
     void addToReviews(const Review& in) {
       reviews.push_back(in);
     }
-    void removeReview(int paperToRemove) {
+    void removeReview(int reviewToRemove) { //remove by paper ID of the paper that was reviewed
       for(unsigned int i = 0; i < reviews.size(); ++i)
       {
-        if(reviews[i].paperID == paperToRemove) {
+        if(reviews[i].paper->paperID == reviewToRemove) {
           reviews.erase(reviews.begin() + i);
           return;
         }

commit b9041b3f1b6fd2295c6ecb5bb0f3c21224bf18e0
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:48:50 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index d51b473..0ef447b 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -29,7 +29,30 @@ class PCChair : public User {
   void fetchPapers();
   void fetchUsers();
   void checkConferencesDeadlines(); // NOTE: was not declared but function existed, putting here for now
-
+  void addToAllPapers(const PaperSummary& in) {
+    allPapers.push_back(in);
+  }
+  void removePaperFromOwnPapers(int paperToRemove) { //remove by paperID
+    for(unsigned int i = 0; i < allPapers.size(); ++i)
+    {
+      if(allPapers[i].paperID == paperToRemove) {
+        allPapers.erase(allPapers.begin() + i);
+        return;
+      }
+    }
+  }
+  void addToAllUsers(const User& in) {
+    allUsers.push_back(in);
+  }
+  void removeUser(int userToRemove) { //remove by paperID
+    for(unsigned int i = 0; i < allUsers.size(); ++i)
+    {
+      if(allUsers[i].userID == userToRemove) {
+        allUsers.erase(allUsers.begin() + i);
+        return;
+      }
+    }
+  }
   private:
   PaperSummary* getPaperByTitle(std::string);
   PaperSummary* getPaperById(int);

commit 634133e9ce8c2228f0eb86d634751722592f227f
Merge: ee2b78c ef309e7
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:45:09 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit ef309e784596ea928663d8cc9f59e0b8e5999e71
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:43:47 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 4452d79..c075a5d 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -73,7 +73,7 @@ class Author : public User {
     void removeOwnPaper(int paperToRemove) { //remove by paperID
       for(unsigned int i = 0; i < ownPapers.size(); ++i)
       {
-        if(ownPapers.paperID == paperToRemove) {
+        if(ownPapers[i].paperID == paperToRemove) {
           ownPapers.erase(ownPapers.begin() + i);
           return;
         }

commit e39959863dbc7f9a3138d26edbb6f68442a25e68
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:40:23 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 262b0f4..82fa436 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -82,7 +82,7 @@ class Reviewer : public Author {
     void removeAllocatedPaper(int paperToRemove) { //remove by paperID
       for(unsigned int i = 0; i < allocatedPapers.size(); ++i)
       {
-        if(allocatedPapers.paperID == paperToRemove) {
+        if(allocatedPapers[i].paperID == paperToRemove) {
           allocatedPapers.erase(allocatedPapers.begin() + i);
           return;
         }
@@ -95,7 +95,7 @@ class Reviewer : public Author {
     void removePaperToBid(int paperToRemove) {
       for(unsigned int i = 0; i < papersToBid.size(); ++i)
       {
-        if(papersToBid.paperID == paperToRemove) {
+        if(papersToBid[i].paperID == paperToRemove) {
           papersToBid.erase(papersToBid.begin() + i);
           return;
         }
@@ -108,7 +108,7 @@ class Reviewer : public Author {
     void removeReview(int paperToRemove) {
       for(unsigned int i = 0; i < reviews.size(); ++i)
       {
-        if(reviews.paperID == paperToRemove) {
+        if(reviews[i].paperID == paperToRemove) {
           reviews.erase(reviews.begin() + i);
           return;
         }

commit ee2b78c53e2c013d57acbb91e3f869df8c0f240d
Merge: 942a7b3 3e307bb
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:38:36 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 3e307bb7ddffb0475886b6b6e134b7e520e23c8c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:38:03 2014 +1100

    Update Review.hpp

diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index 218d47d..f8f9bac 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -6,7 +6,7 @@
 struct Review {
   Review() { }
   Review(Paper* ipaper,
-    int ireviewerId, // NOTE: taken out as should be generated by database
+    int ireviewerID, // NOTE: taken out as should be generated by database
     int ioverall,
     int iconfidence,
     int irelevance,
@@ -37,7 +37,7 @@ struct Review {
     commentsBestAward(icommentsBestAward)
     { }
   Paper* paper{nullptr};
-  int reviewerId{0};
+  int reviewerID{0};
   int overall{0};
   int confidence{0};
   int relevance{0};

commit e7df3ac563555fd9318dd08685cb90824b12513e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:37:43 2014 +1100

    Update Review.hpp

diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index 62a4f39..218d47d 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -6,7 +6,7 @@
 struct Review {
   Review() { }
   Review(Paper* ipaper,
-    //int reviewId, // NOTE: taken out as should be generated by database
+    int ireviewerId, // NOTE: taken out as should be generated by database
     int ioverall,
     int iconfidence,
     int irelevance,
@@ -21,6 +21,7 @@ struct Review {
     const std::string& icommentsShortPaper,
     const std::string& icommentsBestAward):
     paper(ipaper),
+    reviewerID(ireviewerID)
     overall(ioverall),
     confidence(iconfidence),
     relevance(irelevance),
@@ -36,7 +37,7 @@ struct Review {
     commentsBestAward(icommentsBestAward)
     { }
   Paper* paper{nullptr};
-  int reviewId{0};
+  int reviewerId{0};
   int overall{0};
   int confidence{0};
   int relevance{0};

commit 942a7b33ca35369697c9bd24f00973ff94de224a
Merge: 90c59b0 06f8e42
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:36:49 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 06f8e4298b97b2c7c15ddc2049c21e1392f684a1
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:36:06 2014 +1100

    Update Review.hpp

diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
index a7b1b10..9ee5459 100644
--- a/AdminClient/Review.hpp
+++ b/AdminClient/Review.hpp
@@ -3,8 +3,7 @@
 #include <string>
 
 struct Review {
-  Review(const std::string& ireviewerName,
-  int reviewId,
+  Review(int reviewerID,
   int ioverall,
   int iconfidence,
   int irelevance,
@@ -18,7 +17,7 @@ struct Review {
   const std::string& icommentsSuggestions,
   const std::string& icommentsShortPaper,
   const std::string& icommentsBestAward):
-  reviewerName(ireviewerName),
+  reviewerID(ireviewerID),
   overall(ioverall),
   confidence(iconfidence),
   relevance(irelevance),
@@ -33,8 +32,7 @@ struct Review {
   commentsShortPaper(icommentsShortPaper),
   commentsBestAward(icommentsBestAward)
   { }
-  std::string reviewerName;
-  int reviewId{0};
+  int reviewerID{0};
   int overall{0};
   int confidence{0};
   int relevance{0};

commit 90c59b0121dd52f157e85fd5521248e64e8c9ae6
Merge: 89a0504 d85b802
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:33:55 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 89a0504772e98348db6db9d38db38b0cc4d14274
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:33:18 2014 +1100

    minor changes, can currently compile

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index cef6a79..65aebc6 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -73,7 +73,7 @@ class Author : public User {
     void removeOwnPaper(int paperToRemove) {
       for(unsigned int i = 0; i < ownPapers.size(); ++i)
       {
-        if(ownPapers.paperID == paperToRemove) {
+        if(ownPapers[i].paperID == paperToRemove) {
           ownPapers.erase(ownPapers.begin() + i);
           return;
         }
diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
index a753bae..e4a1c5c 100644
--- a/UserClient/UserClient.cpp
+++ b/UserClient/UserClient.cpp
@@ -1,6 +1,6 @@
 #include <iostream>
 #include <QApplication>
-#include <qt5/QtWidgets/qwidget.h> // NOTE: might need to be <QtGui/QApplication>
+//#include <qt5/QtWidgets/qwidget.h> // NOTE: might need to be <QtGui/QApplication>
 
 //#include "LoginManager.hpp"
 #include "mainwindow.hpp"
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 73dc341..bebc855 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,4 +1,4 @@
-#include "mainwindow.h"
+#include "mainwindow.hpp"
 #include "ui_mainwindow.h"
 
 MainWindow::MainWindow(QWidget *parent) :
@@ -155,20 +155,20 @@ void MainWindow::on_rmvAuthKey_clicked()
     delete ui->authKeyList->currentItem();
 }
 
-void MainWindow::on_selectPaperAuthor_activated(int index)
+void MainWindow::on_selectPaperAuthor_activated(int /*index*/)
 {
 
 }
 
-void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
+void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/)
 {
     ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
     if(ui->selectPaperAuthor->findText("*NEW*") == -1)
         ui->selectPaperAuthor->addItem("*NEW*");
 }
 
-//void MainWindow::on_tabWidget_currentChanged(int index)
-//{//change to current text or something
+void MainWindow::on_tabWidget_currentChanged(int index)
+{//change to current text or something
 //    switch(index){
 //    case 1:
 //        populate_infoTabAuthor();
@@ -196,7 +196,7 @@ void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
 
 
 //    }
-//}
+}
 
 //void MainWindow::populate_infoTabAuthor()
 //{
diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 37cf843..4f2f0d6 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -2,9 +2,9 @@
 #define MAINWINDOW_H
 
 #include <QMainWindow>
-//#include "LoginManager.hpp"
+#include "LoginManager.hpp"
 
-class LoginManager;
+//class LoginManager;
 
 //enum UserType_t; //{AUTHOR, REVIEWER, PCCHAIR};
 

commit d85b802feeb184a77555c5cde03d8d8bcc8739d9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:29:19 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 15669ec..262b0f4 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -76,7 +76,45 @@ class Reviewer : public Author {
     void setAllocatedPapers(const std::vector<PaperSummary>& iallocatedPapers) {allocatedPapers = iallocatedPapers;}
     void setPapersToBid(const std::vector<PaperSummary>& ipapersToBid) {papersToBid = ipapersToBid;}
     void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
-
+    void addToAllocatedPapers(const PaperSummary& in) {
+      allocatedPapers.push_back(in);
+    }
+    void removeAllocatedPaper(int paperToRemove) { //remove by paperID
+      for(unsigned int i = 0; i < allocatedPapers.size(); ++i)
+      {
+        if(allocatedPapers.paperID == paperToRemove) {
+          allocatedPapers.erase(allocatedPapers.begin() + i);
+          return;
+        }
+      }
+    } 
+    
+    void addToPapersToBid(const PaperSummary& in) {
+      papersToBid.push_back(in);
+    }
+    void removePaperToBid(int paperToRemove) {
+      for(unsigned int i = 0; i < papersToBid.size(); ++i)
+      {
+        if(papersToBid.paperID == paperToRemove) {
+          papersToBid.erase(papersToBid.begin() + i);
+          return;
+        }
+      }
+    } 
+    
+    void addToReviews(const Review& in) {
+      reviews.push_back(in);
+    }
+    void removeReview(int paperToRemove) {
+      for(unsigned int i = 0; i < reviews.size(); ++i)
+      {
+        if(reviews.paperID == paperToRemove) {
+          reviews.erase(reviews.begin() + i);
+          return;
+        }
+      }
+    } 
+    
   private:
     Paper* getPaperByTitle(std::string); // helper
     Paper* getPaperByIndex(int); // helper

commit 77bc73037d4d316ec3534dcc02d3b94fd658393a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:27:52 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index cef6a79..4452d79 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -70,7 +70,7 @@ class Author : public User {
     void addToOwnPapers(const PaperSummary& in) {
       ownPapers.push_back(in);
     }
-    void removeOwnPaper(int paperToRemove) {
+    void removeOwnPaper(int paperToRemove) { //remove by paperID
       for(unsigned int i = 0; i < ownPapers.size(); ++i)
       {
         if(ownPapers.paperID == paperToRemove) {

commit d090975fbe9e3b50c957431335f59680a9e4963d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:22:58 2014 +1100

    changed reviewerUName to reviewerID

diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
index a083450..6aee447 100644
--- a/AdminClient/DiscussionPost.hpp
+++ b/AdminClient/DiscussionPost.hpp
@@ -4,14 +4,14 @@
 
 struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
-                 const std::string& ireviewerUName,
+                 int ireviewerID,
                  int ipostID):
                  comment(icomment),
-                 reviewerUName(ireviewerUName),
+                 reviewerID(ireviewerID),
                  postID(ipostID)
                  { }
   std::string comment{""};
-  std::string reviewerUName{""};
+  int reviewerID{0};
   int postID{0};
 };
 #endif

commit 73fb8808be67b374cd90cc72071bcdb12c142816
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:19:30 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index b131a77..cef6a79 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -71,7 +71,7 @@ class Author : public User {
       ownPapers.push_back(in);
     }
     void removeOwnPaper(int paperToRemove) {
-      for(int i = 0; i < ownPapers.size(); ++i)
+      for(unsigned int i = 0; i < ownPapers.size(); ++i)
       {
         if(ownPapers.paperID == paperToRemove) {
           ownPapers.erase(ownPapers.begin() + i);

commit 4b76f6456dce7d6706182aac24cbf10e21dbeed3
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:18:11 2014 +1100

    Update DiscussionPost.hpp

diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
index fdbaaa6..6583c98 100644
--- a/UserClient/DiscussionPost.hpp
+++ b/UserClient/DiscussionPost.hpp
@@ -10,6 +10,6 @@ struct DiscussionPost {
                  reviewerID(ireviewerID)
                  { }
   std::string comment{""};
-  int reviewerID{""};
+  int reviewerID{0};
 };
 #endif

commit 7c0337b5a02781e6f4cddf2d6ec19bb5898e60f7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:17:57 2014 +1100

    Update DiscussionPost.hpp

diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
index 2d90363..fdbaaa6 100644
--- a/UserClient/DiscussionPost.hpp
+++ b/UserClient/DiscussionPost.hpp
@@ -5,11 +5,11 @@
 
 struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
-                 const std::string& ireviewerUName):
+                 int ireviewerID):
                  comment(icomment),
-                 reviewerUName(ireviewerUName)
+                 reviewerID(ireviewerID)
                  { }
   std::string comment{""};
-  std::string reviewerUName{""};
+  int reviewerID{""};
 };
 #endif

commit 99cd69f3e22ec159248bda4dcc406234f3101df7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:16:56 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 778e99d..b131a77 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -75,6 +75,7 @@ class Author : public User {
       {
         if(ownPapers.paperID == paperToRemove) {
           ownPapers.erase(ownPapers.begin() + i);
+          return;
         }
       }
     } 

commit 52a7ba5294918facf64d7f332fc6c1fdcae80ca5
Merge: 8d01f51 ba4f7c4
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:16:05 2014 +1100

    client can connect to a server then loads gui

commit 8d01f510472a98eea89240f0c982298d9c4829bc
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 16:09:24 2014 +1100

    can now connect to server then load gui

diff --git a/Database/main.cpp b/Database/main.cpp
index 7e8b034..ac9e716 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -35,10 +35,10 @@ int main(int arc, char *argv[])
                 std::cout << "Wrote record " << key << std::endl;
         }
 
-	std::vector<std::string> *Names = db.allUserNames();
+	std::vector<std::string> Names = db.allUserNames();
 	std::vector<std::string>::iterator iter;
 
-        for(iter=Names->begin(); iter!=Names->end(); iter++)
+        for(iter=Names.begin(); iter!=Names.end(); iter++)
         {
                 std::string key = (*iter);
                 User user = db.fetchUser(key);
diff --git a/UserClient/LoginManager.cpp b/UserClient/LoginManager.cpp
index 9211ce4..f16a04f 100644
--- a/UserClient/LoginManager.cpp
+++ b/UserClient/LoginManager.cpp
@@ -1,7 +1,7 @@
 #include "LoginManager.hpp"
 
 //NOTE: temporarily commented out parameters to silence compiler warning until implemented
-bool LoginManager::login(std::string /*username*/, std::string /*password*/)
+void LoginManager::loginRequest(QString /*username*/, QString /*password*/)
 {
 //    UserType_t uType;//from packet
 
@@ -12,12 +12,12 @@ bool LoginManager::login(std::string /*username*/, std::string /*password*/)
 //        else if(username == "Author" && password == "user")
 //            uType = PCCHAIR;
         
-        if(uType = PCCHAIR)
-        {
-            currentConference = new Conference(/* initialization constructor based on packet */)
-            //FIND HIS CONFERENCE
-            checkDeadlines(Conference* myConf);
-        }
+//        if(uType = PCCHAIR)
+//        {
+//            currentConference = new Conference(/* initialization constructor based on packet */)
+//            //FIND HIS CONFERENCE
+//            checkDeadlines(Conference* myConf);
+//        }
 
 //    std::vector<std::string> keys;
 //    std::vector<PaperSummary> papers;
@@ -40,7 +40,7 @@ bool LoginManager::login(std::string /*username*/, std::string /*password*/)
     //the response received is used to construct the currentUser pointer member of loginmanager
 
 
-    return false; // NOTE: placeholder
+    //return false; // NOTE: placeholder
 }
 
 void LoginManager::logout()
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index fc74b7e..0a13e4c 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -5,7 +5,9 @@
 #include "Conference.hpp"
 #include "User.hpp"
 #include "UserClientStubForServer.hpp"
-#include "mainwindow.hpp"
+//#include "mainwindow.hpp"
+
+class MainWindow;
 
 class LoginManager {
   public:
@@ -13,15 +15,16 @@ class LoginManager {
       
     
     // Connection will mainly be managed by an instance of client stub class
-    ClientStubForServer *stub = new ClientStubForServer(aServer, this);
+    UserClientStubForServer *stub = new UserClientStubForServer(aServer, this);
     this->theServer = stub;
     // but do have some more initialisation to do on the connection
-    aServer->setParent(this);
+    aServer->setParent(this->theServer);
     // Read events generated through TCP connection to be handled by
     // instance of clientstub class
-    connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
+    QObject::connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
+    
+//    mWindow = new MainWindow();
     
-    mWindow = new MainWindow();
 //    widget.setupUi(this);
     
 //    connect(widget.loginButton, SIGNAL(clicked()), this,
@@ -47,7 +50,7 @@ class LoginManager {
   }
   delete currentUser;
 }
-  void showWindow() {mWindow->show();}
+  MainWindow* mWindow;
 
 // no other constructors deemed necessary at this point
   User* getCurrentUser() {return currentUser;}
@@ -75,7 +78,6 @@ class LoginManager {
   std::vector<Conference*> conferences;
   Conference* activeConference{nullptr};
   UserClientStubForServer* theServer;
-  MainWindow* mWindow;
 
 };
 #endif
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index ec4f251..a36cabb 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -5,6 +5,8 @@
 
 #include <vector>
 
+class User;
+
 class Paper {
   public:
     Paper() { }
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index b1e9dd8..81ca179 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -5,6 +5,8 @@
 
 #include <string>
 
+//class Paper;
+
 enum UserType_t {AUTHOR, REVIEWER, PCCHAIR};
 
 class User {
@@ -29,7 +31,7 @@ class User {
          { }
     virtual ~User() {}
     
-    virtual void view() = 0;
+//    virtual void view() = 0;
     virtual void modifyDetails();
     void viewConferenceDetails();
     int getUserID() {return userID;}
diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
index a83c3df..a753bae 100644
--- a/UserClient/UserClient.cpp
+++ b/UserClient/UserClient.cpp
@@ -1,7 +1,9 @@
 #include <iostream>
-#include <QApplication> // NOTE: might need to be <QtGui/QApplication>
+#include <QApplication>
+#include <qt5/QtWidgets/qwidget.h> // NOTE: might need to be <QtGui/QApplication>
 
-#include "LoginManager.hpp"
+//#include "LoginManager.hpp"
+#include "mainwindow.hpp"
 
 QTcpSocket *establishConnection();
 
@@ -14,13 +16,15 @@ int main(int argc, char *argv[]) {
     QTcpSocket *server = establishConnection();
     LoginManager *mainWindow = new LoginManager(server);
     
-    mainWindow->showWindow();
+    mainWindow->mWindow = new MainWindow;
+    mainWindow->mWindow->show();
 
     return app.exec();
 }
 
 QTcpSocket *establishConnection() {
-    std::string servername = "127.0.0.1";
+    // just connect on localhost
+    std::string servername = "10.64.32.150";//"127.0.0.1";
     std::string pnumstr = "23456";
     /*QRegExp portChk("^\\d{4,5}$");
     QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
diff --git a/UserClient/UserClientStubForServer.hpp b/UserClient/UserClientStubForServer.hpp
index 6eb2a03..40c1284 100644
--- a/UserClient/UserClientStubForServer.hpp
+++ b/UserClient/UserClientStubForServer.hpp
@@ -11,16 +11,16 @@
 #ifndef USERCLIENTSTUBFORSERVER_H
 #define	USERCLIENTSTUBFORSERVER_H
 
-#include <qt4/Qt/QtCore>
-#include <qt4/Qt/QtNetwork>
+#include <QtCore>
+#include <QtNetwork>
 
-class MainWindow;
+class LoginManager;
 
 class UserClientStubForServer : public QObject {
     
     Q_OBJECT;
 public:
-    UserClientStubForServer(QTcpSocket *aServer, MainWindow* aMainGui) {
+    UserClientStubForServer(QTcpSocket *aServer, LoginManager* aMainGui) {
         this->theServer = aServer;
         this->mainGui = aMainGui;
         this->busy = false;
@@ -68,7 +68,7 @@ private:
 
     // Collaborators 
     QTcpSocket *theServer;
-    MainWindow *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
+    LoginManager *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
 
 };
 
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index b6c33a8..dcaaf7b 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -19,14 +19,14 @@ MainWindow::~MainWindow()
 
 void MainWindow::login()
 {
-    if(loginMgr.login(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr.getCurrentUser()->getUserType());
+//    if(loginMgr.login(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
+//        setUser(loginMgr.getCurrentUser()->getUserType());
 }
 
 void MainWindow::logout()
 {
     noUser();
-    loginMgr.logout();
+    loginMgr->logout();
 }
 
 void MainWindow::noUser()
@@ -35,7 +35,7 @@ void MainWindow::noUser()
     ui->tabWidget->addTab(ui->loginTab, "Login");
 }
 
-void MainWindow::setUser(UserType_t userType)
+void MainWindow::setUser(/*UserType_t*/int userType)
 {
     switch(userType)
     {
@@ -90,8 +90,8 @@ void MainWindow::on_passwordLogin_returnPressed()
 
 void MainWindow::on_createAccount_clicked()
 {
-    if(loginMgr.createAccount(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr.getCurrentUser()->getUserType());
+    if(loginMgr->createAccount(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
+        setUser(loginMgr->getCurrentUser()->getUserType());
 }
 
 void MainWindow::on_apply_clicked()
diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 603d770..5603f79 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -4,10 +4,14 @@
 #include <QMainWindow>
 #include "LoginManager.hpp"
 
+//enum UserType_t; //{AUTHOR, REVIEWER, PCCHAIR};
+
 namespace Ui {
 class MainWindow;
 }
 
+class LoginManager;
+
 class MainWindow : public QMainWindow
 {
     Q_OBJECT
@@ -54,7 +58,7 @@ private slots:
     void on_selectPaperAuthor_currentTextChanged(const QString &arg1);
 
 private:
-    void setUser(UserType_t userType);
+    void setUser(/*UserType_t*/ int userType);
     void login();
     void logout();
     
@@ -63,7 +67,7 @@ private:
     void noUser();
 
     Ui::MainWindow *ui;
-    LoginManager loginMgr;
+    LoginManager* loginMgr;
     QString username;
     QString password;
 };

commit ba4f7c49e8a6ffcaa2a6dabc0c5664c8100ad0e6
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:06:29 2014 +1100

    Update Paper.hpp

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index 842e03c..e09f989 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -16,7 +16,6 @@ struct Paper {
       const std::string& iabstract,
       const std::vector<std::string>& iauthors,
       const std::vector<std::string>& ikeywords,
-      const std::string& ifname,
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion)
       :
@@ -25,7 +24,6 @@ struct Paper {
       abstract(iabstract),
       authors(iauthors),
       keywords(ikeywords),
-      fname(ifname),
       reviews(ireviews),
       discussion(idiscussion)
       { }
@@ -35,8 +33,6 @@ struct Paper {
     std::string abstract{""};
     std::vector<User> authors;
     std::vector<std::string> keywords;
-    std::string fname{""};
-
     Discussion discussion;
     std::vector<Review> reviews;
 };

commit 362826fd6c19653ef9574904130e1dc61642ad65
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:05:49 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 9482b1e..b74633c 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -13,7 +13,6 @@ class Paper {
       const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& iconfKeyword,
-      const std::string& ifname,
       const Discussion& idiscussion,
       int ipaperID,
       int iconfID,
@@ -23,7 +22,6 @@ class Paper {
       abstract(iabstract),
       authors(iauthors),
       keywords(ikeywords),
-      fname(ifname),
       confKeyword(iconfKeyword),
       discussion(idiscussion),
       paperID(ipaperID),
@@ -38,7 +36,6 @@ class Paper {
     std::vector<User> getAuthors() {return authors;}
     std::vector<std::string> getKeywords() {return keywords;}
     std::string getConfKeyword() {return confKeyword;}
-    std::string getFname() {return fname;}
     Discussion getDiscussion() {return discussion;}
     int getPaperID() {return paperID;}
     int getConfID() {return confID;}
@@ -52,7 +49,6 @@ class Paper {
     void setPaperID(int ipaperID) {paperID = ipaperID;}
     void setConfID(int iconfID) {confID = iconfID;}
     void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
-    void setFname(const std::string& ifname) {fname = ifname;}
     void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
     void downloadPaper();
 
@@ -62,7 +58,6 @@ class Paper {
     std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string confKeyword{""};
-    std::string fname{""};
     Discussion discussion;
     int paperID{0};
     int confID{0};

commit c5f1571a5363bdfd9fea7ff35d1424709762fe67
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:04:45 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 64a2bec..34a2da6 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -15,7 +15,6 @@ struct Paper {
     std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string confKeyword{""};
-    std::string fname{""};
     std::vector<Review> reviews;
     Discussion discussion;
     int paperID{0};
@@ -28,7 +27,6 @@ struct Paper {
       const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& iconfKeyword,
-      const std::string& ifname,
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion,
       int ipaperID,
@@ -40,7 +38,6 @@ struct Paper {
       authors(iauthors),
       keywords(ikeywords),
       confKeyword(iconfKeyword),
-      fname(ifname),
       reviews(ireviews),
       discussion(idiscussion),
       paperID(ipaperID),

commit f73c7623d9717d2618a9f8bfd12218a3eadb13ce
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:04:08 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index dd2dd46..778e99d 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -67,6 +67,17 @@ class Author : public User {
     std::vector<std::string> keywords;
     std::vector<PaperSummary> getOwnPapers() {return ownPapers;}
     void setOwnPapers(const std::vector<PaperSummary>& iownPapers) {ownPapers = iownPapers;}
+    void addToOwnPapers(const PaperSummary& in) {
+      ownPapers.push_back(in);
+    }
+    void removeOwnPaper(int paperToRemove) {
+      for(int i = 0; i < ownPapers.size(); ++i)
+      {
+        if(ownPapers.paperID == paperToRemove) {
+          ownPapers.erase(ownPapers.begin() + i);
+        }
+      }
+    } 
   protected:
     std::vector<PaperSummary> ownPapers;
 };

commit 8b340dde95631d4f5249ec1ffa2db45a43e6a824
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:00:39 2014 +1100

    Update PaperSummary.hpp

diff --git a/Server/PaperSummary.hpp b/Server/PaperSummary.hpp
index 9e91232..e499dae 100644
--- a/Server/PaperSummary.hpp
+++ b/Server/PaperSummary.hpp
@@ -2,8 +2,8 @@
 #define PAPER_SUMMARY_H
 #include <string>
 struct PaperSummary {
-PaperSummary(int ipaperId, const std::string& ipaperName) :
-paperId(ipaperId), paperName(ipaperName)
+PaperSummary(int ipaperID, const std::string& ipaperName) :
+paperID(ipaperID), paperName(ipaperName)
 { }
 int paperID{0};
 std::string paperName{""};

commit 45b2108ac82d16d61ad9377d6dfce965f11d3dcd
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 16:00:19 2014 +1100

    Update PaperSummary.hpp

diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
index a80cdff..8e474f6 100644
--- a/UserClient/PaperSummary.hpp
+++ b/UserClient/PaperSummary.hpp
@@ -4,8 +4,8 @@
 #include <string>
 
 struct PaperSummary {
-  PaperSummary(int ipaperId, const std::string& ipaperName) :
-              paperId(ipaperId), paperName(ipaperName)
+  PaperSummary(int ipaperID, const std::string& ipaperName) :
+              paperID(ipaperID), paperName(ipaperName)
               { }
   int paperID{0};
   std::string paperName{""};

commit 31ee707e2ee0dbb2bf848647d199a383f2b4a413
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:59:53 2014 +1100

    Update PaperSummary.hpp

diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
index 33e51ed..a80cdff 100644
--- a/UserClient/PaperSummary.hpp
+++ b/UserClient/PaperSummary.hpp
@@ -7,7 +7,7 @@ struct PaperSummary {
   PaperSummary(int ipaperId, const std::string& ipaperName) :
               paperId(ipaperId), paperName(ipaperName)
               { }
-  int paperId{0};
+  int paperID{0};
   std::string paperName{""};
 };
 

commit 39d04ea85b65a782806e9bef643ac33fdfe3e5bb
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:59:18 2014 +1100

    Update PaperSummary.hpp

diff --git a/Server/PaperSummary.hpp b/Server/PaperSummary.hpp
index f61d4e0..9e91232 100644
--- a/Server/PaperSummary.hpp
+++ b/Server/PaperSummary.hpp
@@ -5,7 +5,7 @@ struct PaperSummary {
 PaperSummary(int ipaperId, const std::string& ipaperName) :
 paperId(ipaperId), paperName(ipaperName)
 { }
-int paperId{0};
+int paperID{0};
 std::string paperName{""};
 };
 #endif

commit 8d72e483c266492f8a90b70c4e9543796410215d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:50:59 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 6411ae7..64a2bec 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -14,29 +14,38 @@ struct Paper {
     std::string abstract{""};
     std::vector<User> authors;
     std::vector<std::string> keywords;
+    std::string confKeyword{""};
     std::string fname{""};
     std::vector<Review> reviews;
     Discussion discussion;
     int paperID{0};
+    int confID{0};
+    int leadAuthorID{0};
 
     Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
       const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
+      const std::string& iconfKeyword,
       const std::string& ifname,
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion,
-      int ipaperID)
+      int ipaperID,
+      int iconfID,
+      int ileadAuthorID)
       :
       title(ititle),
       abstract(iabstract),
       authors(iauthors),
       keywords(ikeywords),
+      confKeyword(iconfKeyword),
       fname(ifname),
       reviews(ireviews),
       discussion(idiscussion),
-      paperID(ipaperID)
+      paperID(ipaperID),
+      confID(iconfID),
+      leadAuthorID(ileadAuthorID)
       { }
 
     // no assignment operator or copy constructor deemed necessary at this point

commit 8fd261d62c1bf992ee9eb977aefdb3b893d8914e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:44:56 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index ec4f251..9482b1e 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -12,35 +12,24 @@ class Paper {
       const std::string& iabstract,
       const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
+      const std::string& iconfKeyword,
       const std::string& ifname,
-      const Discussion& idiscussion)
+      const Discussion& idiscussion,
+      int ipaperID,
+      int iconfID,
+      int ileadAuthorID)
       :
       title(ititle),
       abstract(iabstract),
       authors(iauthors),
       keywords(ikeywords),
       fname(ifname),
-      discussion(idiscussion)
-      { } // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
-      // In those edge cases one could still initialize then set or use copy constructor
-
-/*    Paper(const Paper& ipaper) {
-      title = ipaper.title;
-      abstract = ipaper.abstract;
-      authorNames = ipaper.authorNames;
-      keywords = ipaper.keywords;
-      fname = ifname;
-      paper = ipaper.paper;
-    }  */
-
- /*   void operator=(const Paper& ipaper) {
-      title = ipaper.title;
-      abstract = ipaper.abstract;
-      authorNames = ipaper.authorNames;
-      keywords = ipaper.keywords;
-      fname = ifname;
-      paper = ipaper.paper;
-    }  */
+      confKeyword(iconfKeyword),
+      discussion(idiscussion),
+      paperID(ipaperID),
+      confID(iconfID),
+      leadAuthorID(ileadAuthorID)
+      { } 
 
 // assignment operator or copy constructor deemed not needed at this time
 
@@ -48,13 +37,21 @@ class Paper {
     std::string getAbstract() {return abstract;}
     std::vector<User> getAuthors() {return authors;}
     std::vector<std::string> getKeywords() {return keywords;}
+    std::string getConfKeyword() {return confKeyword;}
     std::string getFname() {return fname;}
     Discussion getDiscussion() {return discussion;}
+    int getPaperID() {return paperID;}
+    int getConfID() {return confID;}
+    int getLeadAuthorID() {return leadAuthorID;}
     
     void setTitle(const std::string& ititle) {title = ititle;}
     void setAbstract(const std::string& iabstract) {abstract = iabstract;}
     void setAuthors(const std::vector<User>& iauthors) {authors = iauthors;}
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
+    void setConfKeyWord(const std::string& iconfKeyword) {confKeyword = iconfKeyword;}
+    void setPaperID(int ipaperID) {paperID = ipaperID;}
+    void setConfID(int iconfID) {confID = iconfID;}
+    void setLeadAuthorID(int ileadAuthorID) {leadAuthorID = ileadAuthorID;}
     void setFname(const std::string& ifname) {fname = ifname;}
     void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
     void downloadPaper();
@@ -64,7 +61,11 @@ class Paper {
     std::string abstract{""};
     std::vector<User> authors;
     std::vector<std::string> keywords;
+    std::string confKeyword{""};
     std::string fname{""};
     Discussion discussion;
+    int paperID{0};
+    int confID{0};
+    int leadAuthorID{0};
 };
 #endif

commit fc3cb790dbd194f5acc1e966e713dad2a7aa410f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:25:05 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index f9cd553..6411ae7 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -17,7 +17,7 @@ struct Paper {
     std::string fname{""};
     std::vector<Review> reviews;
     Discussion discussion;
-    int paperId{0};
+    int paperID{0};
 
     Paper() { }
     Paper(const std::string& ititle,
@@ -27,7 +27,7 @@ struct Paper {
       const std::string& ifname,
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion,
-      int ipaperId)
+      int ipaperID)
       :
       title(ititle),
       abstract(iabstract),
@@ -36,7 +36,7 @@ struct Paper {
       fname(ifname),
       reviews(ireviews),
       discussion(idiscussion),
-      paperId(ipaperId)
+      paperID(ipaperID)
       { }
 
     // no assignment operator or copy constructor deemed necessary at this point

commit ac16a7d15a72a3b2a63c23c6ece9dcbf79dd1f03
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:22:33 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 5765ad7..f9cd553 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -15,8 +15,9 @@ struct Paper {
     std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string fname{""};
-    Discussion discussion;
     std::vector<Review> reviews;
+    Discussion discussion;
+    int paperId{0};
 
     Paper() { }
     Paper(const std::string& ititle,
@@ -25,7 +26,8 @@ struct Paper {
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
       const std::vector<Review>& ireviews,
-      const Discussion& idiscussion)
+      const Discussion& idiscussion,
+      int ipaperId)
       :
       title(ititle),
       abstract(iabstract),
@@ -33,7 +35,8 @@ struct Paper {
       keywords(ikeywords),
       fname(ifname),
       reviews(ireviews),
-      discussion(idiscussion)
+      discussion(idiscussion),
+      paperId(ipaperId)
       { }
 
     // no assignment operator or copy constructor deemed necessary at this point

commit 8c43d2dd34a2a3b33addd12d9216782d189ac9f7
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:22:22 2014 +1100

    Create mainwindow.cpp

diff --git a/AdminClient/mainwindow.cpp b/AdminClient/mainwindow.cpp
new file mode 100644
index 0000000..5913713
--- /dev/null
+++ b/AdminClient/mainwindow.cpp
@@ -0,0 +1,39 @@
+#include "mainwindow.h"
+#include "ui_mainwindow.h"
+
+MainWindow::MainWindow(QWidget *parent) :
+    QMainWindow(parent),
+    ui(new Ui::MainWindow)
+{
+    ui->setupUi(this);
+}
+
+MainWindow::~MainWindow()
+{
+    delete ui;
+}
+
+void MainWindow::on_addConf_clicked()
+{
+    ui->confTable->insertRow(ui->confTable->rowCount());
+}
+
+void MainWindow::on_rmvConf_clicked()
+{
+    ui->confTable->removeRow(ui->confTable->currentRow());
+}
+
+void MainWindow::on_addUserKey_clicked()
+{
+    ui->userKeyList->addItem(ui->userKeyEntry->text());
+}
+
+void MainWindow::on_rmvUserKey_clicked()
+{
+    delete ui->userKeyList->currentItem();
+}
+
+void MainWindow::on_quit_2_clicked()
+{
+    qApp->quit();
+}

commit 5316a85a5b68c9b40c988de1c7869f4e9a8f7410
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:21:54 2014 +1100

    Create mainwindow.hpp

diff --git a/AdminClient/mainwindow.hpp b/AdminClient/mainwindow.hpp
new file mode 100644
index 0000000..39b7dcd
--- /dev/null
+++ b/AdminClient/mainwindow.hpp
@@ -0,0 +1,33 @@
+#ifndef MAINWINDOW_H
+#define MAINWINDOW_H
+
+#include <QMainWindow>
+
+namespace Ui {
+class MainWindow;
+}
+
+class MainWindow : public QMainWindow
+{
+    Q_OBJECT
+
+public:
+    explicit MainWindow(QWidget *parent = 0);
+    ~MainWindow();
+
+private slots:
+    void on_addConf_clicked();
+
+    void on_rmvConf_clicked();
+
+    void on_addUserKey_clicked();
+
+    void on_rmvUserKey_clicked();
+
+    void on_quit_2_clicked();
+    
+private:
+    Ui::MainWindow *ui;
+};
+
+#endif // MAINWINDOW_H

commit 84f4611c363d454f16a64316d9abf46ed899eb7c
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:21:10 2014 +1100

    Create mainwindow.ui

diff --git a/AdminClient/mainwindow.ui b/AdminClient/mainwindow.ui
new file mode 100644
index 0000000..2b4ecda
--- /dev/null
+++ b/AdminClient/mainwindow.ui
@@ -0,0 +1,1719 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>787</width>
+    <height>642</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralWidget">
+   <widget class="QWidget" name="centralWidget_2" native="true">
+    <property name="geometry">
+     <rect>
+      <x>0</x>
+      <y>0</y>
+      <width>801</width>
+      <height>601</height>
+     </rect>
+    </property>
+    <widget class="QWidget" name="centralwidget" native="true">
+     <property name="geometry">
+      <rect>
+       <x>0</x>
+       <y>0</y>
+       <width>801</width>
+       <height>601</height>
+      </rect>
+     </property>
+     <widget class="QTabWidget" name="tabWidget">
+      <property name="geometry">
+       <rect>
+        <x>0</x>
+        <y>0</y>
+        <width>871</width>
+        <height>651</height>
+       </rect>
+      </property>
+      <property name="currentIndex">
+       <number>3</number>
+      </property>
+      <widget class="QWidget" name="loginTab">
+       <attribute name="title">
+        <string>Login</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>210</x>
+          <y>150</y>
+          <width>353</width>
+          <height>211</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_2">
+         <item>
+          <widget class="QLabel" name="label_7">
+           <property name="font">
+            <font>
+             <pointsize>18</pointsize>
+            </font>
+           </property>
+           <property name="text">
+            <string>Conference Management System</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_7">
+           <item>
+            <spacer name="horizontalSpacer_4">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_9">
+             <property name="text">
+              <string>UserName</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="usernameLogin"/>
+           </item>
+           <item>
+            <spacer name="horizontalSpacer_5">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout">
+           <item>
+            <spacer name="horizontalSpacer_2">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_8">
+             <property name="text">
+              <string>Password</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="passwordLogin"/>
+           </item>
+           <item>
+            <spacer name="horizontalSpacer_3">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_10">
+           <item>
+            <widget class="QPushButton" name="login">
+             <property name="text">
+              <string>Login</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="createAccount">
+             <property name="text">
+              <string>Create Account</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QPushButton" name="quit">
+           <property name="text">
+            <string>Quit</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="infoTabAuthor">
+       <attribute name="title">
+        <string>Information</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_2">
+           <item>
+            <widget class="QLabel" name="username">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_21">
+           <item>
+            <widget class="QListWidget" name="authKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_15">
+             <item>
+              <widget class="QLineEdit" name="authKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addAuthKey">
+               <property name="text">
+                <string>Add Keyword</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvAuthKey">
+               <property name="text">
+                <string>Remove Keyword</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_8">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="apply">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_14">
+        <property name="geometry">
+         <rect>
+          <x>270</x>
+          <y>10</y>
+          <width>501</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_16">
+         <item>
+          <widget class="QLabel" name="conferenceName">
+           <property name="font">
+            <font>
+             <pointsize>16</pointsize>
+             <weight>75</weight>
+             <italic>true</italic>
+             <bold>true</bold>
+            </font>
+           </property>
+           <property name="text">
+            <string>CONFERENCENAME</string>
+           </property>
+           <property name="scaledContents">
+            <bool>false</bool>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confTopic">
+           <property name="text">
+            <string>CONFERENCETOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confLocation">
+           <property name="text">
+            <string>CONFERENCELOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_22">
+           <item>
+            <widget class="QLabel" name="label_26">
+             <property name="text">
+              <string>Keywords</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QListWidget" name="confKeyListNoEdit"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_28">
+           <item>
+            <widget class="QLabel" name="label_47">
+             <property name="text">
+              <string>Submission</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_48">
+             <property name="text">
+              <string>Allocation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_49">
+             <property name="text">
+              <string>Soft Review</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_50">
+             <property name="text">
+              <string>Hard Review</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_51">
+             <property name="text">
+              <string>Discussion</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_25">
+           <item>
+            <widget class="QLabel" name="subDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="allocDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="sReviewDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="hReviewDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="discDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QTextBrowser" name="confDesc">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="infoTabChair">
+       <attribute name="title">
+        <string>Information</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_3">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_3">
+           <item>
+            <widget class="QLabel" name="username_2">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_2">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name_2">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email_2">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation_2">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone_2">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_9">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="apply_2">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout_2">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>280</x>
+          <y>10</y>
+          <width>481</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_4">
+         <item>
+          <widget class="QLineEdit" name="lineEdit">
+           <property name="text">
+            <string>CONFERENCE NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="lineEdit_2">
+           <property name="text">
+            <string>CONFERENCE TOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="lineEdit_3">
+           <property name="text">
+            <string>CONFERENCE LOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QTextEdit" name="textEdit_2">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QVBoxLayout" name="verticalLayout_9">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_26">
+             <item>
+              <widget class="QLabel" name="label_44">
+               <property name="text">
+                <string>Submission</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_45">
+               <property name="text">
+                <string>Allocation</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_46">
+               <property name="text">
+                <string>Soft Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_43">
+               <property name="text">
+                <string>Hard Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_42">
+               <property name="text">
+                <string>Discussion</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_27">
+             <item>
+              <widget class="QDateEdit" name="subDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="allocDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="sReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="hReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="discDateEdit"/>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_25">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_20">
+           <item>
+            <widget class="QListWidget" name="confKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_11">
+             <item>
+              <widget class="QLineEdit" name="confKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addConfKey">
+               <property name="text">
+                <string>Add Keyword</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvConfKey">
+               <property name="text">
+                <string>Remove Keyword</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="authorTab">
+       <attribute name="title">
+        <string>Author</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_3">
+         <item row="2" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_8">
+           <item>
+            <widget class="QTableWidget" name="authorsTable">
+             <column>
+              <property name="text">
+               <string>Name</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Email</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Org</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Phone</string>
+              </property>
+             </column>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item row="1" column="1">
+          <widget class="QComboBox" name="selectMainKey"/>
+         </item>
+         <item row="1" column="0">
+          <widget class="QComboBox" name="selectPaperAuthor">
+           <property name="editable">
+            <bool>true</bool>
+           </property>
+           <item>
+            <property name="text">
+             <string>*NEW*</string>
+            </property>
+           </item>
+          </widget>
+         </item>
+         <item row="5" column="1">
+          <widget class="QTextEdit" name="paperAbstract">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <layout class="QVBoxLayout" name="verticalLayout_14">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_4">
+             <item>
+              <widget class="QLineEdit" name="paperKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addPaperKey">
+               <property name="text">
+                <string>Add Key</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvPaperKey">
+               <property name="text">
+                <string>Remove Key</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <widget class="QListWidget" name="paperKeyListAuth"/>
+           </item>
+          </layout>
+         </item>
+         <item row="5" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_10">
+           <item>
+            <widget class="QPushButton" name="addAuthor">
+             <property name="text">
+              <string>Add Author</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="rmvAuthor">
+             <property name="text">
+              <string>Remove Author</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="filenameAuth">
+             <property name="text">
+              <string>FILENAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="selectFile">
+             <property name="text">
+              <string>Select File</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="submit">
+             <property name="text">
+              <string>Submit</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewerTab">
+       <attribute name="title">
+        <string>Reviewer</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>200</y>
+          <width>741</width>
+          <height>351</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_4">
+         <item row="0" column="0">
+          <widget class="QLabel" name="discussionLabel_2">
+           <property name="text">
+            <string>Discussion</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="submitPosts">
+           <property name="text">
+            <string>Submit Post</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QTextEdit" name="postBody">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="discussionBody_2">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="horizontalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>160</y>
+          <width>741</width>
+          <height>31</height>
+         </rect>
+        </property>
+        <layout class="QHBoxLayout" name="horizontalLayout_5">
+         <item>
+          <spacer name="horizontalSpacer">
+           <property name="orientation">
+            <enum>Qt::Horizontal</enum>
+           </property>
+           <property name="sizeType">
+            <enum>QSizePolicy::Ignored</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>40</width>
+             <height>20</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QLabel" name="bidlabel">
+           <property name="text">
+            <string>Bid:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QComboBox" name="selectBid"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="submitBid">
+           <property name="text">
+            <string>Submit Bid</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>151</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_5">
+         <item row="0" column="1">
+          <widget class="QLabel" name="paperName_3">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QLabel" name="mainKey_3">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="fileName_2">
+           <property name="text">
+            <string>FILENAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReviewer"/>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="download_2">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListRev"/>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="papersTab">
+       <attribute name="title">
+        <string>Paper Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="tableWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>20</y>
+          <width>211</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Title</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string notr="true">id</string>
+         </property>
+         <property name="toolTip">
+          <string notr="true"/>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>20</y>
+          <width>511</width>
+          <height>151</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_6">
+         <item row="0" column="0">
+          <widget class="QLabel" name="paperName_4">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="fileName_3">
+           <property name="text">
+            <string>FILENAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="download_3">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="mainKey_4">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTableWidget" name="authorsTableMng">
+           <column>
+            <property name="text">
+             <string>Name</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Email</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Org</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Phone</string>
+            </property>
+           </column>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListMng"/>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_11">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>190</y>
+          <width>511</width>
+          <height>361</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_12">
+         <item>
+          <layout class="QGridLayout" name="gridLayout_7">
+           <item row="0" column="0">
+            <widget class="QLabel" name="discussionLabel_3">
+             <property name="text">
+              <string>Discussion</string>
+             </property>
+            </widget>
+           </item>
+           <item row="1" column="0">
+            <widget class="QTextBrowser" name="discussionBody_3">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+             </property>
+            </widget>
+           </item>
+           <item row="1" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_5">
+             <item>
+              <widget class="QTableWidget" name="reviewersTable">
+               <column>
+                <property name="text">
+                 <string>Name</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Email</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Org</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Phone</string>
+                </property>
+               </column>
+              </widget>
+             </item>
+             <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_9">
+               <item>
+                <widget class="QLabel" name="label_5">
+                 <property name="text">
+                  <string>User:</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLineEdit" name="toReview_2"/>
+               </item>
+               <item>
+                <widget class="QPushButton" name="addAsReviewer_2">
+                 <property name="text">
+                  <string>Add as Reviewer</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
+           </item>
+           <item row="0" column="1">
+            <widget class="QLabel" name="label_6">
+             <property name="text">
+              <string>Reviewers</string>
+             </property>
+            </widget>
+           </item>
+           <item row="2" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_13">
+             <item>
+              <widget class="QLabel" name="label_41">
+               <property name="text">
+                <string>Comments</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QTextBrowser" name="commentsBrowser"/>
+             </item>
+            </layout>
+           </item>
+           <item row="2" column="0">
+            <layout class="QFormLayout" name="formLayout">
+             <property name="fieldGrowthPolicy">
+              <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+             </property>
+             <item row="0" column="0">
+              <widget class="QLabel" name="label_24">
+               <property name="text">
+                <string>Overall</string>
+               </property>
+              </widget>
+             </item>
+             <item row="0" column="1">
+              <widget class="QLabel" name="overallScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="1" column="0">
+              <widget class="QLabel" name="label_27">
+               <property name="text">
+                <string>Confidence</string>
+               </property>
+              </widget>
+             </item>
+             <item row="1" column="1">
+              <widget class="QLabel" name="confidenceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="0">
+              <widget class="QLabel" name="label_29">
+               <property name="text">
+                <string>Relevance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="1">
+              <widget class="QLabel" name="relevanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="3" column="0">
+              <widget class="QLabel" name="label_31">
+               <property name="text">
+                <string>Originality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="3" column="1">
+              <widget class="QLabel" name="originalityScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="0">
+              <widget class="QLabel" name="label_33">
+               <property name="text">
+                <string>Significance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="1">
+              <widget class="QLabel" name="significanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="0">
+              <widget class="QLabel" name="label_35">
+               <property name="text">
+                <string>Presentation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="1">
+              <widget class="QLabel" name="presentationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="0">
+              <widget class="QLabel" name="label_37">
+               <property name="text">
+                <string>Technical Quality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="1">
+              <widget class="QLabel" name="techqualScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="0">
+              <widget class="QLabel" name="label_39">
+               <property name="text">
+                <string>Evaluation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="1">
+              <widget class="QLabel" name="evaluationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="0">
+              <widget class="QPushButton" name="acceptPaper">
+               <property name="text">
+                <string>Accept Paper</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="1">
+              <widget class="QPushButton" name="rejectPaper">
+               <property name="text">
+                <string>Reject Paper</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="usersTab">
+       <attribute name="title">
+        <string>User Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="tableWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>311</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>User Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>id</string>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>10</y>
+          <width>291</width>
+          <height>381</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_6">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_8">
+           <item>
+            <widget class="QLabel" name="username_5">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_5">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="name_5">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="email_5">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="organisation_5">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="phone_5">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_10">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QListWidget" name="userKeyList"/>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="horizontalLayoutWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>500</y>
+          <width>291</width>
+          <height>41</height>
+         </rect>
+        </property>
+        <layout class="QHBoxLayout" name="horizontalLayout_6">
+         <item>
+          <widget class="QLabel" name="label_4">
+           <property name="text">
+            <string>Paper:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="toReview"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="addAsReviewer">
+           <property name="text">
+            <string>Add to Review</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_15">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>400</y>
+          <width>291</width>
+          <height>101</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_17">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_23">
+           <item>
+            <widget class="QLabel" name="label_30">
+             <property name="text">
+              <string>Authored Papers</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_28">
+             <property name="text">
+              <string>Assigned to Review</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_24">
+           <item>
+            <widget class="QListWidget" name="authoredPapers"/>
+           </item>
+           <item>
+            <widget class="QListWidget" name="assignedPapers"/>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewTab">
+       <attribute name="title">
+        <string>Review</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_7">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>150</y>
+          <width>761</width>
+          <height>401</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_7">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_11">
+           <item>
+            <widget class="QLabel" name="label_11">
+             <property name="text">
+              <string>Overall</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="overall"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_12">
+             <property name="text">
+              <string>Confidence</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="confidence"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_12">
+           <item>
+            <widget class="QLabel" name="label_13">
+             <property name="text">
+              <string>Relevance</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="relevance"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_14">
+             <property name="text">
+              <string>Originality</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="originality"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_13">
+           <item>
+            <widget class="QLabel" name="label_15">
+             <property name="text">
+              <string>Significance</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="significance"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_16">
+             <property name="text">
+              <string>Presentation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="spinBox_8"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_14">
+           <item>
+            <widget class="QLabel" name="label_17">
+             <property name="text">
+              <string>Technical Quality</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="techQuality"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_18">
+             <property name="text">
+              <string>Evaluation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="evaluation"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_15">
+           <item>
+            <widget class="QLabel" name="label_19">
+             <property name="text">
+              <string>Strengths of the paper</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_20">
+             <property name="text">
+              <string>Weaknesses of the paper</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_16">
+           <item>
+            <widget class="QTextEdit" name="commentsStrengths"/>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsWeaknesses"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_17">
+           <item>
+            <widget class="QLabel" name="label_21">
+             <property name="text">
+              <string>Would this paper be suitable as a short paper?</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_22">
+             <property name="text">
+              <string>Should this paper be considered for a best paper award?</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_18">
+           <item>
+            <widget class="QTextEdit" name="commentsShortPaper"/>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsBestAward"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_19">
+           <item>
+            <widget class="QLabel" name="label_23">
+             <property name="text">
+              <string>Detailed comments and suggestions</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsSuggestions">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>20</y>
+          <width>761</width>
+          <height>128</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout">
+         <item row="1" column="0">
+          <widget class="QLabel" name="mainKey">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="fileName">
+           <property name="text">
+            <string>FILENAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QTextBrowser" name="textBrowser">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="download">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="paperName">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReview"/>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+     </widget>
+    </widget>
+   </widget>
+  </widget>
+ </widget>
+ <layoutdefault spacing="6" margin="11"/>
+ <resources/>
+ <connections/>
+</ui>

commit 8d2f7051e04bf4cd0e61d53af180fce7169e496b
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:19:44 2014 +1100

    additional conference functionality

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index af90b00..2b4ecda 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -6,15 +6,15 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>790</width>
-    <height>606</height>
+    <width>787</width>
+    <height>642</height>
    </rect>
   </property>
   <property name="windowTitle">
    <string>MainWindow</string>
   </property>
   <widget class="QWidget" name="centralWidget">
-   <widget class="QWidget" name="centralwidget" native="true">
+   <widget class="QWidget" name="centralWidget_2" native="true">
     <property name="geometry">
      <rect>
       <x>0</x>
@@ -23,1544 +23,1690 @@
       <height>601</height>
      </rect>
     </property>
-    <widget class="QTabWidget" name="tabWidget">
+    <widget class="QWidget" name="centralwidget" native="true">
      <property name="geometry">
       <rect>
        <x>0</x>
        <y>0</y>
-       <width>871</width>
-       <height>651</height>
+       <width>801</width>
+       <height>601</height>
       </rect>
      </property>
-     <property name="currentIndex">
-      <number>3</number>
-     </property>
-     <widget class="QWidget" name="loginTab">
-      <attribute name="title">
-       <string>Login</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>210</x>
-         <y>150</y>
-         <width>353</width>
-         <height>211</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_2">
-        <item>
-         <widget class="QLabel" name="label_7">
-          <property name="font">
-           <font>
-            <pointsize>18</pointsize>
-           </font>
-          </property>
-          <property name="text">
-           <string>Conference Management System</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_7">
-          <item>
-           <spacer name="horizontalSpacer_4">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_9">
-            <property name="text">
-             <string>UserName</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="usernameLogin"/>
-          </item>
-          <item>
-           <spacer name="horizontalSpacer_5">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout">
-          <item>
-           <spacer name="horizontalSpacer_2">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_8">
-            <property name="text">
-             <string>Password</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="passwordLogin"/>
-          </item>
-          <item>
-           <spacer name="horizontalSpacer_3">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_10">
-          <item>
-           <widget class="QPushButton" name="login">
-            <property name="text">
-             <string>Login</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="createAccount">
-            <property name="text">
-             <string>Create Account</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QPushButton" name="quit">
-          <property name="text">
-           <string>Quit</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="infoTabAuthor">
-      <attribute name="title">
-       <string>Information</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>233</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_2">
-          <item>
-           <widget class="QLabel" name="username">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="name">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="email">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="organisation">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="phone">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_21">
-          <item>
-           <widget class="QListWidget" name="authKeyList"/>
-          </item>
-          <item>
-           <layout class="QVBoxLayout" name="verticalLayout_15">
-            <item>
-             <widget class="QLineEdit" name="authKeyEntry"/>
-            </item>
-            <item>
-             <widget class="QPushButton" name="addAuthKey">
-              <property name="text">
-               <string>Add Keyword</string>
-              </property>
-             </widget>
-            </item>
-            <item>
-             <widget class="QPushButton" name="rmvAuthKey">
-              <property name="text">
-               <string>Remove Keyword</string>
-              </property>
-             </widget>
-            </item>
-           </layout>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <spacer name="verticalSpacer_8">
-          <property name="orientation">
-           <enum>Qt::Vertical</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>20</width>
-            <height>40</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QPushButton" name="apply">
-          <property name="text">
-           <string>Apply</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="logout">
-          <property name="text">
-           <string>Logout</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
+     <widget class="QTabWidget" name="tabWidget">
+      <property name="geometry">
+       <rect>
+        <x>0</x>
+        <y>0</y>
+        <width>871</width>
+        <height>651</height>
+       </rect>
+      </property>
+      <property name="currentIndex">
+       <number>3</number>
+      </property>
+      <widget class="QWidget" name="loginTab">
+       <attribute name="title">
+        <string>Login</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>210</x>
+          <y>150</y>
+          <width>353</width>
+          <height>211</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_2">
+         <item>
+          <widget class="QLabel" name="label_7">
+           <property name="font">
+            <font>
+             <pointsize>18</pointsize>
+            </font>
+           </property>
+           <property name="text">
+            <string>Conference Management System</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_7">
+           <item>
+            <spacer name="horizontalSpacer_4">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_9">
+             <property name="text">
+              <string>UserName</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="usernameLogin"/>
+           </item>
+           <item>
+            <spacer name="horizontalSpacer_5">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout">
+           <item>
+            <spacer name="horizontalSpacer_2">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_8">
+             <property name="text">
+              <string>Password</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="passwordLogin"/>
+           </item>
+           <item>
+            <spacer name="horizontalSpacer_3">
+             <property name="orientation">
+              <enum>Qt::Horizontal</enum>
+             </property>
+             <property name="sizeHint" stdset="0">
+              <size>
+               <width>40</width>
+               <height>20</height>
+              </size>
+             </property>
+            </spacer>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_10">
+           <item>
+            <widget class="QPushButton" name="login">
+             <property name="text">
+              <string>Login</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="createAccount">
+             <property name="text">
+              <string>Create Account</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QPushButton" name="quit">
+           <property name="text">
+            <string>Quit</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
       </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_14">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>10</y>
-         <width>501</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_16">
-        <item>
-         <widget class="QLabel" name="conferenceName">
-          <property name="font">
-           <font>
-            <pointsize>16</pointsize>
-            <weight>75</weight>
-            <italic>true</italic>
-            <bold>true</bold>
-           </font>
-          </property>
-          <property name="text">
-           <string>CONFERENCENAME</string>
-          </property>
-          <property name="scaledContents">
-           <bool>false</bool>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label_2">
-          <property name="text">
-           <string>CONFERENCETOPIC</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label_3">
-          <property name="text">
-           <string>CONFERENCELOCATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_22">
-          <item>
-           <widget class="QLabel" name="label_26">
-            <property name="text">
-             <string>Keywords</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QListWidget" name="confKeyListNoEdit"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QTextBrowser" name="textBrowser_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+      <widget class="QWidget" name="infoTabAuthor">
+       <attribute name="title">
+        <string>Information</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_2">
+           <item>
+            <widget class="QLabel" name="username">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_21">
+           <item>
+            <widget class="QListWidget" name="authKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_15">
+             <item>
+              <widget class="QLineEdit" name="authKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addAuthKey">
+               <property name="text">
+                <string>Add Keyword</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvAuthKey">
+               <property name="text">
+                <string>Remove Keyword</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_8">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="apply">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_14">
+        <property name="geometry">
+         <rect>
+          <x>270</x>
+          <y>10</y>
+          <width>501</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_16">
+         <item>
+          <widget class="QLabel" name="conferenceName">
+           <property name="font">
+            <font>
+             <pointsize>16</pointsize>
+             <weight>75</weight>
+             <italic>true</italic>
+             <bold>true</bold>
+            </font>
+           </property>
+           <property name="text">
+            <string>CONFERENCENAME</string>
+           </property>
+           <property name="scaledContents">
+            <bool>false</bool>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confTopic">
+           <property name="text">
+            <string>CONFERENCETOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="confLocation">
+           <property name="text">
+            <string>CONFERENCELOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_22">
+           <item>
+            <widget class="QLabel" name="label_26">
+             <property name="text">
+              <string>Keywords</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QListWidget" name="confKeyListNoEdit"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_28">
+           <item>
+            <widget class="QLabel" name="label_47">
+             <property name="text">
+              <string>Submission</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_48">
+             <property name="text">
+              <string>Allocation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_49">
+             <property name="text">
+              <string>Soft Review</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_50">
+             <property name="text">
+              <string>Hard Review</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_51">
+             <property name="text">
+              <string>Discussion</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_25">
+           <item>
+            <widget class="QLabel" name="subDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="allocDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="sReviewDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="hReviewDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="discDate">
+             <property name="text">
+              <string>DATE</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QTextBrowser" name="confDesc">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="infoTabChair">
-      <attribute name="title">
-       <string>Information</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_3">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>233</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_3">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_3">
-          <item>
-           <widget class="QLabel" name="username_2">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid_2">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="name_2">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="email_2">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="organisation_2">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="phone_2">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <spacer name="verticalSpacer_9">
-          <property name="orientation">
-           <enum>Qt::Vertical</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>20</width>
-            <height>40</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QPushButton" name="apply_2">
-          <property name="text">
-           <string>Apply</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="logout_2">
-          <property name="text">
-           <string>Logout</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
       </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_4">
-       <property name="geometry">
-        <rect>
-         <x>280</x>
-         <y>10</y>
-         <width>481</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_4">
-        <item>
-         <widget class="QLineEdit" name="lineEdit">
-          <property name="text">
-           <string>CONFERENCE NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="lineEdit_2">
-          <property name="text">
-           <string>CONFERENCE TOPIC</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="lineEdit_3">
-          <property name="text">
-           <string>CONFERENCE LOCATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextEdit" name="textEdit_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+      <widget class="QWidget" name="infoTabChair">
+       <attribute name="title">
+        <string>Information</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>233</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_3">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_3">
+           <item>
+            <widget class="QLabel" name="username_2">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_2">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="name_2">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="email_2">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="organisation_2">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="phone_2">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <spacer name="verticalSpacer_9">
+           <property name="orientation">
+            <enum>Qt::Vertical</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>20</width>
+             <height>40</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QPushButton" name="apply_2">
+           <property name="text">
+            <string>Apply</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="logout_2">
+           <property name="text">
+            <string>Logout</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>280</x>
+          <y>10</y>
+          <width>481</width>
+          <height>551</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_4">
+         <item>
+          <widget class="QLineEdit" name="lineEdit">
+           <property name="text">
+            <string>CONFERENCE NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="lineEdit_2">
+           <property name="text">
+            <string>CONFERENCE TOPIC</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="lineEdit_3">
+           <property name="text">
+            <string>CONFERENCE LOCATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QTextEdit" name="textEdit_2">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label_25">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_20">
-          <item>
-           <widget class="QListWidget" name="confKeyList"/>
-          </item>
-          <item>
-           <layout class="QVBoxLayout" name="verticalLayout_11">
-            <item>
-             <widget class="QLineEdit" name="confKeyEntry"/>
-            </item>
-            <item>
-             <widget class="QPushButton" name="addConfKey">
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QVBoxLayout" name="verticalLayout_9">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_26">
+             <item>
+              <widget class="QLabel" name="label_44">
+               <property name="text">
+                <string>Submission</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_45">
+               <property name="text">
+                <string>Allocation</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_46">
+               <property name="text">
+                <string>Soft Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_43">
+               <property name="text">
+                <string>Hard Review</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QLabel" name="label_42">
+               <property name="text">
+                <string>Discussion</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_27">
+             <item>
+              <widget class="QDateEdit" name="subDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="allocDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="sReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="hReviewDateEdit"/>
+             </item>
+             <item>
+              <widget class="QDateEdit" name="discDateEdit"/>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_25">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_20">
+           <item>
+            <widget class="QListWidget" name="confKeyList"/>
+           </item>
+           <item>
+            <layout class="QVBoxLayout" name="verticalLayout_11">
+             <item>
+              <widget class="QLineEdit" name="confKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addConfKey">
+               <property name="text">
+                <string>Add Keyword</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvConfKey">
+               <property name="text">
+                <string>Remove Keyword</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="authorTab">
+       <attribute name="title">
+        <string>Author</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_3">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_3">
+         <item row="2" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_8">
+           <item>
+            <widget class="QTableWidget" name="authorsTable">
+             <column>
               <property name="text">
-               <string>Add Keyword</string>
+               <string>Name</string>
               </property>
-             </widget>
-            </item>
-            <item>
-             <widget class="QPushButton" name="rmvConfKey">
+             </column>
+             <column>
               <property name="text">
-               <string>Remove Keyword</string>
+               <string>Email</string>
               </property>
-             </widget>
-            </item>
-           </layout>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="authorTab">
-      <attribute name="title">
-       <string>Author</string>
-      </attribute>
-      <widget class="QWidget" name="gridLayoutWidget_3">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>741</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_3">
-        <item row="2" column="0">
-         <layout class="QVBoxLayout" name="verticalLayout_8">
-          <item>
-           <widget class="QTableWidget" name="authorsTable">
-            <column>
+             </column>
+             <column>
+              <property name="text">
+               <string>Org</string>
+              </property>
+             </column>
+             <column>
+              <property name="text">
+               <string>Phone</string>
+              </property>
+             </column>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item row="1" column="1">
+          <widget class="QComboBox" name="selectMainKey"/>
+         </item>
+         <item row="1" column="0">
+          <widget class="QComboBox" name="selectPaperAuthor">
+           <property name="editable">
+            <bool>true</bool>
+           </property>
+           <item>
+            <property name="text">
+             <string>*NEW*</string>
+            </property>
+           </item>
+          </widget>
+         </item>
+         <item row="5" column="1">
+          <widget class="QTextEdit" name="paperAbstract">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <layout class="QVBoxLayout" name="verticalLayout_14">
+           <item>
+            <layout class="QHBoxLayout" name="horizontalLayout_4">
+             <item>
+              <widget class="QLineEdit" name="paperKeyEntry"/>
+             </item>
+             <item>
+              <widget class="QPushButton" name="addPaperKey">
+               <property name="text">
+                <string>Add Key</string>
+               </property>
+              </widget>
+             </item>
+             <item>
+              <widget class="QPushButton" name="rmvPaperKey">
+               <property name="text">
+                <string>Remove Key</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+           <item>
+            <widget class="QListWidget" name="paperKeyListAuth"/>
+           </item>
+          </layout>
+         </item>
+         <item row="5" column="0">
+          <layout class="QVBoxLayout" name="verticalLayout_10">
+           <item>
+            <widget class="QPushButton" name="addAuthor">
+             <property name="text">
+              <string>Add Author</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="rmvAuthor">
              <property name="text">
-              <string>Name</string>
+              <string>Remove Author</string>
              </property>
-            </column>
-            <column>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLineEdit" name="filenameAuth">
              <property name="text">
-              <string>Email</string>
+              <string>FILENAME</string>
              </property>
-            </column>
-            <column>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="selectFile">
              <property name="text">
-              <string>Org</string>
+              <string>Select File</string>
              </property>
-            </column>
-            <column>
+            </widget>
+           </item>
+           <item>
+            <widget class="QPushButton" name="submit">
              <property name="text">
-              <string>Phone</string>
+              <string>Submit</string>
              </property>
-            </column>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item row="1" column="1">
-         <widget class="QComboBox" name="selectMainKey"/>
-        </item>
-        <item row="1" column="0">
-         <widget class="QComboBox" name="selectPaperAuthor">
-          <property name="editable">
-           <bool>true</bool>
-          </property>
-          <item>
+            </widget>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+      </widget>
+      <widget class="QWidget" name="reviewerTab">
+       <attribute name="title">
+        <string>Reviewer</string>
+       </attribute>
+       <widget class="QWidget" name="gridLayoutWidget_4">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>200</y>
+          <width>741</width>
+          <height>351</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_4">
+         <item row="0" column="0">
+          <widget class="QLabel" name="discussionLabel_2">
            <property name="text">
-            <string>*NEW*</string>
+            <string>Discussion</string>
            </property>
-          </item>
-         </widget>
-        </item>
-        <item row="5" column="1">
-         <widget class="QTextEdit" name="paperAbstract">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <layout class="QVBoxLayout" name="verticalLayout_14">
-          <item>
-           <layout class="QHBoxLayout" name="horizontalLayout_4">
-            <item>
-             <widget class="QLineEdit" name="paperKeyEntry"/>
-            </item>
-            <item>
-             <widget class="QPushButton" name="addPaperKey">
-              <property name="text">
-               <string>Add Key</string>
-              </property>
-             </widget>
-            </item>
-            <item>
-             <widget class="QPushButton" name="rmvPaperKey">
-              <property name="text">
-               <string>Remove Key</string>
-              </property>
-             </widget>
-            </item>
-           </layout>
-          </item>
-          <item>
-           <widget class="QListWidget" name="paperKeyListAuth"/>
-          </item>
-         </layout>
-        </item>
-        <item row="5" column="0">
-         <layout class="QVBoxLayout" name="verticalLayout_10">
-          <item>
-           <widget class="QPushButton" name="addAuthor">
-            <property name="text">
-             <string>Add Author</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="rmvAuthor">
-            <property name="text">
-             <string>Remove Author</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="filename">
-            <property name="text">
-             <string>FILENAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="selectFile">
-            <property name="text">
-             <string>Select File</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="submit">
-            <property name="text">
-             <string>Submit</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="reviewerTab">
-      <attribute name="title">
-       <string>Reviewer</string>
-      </attribute>
-      <widget class="QWidget" name="gridLayoutWidget_4">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>200</y>
-         <width>741</width>
-         <height>351</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_4">
-        <item row="0" column="0">
-         <widget class="QLabel" name="discussionLabel_2">
-          <property name="text">
-           <string>Discussion</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="submitPosts">
-          <property name="text">
-           <string>Submit Post</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextEdit" name="postBody">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="submitPosts">
+           <property name="text">
+            <string>Submit Post</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QTextEdit" name="postBody">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextBrowser" name="discussionBody_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTextBrowser" name="discussionBody_2">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="horizontalLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>160</y>
-         <width>741</width>
-         <height>31</height>
-        </rect>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout_5">
-        <item>
-         <spacer name="horizontalSpacer">
-          <property name="orientation">
-           <enum>Qt::Horizontal</enum>
-          </property>
-          <property name="sizeType">
-           <enum>QSizePolicy::Ignored</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>40</width>
-            <height>20</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QLabel" name="bidlabel">
-          <property name="text">
-           <string>Bid:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QComboBox" name="selectBid"/>
-        </item>
-        <item>
-         <widget class="QPushButton" name="submitBid">
-          <property name="text">
-           <string>Submit Bid</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_5">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>741</width>
-         <height>151</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_5">
-        <item row="0" column="1">
-         <widget class="QLabel" name="paperName_3">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QLabel" name="mainKey_3">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName_2">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QComboBox" name="selectPaperReviewer"/>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="download_2">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QListWidget" name="paperKeyListRev"/>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="papersTab">
-      <attribute name="title">
-       <string>Paper Management</string>
-      </attribute>
-      <widget class="QTableWidget" name="tableWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>20</y>
-         <width>211</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <column>
-        <property name="text">
-         <string>Title</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string notr="true">id</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="horizontalLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>160</y>
+          <width>741</width>
+          <height>31</height>
+         </rect>
         </property>
-        <property name="toolTip">
-         <string notr="true"/>
+        <layout class="QHBoxLayout" name="horizontalLayout_5">
+         <item>
+          <spacer name="horizontalSpacer">
+           <property name="orientation">
+            <enum>Qt::Horizontal</enum>
+           </property>
+           <property name="sizeType">
+            <enum>QSizePolicy::Ignored</enum>
+           </property>
+           <property name="sizeHint" stdset="0">
+            <size>
+             <width>40</width>
+             <height>20</height>
+            </size>
+           </property>
+          </spacer>
+         </item>
+         <item>
+          <widget class="QLabel" name="bidlabel">
+           <property name="text">
+            <string>Bid:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QComboBox" name="selectBid"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="submitBid">
+           <property name="text">
+            <string>Submit Bid</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_5">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>741</width>
+          <height>151</height>
+         </rect>
         </property>
-       </column>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_6">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>20</y>
-         <width>511</width>
-         <height>151</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_6">
-        <item row="0" column="0">
-         <widget class="QLabel" name="paperName_4">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName_3">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="download_3">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="1">
-         <widget class="QLabel" name="mainKey_4">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTableWidget" name="authorsTableMng">
-          <column>
+        <layout class="QGridLayout" name="gridLayout_5">
+         <item row="0" column="1">
+          <widget class="QLabel" name="paperName_3">
            <property name="text">
-            <string>Name</string>
+            <string>PAPERNAME</string>
            </property>
-          </column>
-          <column>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QLabel" name="mainKey_3">
            <property name="text">
-            <string>Email</string>
+            <string>MAINKEY</string>
            </property>
-          </column>
-          <column>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="fileName_2">
            <property name="text">
-            <string>Org</string>
+            <string>FILENAME</string>
            </property>
-          </column>
-          <column>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReviewer"/>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="download_2">
            <property name="text">
-            <string>Phone</string>
+            <string>Download</string>
            </property>
-          </column>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QListWidget" name="paperKeyListMng"/>
-        </item>
-       </layout>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListRev"/>
+         </item>
+        </layout>
+       </widget>
       </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_11">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>190</y>
-         <width>511</width>
-         <height>361</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_12">
-        <item>
-         <layout class="QGridLayout" name="gridLayout_7">
-          <item row="0" column="0">
-           <widget class="QLabel" name="discussionLabel_3">
+      <widget class="QWidget" name="papersTab">
+       <attribute name="title">
+        <string>Paper Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="tableWidget">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>20</y>
+          <width>211</width>
+          <height>531</height>
+         </rect>
+        </property>
+        <column>
+         <property name="text">
+          <string>Title</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string notr="true">id</string>
+         </property>
+         <property name="toolTip">
+          <string notr="true"/>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>20</y>
+          <width>511</width>
+          <height>151</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout_6">
+         <item row="0" column="0">
+          <widget class="QLabel" name="paperName_4">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="fileName_3">
+           <property name="text">
+            <string>FILENAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="download_3">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="mainKey_4">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QTableWidget" name="authorsTableMng">
+           <column>
             <property name="text">
-             <string>Discussion</string>
+             <string>Name</string>
             </property>
-           </widget>
-          </item>
-          <item row="1" column="0">
-           <widget class="QTextBrowser" name="discussionBody_3">
-            <property name="html">
-             <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+           </column>
+           <column>
+            <property name="text">
+             <string>Email</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Org</string>
+            </property>
+           </column>
+           <column>
+            <property name="text">
+             <string>Phone</string>
+            </property>
+           </column>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QListWidget" name="paperKeyListMng"/>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_11">
+        <property name="geometry">
+         <rect>
+          <x>250</x>
+          <y>190</y>
+          <width>511</width>
+          <height>361</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_12">
+         <item>
+          <layout class="QGridLayout" name="gridLayout_7">
+           <item row="0" column="0">
+            <widget class="QLabel" name="discussionLabel_3">
+             <property name="text">
+              <string>Discussion</string>
+             </property>
+            </widget>
+           </item>
+           <item row="1" column="0">
+            <widget class="QTextBrowser" name="discussionBody_3">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-            </property>
-           </widget>
-          </item>
-          <item row="1" column="1">
-           <layout class="QVBoxLayout" name="verticalLayout_5">
-            <item>
-             <widget class="QTableWidget" name="reviewersTable">
-              <column>
+             </property>
+            </widget>
+           </item>
+           <item row="1" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_5">
+             <item>
+              <widget class="QTableWidget" name="reviewersTable">
+               <column>
+                <property name="text">
+                 <string>Name</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Email</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Org</string>
+                </property>
+               </column>
+               <column>
+                <property name="text">
+                 <string>Phone</string>
+                </property>
+               </column>
+              </widget>
+             </item>
+             <item>
+              <layout class="QHBoxLayout" name="horizontalLayout_9">
+               <item>
+                <widget class="QLabel" name="label_5">
+                 <property name="text">
+                  <string>User:</string>
+                 </property>
+                </widget>
+               </item>
+               <item>
+                <widget class="QLineEdit" name="toReview_2"/>
+               </item>
+               <item>
+                <widget class="QPushButton" name="addAsReviewer_2">
+                 <property name="text">
+                  <string>Add as Reviewer</string>
+                 </property>
+                </widget>
+               </item>
+              </layout>
+             </item>
+            </layout>
+           </item>
+           <item row="0" column="1">
+            <widget class="QLabel" name="label_6">
+             <property name="text">
+              <string>Reviewers</string>
+             </property>
+            </widget>
+           </item>
+           <item row="2" column="1">
+            <layout class="QVBoxLayout" name="verticalLayout_13">
+             <item>
+              <widget class="QLabel" name="label_41">
                <property name="text">
-                <string>Name</string>
+                <string>Comments</string>
                </property>
-              </column>
-              <column>
+              </widget>
+             </item>
+             <item>
+              <widget class="QTextBrowser" name="commentsBrowser"/>
+             </item>
+            </layout>
+           </item>
+           <item row="2" column="0">
+            <layout class="QFormLayout" name="formLayout">
+             <property name="fieldGrowthPolicy">
+              <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+             </property>
+             <item row="0" column="0">
+              <widget class="QLabel" name="label_24">
                <property name="text">
-                <string>Email</string>
+                <string>Overall</string>
                </property>
-              </column>
-              <column>
+              </widget>
+             </item>
+             <item row="0" column="1">
+              <widget class="QLabel" name="overallScore">
                <property name="text">
-                <string>Org</string>
+                <string>-</string>
                </property>
-              </column>
-              <column>
+              </widget>
+             </item>
+             <item row="1" column="0">
+              <widget class="QLabel" name="label_27">
                <property name="text">
-                <string>Phone</string>
+                <string>Confidence</string>
                </property>
-              </column>
-             </widget>
-            </item>
-            <item>
-             <layout class="QHBoxLayout" name="horizontalLayout_9">
-              <item>
-               <widget class="QLabel" name="label_5">
-                <property name="text">
-                 <string>User:</string>
-                </property>
-               </widget>
-              </item>
-              <item>
-               <widget class="QLineEdit" name="toReview_2"/>
-              </item>
-              <item>
-               <widget class="QPushButton" name="addAsReviewer_2">
-                <property name="text">
-                 <string>Add as Reviewer</string>
-                </property>
-               </widget>
-              </item>
-             </layout>
-            </item>
-           </layout>
-          </item>
-          <item row="0" column="1">
-           <widget class="QLabel" name="label_6">
-            <property name="text">
-             <string>Reviewers</string>
-            </property>
-           </widget>
-          </item>
-          <item row="2" column="1">
-           <layout class="QVBoxLayout" name="verticalLayout_13">
-            <item>
-             <widget class="QLabel" name="label_41">
-              <property name="text">
-               <string>Comments</string>
-              </property>
-             </widget>
-            </item>
-            <item>
-             <widget class="QTextBrowser" name="commentsBrowser"/>
-            </item>
-           </layout>
-          </item>
-          <item row="2" column="0">
-           <layout class="QFormLayout" name="formLayout">
-            <property name="fieldGrowthPolicy">
-             <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
-            </property>
-            <item row="0" column="0">
-             <widget class="QLabel" name="label_24">
-              <property name="text">
-               <string>Overall</string>
-              </property>
-             </widget>
-            </item>
-            <item row="0" column="1">
-             <widget class="QLabel" name="overallScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="1" column="0">
-             <widget class="QLabel" name="label_27">
-              <property name="text">
-               <string>Confidence</string>
-              </property>
-             </widget>
-            </item>
-            <item row="1" column="1">
-             <widget class="QLabel" name="confidenceScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="2" column="0">
-             <widget class="QLabel" name="label_29">
-              <property name="text">
-               <string>Relevance</string>
-              </property>
-             </widget>
-            </item>
-            <item row="2" column="1">
-             <widget class="QLabel" name="relevanceScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="3" column="0">
-             <widget class="QLabel" name="label_31">
-              <property name="text">
-               <string>Originality</string>
-              </property>
-             </widget>
-            </item>
-            <item row="3" column="1">
-             <widget class="QLabel" name="originalityScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="4" column="0">
-             <widget class="QLabel" name="label_33">
-              <property name="text">
-               <string>Significance</string>
-              </property>
-             </widget>
-            </item>
-            <item row="4" column="1">
-             <widget class="QLabel" name="significanceScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="5" column="0">
-             <widget class="QLabel" name="label_35">
-              <property name="text">
-               <string>Presentation</string>
-              </property>
-             </widget>
-            </item>
-            <item row="5" column="1">
-             <widget class="QLabel" name="presentationScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="6" column="0">
-             <widget class="QLabel" name="label_37">
-              <property name="text">
-               <string>Technical Quality</string>
-              </property>
-             </widget>
-            </item>
-            <item row="6" column="1">
-             <widget class="QLabel" name="techqualScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="7" column="0">
-             <widget class="QLabel" name="label_39">
-              <property name="text">
-               <string>Evaluation</string>
-              </property>
-             </widget>
-            </item>
-            <item row="7" column="1">
-             <widget class="QLabel" name="evaluationScore">
-              <property name="text">
-               <string>-</string>
-              </property>
-             </widget>
-            </item>
-            <item row="8" column="0">
-             <widget class="QPushButton" name="acceptPaper">
-              <property name="text">
-               <string>Accept Paper</string>
-              </property>
-             </widget>
-            </item>
-            <item row="8" column="1">
-             <widget class="QPushButton" name="rejectPaper">
-              <property name="text">
-               <string>Reject Paper</string>
-              </property>
-             </widget>
-            </item>
-           </layout>
-          </item>
-         </layout>
-        </item>
-       </layout>
+              </widget>
+             </item>
+             <item row="1" column="1">
+              <widget class="QLabel" name="confidenceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="0">
+              <widget class="QLabel" name="label_29">
+               <property name="text">
+                <string>Relevance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="2" column="1">
+              <widget class="QLabel" name="relevanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="3" column="0">
+              <widget class="QLabel" name="label_31">
+               <property name="text">
+                <string>Originality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="3" column="1">
+              <widget class="QLabel" name="originalityScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="0">
+              <widget class="QLabel" name="label_33">
+               <property name="text">
+                <string>Significance</string>
+               </property>
+              </widget>
+             </item>
+             <item row="4" column="1">
+              <widget class="QLabel" name="significanceScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="0">
+              <widget class="QLabel" name="label_35">
+               <property name="text">
+                <string>Presentation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="5" column="1">
+              <widget class="QLabel" name="presentationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="0">
+              <widget class="QLabel" name="label_37">
+               <property name="text">
+                <string>Technical Quality</string>
+               </property>
+              </widget>
+             </item>
+             <item row="6" column="1">
+              <widget class="QLabel" name="techqualScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="0">
+              <widget class="QLabel" name="label_39">
+               <property name="text">
+                <string>Evaluation</string>
+               </property>
+              </widget>
+             </item>
+             <item row="7" column="1">
+              <widget class="QLabel" name="evaluationScore">
+               <property name="text">
+                <string>-</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="0">
+              <widget class="QPushButton" name="acceptPaper">
+               <property name="text">
+                <string>Accept Paper</string>
+               </property>
+              </widget>
+             </item>
+             <item row="8" column="1">
+              <widget class="QPushButton" name="rejectPaper">
+               <property name="text">
+                <string>Reject Paper</string>
+               </property>
+              </widget>
+             </item>
+            </layout>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
       </widget>
-      <zorder>tableWidget</zorder>
-      <zorder>gridLayoutWidget_6</zorder>
-      <zorder>verticalLayoutWidget_11</zorder>
-      <zorder>gridLayoutWidget_7</zorder>
-     </widget>
-     <widget class="QWidget" name="usersTab">
-      <attribute name="title">
-       <string>User Management</string>
-      </attribute>
-      <widget class="QTableWidget" name="tableWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>311</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <column>
-        <property name="text">
-         <string>Name</string>
+      <widget class="QWidget" name="usersTab">
+       <attribute name="title">
+        <string>User Management</string>
+       </attribute>
+       <widget class="QTableWidget" name="tableWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>20</x>
+          <y>10</y>
+          <width>311</width>
+          <height>531</height>
+         </rect>
         </property>
-       </column>
-       <column>
-        <property name="text">
-         <string>User Name</string>
+        <column>
+         <property name="text">
+          <string>Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>User Name</string>
+         </property>
+        </column>
+        <column>
+         <property name="text">
+          <string>id</string>
+         </property>
+        </column>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_6">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>10</y>
+          <width>291</width>
+          <height>381</height>
+         </rect>
         </property>
-       </column>
-       <column>
-        <property name="text">
-         <string>id</string>
+        <layout class="QVBoxLayout" name="verticalLayout_6">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_8">
+           <item>
+            <widget class="QLabel" name="username_5">
+             <property name="text">
+              <string>USERNAME</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="userid_5">
+             <property name="text">
+              <string>USERID</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <widget class="QLabel" name="name_5">
+           <property name="text">
+            <string>NAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="email_5">
+           <property name="text">
+            <string>EMAIL</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="organisation_5">
+           <property name="text">
+            <string>ORGANISATION</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="phone_5">
+           <property name="text">
+            <string>PHONE</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="label_10">
+           <property name="text">
+            <string>Keywords</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QListWidget" name="userKeyList"/>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="horizontalLayoutWidget_2">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>500</y>
+          <width>291</width>
+          <height>41</height>
+         </rect>
         </property>
-       </column>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_6">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>10</y>
-         <width>291</width>
-         <height>381</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_6">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_8">
-          <item>
-           <widget class="QLabel" name="username_5">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid_5">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLabel" name="name_5">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="email_5">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="organisation_5">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="phone_5">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label_10">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QListWidget" name="userKeyList"/>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="horizontalLayoutWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>500</y>
-         <width>291</width>
-         <height>41</height>
-        </rect>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout_6">
-        <item>
-         <widget class="QLabel" name="label_4">
-          <property name="text">
-           <string>Paper:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="toReview"/>
-        </item>
-        <item>
-         <widget class="QPushButton" name="addAsReviewer">
-          <property name="text">
-           <string>Add to Review</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_15">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>400</y>
-         <width>291</width>
-         <height>101</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_17">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_23">
-          <item>
-           <widget class="QLabel" name="label_30">
-            <property name="text">
-             <string>Authored Papers</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_28">
-            <property name="text">
-             <string>Assigned to Review</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_24">
-          <item>
-           <widget class="QListWidget" name="authoredPapers"/>
-          </item>
-          <item>
-           <widget class="QListWidget" name="assignedPapers"/>
-          </item>
-         </layout>
-        </item>
-       </layout>
+        <layout class="QHBoxLayout" name="horizontalLayout_6">
+         <item>
+          <widget class="QLabel" name="label_4">
+           <property name="text">
+            <string>Paper:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="toReview"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="addAsReviewer">
+           <property name="text">
+            <string>Add to Review</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="verticalLayoutWidget_15">
+        <property name="geometry">
+         <rect>
+          <x>370</x>
+          <y>400</y>
+          <width>291</width>
+          <height>101</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_17">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_23">
+           <item>
+            <widget class="QLabel" name="label_30">
+             <property name="text">
+              <string>Authored Papers</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_28">
+             <property name="text">
+              <string>Assigned to Review</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_24">
+           <item>
+            <widget class="QListWidget" name="authoredPapers"/>
+           </item>
+           <item>
+            <widget class="QListWidget" name="assignedPapers"/>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
       </widget>
-     </widget>
-     <widget class="QWidget" name="reviewTab">
-      <attribute name="title">
-       <string>Review</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_7">
-       <property name="geometry">
-        <rect>
-         <x>10</x>
-         <y>150</y>
-         <width>761</width>
-         <height>401</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_7">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_11">
-          <item>
-           <widget class="QLabel" name="label_11">
-            <property name="text">
-             <string>Overall</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="overall"/>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_12">
-            <property name="text">
-             <string>Confidence</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="confidence"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_12">
-          <item>
-           <widget class="QLabel" name="label_13">
-            <property name="text">
-             <string>Relevance</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="relevance"/>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_14">
-            <property name="text">
-             <string>Originality</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="originality"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_13">
-          <item>
-           <widget class="QLabel" name="label_15">
-            <property name="text">
-             <string>Significance</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="significance"/>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_16">
-            <property name="text">
-             <string>Presentation</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="spinBox_8"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_14">
-          <item>
-           <widget class="QLabel" name="label_17">
-            <property name="text">
-             <string>Technical Quality</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="techQuality"/>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_18">
-            <property name="text">
-             <string>Evaluation</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QSpinBox" name="evaluation"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_15">
-          <item>
-           <widget class="QLabel" name="label_19">
-            <property name="text">
-             <string>Strengths of the paper</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_20">
-            <property name="text">
-             <string>Weaknesses of the paper</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_16">
-          <item>
-           <widget class="QTextEdit" name="commentsStrengths"/>
-          </item>
-          <item>
-           <widget class="QTextEdit" name="commentsWeaknesses"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_17">
-          <item>
-           <widget class="QLabel" name="label_21">
-            <property name="text">
-             <string>Would this paper be suitable as a short paper?</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_22">
-            <property name="text">
-             <string>Should this paper be considered for a best paper award?</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_18">
-          <item>
-           <widget class="QTextEdit" name="commentsShortPaper"/>
-          </item>
-          <item>
-           <widget class="QTextEdit" name="commentsBestAward"/>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_19">
-          <item>
-           <widget class="QLabel" name="label_23">
-            <property name="text">
-             <string>Detailed comments and suggestions</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QTextEdit" name="commentsSuggestions">
-            <property name="html">
-             <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+      <widget class="QWidget" name="reviewTab">
+       <attribute name="title">
+        <string>Review</string>
+       </attribute>
+       <widget class="QWidget" name="verticalLayoutWidget_7">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>150</y>
+          <width>761</width>
+          <height>401</height>
+         </rect>
+        </property>
+        <layout class="QVBoxLayout" name="verticalLayout_7">
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_11">
+           <item>
+            <widget class="QLabel" name="label_11">
+             <property name="text">
+              <string>Overall</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="overall"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_12">
+             <property name="text">
+              <string>Confidence</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="confidence"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_12">
+           <item>
+            <widget class="QLabel" name="label_13">
+             <property name="text">
+              <string>Relevance</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="relevance"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_14">
+             <property name="text">
+              <string>Originality</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="originality"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_13">
+           <item>
+            <widget class="QLabel" name="label_15">
+             <property name="text">
+              <string>Significance</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="significance"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_16">
+             <property name="text">
+              <string>Presentation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="spinBox_8"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_14">
+           <item>
+            <widget class="QLabel" name="label_17">
+             <property name="text">
+              <string>Technical Quality</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="techQuality"/>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_18">
+             <property name="text">
+              <string>Evaluation</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QSpinBox" name="evaluation"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_15">
+           <item>
+            <widget class="QLabel" name="label_19">
+             <property name="text">
+              <string>Strengths of the paper</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_20">
+             <property name="text">
+              <string>Weaknesses of the paper</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_16">
+           <item>
+            <widget class="QTextEdit" name="commentsStrengths"/>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsWeaknesses"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_17">
+           <item>
+            <widget class="QLabel" name="label_21">
+             <property name="text">
+              <string>Would this paper be suitable as a short paper?</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QLabel" name="label_22">
+             <property name="text">
+              <string>Should this paper be considered for a best paper award?</string>
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_18">
+           <item>
+            <widget class="QTextEdit" name="commentsShortPaper"/>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsBestAward"/>
+           </item>
+          </layout>
+         </item>
+         <item>
+          <layout class="QHBoxLayout" name="horizontalLayout_19">
+           <item>
+            <widget class="QLabel" name="label_23">
+             <property name="text">
+              <string>Detailed comments and suggestions</string>
+             </property>
+            </widget>
+           </item>
+           <item>
+            <widget class="QTextEdit" name="commentsSuggestions">
+             <property name="html">
+              <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>10</x>
-         <y>20</y>
-         <width>761</width>
-         <height>128</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout">
-        <item row="1" column="0">
-         <widget class="QLabel" name="mainKey">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+             </property>
+            </widget>
+           </item>
+          </layout>
+         </item>
+        </layout>
+       </widget>
+       <widget class="QWidget" name="gridLayoutWidget">
+        <property name="geometry">
+         <rect>
+          <x>10</x>
+          <y>20</y>
+          <width>761</width>
+          <height>128</height>
+         </rect>
+        </property>
+        <layout class="QGridLayout" name="gridLayout">
+         <item row="1" column="0">
+          <widget class="QLabel" name="mainKey">
+           <property name="text">
+            <string>MAINKEY</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="fileName">
+           <property name="text">
+            <string>FILENAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QTextBrowser" name="textBrowser">
+           <property name="html">
+            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="download">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="1">
-         <widget class="QLabel" name="paperName">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QComboBox" name="selectPaperReview"/>
-        </item>
-       </layout>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QPushButton" name="download">
+           <property name="text">
+            <string>Download</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLabel" name="paperName">
+           <property name="text">
+            <string>PAPERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QComboBox" name="selectPaperReview"/>
+         </item>
+        </layout>
+       </widget>
       </widget>
      </widget>
     </widget>

commit e8d547c43ba0b7d8a3d15a17c93afcd70be5c167
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:17:03 2014 +1100

    added fns to populate data fields

commit b54408753f81f4a964b53dacc9a1a0fdf8c72f2c
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:15:16 2014 +1100

    added fns to populate data fields

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 603d770..6af5578 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -2,7 +2,9 @@
 #define MAINWINDOW_H
 
 #include <QMainWindow>
-#include "LoginManager.hpp"
+//#include "LoginManager.hpp"
+
+class LoginManager;
 
 namespace Ui {
 class MainWindow;
@@ -53,14 +55,20 @@ private slots:
 
     void on_selectPaperAuthor_currentTextChanged(const QString &arg1);
 
+    void on_tabWidget_currentChanged(int index);
+
 private:
     void setUser(UserType_t userType);
+    void noUser();
     void login();
     void logout();
-    
-    // NOTE: the following functions were not declare
-    //       placing in private for now
-    void noUser();
+    void populate_infoTabAuthor();
+    void populate_infoTabChair();
+    void populate_authorTab();
+    void populate_reviewerTab();
+    void populate_papersTab();
+    void populate_usersTab();
+    void populate_reviewTab();
 
     Ui::MainWindow *ui;
     LoginManager loginMgr;

commit 408e6d2c7346e797d24c6dd19077b7d213f94296
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 15:14:14 2014 +1100

    added fns to populate data fields

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index b6c33a8..5945feb 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,8 +1,6 @@
-#include "mainwindow.hpp"
+#include "mainwindow.h"
 #include "ui_mainwindow.h"
 
-#include "User.hpp" // for UserType_t enum
-
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),
     ui(new Ui::MainWindow)
@@ -20,7 +18,7 @@ MainWindow::~MainWindow()
 void MainWindow::login()
 {
     if(loginMgr.login(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr.getCurrentUser()->getUserType());
+        setUser(loginMgr.currentUser->getUserType());
 }
 
 void MainWindow::logout()
@@ -91,7 +89,7 @@ void MainWindow::on_passwordLogin_returnPressed()
 void MainWindow::on_createAccount_clicked()
 {
     if(loginMgr.createAccount(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr.getCurrentUser()->getUserType());
+        setUser(loginMgr.currentUser->getUserType());
 }
 
 void MainWindow::on_apply_clicked()
@@ -157,14 +155,155 @@ void MainWindow::on_rmvAuthKey_clicked()
     delete ui->authKeyList->currentItem();
 }
 
-void MainWindow::on_selectPaperAuthor_activated(int /*index*/) //NOTE
+void MainWindow::on_selectPaperAuthor_activated(int index)
 {
 
 }
 
-void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/)
-{ // NOTE: unused parameter 'arg1'
+void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
+{
     ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
     if(ui->selectPaperAuthor->findText("*NEW*") == -1)
         ui->selectPaperAuthor->addItem("*NEW*");
 }
+
+//void MainWindow::on_tabWidget_currentChanged(int index)
+//{//change to current text or something
+//    switch(index){
+//    case 1:
+//        populate_infoTabAuthor();
+//        break;
+//    case 2:
+//        populate_infoTabChair();
+//        break;
+//    case 3:
+//        populate_authorTab();
+//        break;
+//    case 4:
+//        populate_reviewerTab();
+//        break;
+//    case 5:
+//        populate_papersTab();
+//        break;
+//    case 6:
+//        populate_usersTab();
+//        break;
+//    case 7:
+//        populate_reviewTab();
+//        break;
+//    default:
+//        break;
+
+
+//    }
+//}
+
+//void MainWindow::populate_infoTabAuthor()
+//{
+//    User* user;
+//    if(loginMgr.currentAuthor != nullptr)
+//        user = dynamic_cast<User*>(currentAuthor);
+//    if(loginMgr.currentReviewer != nullptr)
+//        user = dynamic_cast<User*>(currentReviewer);
+
+//    ui->username->setText(user->username);
+//    ui->userid->setText(user->getUserId());
+//    ui->name->setText(user->getName());
+//    ui->email->setText(user->getEmail());
+//    ui->organisation->setText(user->getOrganisation());
+//    ui->phone->setText(user->getPhone());
+
+//    if(loginMgr.currentAuthor != nullptr)
+//        for(std::vector<std::string>::iterator it = loginMgr.currentAuthor->keywords.begin(); it != loginMgr.currentAuthor->keywords.end(); ++it)
+//            ui->authKeyList->addItem(*it);
+//    if(loginMgr.currentReviewer != nullptr)
+//        for(std::vector<std::string>::iterator it = loginMgr.currentReviewer->keywords.begin(); it != loginMgr.currentReviewer->keywords.end(); ++it)
+//            ui->authKeyList->addItem(*it);
+
+//    ui->conferenceName->setText(loginMgr.activeConference->title);
+//    ui->confTopic->setText(loginMgr.activeConference->topic);
+//    ui->confLocation->setText(loginMgr.activeConference->location);
+//    ui->confDesc->setText(loginMgr.activeConference->description);
+//    for(std::vector<std::string>::iterator it = loginMgr.activeConference->keywords.begin(); it != loginMgr.activeConference->keywords.end(); ++it)
+//        ui->confKeyList->addItem(*it);
+//    ui->subDate->setText(loginMgr.activeConference->paperDeadline.toString());
+//    ui->discDate->setText(loginMgr.activeConference->discussDeadline.toString());
+//    ui->hReviewDate->setText(loginMgr.activeConference->reviewDeadlineHard.toString());
+//    ui->sReviewDate->setText(loginMgr.activeConference->reviewDeadlineSoft.toString());
+//    //ui->allocDate->setText(loginMgr.activeConference->);
+//}
+
+//void MainWindow::populate_infoTabChair()
+//{
+//    PCChair* user = loginMgr.currentPCChair;
+//    Conference* conf = loginMgr.activeConference;
+
+//    ui->username->setText(user->username);
+//    ui->userid->setText(user->getUserId());
+//    ui->name->setText(user->getName());
+//    ui->email->setText(user->getEmail());
+//    ui->organisation->setText(user->getOrganisation());
+//    ui->phone->setText(user->getPhone());
+
+//    ui->conferenceName->setText(conf->title);
+//    ui->confTopic->setText(conf->topic);
+//    ui->confLocation->setText(conf->location);
+//    ui->confDesc->setText(conf->description);
+//    for(std::vector<std::string>::iterator it = conf->keywords.begin(); it != conf->keywords.end(); ++it)
+//        ui->confKeyList->addItem(*it);
+//    ui->subDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
+//    //ui->allocDateEdit->date().setDate(conf->paperDeadline.day, conf->paperDeadline.month, conf->paperDeadline.year);
+//    ui->sReviewDateEdit->date().setDate(conf->reviewDeadlineSoft.day, conf->reviewDeadlineSoft.month, conf->reviewDeadlineSoft.year);
+//    ui->hReviewDateEdit->date().setDate(conf->reviewDeadlineHard.day, conf->reviewDeadlineHard.month, conf->reviewDeadlineHard.year);
+//    ui->discDateEdit->date().setDate(conf->discussDeadline.day, conf->discussDeadline.month, conf->discussDeadline.year);
+//}
+
+//void MainWindow::populate_authorTab()
+//{
+//    Author* user = loginMgr.currentAuthor;
+//    std::vector<PaperSummary> papers = user->getOwnPapers();
+//    std::vector<std::string> keys = user->getCurrentPaper().getKeywords();
+//    std::vector<User> authors = user->getCurrentPaper().getAuthors();
+
+//    for(std::vector<PaperSummary>::iterator it = papers.begin(); it != papers.end(); ++it)
+//        ui->selectPaperAuthor->addItem(it->paperName);
+
+//    ui->paperAbstract->setText(user->getCurrentPaper().getAbstract());
+//    for(std::vector<std::string> it = keys.begin(); it != keys.end(); ++it)
+//        ui->paperKeyListAuth->addItem(*it);
+
+//    for(std::vector<User>::iterator it = authors.begin(); it != authors.end(); ++it){
+//        int rows = ui->authorsTable->rowCount();
+//        ui->authorsTable->insertRow(rows);
+//        QTableWidgetItem* newItem = new QTableWidgetItem(it->getName());
+//        ui->authorsTable->setItem(rows, 0, newItem);
+//        newItem = new QTableWidgetItem(it->getName());
+//        ui->authorsTable->setItem(rows, 1, newItem);
+//        newItem = new QTableWidgetItem(it->getOrganisation());
+//        ui->authorsTable->setItem(rows, 2, newItem);
+//        newItem = new QTableWidgetItem(it->getPhone());
+//        ui->authorsTable->setItem(rows, 3, newItem);
+//    }
+
+//    ui->filenameAuth->setText(user->getCurrentPaper().getFname());
+//}
+
+//void MainWindow::populate_papersTab()
+//{
+
+//}
+
+//void MainWindow::populate_reviewerTab()
+//{
+
+//}
+
+//void MainWindow::populate_reviewTab()
+//{
+
+//}
+
+//void MainWindow::populate_usersTab()
+//{
+
+//}

commit 544049d23f6ba9cfaa8ddc845b2c3a91edb87ef4
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 15:12:37 2014 +1100

    Create PaperSummary.hpp

diff --git a/Server/PaperSummary.hpp b/Server/PaperSummary.hpp
new file mode 100644
index 0000000..f61d4e0
--- /dev/null
+++ b/Server/PaperSummary.hpp
@@ -0,0 +1,11 @@
+#ifndef PAPER_SUMMARY_H
+#define PAPER_SUMMARY_H
+#include <string>
+struct PaperSummary {
+PaperSummary(int ipaperId, const std::string& ipaperName) :
+paperId(ipaperId), paperName(ipaperName)
+{ }
+int paperId{0};
+std::string paperName{""};
+};
+#endif

commit c2731d1340d4c790fb066153417379f174ff417f
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 15:03:00 2014 +1100

    Update Paper.hpp

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index b617a3c..842e03c 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -20,7 +20,7 @@ struct Paper {
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion)
       :
-      paperID(ipaperID)
+      paperID(ipaperID),
       title(ititle),
       abstract(iabstract),
       authors(iauthors),

commit 00d15aa8e5233b311d085dfefcb81de8282870c2
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 15:01:55 2014 +1100

    Update Paper.hpp

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index 41faf7c..b617a3c 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -11,7 +11,8 @@
 struct Paper {
 
     Paper() { }
-    Paper(const std::string& ititle,
+    Paper(const int ipaperID,
+      const std::string& ititle,
       const std::string& iabstract,
       const std::vector<std::string>& iauthors,
       const std::vector<std::string>& ikeywords,
@@ -19,6 +20,7 @@ struct Paper {
       const std::vector<Review>& ireviews,
       const Discussion& idiscussion)
       :
+      paperID(ipaperID)
       title(ititle),
       abstract(iabstract),
       authors(iauthors),
@@ -28,6 +30,7 @@ struct Paper {
       discussion(idiscussion)
       { }
     // no assignment operator or copy constructor deemed necessary at this point
+    int paperID{0};
     std::string title{""};
     std::string abstract{""};
     std::vector<User> authors;

commit 93832c92f13892fd7a7b63b982e1e0aa0c440d82
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:59:31 2014 +1100

    Create UserManager.cpp

diff --git a/Server/UserManager.cpp b/Server/UserManager.cpp
new file mode 100644
index 0000000..3564903
--- /dev/null
+++ b/Server/UserManager.cpp
@@ -0,0 +1,18 @@
+#include "UserManager.hpp"
+
+void UserManager::fetchUser(std::string userName)
+{
+  *currentUser = db->fetchUser(userName);
+}
+
+std::vector UserManager::getAllUsers()
+{
+  std::vector<std::string> allUsers = db->allUserNames();
+  
+  std::vector<User> users;
+  for(int i = 0; i < allUsers.size(); ++i)
+  {
+    users.push_back(db->fetchUser(allUsers[i]));
+  }
+  return users;
+}

commit 35ea64cf54d059ce3f69f1acdb372ad09d65d986
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:56:54 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index ed56de3..4c87f49 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -765,11 +765,11 @@ void Database::updateConf(Conference* conf)
       	}
 }
 
-std::vector<int> *Database::allConfIDs()
+std::vector<int> Database::allConfIDs()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<int> *vptr = new std::vector<int>();
+        std::vector<int> vptr;
 
         const char* selectall = "select confID from Conference";
 
@@ -781,17 +781,17 @@ std::vector<int> *Database::allConfIDs()
         rs = pstmt->executeQuery();
         while (rs->next()) {
                 int anid = rs->getInt(1);
-                vptr->push_back(anid);
+                vptr.push_back(anid);
         }
 
         return vptr;
 }
 
-std::vector<std::string> *Database::allConfNames()
+std::vector<std::string> Database::allConfNames()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
+        std::vector<std::string> vptr;
 
         const char* selectall = "select name from Conference";
 
@@ -803,7 +803,7 @@ std::vector<std::string> *Database::allConfNames()
         rs = pstmt->executeQuery();
         while (rs->next()) {
                 std::string aname = rs->getString(1);
-                vptr->push_back(aname);
+                vptr.push_back(aname);
         }
 
         return vptr;

commit 808b0cf5238e664cd415802d58637147c69cc242
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:54:44 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 33aaeb2..ed56de3 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -104,7 +104,7 @@ User Database::fetchUser(std::string key) throw (const char*)
 	{
 		delete rs;
 		delete pstmt;
-		return NULL;
+		return User();
 	}
 
         std::string name = rs->getString(3);

commit 8bc69eff2f7b1822e1ca4ae8091a7a8be5231de5
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:53:11 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 156afbc..e724a61 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -5,6 +5,7 @@
 #include "User.hpp"
 
 #include <string>
+#include <vector>
 
 class UserManager {
 public:
@@ -27,7 +28,7 @@ public:
   void sendUser();
   void sendUserBatch();
   void fetchUser(std::string);
-   std:vector<User> getAllUsers();
+  std:vector<User> getAllUsers();
 
 
 private:

commit 20d112f9b21e1afa7d17229cbfab08a19ea45033
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:52:41 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 093a796..156afbc 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -27,6 +27,7 @@ public:
   void sendUser();
   void sendUserBatch();
   void fetchUser(std::string);
+   std:vector<User> getAllUsers();
 
 
 private:

commit f01b9ffeb7fab990b8157d3fabaff92eda96a6c4
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:52:17 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 0484105..33aaeb2 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -84,7 +84,7 @@ User Database::fetchUser(std::string key) throw (const char*)
 	{
 		delete rs;
 		delete pstmt;
-		return NULL;
+		return User();
 	}
 
         int userID = rs->getInt(1);
@@ -458,7 +458,7 @@ Conference Database::fetchConference(int key) throw (const char*)
 	{
 		delete rs;
 		delete pstmt;
-		return NULL;
+		return Conference();
 	}
 
         int confID = rs->getInt(1);

commit b647eea3073eab23fc9820641894ca76069b0d23
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:51:39 2014 +1100

    Update User.hpp

diff --git a/Server/User.hpp b/Server/User.hpp
index 2fa0ddb..ab364df 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -6,6 +6,8 @@
 
 
 struct User {
+  User() {}
+  
   User(std::string& iuserName,
          std::string& iname,
          std::string& iemail,

commit ef1f8a2f752b3f4240121d60af3e4587e41f3e80
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:51:18 2014 +1100

    Update Conference.hpp

diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 625d82b..f49f905 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -7,6 +7,8 @@
 #include <vector>
 
 struct Conference {
+  Conference() {}
+  
   Conference(bool iisActive,
   std::string& ititle,
   int& iconfID,

commit 89575e48f41ee2e1093177c67929f1da5cbeed19
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:49:38 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 3a9f0ad..093a796 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -30,7 +30,6 @@ public:
 
 
 private:
- void fetchUser(int);
  User* currentUser{nullptr};
  Database* database{nullptr};
 };

commit 8557a5810c60b182fffd9e753097118b508afa72
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:43:18 2014 +1100

    Update main.cpp

diff --git a/Database/main.cpp b/Database/main.cpp
index 6a3c8ab..7e8b034 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -41,8 +41,8 @@ int main(int arc, char *argv[])
         for(iter=Names->begin(); iter!=Names->end(); iter++)
         {
                 std::string key = (*iter);
-                userPtr user = db.fetchUser(key);
-                std::cout << user->userName << " " << user->name << " " <<  user->keywords[0] << " " << user->email << " " << key << std::endl;
+                User user = db.fetchUser(key);
+                std::cout << user.userName << " " << user.name << " " <<  user.keywords[0] << " " << user.email << " " << key << std::endl;
         }
 //        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
 //        {

commit 950ae94b54be9da0826296c5d630c6ae5f9307da
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:41:36 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 6cf5fef..00ba0da 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -97,6 +97,6 @@ std:vector<Conferences> ConferenceManager::getAllConferences()
 
 void ConferenceManager::fetchConference(int confId)
 {
-    currentConference = db->fetchConference(confId);
+    *currentConference = db->fetchConference(confId);
     
 }

commit 088b17a647eb380b5195498980079891a32f082b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:39:32 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 3baf919..3a9f0ad 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -26,7 +26,7 @@ public:
   bool deleteUser(int);
   void sendUser();
   void sendUserBatch();
-  bool fetchUser(std::string);
+  void fetchUser(std::string);
 
 
 private:

commit e3aa944d74af15362563732306118f5db3d6d49e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:39:10 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index df11124..3baf919 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -26,7 +26,7 @@ public:
   bool deleteUser(int);
   void sendUser();
   void sendUserBatch();
-  bool fetchUser(std::string, std::string);
+  bool fetchUser(std::string);
 
 
 private:

commit 858f118a23ead15c59f80d80b5da6a49c4ec76cd
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:33:34 2014 +1100

    Update Database.cpp

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 485889b..0484105 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -60,7 +60,7 @@ void Database::close()
         invalid = true;
 }
 
-User *Database::fetchUser(std::string key) throw (const char*)
+User Database::fetchUser(std::string key) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -129,7 +129,7 @@ User *Database::fetchUser(std::string key) throw (const char*)
                 vec.push_back(expertise);
         }
 
-        User *user = new User(
+        User user(
 		username,
 		name,
 		email,
@@ -170,7 +170,7 @@ bool Database::existsUserName(std::string key) throw (const char*)
         return count == 1;
 }
 
-void Database::putUser(std::string key, const User *user) throw (const char*)
+void Database::putUser(std::string key, User *user) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -185,7 +185,7 @@ void Database::putUser(std::string key, const User *user) throw (const char*)
 	}
 }
 
-void Database::createUser(const User* user)
+void Database::createUser(User* user)
 {
         if (invalid)
                 throw (noDB);
@@ -266,7 +266,7 @@ void Database::createUser(const User* user)
       	}
 }
 
-void Database::updateUser(const User* user)
+void Database::updateUser(User* user)
 {
         if (invalid)
                 throw (noDB);
@@ -350,11 +350,11 @@ void Database::updateUser(const User* user)
       	}
 }
 
-std::vector<int> *Database::allUserIDs()
+std::vector<int> Database::allUserIDs()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<int> *vptr = new std::vector<int>();
+        std::vector<int> vptr;
 
         const char* selectall = "select userID from UserAccount";
 
@@ -366,17 +366,17 @@ std::vector<int> *Database::allUserIDs()
         rs = pstmt->executeQuery();
         while (rs->next()) {
                 int anid = rs->getInt(1);
-                vptr->push_back(anid);
+                vptr.push_back(anid);
         }
 
         return vptr;
 }
 
-std::vector<std::string> *Database::allUserNames()
+std::vector<std::string> Database::allUserNames()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
+        std::vector<std::string> vptr;
 
         const char* selectall = "select username from UserAccount";
 
@@ -388,7 +388,7 @@ std::vector<std::string> *Database::allUserNames()
         rs = pstmt->executeQuery();
         while (rs->next()) {
                 std::string aname = rs->getString(1);
-                vptr->push_back(aname);
+                vptr.push_back(aname);
         }
 
         return vptr;
@@ -435,7 +435,7 @@ void Database::addKeyword(std::string key) throw (const char*)
         delete pstmt;
 }
 
-Conference *Database::fetchConference(int key) throw (const char*)
+Conference Database::fetchConference(int key) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -514,7 +514,7 @@ Conference *Database::fetchConference(int key) throw (const char*)
         delete rs;
         delete pstmt;
 
-        Conference *conf = new Conference(
+        Conference conf(
 		isActive,
 		title,
 		confID,
@@ -809,11 +809,11 @@ std::vector<std::string> *Database::allConfNames()
         return vptr;
 }
 
-std::vector<int> *Database::activeConfIDs()
+std::vector<int> Database::activeConfIDs()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<int> *vptr = new std::vector<int>();
+        std::vector<int> vptr;
 
         const char* selectActive = "SELECT confID FROM Conference WHERE active = 1";
 
@@ -825,17 +825,17 @@ std::vector<int> *Database::activeConfIDs()
         rs = pstmt->executeQuery();
         while (rs->next()) {
                 int anid = rs->getInt(1);
-                vptr->push_back(anid);
+                vptr.push_back(anid);
         }
 
         return vptr;
 }
 
-std::vector<std::string> *Database::activeConfNames()
+std::vector<std::string> Database::activeConfNames()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
+        std::vector<std::string> vptr;
 
         const char* selectActive = "SELECT name FROM Conference WHERE active = 1";
 
@@ -847,7 +847,7 @@ std::vector<std::string> *Database::activeConfNames()
         rs = pstmt->executeQuery();
         while (rs->next()) {
                 std::string aname = rs->getString(1);
-                vptr->push_back(aname);
+                vptr.push_back(aname);
         }
 
         return vptr;

commit ccdc951af17f12df71e01045a75c9697d7ec47e5
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 14:30:34 2014 +1100

    added server connection stuff

diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index da89418..fc74b7e 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -4,10 +4,36 @@
 
 #include "Conference.hpp"
 #include "User.hpp"
+#include "UserClientStubForServer.hpp"
+#include "mainwindow.hpp"
 
 class LoginManager {
   public:
-  LoginManager() { }
+  LoginManager(QTcpSocket* aServer) {
+      
+    
+    // Connection will mainly be managed by an instance of client stub class
+    ClientStubForServer *stub = new ClientStubForServer(aServer, this);
+    this->theServer = stub;
+    // but do have some more initialisation to do on the connection
+    aServer->setParent(this);
+    // Read events generated through TCP connection to be handled by
+    // instance of clientstub class
+    connect(aServer, SIGNAL(readyRead()), stub, SLOT(readResponseData()));
+    
+    mWindow = new MainWindow();
+//    widget.setupUi(this);
+    
+//    connect(widget.loginButton, SIGNAL(clicked()), this,
+//            SLOT(handleLoginButton()));
+//    
+//    connect(widget.quitButton, SIGNAL(clicked()), this, SLOT(close()));
+    
+    // Start things by sending a request for the names that are needed to
+    // populate the list
+    //this->theServer->getNames(); //ASYNCHRONOUS request - names will arrive sometime
+    
+  }
   LoginManager(bool iloggedIn,
                const std::vector<Conference*>& iconferences,
                Conference* iactiveConference) :
@@ -21,6 +47,7 @@ class LoginManager {
   }
   delete currentUser;
 }
+  void showWindow() {mWindow->show();}
 
 // no other constructors deemed necessary at this point
   User* getCurrentUser() {return currentUser;}
@@ -28,7 +55,9 @@ class LoginManager {
   void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
   void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}  
 
-  bool login(std::string, std::string);
+  void loginRequest(QString, QString);
+  void loginResponse();
+  
   void logout();
   bool createAccount(std::string, std::string);
   void listConferences();
@@ -45,6 +74,8 @@ class LoginManager {
   bool loggedIn;
   std::vector<Conference*> conferences;
   Conference* activeConference{nullptr};
+  UserClientStubForServer* theServer;
+  MainWindow* mWindow;
 
 };
 #endif

commit 405c11bc4687f04f680b6456565f2c0d88511ef1
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:29:44 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 5253d6b..df11124 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -2,6 +2,7 @@
 #define USER_MANAGER_H
 
 #include "../Database/Database.hpp"
+#include "User.hpp"
 
 #include <string>
 

commit be08964317a445cfb60ca56f5c1f695b8f47aec3
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 14:28:53 2014 +1100

    Delete UserClientDriver.cpp

diff --git a/UserClient/UserClientDriver.cpp b/UserClient/UserClientDriver.cpp
deleted file mode 100644
index 04e5b8c..0000000
--- a/UserClient/UserClientDriver.cpp
+++ /dev/null
@@ -1,31 +0,0 @@
-#include <iostream>
-#include <QApplication> // NOTE: might need to be <QtGui/QApplication>
-
-#include "Author.hpp"
-#include "Conference.hpp"
-#include "Date.hpp"
-#include "Discussion.hpp"
-#include "DiscussionPost.hpp"
-#include "LoginManager.hpp"
-#include "Paper.hpp"
-#include "PCChair.hpp"
-#include "Review.hpp"
-#include "Reviewer.hpp"
-#include "User.hpp"
-
-#include "mainwindow.hpp" //NOTE: used for testing atm
-
-int main(int argc, char *argv[]) {
-    // initialize resources, if needed
-    // Q_INIT_RESOURCE(resfile);
-
-    QApplication app(argc, argv);
-
-    MainWindow *foo = new MainWindow();
-    
-    foo->show();
-    
-    // create and show your widgets here
-
-    return app.exec();
-}

commit 0a2433796138c97581768020def0e1a2d6947745
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 14:28:39 2014 +1100

    Rename UserClient.hpp to UserClient.cpp

diff --git a/UserClient/UserClient.cpp b/UserClient/UserClient.cpp
new file mode 100644
index 0000000..a83c3df
--- /dev/null
+++ b/UserClient/UserClient.cpp
@@ -0,0 +1,65 @@
+#include <iostream>
+#include <QApplication> // NOTE: might need to be <QtGui/QApplication>
+
+#include "LoginManager.hpp"
+
+QTcpSocket *establishConnection();
+
+int main(int argc, char *argv[]) {
+    // initialize resources, if needed
+    // Q_INIT_RESOURCE(resfile);
+
+    QApplication app(argc, argv);
+
+    QTcpSocket *server = establishConnection();
+    LoginManager *mainWindow = new LoginManager(server);
+    
+    mainWindow->showWindow();
+
+    return app.exec();
+}
+
+QTcpSocket *establishConnection() {
+    std::string servername = "127.0.0.1";
+    std::string pnumstr = "23456";
+    /*QRegExp portChk("^\\d{4,5}$");
+    QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
+    std::cout << "Enter ip address (IP-IV) of server : ";
+    std::string servername;
+    std::cin >> servername;
+
+    int matchpt = ipChk.indexIn(servername.c_str());
+    if(matchpt < 0) {
+        std::cout << "Invalid ip address!";
+        exit(1);
+    }
+    std::cout << "Enter portnumber : ";
+    std::string pnumstr;
+    std::cin >> pnumstr;
+    matchpt = portChk.indexIn(pnumstr.c_str());
+    if(matchpt < 0) {
+        std::cout << "Invalid port number!";
+    }*/
+    QTcpSocket *tcpSocket = new QTcpSocket(0);
+    QString qhost = servername.c_str();
+    QString qport = pnumstr.c_str();
+    tcpSocket->connectToHost(qhost, qport.toInt());
+    // Allow time for connection to establish, then check that all
+    // looks good. If any problems, abort execution.
+    bool ok = tcpSocket->waitForConnected(1000);
+    if (!ok) {
+        std::cout << "Wait for connected didn't work" << std::endl;
+        exit(1);
+    }
+    if (!tcpSocket->isValid()) {
+        std::cout << "Didn't connect completely?" << std::endl;
+        exit(1);
+    } QAbstractSocket::SocketState state;
+    state = tcpSocket->state();
+    if (state != QAbstractSocket::ConnectedState) {
+        std::cout << "Not happy with state" << std::endl;
+        exit(1);
+    }
+    
+    return tcpSocket; 
+} 
diff --git a/UserClient/UserClient.hpp b/UserClient/UserClient.hpp
deleted file mode 100644
index a83c3df..0000000
--- a/UserClient/UserClient.hpp
+++ /dev/null
@@ -1,65 +0,0 @@
-#include <iostream>
-#include <QApplication> // NOTE: might need to be <QtGui/QApplication>
-
-#include "LoginManager.hpp"
-
-QTcpSocket *establishConnection();
-
-int main(int argc, char *argv[]) {
-    // initialize resources, if needed
-    // Q_INIT_RESOURCE(resfile);
-
-    QApplication app(argc, argv);
-
-    QTcpSocket *server = establishConnection();
-    LoginManager *mainWindow = new LoginManager(server);
-    
-    mainWindow->showWindow();
-
-    return app.exec();
-}
-
-QTcpSocket *establishConnection() {
-    std::string servername = "127.0.0.1";
-    std::string pnumstr = "23456";
-    /*QRegExp portChk("^\\d{4,5}$");
-    QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
-    std::cout << "Enter ip address (IP-IV) of server : ";
-    std::string servername;
-    std::cin >> servername;
-
-    int matchpt = ipChk.indexIn(servername.c_str());
-    if(matchpt < 0) {
-        std::cout << "Invalid ip address!";
-        exit(1);
-    }
-    std::cout << "Enter portnumber : ";
-    std::string pnumstr;
-    std::cin >> pnumstr;
-    matchpt = portChk.indexIn(pnumstr.c_str());
-    if(matchpt < 0) {
-        std::cout << "Invalid port number!";
-    }*/
-    QTcpSocket *tcpSocket = new QTcpSocket(0);
-    QString qhost = servername.c_str();
-    QString qport = pnumstr.c_str();
-    tcpSocket->connectToHost(qhost, qport.toInt());
-    // Allow time for connection to establish, then check that all
-    // looks good. If any problems, abort execution.
-    bool ok = tcpSocket->waitForConnected(1000);
-    if (!ok) {
-        std::cout << "Wait for connected didn't work" << std::endl;
-        exit(1);
-    }
-    if (!tcpSocket->isValid()) {
-        std::cout << "Didn't connect completely?" << std::endl;
-        exit(1);
-    } QAbstractSocket::SocketState state;
-    state = tcpSocket->state();
-    if (state != QAbstractSocket::ConnectedState) {
-        std::cout << "Not happy with state" << std::endl;
-        exit(1);
-    }
-    
-    return tcpSocket; 
-} 

commit 0e1c527f96ae3dff8cb0314f09b440be437998d5
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:28:31 2014 +1100

    Update Database.hpp

diff --git a/Database/Database.hpp b/Database/Database.hpp
index c44e69f..ce603c0 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -16,24 +16,24 @@ public:
         void close();
 
 	// USER
-	User *fetchUser(std::string key) throw (const char*);
+	User fetchUser(std::string key) throw (const char*);
         bool existsUserName(std::string key) throw (const char*);
-        void putUser(std::string key, const User *user) throw (const char*);
-        std::vector<int> *allUserIDs();
-        std::vector<std::string> *allUserNames();
+        void putUser(std::string key, User *user) throw (const char*);
+        std::vector<int> allUserIDs();
+        std::vector<std::string> allUserNames();
 
 	// KEYWORD
         bool existsKeyword(std::string key) throw (const char*);
 	void addKeyword(std::string key) throw (const char*);
 
 	// CONFERENCE
-	Conference *fetchConference(int key) throw (const char*);
+	Conference fetchConference(int key) throw (const char*);
         bool existsConfName(std::string key) throw (const char*);
         void putConf(std::string key, Conference *conf) throw (const char*);
-        std::vector<int> *allConfIDs();
-        std::vector<std::string> *allConfNames();
-        std::vector<int> *activeConfIDs();
-        std::vector<std::string> *activeConfNames();
+        std::vector<int> allConfIDs();
+        std::vector<std::string> allConfNames();
+        std::vector<int> activeConfIDs();
+        std::vector<std::string> activeConfNames();
 
 
 
@@ -65,8 +65,8 @@ private:
 //        void recordToTables(const MyRecord *data);
 
 	// USER
-        void createUser(const User *user);
-        void updateUser(const User *user);
+        void createUser(User *user);
+        void updateUser(User *user);
 
 	// CONF
         void createConf(Conference *conf);

commit 600165ed2de8631428d1b6ce2641c5a696a8847d
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 14:26:59 2014 +1100

    change UserClientDriver to UserClient

diff --git a/UserClient/UserClient.hpp b/UserClient/UserClient.hpp
new file mode 100644
index 0000000..a83c3df
--- /dev/null
+++ b/UserClient/UserClient.hpp
@@ -0,0 +1,65 @@
+#include <iostream>
+#include <QApplication> // NOTE: might need to be <QtGui/QApplication>
+
+#include "LoginManager.hpp"
+
+QTcpSocket *establishConnection();
+
+int main(int argc, char *argv[]) {
+    // initialize resources, if needed
+    // Q_INIT_RESOURCE(resfile);
+
+    QApplication app(argc, argv);
+
+    QTcpSocket *server = establishConnection();
+    LoginManager *mainWindow = new LoginManager(server);
+    
+    mainWindow->showWindow();
+
+    return app.exec();
+}
+
+QTcpSocket *establishConnection() {
+    std::string servername = "127.0.0.1";
+    std::string pnumstr = "23456";
+    /*QRegExp portChk("^\\d{4,5}$");
+    QRegExp ipChk("^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$");
+    std::cout << "Enter ip address (IP-IV) of server : ";
+    std::string servername;
+    std::cin >> servername;
+
+    int matchpt = ipChk.indexIn(servername.c_str());
+    if(matchpt < 0) {
+        std::cout << "Invalid ip address!";
+        exit(1);
+    }
+    std::cout << "Enter portnumber : ";
+    std::string pnumstr;
+    std::cin >> pnumstr;
+    matchpt = portChk.indexIn(pnumstr.c_str());
+    if(matchpt < 0) {
+        std::cout << "Invalid port number!";
+    }*/
+    QTcpSocket *tcpSocket = new QTcpSocket(0);
+    QString qhost = servername.c_str();
+    QString qport = pnumstr.c_str();
+    tcpSocket->connectToHost(qhost, qport.toInt());
+    // Allow time for connection to establish, then check that all
+    // looks good. If any problems, abort execution.
+    bool ok = tcpSocket->waitForConnected(1000);
+    if (!ok) {
+        std::cout << "Wait for connected didn't work" << std::endl;
+        exit(1);
+    }
+    if (!tcpSocket->isValid()) {
+        std::cout << "Didn't connect completely?" << std::endl;
+        exit(1);
+    } QAbstractSocket::SocketState state;
+    state = tcpSocket->state();
+    if (state != QAbstractSocket::ConnectedState) {
+        std::cout << "Not happy with state" << std::endl;
+        exit(1);
+    }
+    
+    return tcpSocket; 
+} 

commit be5eaab165fa5a8600ec0268e8858d7cbb891544
Merge: 251ac68 7bd5483
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:24:45 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 7bd548390c5c2a230c0cc06885b5af3962590789
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:24:19 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index e9fa86d..6cf5fef 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -94,3 +94,9 @@ std:vector<Conferences> ConferenceManager::getAllConferences()
     
     return conferences;
 }
+
+void ConferenceManager::fetchConference(int confId)
+{
+    currentConference = db->fetchConference(confId);
+    
+}

commit 251ac68287d080c65a3f503f415a9601c81d1ced
Merge: b046bcb e7a646c
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:23:58 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit b046bcb9d5792989e26d1b34249d8efd4efce12b
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 14:23:28 2014 +1100

    compiles confereces database

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 50c93d6..485889b 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -564,7 +564,7 @@ bool Database::existsConfName(std::string key) throw (const char*)
         return count == 1;
 }
 
-void Database::putConf(std::string key, const Conference *conf) throw (const char*)
+void Database::putConf(std::string key, Conference *conf) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
@@ -579,7 +579,7 @@ void Database::putConf(std::string key, const Conference *conf) throw (const cha
 	}
 }
 
-void Database::createConf(const Conference* conf)
+void Database::createConf(Conference* conf)
 {
         if (invalid)
                 throw (noDB);
@@ -665,7 +665,7 @@ void Database::createConf(const Conference* conf)
       	}
 }
 
-void Database::updateConf(const Conference* conf)
+void Database::updateConf(Conference* conf)
 {
         if (invalid)
                 throw (noDB);
@@ -702,25 +702,28 @@ void Database::updateConf(const Conference* conf)
         pstmt->setString(3, conf->description);
         pstmt->setString(4, conf->location);
         pstmt->setBoolean(5, conf->isActive);
-        pstmt->setInt(6, conf->paperDeadline.getDay();
-        pstmt->setInt(7, conf->paperDeadline.getMonth();
-        pstmt->setInt(8, conf->paperDeadline.getYear();
+	int day = conf->paperDeadline.getDay();
+	int month = conf->paperDeadline.getMonth();
+	int year = conf->paperDeadline.getYear();
+        pstmt->setInt(6, day);
+        pstmt->setInt(7, month);
+        pstmt->setInt(8, year);
         pstmt->setBoolean(9, conf->isBeforePaperDeadline);
-        pstmt->setInt(10, conf->allocationDate.getDay();
-        pstmt->setInt(11, conf->allocationDate.getMonth();
-        pstmt->setInt(12, conf->allocationDate.getYear();
+        pstmt->setInt(10, conf->allocationDate.getDay());
+        pstmt->setInt(11, conf->allocationDate.getMonth());
+        pstmt->setInt(12, conf->allocationDate.getYear());
         pstmt->setBoolean(13, conf->isBeforeAllocationDate);
-        pstmt->setInt(14, conf->reviewDeadlineSoft.getDay();
-        pstmt->setInt(15, conf->reviewDeadlineSoft.getMonth();
-        pstmt->setInt(16, conf->reviewDeadlineSoft.getYear();
+        pstmt->setInt(14, conf->reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf->reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf->reviewDeadlineSoft.getYear());
         pstmt->setBoolean(17, conf->isBeforeSoftReviewDeadline);
-        pstmt->setInt(18, conf->reviewDeadlineHard.getDay();
-        pstmt->setInt(19, conf->reviewDeadlineHard.getMonth();
-        pstmt->setInt(20, conf->reviewDeadlineHard.getYear();
+        pstmt->setInt(18, conf->reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf->reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf->reviewDeadlineHard.getYear());
         pstmt->setBoolean(21, conf->isBeforeHardReviewDeadline);
-        pstmt->setInt(22, conf->discussDeadline.getDay();
-        pstmt->setInt(23, conf->discussDeadline.getMonth();
-        pstmt->setInt(24, conf->discussDeadline.getYear();
+        pstmt->setInt(22, conf->discussDeadline.getDay());
+        pstmt->setInt(23, conf->discussDeadline.getMonth());
+        pstmt->setInt(24, conf->discussDeadline.getYear());
         pstmt->setBoolean(25, conf->isBeforeDiscussDeadline);
 	pstmt->setInt(26, conf->reviewersPerPaper);
 	pstmt->setInt(27, conf->postWordLimit);
diff --git a/Database/Database.hpp b/Database/Database.hpp
index a6366e1..c44e69f 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -5,6 +5,7 @@
 #include "MyRecord.h"
 #include "../Server/User.hpp"
 #include "../Server/Conference.hpp"
+#include "../Server/Date.hpp"
 
 class Database {
 public:
@@ -28,7 +29,7 @@ public:
 	// CONFERENCE
 	Conference *fetchConference(int key) throw (const char*);
         bool existsConfName(std::string key) throw (const char*);
-        void putConf(std::string key, const Conference *conf) throw (const char*);
+        void putConf(std::string key, Conference *conf) throw (const char*);
         std::vector<int> *allConfIDs();
         std::vector<std::string> *allConfNames();
         std::vector<int> *activeConfIDs();
@@ -68,7 +69,7 @@ private:
         void updateUser(const User *user);
 
 	// CONF
-        void createConf(const Conference *conf);
-        void updateConf(const Conference *conf);
+        void createConf(Conference *conf);
+        void updateConf(Conference *conf);
 
 };
diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 62a258c..625d82b 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -8,22 +8,22 @@
 
 struct Conference {
   Conference(bool iisActive,
-  const std::string& ititle,
-  const int& iconfID,
-  const std::string& itopic,
-  const std::string& idescription,
-  const std::string& ilocation,
-  const std::vector<std::string>& ikeywords,
+  std::string& ititle,
+  int& iconfID,
+  std::string& itopic,
+  std::string& idescription,
+  std::string& ilocation,
+  std::vector<std::string>& ikeywords,
   bool iisBeforePaperDeadline,
-  const Date& ipaperDeadline,
+  Date& ipaperDeadline,
   bool iisBeforeAllocationDate,
-  const Date& iallocationDate,
+  Date& iallocationDate,
   bool iisBeforeSoftReviewDeadline,
-  const Date& ireviewDeadlineSoft,
+  Date& ireviewDeadlineSoft,
   bool iisBeforeHardReviewDeadline,
-  const Date& ireviewDeadlineHard,
+  Date& ireviewDeadlineHard,
   bool iisBeforeDiscussDeadline,
-  const Date& idiscussDeadline,
+  Date& idiscussDeadline,
   int ireviewersPerPaper,
   int ipostWordLimit):
   isActive(iisActive),

commit e7a646c7e6fe9998ad68a3fa0b4741f1566d7af1
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:16:30 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index e05e359..5253d6b 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -1,6 +1,8 @@
 #ifndef USER_MANAGER_H
 #define USER_MANAGER_H
 
+#include "../Database/Database.hpp"
+
 #include <string>
 
 class UserManager {

commit 79cb0e864a8a1903fdc668fae116007b1d50d23a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:13:41 2014 +1100

    Update User.hpp

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index b4404c2..b1e9dd8 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -39,6 +39,7 @@ class User {
     std::string getOrganisation() {return organisation;}
     std::string getPhone() {return phone;}
     UserType_t getUserType() {return userType;}
+    Paper getCurrentPaper() {return currentPaper;}
     void setUserID(int iuserID) {userID = iuserID;}
     void setPassword(const std::string& ipassword) {password = ipassword;}
     void setName(const std::string& iname) {name = iname;}
@@ -46,6 +47,7 @@ class User {
     void setOrganisation(const std::string& iorganisation) {organisation = iorganisation;}
     void setPhone(const std::string& iphone) {phone = iphone;}
     void setUserType(UserType_t iuserType) {userType = iuserType;}
+    void setCurrentPaper(const Paper& icurrentPaper) {currentPaper = icurrentPaper;}
 
     std::string userName;
 

commit cfc673f4dceecffb699de1f9b267140663fec765
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:11:49 2014 +1100

    Update Server.cpp

diff --git a/Server/Server.cpp b/Server/Server.cpp
index a48ed48..d27645e 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -1,23 +1,23 @@
 //NEW MAIN FOR SERVER
 
-#include "PaperManager.hpp"
 #include "ConferenceManager.hpp"
-
-
-
+#include "PaperManager.hpp"
+#include "UserManager.hpp"
 
 int main()
 {
   Database* db;
   PaperManager* pm;
   ConferenceManager* cm;
+  UserManager* um;
   
   
   db = new Database(/*CONSTRUCTOR*/);
   pm = new PaperManager(nullptr, db);
   cm = new ConferenceManager(std::vector<Conference*>(), db, nullptr);
+  um = new UserManager(nullptr, db);
   
-
+  delete um;
   delete cm;
   delete pm;
   delete db;

commit 0e8edde05b93c979b2e84eb0c32a26c4775e30da
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:11:07 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index d4b8adc..e05e359 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -6,12 +6,18 @@
 class UserManager {
 public:
   UserManager() { }
-  UserManager(User* icurrentUser) : currentUser(icurrentUser) { }
+  UserManager(User* icurrentUser,
+              Database* idatabase) : 
+              currentUser(icurrentUser),
+              database(idatabase)
+              { }
   ~UserManager() { if(currentUser != nullptr)
                      delete currentUser;}
 
   User* getCurrentUser() {return currentUser;}
   void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
+  Database* getDatabase() {return database;}
+  void setDatabase(Database* idatabase) {database = idatabase;}
   void addUser();
   void modifyUser();
   bool deleteUser(int);
@@ -23,5 +29,6 @@ public:
 private:
  void fetchUser(int);
  User* currentUser{nullptr};
+ Database* database{nullptr};
 };
 #endif

commit ec982884239c510c3829212bb67703ed665c25d2
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 14:07:35 2014 +1100

    #include2

diff --git a/Algorithm/Algo b/Algorithm/Algo
index 29d0040..eb55459 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -15,6 +15,9 @@
 //returns vector of reviewerIDs from getter
 #include <iostream>
 #include <vector>
+#include "Conference.hpp"
+#include "Paper".hpp
+#include "User.hpp"
 
 
 struct ReviewerBid

commit 829c608ac72e1c26cd83ddcac64c37a445a32add
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 14:06:01 2014 +1100

    #include

diff --git a/Algorithm/Algo b/Algorithm/Algo
index d8ccabe..29d0040 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -13,6 +13,8 @@
 
 
 //returns vector of reviewerIDs from getter
+#include <iostream>
+#include <vector>
 
 
 struct ReviewerBid

commit e48f059616af5641090afe567393857ffe3b5f91
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 26 14:03:43 2014 +1100

    fixed typo

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 4f4f159..dd2dd46 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -65,7 +65,7 @@ class Author : public User {
     void modifyDetails();
 
     std::vector<std::string> keywords;
-    std:vector<PaperSummary> getOwnPapers() {return ownPapers;}
+    std::vector<PaperSummary> getOwnPapers() {return ownPapers;}
     void setOwnPapers(const std::vector<PaperSummary>& iownPapers) {ownPapers = iownPapers;}
   protected:
     std::vector<PaperSummary> ownPapers;

commit 48c82f8169e1a5565d449c71f7aea5aed502268a
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 14:03:35 2014 +1100

    std::

diff --git a/Algorithm/Algo b/Algorithm/Algo
index d6b982e..d8ccabe 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -45,14 +45,14 @@ class PaperForReview
 		
 	public:
 		//getter
-		vector<int> getReviewers(int, int);
+		std::vector<int> getReviewers(int, int);
 
 };
 
-vector<int> getReviewers(int paperID, int confID)
+std::vector<int> getReviewers(int paperID, int confID)
 {
 	
-	vector<int> reviewers;
+	std::vector<int> reviewers;
 	
 	for(int i=0; i<numOfReqReviewrs; i++)
 	{

commit ad8702e3ed6a2c99b6dda1ee8282a5de04dc7395
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 14:01:17 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 83efcf8..ec4f251 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -10,14 +10,14 @@ class Paper {
     Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<std::string>& iauthorNames,
+      const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
       const Discussion& idiscussion)
       :
       title(ititle),
       abstract(iabstract),
-      authorNames(iauthorNames),
+      authors(iauthors),
       keywords(ikeywords),
       fname(ifname),
       discussion(idiscussion)

commit 84e60bbb73510d6d2f84781968703c85ef22eeba
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:59:37 2014 +1100

    Update Paper.hpp

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index e2f0131..41faf7c 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -4,6 +4,7 @@
 
 #include "Discussion.hpp"
 #include "Review.hpp"
+#include "User.hpp"
 
 #include <vector>
 
@@ -12,7 +13,7 @@ struct Paper {
     Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<std::string>& iauthorNames,
+      const std::vector<std::string>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
       const std::vector<Review>& ireviews,
@@ -20,7 +21,7 @@ struct Paper {
       :
       title(ititle),
       abstract(iabstract),
-      authorNames(iauthorNames),
+      authors(iauthors),
       keywords(ikeywords),
       fname(ifname),
       reviews(ireviews),
@@ -29,7 +30,7 @@ struct Paper {
     // no assignment operator or copy constructor deemed necessary at this point
     std::string title{""};
     std::string abstract{""};
-    std::vector<std::string> authorNames;
+    std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string fname{""};
 

commit dc8e9427f9893c5e49b5312475a31ff16c788d3c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:58:47 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 2aac716..83efcf8 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -46,14 +46,14 @@ class Paper {
 
     std::string getTitle() {return title;}
     std::string getAbstract() {return abstract;}
-    std::vector<std::string> getAuthorNames() {return authorNames;}
+    std::vector<User> getAuthors() {return authors;}
     std::vector<std::string> getKeywords() {return keywords;}
     std::string getFname() {return fname;}
     Discussion getDiscussion() {return discussion;}
     
     void setTitle(const std::string& ititle) {title = ititle;}
     void setAbstract(const std::string& iabstract) {abstract = iabstract;}
-    void setAuthorNames(const std::vector<std::string>& iauthorNames) {authorNames = iauthorNames;}
+    void setAuthors(const std::vector<User>& iauthors) {authors = iauthors;}
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
     void setFname(const std::string& ifname) {fname = ifname;}
     void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
@@ -62,7 +62,7 @@ class Paper {
   private:
     std::string title{""};
     std::string abstract{""};
-    std::vector<std::string> authorNames;
+    std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string fname{""};
     Discussion discussion;

commit d11885253d7a6a180f6663fc9e9c376c16c8cdda
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 13:57:15 2014 +1100

    get All [Active] Confs

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 09fae49..e9fa86d 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -66,3 +66,31 @@ void ConferenceManager::checkAllDeadlines()
       checkDeadlines(&in[i])
   }
 }
+
+std:vector<Conferences> ConferenceManager::getAllActiveConferences()
+{
+    std::vector<int> activeConfs = db->activeConfIDs();
+    
+    std::vector<Conference> conferences;
+    
+    for(int i = 0; i < activeConfs.size(); ++i)
+    {
+        conferences.push_back(db->fetchConference(activeConfs[i]));
+    }
+    
+    return conferences;
+}
+
+std:vector<Conferences> ConferenceManager::getAllConferences()
+{
+    std::vector<int> allConfs = db->allConfIDs();
+    
+    std::vector<Conference> conferences;
+    
+    for(int i = 0; i < activeConfs.size(); ++i)
+    {
+        conferences.push_back(db->fetchConference(allConfs[i]));
+    }
+    
+    return conferences;
+}

commit 1fc8954353e0ad84f6922f45906809e39b134c07
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 13:57:12 2014 +1100

    get All [Active] Confs

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index c7955fa..190cda3 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -32,6 +32,8 @@ public:
   void sendConferenceBatch();
   void checkAllDeadlines();
   void allocatePapers();
+  std:vector<Conferences> getAllActiveConferences();
+  std:vector<Conferences> getAllConferences();
 
 
 

commit 59ab19905af07841068bef1ffd395f72d7e41ce5
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 13:52:14 2014 +1100

    update dates to be three ints

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index 6e3b744..e4f31d0 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -63,15 +63,25 @@ CREATE TABLE `Conference` (
 	`description` TEXT NOT NULL,
 	`location` varchar(255) NOT NULL,
 	`active` boolean NOT NULL DEFAULT 1,
-	`paperDeadline` string,
+	`paperDeadlineD` int,
+	`paperDeadlineM` int,
+	`paperDeadlineY` int,
 	`paperDeadlineBool` bool,
-	`allocationDate` string,
+	`allocationDateD` int,
+	`allocationDateM` int,
+	`allocationDateY` int,
 	`allocationDateBool` bool,
-	`reviewDeadlineSoft` string,
+	`reviewDeadlineSoftD` int,
+	`reviewDeadlineSoftM` int,
+	`reviewDeadlineSoftY` int,
 	`reviewDeadlineSoftBool` bool,
-	`reviewDeadlineHard` string,
+	`reviewDeadlineHardD` int,
+	`reviewDeadlineHardM` int,
+	`reviewDeadlineHardY` int,
 	`reviewDeadlineHardBool` bool,
-	`discussDeadline` string,
+	`discussDeadlineD` int,
+	`discussDeadlineM` int,
+	`discussDeadlineY` int,
 	`discussDeadlineBool` bool,
 	`reviewersPerPaper` int NOT NULL,
 	`postWordLimit` int NOT NULL,

commit b1818f0bd4652201163eb1e2b60c65ef39730bda
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:52:06 2014 +1100

    Update Date.hpp

diff --git a/Server/Date.hpp b/Server/Date.hpp
index 017afdf..c277f03 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -18,9 +18,9 @@ year = in.year;}
     int getDay() {return day;}
     int getMonth() {return month;}
     int getYear() {return year;}
-    int setDay(int iday) {day = iday;}
-    int setMonth(int imonth) {month = imonth;}
-    int setYear(int iyear) {year = iyear;}
+    void setDay(int iday) {day = iday;}
+    void setMonth(int imonth) {month = imonth;}
+    void setYear(int iyear) {year = iyear;}
 bool compare(const Date& idate) //returns true if idate is before or on the same day as this
 {
 if(idate.year != year) {

commit 49258768fbadf6e9cc178ea08605b777f1af8c34
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:51:50 2014 +1100

    Update Date.hpp

diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index c0164da..4450690 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -23,9 +23,9 @@ public:
     }
     
 // NOTE: changed get functions, new below
-    int setDay(int iday) {day = iday;}
-    int setMonth(int imonth) {month = imonth;}
-    int setYear(int iyear) {year = iyear;}
+    void setDay(int iday) {day = iday;}
+    void setMonth(int imonth) {month = imonth;}
+    void setYear(int iyear) {year = iyear;}
     int getDay() {return day;}
     int getMonth() {return month;}
     int getYear() {return year;}

commit 2d60c908e080049a71dca61b8f895479b2d1eb97
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 13:51:35 2014 +1100

    modified dates to be 3 ints

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 8ecc9d9..50c93d6 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -467,18 +467,33 @@ Conference *Database::fetchConference(int key) throw (const char*)
         std::string description = rs->getString(4);
         std::string location = rs->getString(5);
         bool isActive = rs->getBoolean(6);
-        Date paperDeadline  = rs->getString(7);
-        bool isBeforePaperDeadline = rs->getBoolean(8);
-        Date allocationDate  = rs->getString(9);
-        bool isBeforeAllocationDate = rs->getBoolean(10);
-        Date reviewDeadlineSoft  = rs->getString(11);
-        bool isBeforeSoftReviewDeadline = rs->getBoolean(12);
-        Date reviewDeadlineHard  = rs->getString(13);
-        bool isBeforeHardReviewDeadline = rs->getBoolean(14);
-        Date discussDeadline  = rs->getString(15);
-        bool isBeforeDiscussDeadline = rs->getBoolean(16);
-	int reviewersPerPaper = rs->getInt(17);
-	int postWordLimit = rs->getInt(18);
+        int paperDeadlineD  = rs->getInt(7);
+        int paperDeadlineM  = rs->getInt(8);
+        int paperDeadlineY  = rs->getInt(9);
+	Date paperDeadline(paperDeadlineD, paperDeadlineM, paperDeadlineY);
+        bool isBeforePaperDeadline = rs->getBoolean(10);
+        int allocationDateD  = rs->getInt(11);
+        int allocationDateM  = rs->getInt(12);
+        int allocationDateY  = rs->getInt(13);
+	Date allocationDate(allocationDateD, allocationDateM, allocationDateY);
+        bool isBeforeAllocationDate = rs->getBoolean(14);
+        int reviewDeadlineSoftD  = rs->getInt(15);
+        int reviewDeadlineSoftM  = rs->getInt(16);
+        int reviewDeadlineSoftY  = rs->getInt(17);
+	Date reviewDeadlineSoft(reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY);
+        bool isBeforeSoftReviewDeadline = rs->getBoolean(18);
+	int reviewDeadlineHardD  = rs->getInt(19);
+        int reviewDeadlineHardM  = rs->getInt(20);
+        int reviewDeadlineHardY  = rs->getInt(21);
+	Date reviewDeadlineHard(reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY);
+        bool isBeforeHardReviewDeadline = rs->getBoolean(22);
+        int discussDeadlineD  = rs->getInt(23);
+        int discussDeadlineM  = rs->getInt(24);
+        int discussDeadlineY  = rs->getInt(25);
+	Date discussDeadline(discussDeadlineD, discussDeadlineM, discussDeadlineY);
+        bool isBeforeDiscussDeadline = rs->getBoolean(26);
+	int reviewersPerPaper = rs->getInt(27);
+	int postWordLimit = rs->getInt(28);
 
         delete rs;
         delete pstmt;
@@ -569,7 +584,7 @@ void Database::createConf(const Conference* conf)
         if (invalid)
                 throw (noDB);
 
-	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadline, paperDeadlineBool, allocationDate, allocationDateBool, reviewDeadlineSoft, reviewDeadlineSoftBool, reviewDeadlineHard, reviewDeadlineHardBool, discussDeadline, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?, ?)";
+	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadlineD, paperDeadlineM, paperDeadlineY, paperDeadlineBool, allocationDateD, allocationDateM, allocationDateY, allocationDateBool, reviewDeadlineSoftD, reviewDeadlineSoftM, reviewDeadlineSoftY, reviewDeadlineSoftBool, reviewDeadlineHardD, reviewDeadlineHardM, reviewDeadlineHardY, reviewDeadlineHardBool, discussDeadlineD, discussDeadlineM, discussDeadlineY, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
 
 	const char* getconfID = "SELECT LAST_INSERT_ID()";
 	const char* insertConfKeyword = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
@@ -584,18 +599,28 @@ void Database::createConf(const Conference* conf)
         pstmt->setString(3, conf->description);
         pstmt->setString(4, conf->location);
         pstmt->setBoolean(5, conf->isActive);
-        pstmt->setString(6, conf->paperDeadline);
-        pstmt->setBoolean(7, conf->isBeforePaperDeadline);
-        pstmt->setString(8, conf->allocationDate);
-        pstmt->setBoolean(9, conf->isBeforeAllocationDate);
-        pstmt->setString(10, conf->reviewDeadlineSoft);
-        pstmt->setBoolean(11, conf->isBeforeSoftReviewDeadline);
-        pstmt->setString(12, conf->reviewDeadlineHard);
-        pstmt->setBoolean(13, conf->isBeforeHardReviewDeadline);
-        pstmt->setString(14, conf->discussDeadline);
-        pstmt->setBoolean(15, conf->isBeforeDiscussDeadline);
-	pstmt->setInt(16, conf->reviewersPerPaper);
-	pstmt->setInt(17, conf->postWordLimit);
+        pstmt->setInt(6, conf->paperDeadline.getDay());
+        pstmt->setInt(7, conf->paperDeadline.getMonth());
+        pstmt->setInt(8, conf->paperDeadline.getYear());
+        pstmt->setBoolean(9, conf->isBeforePaperDeadline);
+        pstmt->setInt(10, conf->allocationDate.getDay());
+        pstmt->setInt(11, conf->allocationDate.getMonth());
+        pstmt->setInt(12, conf->allocationDate.getYear());
+        pstmt->setBoolean(13, conf->isBeforeAllocationDate);
+        pstmt->setInt(14, conf->reviewDeadlineSoft.getDay());
+        pstmt->setInt(15, conf->reviewDeadlineSoft.getMonth());
+        pstmt->setInt(16, conf->reviewDeadlineSoft.getYear());
+        pstmt->setBoolean(17, conf->isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf->reviewDeadlineHard.getDay());
+        pstmt->setInt(19, conf->reviewDeadlineHard.getMonth());
+        pstmt->setInt(20, conf->reviewDeadlineHard.getYear());
+        pstmt->setBoolean(21, conf->isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf->discussDeadline.getDay());
+        pstmt->setInt(23, conf->discussDeadline.getMonth());
+        pstmt->setInt(24, conf->discussDeadline.getYear());
+        pstmt->setBoolean(25, conf->isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf->reviewersPerPaper);
+	pstmt->setInt(27, conf->postWordLimit);
 
         pstmt->executeUpdate();
 
@@ -647,7 +672,7 @@ void Database::updateConf(const Conference* conf)
 
 	const char* getConfID = "SELECT confID FROM Conference where name = ?";
 
-	const char* updateConference = "UPDATE Conference SET confID=?, name=?, topic=?, description=?, location=?, active=?, paperDeadline=?, paperDeadlineBool=?, allocationDate=?, allocationDateBool=?, reviewDeadlineSoft=?, reviewDeadlineSoftBool=?, reviewDeadlineHard=?, reviewDeadlineHardBool=?, discussDeadline=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
+	const char* updateConference = "UPDATE Conference SET confID=?, name=?, topic=?, description=?, location=?, active=?, paperDeadlineD=?, paperDeadlineM=?, paperDeadlineY=?, paperDeadlineBool=?, allocationDateD=?, allocationDateM=?, allocationDateY=?, allocationDateBool=?, reviewDeadlineSoftD=?, reviewDeadlineSoftM=?, reviewDeadlineSoftY=?, reviewDeadlineSoftBool=?, reviewDeadlineHardD=?, reviewDeadlineHardM=?, reviewDeadlineHardY=?, reviewDeadlineHardBool=?, discussDeadlineD=?, discussDeadlineM=?, discussDeadlineY=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
 
         const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
 	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
@@ -677,19 +702,29 @@ void Database::updateConf(const Conference* conf)
         pstmt->setString(3, conf->description);
         pstmt->setString(4, conf->location);
         pstmt->setBoolean(5, conf->isActive);
-        pstmt->setString(6, conf->paperDeadline);
-        pstmt->setBoolean(7, conf->isBeforePaperDeadline);
-        pstmt->setString(8, conf->allocationDate);
-        pstmt->setBoolean(9, conf->isBeforeAllocationDate);
-        pstmt->setString(10, conf->reviewDeadlineSoft);
-        pstmt->setBoolean(11, conf->isBeforeSoftReviewDeadline);
-        pstmt->setString(12, conf->reviewDeadlineHard);
-        pstmt->setBoolean(13, conf->isBeforeHardReviewDeadline);
-        pstmt->setString(14, conf->discussDeadline);
-        pstmt->setBoolean(15, conf->isBeforeDiscussDeadline);
-	pstmt->setInt(16, conf->reviewersPerPaper);
-	pstmt->setInt(17, conf->postWordLimit);
-	pstmt->setInt(18, confID);
+        pstmt->setInt(6, conf->paperDeadline.getDay();
+        pstmt->setInt(7, conf->paperDeadline.getMonth();
+        pstmt->setInt(8, conf->paperDeadline.getYear();
+        pstmt->setBoolean(9, conf->isBeforePaperDeadline);
+        pstmt->setInt(10, conf->allocationDate.getDay();
+        pstmt->setInt(11, conf->allocationDate.getMonth();
+        pstmt->setInt(12, conf->allocationDate.getYear();
+        pstmt->setBoolean(13, conf->isBeforeAllocationDate);
+        pstmt->setInt(14, conf->reviewDeadlineSoft.getDay();
+        pstmt->setInt(15, conf->reviewDeadlineSoft.getMonth();
+        pstmt->setInt(16, conf->reviewDeadlineSoft.getYear();
+        pstmt->setBoolean(17, conf->isBeforeSoftReviewDeadline);
+        pstmt->setInt(18, conf->reviewDeadlineHard.getDay();
+        pstmt->setInt(19, conf->reviewDeadlineHard.getMonth();
+        pstmt->setInt(20, conf->reviewDeadlineHard.getYear();
+        pstmt->setBoolean(21, conf->isBeforeHardReviewDeadline);
+        pstmt->setInt(22, conf->discussDeadline.getDay();
+        pstmt->setInt(23, conf->discussDeadline.getMonth();
+        pstmt->setInt(24, conf->discussDeadline.getYear();
+        pstmt->setBoolean(25, conf->isBeforeDiscussDeadline);
+	pstmt->setInt(26, conf->reviewersPerPaper);
+	pstmt->setInt(27, conf->postWordLimit);
+	pstmt->setInt(28, confID);
 
         pstmt->executeUpdate();
 
@@ -770,6 +805,7 @@ std::vector<std::string> *Database::allConfNames()
 
         return vptr;
 }
+
 std::vector<int> *Database::activeConfIDs()
 {
         if (invalid)

commit cafda8ee6687b4eafb5ab81ca3c85df8d4ea0f5b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:51:19 2014 +1100

    Update Date.hpp

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index 0206c31..fdc0229 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -22,9 +22,9 @@ public:
     int getDay() {return day;}
     int getMonth() {return month;}
     int getYear() {return year;}
-    int setDay(int iday) {day = iday;}
-    int setMonth(int imonth) {month = imonth;}
-    int setYear(int iyear) {year = iyear;}
+    void setDay(int iday) {day = iday;}
+    void setMonth(int imonth) {month = imonth;}
+    void setYear(int iyear) {year = iyear;}
 
   
   bool compare(const Date& idate) //returns true if idate is before or on the same day as this

commit d5c4aff9054f568196c2c7105528b51db2129885
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:51:00 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 827bdb0..4f4f159 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -65,7 +65,8 @@ class Author : public User {
     void modifyDetails();
 
     std::vector<std::string> keywords;
-
+    std:vector<PaperSummary> getOwnPapers() {return ownPapers;}
+    void setOwnPapers(const std::vector<PaperSummary>& iownPapers) {ownPapers = iownPapers;}
   protected:
     std::vector<PaperSummary> ownPapers;
 };

commit 018974df200342a0a58a092b3c12cc3e54109bf9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:47:03 2014 +1100

    made authornames to authors

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 3f6fb32..5765ad7 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -4,16 +4,15 @@
 
 #include "Discussion.hpp"
 #include "Review.hpp"
+#include "User.hpp"
 
-#include <memory>
 #include <vector>
 
 struct Paper {
 
-
     std::string title{""};
     std::string abstract{""};
-    std::vector<std::string> authorNames;
+    std::vector<User> authors;
     std::vector<std::string> keywords;
     std::string fname{""};
     Discussion discussion;
@@ -22,7 +21,7 @@ struct Paper {
     Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<std::string>& iauthorNames,
+      const std::vector<User>& iauthors,
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
       const std::vector<Review>& ireviews,
@@ -30,7 +29,7 @@ struct Paper {
       :
       title(ititle),
       abstract(iabstract),
-      authorNames(iauthorNames),
+      authors(iauthors),
       keywords(ikeywords),
       fname(ifname),
       reviews(ireviews),

commit 721d72d337ef61e5bdec6a03d0af8287e812aa75
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:40:29 2014 +1100

    Update Server.cpp

diff --git a/Server/Server.cpp b/Server/Server.cpp
index e25ea0a..a48ed48 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -18,7 +18,9 @@ int main()
   cm = new ConferenceManager(std::vector<Conference*>(), db, nullptr);
   
 
-
+  delete cm;
+  delete pm;
+  delete db;
 
   return 0;
 }

commit aacbbd93fa808c7aa3579c3c51de0dcffbc9490e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:37:58 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 11a2d62..c7955fa 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -21,6 +21,8 @@ public:
 
   std::vector<Conference*> getConferences() {return conferences;}
   void setConferences(const std::vector<Conference*>& iconferences) {conferences = iconferences;}
+  Conference* getCurrentConference() {return currentConference;}
+  void setCurrentConference(Conference* icurrentConference) {currentConference = icurrentConference;}
   Database* getDatabase() {return database;}
   void setDatabase(Database* idatabase) {database = idatabase;}
   void addConference();

commit c7ca9b7ea9acb79f5e9a3a2320c260168023e427
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:35:45 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 29445e0..11a2d62 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -6,10 +6,12 @@
 
 class ConferenceManager {
 public:
-  ConferenceManager(std::vector<Conference*> iconferences, 
+  ConferenceManager(std::vector<Conference*> iconferences,
+                    Conference* icurrentConference,
                     Database* idatabase) :
                     conferences(iconferences), 
-                    database(idatabase) 
+                    currentConference(icurrentConference),
+                    database(idatabase)
                     { }
   ~ConferenceManager() {
   for (unsigned i=0; i < conferences.size(); i++) {
@@ -35,6 +37,7 @@ private:
   void checkDeadlines(Conference*);
   void fetchConference(int);
   std::vector<Conference*> conferences;
+  Conference* currentConference{nullptr};
   Database* database{nullptr};
 };
 #endif

commit a6a789ab996bf4c03f72560f6515a6cd55bfd58a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:35:40 2014 +1100

    Update Server.cpp

diff --git a/Server/Server.cpp b/Server/Server.cpp
index 14c02a2..e25ea0a 100644
--- a/Server/Server.cpp
+++ b/Server/Server.cpp
@@ -14,8 +14,8 @@ int main()
   
   
   db = new Database(/*CONSTRUCTOR*/);
-  pm = new PaperManager(/*CONSTRUCTOR*/);
-  cm = new ConferenceManager(/*CONSTRUCTOR*/);
+  pm = new PaperManager(nullptr, db);
+  cm = new ConferenceManager(std::vector<Conference*>(), db, nullptr);
   
 
 

commit dcd1334ac710dfa9300ac34b8d56afd5799f0dc9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:28:53 2014 +1100

    Update Date.hpp

diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index d758d95..c0164da 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -1,6 +1,8 @@
 #ifndef DATE_H
 #define DATE_H
 
+#include <sstream>
+
 class Date {
     
 public:
@@ -43,6 +45,13 @@ public:
         }
         return true;
     }
+
+  std::string convertToString()
+  {
+    std::stringstream temp;
+    temp << day << "/" << month << "/" << year; 
+    return(temp.str());
+  } 
     
 private:
     int day{0};

commit 1752ecf6582f7898779c9058c276609386ac103e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:27:48 2014 +1100

    Update Date.hpp

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index c84f7a6..0206c31 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -1,5 +1,8 @@
 #ifndef DATE_H
 #define DATE_H
+
+#include <sstream>
+
 class Date {
 public:  
   Date() { }
@@ -39,6 +42,14 @@ public:
     }
     return true;
   }
+  
+  std::string convertToString()
+  {
+    std::stringstream temp;
+    temp << day << "/" << month << "/" << year; 
+    return(temp.str());
+  }  
+  }
 private:
 int day{0};
 int month{0};

commit f5a03b20a650a645224f1c19fb675d2f176428b9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:21:34 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 7c2bd7c..29445e0 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -2,6 +2,7 @@
 #define CONFERENCE_MANAGER_H
 
 #include "Conference.hpp"
+#include "../Database/Database.hpp"
 
 class ConferenceManager {
 public:
@@ -18,6 +19,8 @@ public:
 
   std::vector<Conference*> getConferences() {return conferences;}
   void setConferences(const std::vector<Conference*>& iconferences) {conferences = iconferences;}
+  Database* getDatabase() {return database;}
+  void setDatabase(Database* idatabase) {database = idatabase;}
   void addConference();
   void modifyConference(int);
   bool deleteConference(int);

commit 9d225bc8be9cafce7c24262e57e4f952fb25a687
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:21:31 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index e7b1e61..77dc0c3 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -1,16 +1,24 @@
 #ifndef PAPER_MANAGER_H
 #define PAPER_MANAGER_H
+
+#include "../Database/Database.hpp"
 #include "Paper.hpp"
 
 class PaperManager {
 public:
   PaperManager() { }
-  PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
+  PaperManager(Paper* icurrentPaper, 
+  Database* idatabase) : 
+  currentPaper(icurrentPaper),
+  database(idatabase)
+  { }
   ~PaperManager() { if(currentPaper != nullptr)
                       delete currentPaper;}
 
   Paper* getCurrentPaper() {return currentPaper;}
   void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+  Database* getDatabase() {return database;}
+  void setDatabase(Database* idatabase) {database = idatabase;}
   void addPaper();
   void modifyPaper(int);
   bool deleteDiscPost(int);
@@ -26,5 +34,6 @@ public:
 private:
 void fetchPaper(int);
 Paper* currentPaper{nullptr};
+Database* database{nullptr};
 };
 #endif

commit 3ee72aefdca836ded503e2bc2724539eea15ef5f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 13:16:31 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index a299fad..7c2bd7c 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -5,7 +5,11 @@
 
 class ConferenceManager {
 public:
-  ConferenceManager(std::vector<Conference*> iconferences) : conferences(iconferences) { }
+  ConferenceManager(std::vector<Conference*> iconferences, 
+                    Database* idatabase) :
+                    conferences(iconferences), 
+                    database(idatabase) 
+                    { }
   ~ConferenceManager() {
   for (unsigned i=0; i < conferences.size(); i++) {
     delete conferences[i];
@@ -28,5 +32,6 @@ private:
   void checkDeadlines(Conference*);
   void fetchConference(int);
   std::vector<Conference*> conferences;
+  Database* database{nullptr};
 };
 #endif

commit 58a34ca122ab52557c570adb9731384c2650259b
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 13:13:45 2014 +1100

    Create Server.cpp

diff --git a/Server/Server.cpp b/Server/Server.cpp
new file mode 100644
index 0000000..14c02a2
--- /dev/null
+++ b/Server/Server.cpp
@@ -0,0 +1,24 @@
+//NEW MAIN FOR SERVER
+
+#include "PaperManager.hpp"
+#include "ConferenceManager.hpp"
+
+
+
+
+int main()
+{
+  Database* db;
+  PaperManager* pm;
+  ConferenceManager* cm;
+  
+  
+  db = new Database(/*CONSTRUCTOR*/);
+  pm = new PaperManager(/*CONSTRUCTOR*/);
+  cm = new ConferenceManager(/*CONSTRUCTOR*/);
+  
+
+
+
+  return 0;
+}

commit d13022735ff23664eb8b3a80eb4d63a28029d804
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 12:49:38 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index bf3410b..09fae49 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -19,6 +19,13 @@ void ConferenceManager::checkDeadlines(Conference* in)
     if (in == nullptr) {
         return;
     }
+    
+    const bool oldisBeforePaperDeadline = isBeforePaperDeadline;
+    const bool oldisBeforeAllocationDate = isBeforeAllocationDate;
+    const bool oldisBeforeSoftReviewDeadline = isBeforeSoftReviewDeadline;
+    const bool oldisBeforeHardReviewDeadline = isBeforeHardReviewDeadline;
+    const bool oldisBeforeDiscussDeadline = isBeforeDiscussDeadline;
+    
     time_t t = time(0);   // get time now
     struct tm * now = localtime( & t );
     Date today(now->tm_year + 1900,
@@ -32,20 +39,30 @@ void ConferenceManager::checkDeadlines(Conference* in)
     //for deadlines, you can still submit papers on the day of the paper deadline
     //for dates, it occurs on the day, so if it is the day of the allocation date or after, allocation is done
     //this means that it occurs one day earlier, this is why we use yesterday
-    in->isBeforeSoftReviewDeadline = in->reviewDeadlineSoft.compare(today);
-    
     if(!isBeforeAllocationDate) {
         //run allocation
+        //algo is responsible for updating the database with the reviwere paper allocations
     }
-    
+    in->isBeforeSoftReviewDeadline = in->reviewDeadlineSoft.compare(today);
     in->isBeforeHardReviewDeadline = in->reviewDeadlineHard.compare(today);
     in->isBeforeDiscussDeadline = in->discussDeadline.compare(today);
+    
+    if(!(oldisBeforePaperDeadline == isBeforePaperDeadline && //ie something changed
+    oldisBeforeAllocationDate == isBeforeAllocationDate &&
+    oldisBeforeSoftReviewDeadline == isBeforeSoftReviewDeadline &&
+    oldisBeforeHardReviewDeadline == isBeforeHardReviewDeadline &&
+    oldisBeforeDiscussDeadline == isBeforeDiscussDeadline))
+    {
+        updateConference(*in); // update conference in database if something changed
+    }
 
 }
 
 void ConferenceManager::checkAllDeadlines()
 {
-    for (unsigned i=0; i < conferences.size(); i++) {
-    checkDeadlines(conferences[i]);
+    std::vector<Conference> in = getAllConferences(); //gets all conferences in database
+    
+    for (unsigned i=0; i < in.size(); i++) {
+      checkDeadlines(&in[i])
   }
 }

commit 210036338b51163df77035869068d194bf49e95c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 12:45:03 2014 +1100

    Update Date.hpp

diff --git a/Server/Date.hpp b/Server/Date.hpp
index 8a78592..017afdf 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -15,9 +15,12 @@ Date(const Date& in) {
 day = in.day;
 month = in.month;
 year = in.year;}
-int getDay(int iday) {day = iday;}
-int getMonth(int imonth) {month = imonth;}
-int getYear(int iyear) {year = iyear;}
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    int setDay(int iday) {day = iday;}
+    int setMonth(int imonth) {month = imonth;}
+    int setYear(int iyear) {year = iyear;}
 bool compare(const Date& idate) //returns true if idate is before or on the same day as this
 {
 if(idate.year != year) {

commit d3a6a3c2392aec2a85079396f98fff3c0528eafb
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 12:44:22 2014 +1100

    Update Date.hpp

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index 7593eb2..c84f7a6 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -16,9 +16,13 @@ public:
   month = in.month;
   year = in.year;}
   
-  int getDay(int iday) {day = iday;}
-  int getMonth(int imonth) {month = imonth;}
-  int getYear(int iyear) {year = iyear;}
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    int setDay(int iday) {day = iday;}
+    int setMonth(int imonth) {month = imonth;}
+    int setYear(int iyear) {year = iyear;}
+
   
   bool compare(const Date& idate) //returns true if idate is before or on the same day as this
   {

commit 767ad28031ca649ebc8e95cdf0ac02a98c878e7f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 12:43:52 2014 +1100

    Update Date.hpp

diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index ff48779..d758d95 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -21,9 +21,9 @@ public:
     }
     
 // NOTE: changed get functions, new below
-//    int getDay(int iday) {day = iday;}
-//    int getMonth(int imonth) {month = imonth;}
-//    int getYear(int iyear) {year = iyear;}
+    int setDay(int iday) {day = iday;}
+    int setMonth(int imonth) {month = imonth;}
+    int setYear(int iyear) {year = iyear;}
     int getDay() {return day;}
     int getMonth() {return month;}
     int getYear() {return year;}

commit 3a538015c0651af7b1037f42865ad9454570dd73
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 12:43:13 2014 +1100

    Update LoginManager.cpp

diff --git a/UserClient/LoginManager.cpp b/UserClient/LoginManager.cpp
index 1b9e71b..9211ce4 100644
--- a/UserClient/LoginManager.cpp
+++ b/UserClient/LoginManager.cpp
@@ -11,7 +11,13 @@ bool LoginManager::login(std::string /*username*/, std::string /*password*/)
 //            uType = REVIEWER;
 //        else if(username == "Author" && password == "user")
 //            uType = PCCHAIR;
-
+        
+        if(uType = PCCHAIR)
+        {
+            currentConference = new Conference(/* initialization constructor based on packet */)
+            //FIND HIS CONFERENCE
+            checkDeadlines(Conference* myConf);
+        }
 
 //    std::vector<std::string> keys;
 //    std::vector<PaperSummary> papers;

commit 63d5f88db308a8cd5414cb1f88126a4572b84605
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 12:37:09 2014 +1100

    activeConf{IDs/Names} added

diff --git a/Database/Database.cpp b/Database/Database.cpp
index f4dfd35..8ecc9d9 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -770,6 +770,49 @@ std::vector<std::string> *Database::allConfNames()
 
         return vptr;
 }
+std::vector<int> *Database::activeConfIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> *vptr = new std::vector<int>();
+
+        const char* selectActive = "SELECT confID FROM Conference WHERE active = 1";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectActive);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr->push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<std::string> *Database::activeConfNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> *vptr = new std::vector<std::string>();
+
+        const char* selectActive = "SELECT name FROM Conference WHERE active = 1";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectActive);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr->push_back(aname);
+        }
+
+        return vptr;
+}
 
 //
 //std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)

commit 168cc822e1ab0ba7d037f3837b1eee83fc77c6cb
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 12:36:11 2014 +1100

    activeConf{IDs/Names} added

diff --git a/Database/Database.hpp b/Database/Database.hpp
index d96ad06..a6366e1 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -31,6 +31,9 @@ public:
         void putConf(std::string key, const Conference *conf) throw (const char*);
         std::vector<int> *allConfIDs();
         std::vector<std::string> *allConfNames();
+        std::vector<int> *activeConfIDs();
+        std::vector<std::string> *activeConfNames();
+
 
 
 //        // Delete - returns false if there wasn't a record with that key

commit 6426c79e310d8c75d4fee86c71f1f7e58c7ea0fc
Author: laurencerm <l.robinsonmills@gmail.com>
Date:   Sun Oct 26 12:14:58 2014 +1100

    wip Conference ~ matt

diff --git a/Database/Database.cpp b/Database/Database.cpp
index ba787f8..f4dfd35 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -441,7 +441,7 @@ Conference *Database::fetchConference(int key) throw (const char*)
                 throw (noDB);
 
 	// Add information on user from database to User object
-	const char* getConference = "SELECT * FROM Conference WHERE confID=?
+	const char* getConference = "SELECT * FROM Conference WHERE confID=?";
 	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
 
         // =======================================
@@ -467,15 +467,15 @@ Conference *Database::fetchConference(int key) throw (const char*)
         std::string description = rs->getString(4);
         std::string location = rs->getString(5);
         bool isActive = rs->getBoolean(6);
-        Date paperDeadline  = rs->getDate(7);
+        Date paperDeadline  = rs->getString(7);
         bool isBeforePaperDeadline = rs->getBoolean(8);
-        Date allocationDate  = rs->getDate(9);
+        Date allocationDate  = rs->getString(9);
         bool isBeforeAllocationDate = rs->getBoolean(10);
-        Date reviewDeadlineSoft  = rs->getDate(11);
+        Date reviewDeadlineSoft  = rs->getString(11);
         bool isBeforeSoftReviewDeadline = rs->getBoolean(12);
-        Date reviewDeadlineHard  = rs->getDate(13);
+        Date reviewDeadlineHard  = rs->getString(13);
         bool isBeforeHardReviewDeadline = rs->getBoolean(14);
-        Date discussDeadline  = rs->getDate(15);
+        Date discussDeadline  = rs->getString(15);
         bool isBeforeDiscussDeadline = rs->getBoolean(16);
 	int reviewersPerPaper = rs->getInt(17);
 	int postWordLimit = rs->getInt(18);
@@ -521,7 +521,7 @@ Conference *Database::fetchConference(int key) throw (const char*)
 		postWordLimit
 		);
 	
-	return Conference;
+	return conf;
 }
 
 bool Database::existsConfName(std::string key) throw (const char*)
@@ -560,7 +560,7 @@ void Database::putConf(std::string key, const Conference *conf) throw (const cha
         }
 	else
 	{
-        	this->createConf(conf;
+        	this->createConf(conf);
 	}
 }
 
@@ -584,17 +584,17 @@ void Database::createConf(const Conference* conf)
         pstmt->setString(3, conf->description);
         pstmt->setString(4, conf->location);
         pstmt->setBoolean(5, conf->isActive);
-        pstmt->setDate(6, conf->paperDeadline);
+        pstmt->setString(6, conf->paperDeadline);
         pstmt->setBoolean(7, conf->isBeforePaperDeadline);
-        pstmt->setDate(8, conf->allocationDate);
+        pstmt->setString(8, conf->allocationDate);
         pstmt->setBoolean(9, conf->isBeforeAllocationDate);
-        pstmt->setDate(10, conf->reviewDeadlineSoft);
+        pstmt->setString(10, conf->reviewDeadlineSoft);
         pstmt->setBoolean(11, conf->isBeforeSoftReviewDeadline);
-        pstmt->setDate(12, conf->reviewDeadlineHard);
+        pstmt->setString(12, conf->reviewDeadlineHard);
         pstmt->setBoolean(13, conf->isBeforeHardReviewDeadline);
-        pstmt->setDate(14, conf->discussDeadline);
+        pstmt->setString(14, conf->discussDeadline);
         pstmt->setBoolean(15, conf->isBeforeDiscussDeadline);
-	pstmt->setInt(16, conf->reviersPerPaper);
+	pstmt->setInt(16, conf->reviewersPerPaper);
 	pstmt->setInt(17, conf->postWordLimit);
 
         pstmt->executeUpdate();
@@ -658,7 +658,7 @@ void Database::updateConf(const Conference* conf)
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getConfID);
-        pstmt->setString(1, conf->name);
+        pstmt->setString(1, conf->title);
 
 	rs = pstmt->executeQuery();
 	bool haveRecord = rs->next();
@@ -677,17 +677,17 @@ void Database::updateConf(const Conference* conf)
         pstmt->setString(3, conf->description);
         pstmt->setString(4, conf->location);
         pstmt->setBoolean(5, conf->isActive);
-        pstmt->setDate(6, conf->paperDeadline);
+        pstmt->setString(6, conf->paperDeadline);
         pstmt->setBoolean(7, conf->isBeforePaperDeadline);
-        pstmt->setDate(8, conf->allocationDate);
+        pstmt->setString(8, conf->allocationDate);
         pstmt->setBoolean(9, conf->isBeforeAllocationDate);
-        pstmt->setDate(10, conf->reviewDeadlineSoft);
+        pstmt->setString(10, conf->reviewDeadlineSoft);
         pstmt->setBoolean(11, conf->isBeforeSoftReviewDeadline);
-        pstmt->setDate(12, conf->reviewDeadlineHard);
+        pstmt->setString(12, conf->reviewDeadlineHard);
         pstmt->setBoolean(13, conf->isBeforeHardReviewDeadline);
-        pstmt->setDate(14, conf->discussDeadline);
+        pstmt->setString(14, conf->discussDeadline);
         pstmt->setBoolean(15, conf->isBeforeDiscussDeadline);
-	pstmt->setInt(16, conf->reviersPerPaper);
+	pstmt->setInt(16, conf->reviewersPerPaper);
 	pstmt->setInt(17, conf->postWordLimit);
 	pstmt->setInt(18, confID);
 
diff --git a/Database/Database.hpp b/Database/Database.hpp
index 5d6bbe1..d96ad06 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -27,10 +27,10 @@ public:
 
 	// CONFERENCE
 	Conference *fetchConference(int key) throw (const char*);
-        bool existsConfID(int key) throw (const char*);
+        bool existsConfName(std::string key) throw (const char*);
         void putConf(std::string key, const Conference *conf) throw (const char*);
-        std::vector<int> *allUserIDs();
-        std::vector<std::string> *allUserNames();
+        std::vector<int> *allConfIDs();
+        std::vector<std::string> *allConfNames();
 
 
 //        // Delete - returns false if there wasn't a record with that key
diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index aafd828..6e3b744 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -58,20 +58,20 @@ CREATE TABLE `Keywords` (
 
 CREATE TABLE `Conference` (
 	`confID` int NOT NULL AUTO_INCREMENT,
-	`name` varchar(256) NOT NULL UNIQUE,
-	`topic` varchar(512) NOT NULL,
-	`description` varchar(4096) NOT NULL,
-	`location` varchar(256) NOT NULL,
+	`name` varchar(255) NOT NULL UNIQUE,
+	`topic` TEXT NOT NULL,
+	`description` TEXT NOT NULL,
+	`location` varchar(255) NOT NULL,
 	`active` boolean NOT NULL DEFAULT 1,
-	`paperDeadline` date,
+	`paperDeadline` string,
 	`paperDeadlineBool` bool,
-	`allocationDate` date,
+	`allocationDate` string,
 	`allocationDateBool` bool,
-	`reviewDeadlineSoft` datetime,
+	`reviewDeadlineSoft` string,
 	`reviewDeadlineSoftBool` bool,
-	`reviewDeadlineHard` datetime,
+	`reviewDeadlineHard` string,
 	`reviewDeadlineHardBool` bool,
-	`discussDeadline` datetime,
+	`discussDeadline` string,
 	`discussDeadlineBool` bool,
 	`reviewersPerPaper` int NOT NULL,
 	`postWordLimit` int NOT NULL,

commit 7f40bf68ffc4555b6ac6320aa40b8303e8ca110a
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sun Oct 26 12:13:05 2014 +1100

    Update .gitignore

diff --git a/.gitignore b/.gitignore
index 56b00a6..83ca1f3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,3 +11,5 @@ Makefile
 *build/
 *dist/
 .*
+moc_*
+ui_*

commit bdfeaa3af40dcb70049ff09a217e6e77f0dd2f6b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 11:31:02 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 628b5a7..a299fad 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -25,7 +25,7 @@ public:
 
 
 private:
-  bool checkDeadlines(Conference*);
+  void checkDeadlines(Conference*);
   void fetchConference(int);
   std::vector<Conference*> conferences;
 };

commit 79d733671bae5f2f5e46f7700a6659db915a417b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 26 11:27:27 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index a299fad..628b5a7 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -25,7 +25,7 @@ public:
 
 
 private:
-  void checkDeadlines(Conference*);
+  bool checkDeadlines(Conference*);
   void fetchConference(int);
   std::vector<Conference*> conferences;
 };

commit db7f7d51e6aa0bbaf87ac4b9f6e3d12c63710360
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 10:52:04 2014 +1100

    Unique added for Conf table

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index 5aefd0d..aafd828 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -58,13 +58,15 @@ CREATE TABLE `Keywords` (
 
 CREATE TABLE `Conference` (
 	`confID` int NOT NULL AUTO_INCREMENT,
-	`name` varchar(256) NOT NULL,
+	`name` varchar(256) NOT NULL UNIQUE,
 	`topic` varchar(512) NOT NULL,
 	`description` varchar(4096) NOT NULL,
 	`location` varchar(256) NOT NULL,
 	`active` boolean NOT NULL DEFAULT 1,
-	`paperDeadline` datetime,
+	`paperDeadline` date,
 	`paperDeadlineBool` bool,
+	`allocationDate` date,
+	`allocationDateBool` bool,
 	`reviewDeadlineSoft` datetime,
 	`reviewDeadlineSoftBool` bool,
 	`reviewDeadlineHard` datetime,
@@ -72,6 +74,7 @@ CREATE TABLE `Conference` (
 	`discussDeadline` datetime,
 	`discussDeadlineBool` bool,
 	`reviewersPerPaper` int NOT NULL,
+	`postWordLimit` int NOT NULL,
 	PRIMARY KEY(`confID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
@@ -82,6 +85,8 @@ CREATE TABLE `ConferenceKeywords` (
 	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+ALTER TABLE `ConferenceKeywords` ADD UNIQUE `unique_index`(`confID`, `keywordID`);
+
 CREATE TABLE `Paper` (
 	`paperID` int NOT NULL AUTO_INCREMENT,
 	`leadAuthorID` int NOT NULL,

commit 2a8b4a90814b6c010e8efdaaeb2d1306c4144a52
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 10:51:16 2014 +1100

    Conference funcs added

diff --git a/Database/Database.hpp b/Database/Database.hpp
index 3b4d9f2..5d6bbe1 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -27,6 +27,10 @@ public:
 
 	// CONFERENCE
 	Conference *fetchConference(int key) throw (const char*);
+        bool existsConfID(int key) throw (const char*);
+        void putConf(std::string key, const Conference *conf) throw (const char*);
+        std::vector<int> *allUserIDs();
+        std::vector<std::string> *allUserNames();
 
 
 //        // Delete - returns false if there wasn't a record with that key
@@ -55,7 +59,13 @@ private:
         Database& operator=(const Database);
 
 //        void recordToTables(const MyRecord *data);
+
+	// USER
         void createUser(const User *user);
         void updateUser(const User *user);
 
+	// CONF
+        void createConf(const Conference *conf);
+        void updateConf(const Conference *conf);
+
 };

commit 747e762b9cf1fd6af7a4cd893d9555a0bb63db90
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 10:50:19 2014 +1100

    Conference fetch/Create/Update/GetConfId/

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 4cdefb2..ba787f8 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -117,7 +117,7 @@ User *Database::fetchUser(std::string key) throw (const char*)
 
         // =======================================
         // Expertise Area
-        std::vector<std::string> vptr;
+        std::vector<std::string> vec;
 	
 	pstmt = dbcon->prepareStatement(getExpertise);
 	pstmt->setInt(1, userID);
@@ -126,7 +126,7 @@ User *Database::fetchUser(std::string key) throw (const char*)
 
         while (rs->next()) {
                 std::string expertise = rs->getString(1);
-                vptr.push_back(expertise);
+                vec.push_back(expertise);
         }
 
         User *user = new User(
@@ -137,7 +137,7 @@ User *Database::fetchUser(std::string key) throw (const char*)
 		phone,
 		password,
 		userID,
-		vptr);
+		vec);
 
         delete rs;
         delete pstmt;
@@ -271,8 +271,6 @@ void Database::updateUser(const User* user)
         if (invalid)
                 throw (noDB);
 
-        // Insert the myrecord data first, then deal with Other data tables
-
 	const char* getUserID = "SELECT userID FROM UserAccount where username = ?";
 	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
 	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
@@ -447,7 +445,7 @@ Conference *Database::fetchConference(int key) throw (const char*)
 	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
 
         // =======================================
-        // user account
+        // Conference 
 	sql::PreparedStatement *pstmt = NULL;
 	sql::ResultSet *rs = NULL;
 	
@@ -466,61 +464,311 @@ Conference *Database::fetchConference(int key) throw (const char*)
         int confID = rs->getInt(1);
         std::string title = rs->getString(2);
         std::string topic = rs->getString(3);
-        std::string description = rs->getString(3);
-        bool active = rs->getBoolean(3);
-        Timestamp paperDeadline  = rs->getTimestamp(3);
+        std::string description = rs->getString(4);
+        std::string location = rs->getString(5);
+        bool isActive = rs->getBoolean(6);
+        Date paperDeadline  = rs->getDate(7);
+        bool isBeforePaperDeadline = rs->getBoolean(8);
+        Date allocationDate  = rs->getDate(9);
+        bool isBeforeAllocationDate = rs->getBoolean(10);
+        Date reviewDeadlineSoft  = rs->getDate(11);
+        bool isBeforeSoftReviewDeadline = rs->getBoolean(12);
+        Date reviewDeadlineHard  = rs->getDate(13);
+        bool isBeforeHardReviewDeadline = rs->getBoolean(14);
+        Date discussDeadline  = rs->getDate(15);
+        bool isBeforeDiscussDeadline = rs->getBoolean(16);
+	int reviewersPerPaper = rs->getInt(17);
+	int postWordLimit = rs->getInt(18);
 
         delete rs;
         delete pstmt;
 
         // =======================================
-        // Personal Info
-	pstmt = dbcon->prepareStatement(getPersonalInfo);
-	pstmt->setInt(1, userID);
+        // Expertise Area
+        std::vector<std::string> vec;
+	
+	pstmt = dbcon->prepareStatement(getConfKeywords);
+	pstmt->setInt(1, key);
 	rs = pstmt->executeQuery();
-	haveRecord = rs->next();
-	if (!haveRecord)
+
+        while (rs->next()) {
+                std::string keyword = rs->getString(2);
+                vec.push_back(keyword);
+        }
+
+        delete rs;
+        delete pstmt;
+
+        Conference *conf = new Conference(
+		isActive,
+		title,
+		confID,
+		topic,
+		description,
+		location,
+		vec,
+		isBeforePaperDeadline,
+		paperDeadline,
+		isBeforeAllocationDate,
+		allocationDate,
+		isBeforeSoftReviewDeadline,
+		reviewDeadlineSoft,
+		isBeforeHardReviewDeadline,
+		reviewDeadlineHard,
+		isBeforeDiscussDeadline,
+		discussDeadline,
+		reviewersPerPaper,
+		postWordLimit
+		);
+	
+	return Conference;
+}
+
+bool Database::existsConfName(std::string key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* countConf = "SELECT COUNT(*) FROM Conference WHERE name=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countConf);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::putConf(std::string key, const Conference *conf) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+        if (this->existsConfName(key))
 	{
-		delete rs;
-		delete pstmt;
-		return NULL;
+                this->updateConf(conf);
+        }
+	else
+	{
+        	this->createConf(conf;
 	}
+}
 
-        std::string name = rs->getString(3);
-	std::string email = rs->getString(4);
-	std::string organisation = rs->getString(5);
-	std::string phone = rs->getString(6);
+void Database::createConf(const Conference* conf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* insertConference = "INSERT INTO Conference(confID, name, topic, description, location, active, paperDeadline, paperDeadlineBool, allocationDate, allocationDateBool, reviewDeadlineSoft, reviewDeadlineSoftBool, reviewDeadlineHard, reviewDeadlineHardBool, discussDeadline, discussDeadlineBool, reviewersPerPaper, postWordlimit) VALUES(NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?, ?)";
+
+	const char* getconfID = "SELECT LAST_INSERT_ID()";
+	const char* insertConfKeyword = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Personal Info
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(insertConference);
+
+        pstmt->setString(1, conf->title);
+        pstmt->setString(2, conf->topic);
+        pstmt->setString(3, conf->description);
+        pstmt->setString(4, conf->location);
+        pstmt->setBoolean(5, conf->isActive);
+        pstmt->setDate(6, conf->paperDeadline);
+        pstmt->setBoolean(7, conf->isBeforePaperDeadline);
+        pstmt->setDate(8, conf->allocationDate);
+        pstmt->setBoolean(9, conf->isBeforeAllocationDate);
+        pstmt->setDate(10, conf->reviewDeadlineSoft);
+        pstmt->setBoolean(11, conf->isBeforeSoftReviewDeadline);
+        pstmt->setDate(12, conf->reviewDeadlineHard);
+        pstmt->setBoolean(13, conf->isBeforeHardReviewDeadline);
+        pstmt->setDate(14, conf->discussDeadline);
+        pstmt->setBoolean(15, conf->isBeforeDiscussDeadline);
+	pstmt->setInt(16, conf->reviersPerPaper);
+	pstmt->setInt(17, conf->postWordLimit);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Store confID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getconfID);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int confID = rs->getInt(1);
 
         delete rs;
         delete pstmt;
 
         // =======================================
-        // Expertise Area
-        std::vector<std::string> vptr;
+        // Expertise
+      	if (conf->keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertConfKeyword);
+		std::vector<std::string>::const_iterator it;
+      		for (it = conf->keywords.begin(); it != conf->keywords.end(); it ++)
+		{
+			std::string word = *it;	
+
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			
+			pstmt->setInt(1, confID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+void Database::updateConf(const Conference* conf)
+{
+        if (invalid)
+                throw (noDB);
+
+	const char* getConfID = "SELECT confID FROM Conference where name = ?";
+
+	const char* updateConference = "UPDATE Conference SET confID=?, name=?, topic=?, description=?, location=?, active=?, paperDeadline=?, paperDeadlineBool=?, allocationDate=?, allocationDateBool=?, reviewDeadlineSoft=?, reviewDeadlineSoftBool=?, reviewDeadlineHard=?, reviewDeadlineHardBool=?, discussDeadline=?, discussDeadlineBool=?, reviewersPerPaper=?, postWordlimit=? WHERE confID=?";
+
+        const char* deleteKeywords = "DELETE FROM ConferenceKeywords WHERE confID=?";
+	const char* insertKeywords = "INSERT IGNORE INTO ConferenceKeywords VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Store confID
+        sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
 	
-	pstmt = dbcon->prepareStatement(getExpertise);
-	pstmt->setInt(1, userID);
+	pstmt = dbcon->prepareStatement(getConfID);
+        pstmt->setString(1, conf->name);
+
 	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int confID = rs->getInt(1);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Conference
+        pstmt = dbcon->prepareStatement(updateConference);
+
+        pstmt->setString(1, conf->title);
+        pstmt->setString(2, conf->topic);
+        pstmt->setString(3, conf->description);
+        pstmt->setString(4, conf->location);
+        pstmt->setBoolean(5, conf->isActive);
+        pstmt->setDate(6, conf->paperDeadline);
+        pstmt->setBoolean(7, conf->isBeforePaperDeadline);
+        pstmt->setDate(8, conf->allocationDate);
+        pstmt->setBoolean(9, conf->isBeforeAllocationDate);
+        pstmt->setDate(10, conf->reviewDeadlineSoft);
+        pstmt->setBoolean(11, conf->isBeforeSoftReviewDeadline);
+        pstmt->setDate(12, conf->reviewDeadlineHard);
+        pstmt->setBoolean(13, conf->isBeforeHardReviewDeadline);
+        pstmt->setDate(14, conf->discussDeadline);
+        pstmt->setBoolean(15, conf->isBeforeDiscussDeadline);
+	pstmt->setInt(16, conf->reviersPerPaper);
+	pstmt->setInt(17, conf->postWordLimit);
+	pstmt->setInt(18, confID);
+
+        pstmt->executeUpdate();
 
+        delete pstmt;
+
+        // =======================================
+        // Keywords Delete
+        pstmt = dbcon->prepareStatement(deleteKeywords);
+        pstmt->setInt(1, confID);
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // =======================================
+        // Keywords Insert
+      	if (conf->keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertKeywords);
+		std::vector<std::string>::const_iterator it;
+      		for (it = conf->keywords.begin(); it != conf->keywords.end(); it ++)
+		{
+			std::string word = *it;	
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			pstmt->setInt(1, confID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
+}
+
+std::vector<int> *Database::allConfIDs()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<int> *vptr = new std::vector<int>();
+
+        const char* selectall = "select confID from Conference";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
         while (rs->next()) {
-                std::string expertise = rs->getString(2);
-                vptr.push_back(expertise);
+                int anid = rs->getInt(1);
+                vptr->push_back(anid);
         }
 
-        User *user = new User(
-		username,
-		name,
-		email,
-		organisation,
-		phone,
-		password,
-		userID,
-		vptr);
+        return vptr;
+}
 
-        delete rs;
-        delete pstmt;
-	
-	return user;
+std::vector<std::string> *Database::allConfNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> *vptr = new std::vector<std::string>();
+
+        const char* selectall = "select name from Conference";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr->push_back(aname);
+        }
+
+        return vptr;
 }
 
 //

commit 4f7bfbe931998d0cb0e1d4520bbb7597f62b9ae3
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 10:48:17 2014 +1100

    Changed confID to int

diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 4849866..62a258c 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -9,7 +9,7 @@
 struct Conference {
   Conference(bool iisActive,
   const std::string& ititle,
-  const std::string& iconfID,
+  const int& iconfID,
   const std::string& itopic,
   const std::string& idescription,
   const std::string& ilocation,
@@ -49,7 +49,7 @@ struct Conference {
 
   bool isActive;
   std::string title{""};
-  std::string confID{""};
+  int confID{0};
   std::string topic{""};
   std::string description{""};
   std::string location{""};

commit 0c7a2aa5338c3f02df12f240b5a9664b46751b28
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 26 10:31:34 2014 +1100

    Updated Algos. Wating for Database Query returns.
    
    FILL TODOs
    read header for use

diff --git a/Algorithm/Algo b/Algorithm/Algo
index 3a01765..d6b982e 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -1,8 +1,19 @@
-Algo:
+/*
+	Algo to be run on server side at bool variable change "allocationDateBool"
+	See below for arguments
+*/
+
+//Algo:
 //PaperForReview Class has a paper and calculates a score for all the potential reviewers. This is then stored in an
 //array (of structs) which has the reviewerID and associated score for that reviewer.
 
-//TODO: getter function for a vector(?) of the reviewers
+//USE: Create new PaperForReview with consturctor
+//	Use getter function to return reviewers
+//	reviewers with a reviewer ID of -1 => not a reviewer
+
+
+//returns vector of reviewerIDs from getter
+
 
 struct ReviewerBid
 {
@@ -13,15 +24,17 @@ struct ReviewerBid
 class PaperForReview
 {
 	private:
+		PapersForReview(int);
+		~PapersForReview();
 		int paperID;
 		int conferenceID;
-		ReviewerBid[numOfReqReviewrs] reviewerBids;
+		
+		ReviewerBid reviewerBids[numOfReqReviewrs] ;
 
 		std::vector<int> authors;
 		std::vector<int> involvedOrganisation;
 		std::vector<int> conflictingReviewersVec;
-		PapersForReview(int);
-		~PapersForReview();
+		
 		int getMinScore();
 		void setNewReviewer(int, int);
 		void checkNewReviewer(int, int);
@@ -32,16 +45,29 @@ class PaperForReview
 		
 	public:
 		//getter
+		vector<int> getReviewers(int, int);
 
 };
 
+vector<int> getReviewers(int paperID, int confID)
+{
+	
+	vector<int> reviewers;
+	
+	for(int i=0; i<numOfReqReviewrs; i++)
+	{
+		reviewers.push_back(reviewerBids[i].reviewerID);
+	}
+	
+	return reviewers;
+}
+
 void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
 {
 	if(getMinScore() < newscore)
 	{
 		//Set New Reviewer
 		setNewReviewer(newScore, newReviewerID);
-		
 	}
 }
 
@@ -99,6 +125,7 @@ void PaperForReview::addAuthor(int newAuthor)
 }
 
 //TODO
+//populate clonflicting reviewers vector further from database queries
 void  PaperForReview::conflictingReviewers()
 {
 	//authors
@@ -118,7 +145,8 @@ void  PaperForReview::conflictingReviewers()
 
 
 
-
+//TODO: matching keywords from database returns
+//		vectors?
 int calculateScore(int userID, int paperID)
 {
 	int score = 1;
@@ -130,6 +158,8 @@ int calculateScore(int userID, int paperID)
 
 }
 
+
+//TODO:get reviewer pref
 void PaperForReview::algo(int paperID, int conferenceID)
 {
 	std::vector<int> userIDs;
@@ -141,17 +171,23 @@ void PaperForReview::algo(int paperID, int conferenceID)
 	 	int score = 0;
 		If UserID not in  conflictingReviewers
 		{
-			if(isYES())
+			int reviewersPreference = 0;
+					// 1=yes
+					//2=maybe
+					//3=conflict
+			reviewersPreference = ;//(8)GET PREF FROM DATABASE fetchreviewerPreference(userUD, paperID);
+			
+			if(reviewersPreference == 1)
 			{
-				score = calculateScore(userID, paperID) * (isYES()*1000000);
+				score = calculateScore(userID, paperID) * 1000000;
 				checkNewReviewer(score, userID);
 			}
-			elseif(isMAYBE())
+			elseif(reviewersPreference == 2)
 			{
-				score = calculateScore(userID, paperID) * (isMAYBE()*1000);
+				score = calculateScore(userID, paperID) * 1000;
 				checkNewReviewer(score, userID);
 			}
-			elseif(!isCONFLICT())
+			elseif(reviewersPreference != 3)
 			{
 				score = calculate score(userID, paperID);
 				checkNewReviewer(score, userID);
@@ -161,6 +197,9 @@ void PaperForReview::algo(int paperID, int conferenceID)
 }
 
 
+//TODO: populate vectors from data base
+//TODO: call conflicting reviewers
+
 void fillVectors(int paperID)
 {
 
@@ -173,6 +212,8 @@ void fillVectors(int paperID)
 	// CONFLICTING HERE
 }
 
+
+//MAY NEED TO FILTER FOR CONFERENCE ASWELL
 //(1)select author
 		//Where Paper ID = ?
 		
@@ -194,4 +235,7 @@ void fillVectors(int paperID)
 		
 //(7) select pcs(reviewrs)
 		//where conferfence = ?
+		
+//(8) select reviewerPreferance
+		//where reviewerID = ? and paperID = ? 
 

commit 1b7029ba6a0b7457eb79ea80d18ef32c3a4867e7
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 09:06:01 2014 +1100

    wip Conference database

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 8d652b6..4cdefb2 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -437,88 +437,91 @@ void Database::addKeyword(std::string key) throw (const char*)
         delete pstmt;
 }
 
-//Conference *Database::fetchConference(int key) throw (const char*)
-//{
-//        if (invalid)
-//                throw (noDB);
-//
-//	// Add information on user from database to User object
-//	const char* getConference = "SELECT * FROM Conference WHERE confID=?
-//	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
-//
-//        // =======================================
-//        // user account
-//	sql::PreparedStatement *pstmt = NULL;
-//	sql::ResultSet *rs = NULL;
-//	
-//	pstmt = dbcon->prepareStatement(getUser);
-//	pstmt->setInt(1, key);
-//
-//	rs = pstmt->executeQuery();
-//	bool haveRecord = rs->next();
-//	if (!haveRecord)
-//	{
-//		delete rs;
-//		delete pstmt;
-//		return NULL;
-//	}
-//
-//        int userID = rs->getInt(1);
-//        std::string username = rs->getString(2);
-//        std::string password = rs->getString(3);
-//
-//        delete rs;
-//        delete pstmt;
-//
-//        // =======================================
-//        // Personal Info
-//	pstmt = dbcon->prepareStatement(getPersonalInfo);
-//	pstmt->setInt(1, userID);
-//	rs = pstmt->executeQuery();
-//	haveRecord = rs->next();
-//	if (!haveRecord)
-//	{
-//		delete rs;
-//		delete pstmt;
-//		return NULL;
-//	}
-//
-//        std::string name = rs->getString(3);
-//	std::string email = rs->getString(4);
-//	std::string organisation = rs->getString(5);
-//	std::string phone = rs->getString(6);
-//
-//        delete rs;
-//        delete pstmt;
-//
-//        // =======================================
-//        // Expertise Area
-//        std::vector<std::string> vptr;
-//	
-//	pstmt = dbcon->prepareStatement(getExpertise);
-//	pstmt->setInt(1, userID);
-//	rs = pstmt->executeQuery();
-//
-//        while (rs->next()) {
-//                std::string expertise = rs->getString(2);
-//                vptr.push_back(expertise);
-//        }
-//
-//        User *user = new User(
-//		username,
-//		name,
-//		email,
-//		organisation,
-//		phone,
-//		password,
-//		userID,
-//		vptr);
-//
-//        delete rs;
-//        delete pstmt;
-//	
-//	return user;
-//}
+Conference *Database::fetchConference(int key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	// Add information on user from database to User object
+	const char* getConference = "SELECT * FROM Conference WHERE confID=?
+	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
+
+        // =======================================
+        // user account
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getConference);
+	pstmt->setInt(1, key);
+
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return NULL;
+	}
+
+        int confID = rs->getInt(1);
+        std::string title = rs->getString(2);
+        std::string topic = rs->getString(3);
+        std::string description = rs->getString(3);
+        bool active = rs->getBoolean(3);
+        Timestamp paperDeadline  = rs->getTimestamp(3);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Personal Info
+	pstmt = dbcon->prepareStatement(getPersonalInfo);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+	haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return NULL;
+	}
+
+        std::string name = rs->getString(3);
+	std::string email = rs->getString(4);
+	std::string organisation = rs->getString(5);
+	std::string phone = rs->getString(6);
+
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise Area
+        std::vector<std::string> vptr;
+	
+	pstmt = dbcon->prepareStatement(getExpertise);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+
+        while (rs->next()) {
+                std::string expertise = rs->getString(2);
+                vptr.push_back(expertise);
+        }
+
+        User *user = new User(
+		username,
+		name,
+		email,
+		organisation,
+		phone,
+		password,
+		userID,
+		vptr);
+
+        delete rs;
+        delete pstmt;
+	
+	return user;
+}
 
 //
 //std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)

commit b627249adbcd2be1f5ddc6b505031d57f4053f85
Merge: cbaf664 c609bb0
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 08:52:26 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit cbaf66440d2d1c9d4ed71ee16f65c4c9ca861c14
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 26 08:52:20 2014 +1100

    changed Review to have Text rather than large VarChar

diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index e959aed..5aefd0d 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -138,12 +138,12 @@ CREATE TABLE `Review` (
 	`presentation` int,
 	`techQuality` int,
 	`evaluation` int,
-	`commentsStrength` varchar(4096),
-	`commentsWeakness` varchar(4096),
-	`commentsSuggestions` varchar(4096),
-	`commentsShortPaper` varchar(4096),
-	`commentsBestAward` varchar(4096),
-	`authorRebuttal` varchar(4096),
+	`commentsStrength` text,
+	`commentsWeakness` text,
+	`commentsSuggestions` text,
+	`commentsShortPaper` text,
+	`commentsBestAward` text,
+	`authorRebuttal` text,
 	PRIMARY KEY(`reportID`),
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
 	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`),

commit c609bb07e0492ed250e7bbd59bb49e95b2e1470e
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Sat Oct 25 22:38:49 2014 +1100

    slight changes to enable compile without warnings

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index a8c13c1..827bdb0 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -32,7 +32,7 @@ class Author : public User {
     void getPapers();
     void submitPaper();
     void modifyPaper();
-    void submitRebuttal(); */
+    void submitRebuttal();*/
 
     Author(const std::string& iuserName,
          const std::string& iname,
@@ -62,6 +62,7 @@ class Author : public User {
     void submitPaper();
     void modifyPaper();
     void submitRebuttal();
+    void modifyDetails();
 
     std::vector<std::string> keywords;
 
diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index 8a78592..ff48779 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -2,40 +2,53 @@
 #define DATE_H
 
 class Date {
+    
 public:
-Date() { }
-Date(int iday,
-int imonth,
-int iyear):
-day(iday),
-month(imonth),
-year(iyear)
-{ }
-Date(const Date& in) {
-day = in.day;
-month = in.month;
-year = in.year;}
-int getDay(int iday) {day = iday;}
-int getMonth(int imonth) {month = imonth;}
-int getYear(int iyear) {year = iyear;}
-bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-{
-if(idate.year != year) {
-return idate.year < year;
-} else {
-if(idate.month != month) {
-return idate.month < month;
-} else {
-if(idate.day != day) {
-return idate.day < day;
-}
-}
-}
-return true;
-}
+    Date() { }
+    Date(int iday,
+         int imonth,
+         int iyear):
+         day(iday),
+         month(imonth),
+         year(iyear)
+             { }
+    
+    Date(const Date& in)
+    {
+        day = in.day;
+        month = in.month;
+        year = in.year;
+    }
+    
+// NOTE: changed get functions, new below
+//    int getDay(int iday) {day = iday;}
+//    int getMonth(int imonth) {month = imonth;}
+//    int getYear(int iyear) {year = iyear;}
+    int getDay() {return day;}
+    int getMonth() {return month;}
+    int getYear() {return year;}
+    
+    bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+    {
+        if(idate.year != year) {
+            return idate.year < year;
+        } else {
+            if(idate.month != month) {
+                return idate.month < month;
+            } else {
+                if(idate.day != day) {
+                    return idate.day < day;
+                }
+            }
+        }
+        return true;
+    }
+    
 private:
-int day{0};
-int month{0};
-int year{0};
+    int day{0};
+    int month{0};
+    int year{0};
+    
 };
+
 #endif
diff --git a/UserClient/LoginManager.cpp b/UserClient/LoginManager.cpp
index a191957..1b9e71b 100644
--- a/UserClient/LoginManager.cpp
+++ b/UserClient/LoginManager.cpp
@@ -1,6 +1,7 @@
 #include "LoginManager.hpp"
 
-bool LoginManager::login(std::string username, std::string password)
+//NOTE: temporarily commented out parameters to silence compiler warning until implemented
+bool LoginManager::login(std::string /*username*/, std::string /*password*/)
 {
 //    UserType_t uType;//from packet
 
@@ -33,7 +34,7 @@ bool LoginManager::login(std::string username, std::string password)
     //the response received is used to construct the currentUser pointer member of loginmanager
 
 
-
+    return false; // NOTE: placeholder
 }
 
 void LoginManager::logout()
@@ -42,8 +43,11 @@ void LoginManager::logout()
     //acts as a destructor basically
 }
 
-bool LoginManager::createAccount(std::string username, std::string password)
+//NOTE: temporarily commented out parameters to silence compiler warning until implemented
+bool LoginManager::createAccount(std::string /*username*/, std::string /*password*/)
 {
     //this functions identically to login except that a new record is created in the database with the supplkied details
     //rather than verifying that one exists with matching details
+    
+    return false; // NOTE: placeholder
 }
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index f0d8c2d..da89418 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -42,9 +42,9 @@ class LoginManager {
 
   private:
   User* currentUser{nullptr};
+  bool loggedIn;
   std::vector<Conference*> conferences;
   Conference* activeConference{nullptr};
-  bool loggedIn;
 
 };
 #endif
diff --git a/UserClient/PCChair.cpp b/UserClient/PCChair.cpp
index 1ebb2db..bcf4e11 100644
--- a/UserClient/PCChair.cpp
+++ b/UserClient/PCChair.cpp
@@ -1,6 +1,6 @@
 #include "PCChair.hpp"
 
-PCChair::checkConferencesDeadlines()
+void PCChair::checkConferencesDeadlines()
 {
   //calls checkDeadlines in conferenceManager on server with activeConference* 
   //need to use getActiveConference to obtain it
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 986b0b1..d51b473 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -4,6 +4,7 @@
 #include "Paper.hpp"
 #include "PaperSummary.hpp"
 #include "User.hpp"
+#include "Conference.hpp" // for activeConference memeber variable
 
 #include <vector>
 
@@ -22,11 +23,12 @@ class PCChair : public User {
   //void setConfDeadlines();
   //void setConfKWords();covered by above
   //int getAvgScoreForPaper();dont think we really need this
-  void acceptOrRejectPaper(int);
+  void acceptOrRejectPaper(bool); // NOTE: changed parameter from int to bool to match function description
   void addReviewerToConf(int);
   void addReviewerToPaper(int, int);
   void fetchPapers();
   void fetchUsers();
+  void checkConferencesDeadlines(); // NOTE: was not declared but function existed, putting here for now
 
   private:
   PaperSummary* getPaperByTitle(std::string);
diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
index 5d0dbe5..33e51ed 100644
--- a/UserClient/PaperSummary.hpp
+++ b/UserClient/PaperSummary.hpp
@@ -4,7 +4,7 @@
 #include <string>
 
 struct PaperSummary {
-  PaperSummary(int ipaperId, const std::String& ipaperName) :
+  PaperSummary(int ipaperId, const std::string& ipaperName) :
               paperId(ipaperId), paperName(ipaperName)
               { }
   int paperId{0};
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index a010bf3..62a4f39 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -6,7 +6,7 @@
 struct Review {
   Review() { }
   Review(Paper* ipaper,
-    int reviewId,
+    //int reviewId, // NOTE: taken out as should be generated by database
     int ioverall,
     int iconfidence,
     int irelevance,
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index c2de124..b4404c2 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -5,30 +5,32 @@
 
 #include <string>
 
-enum UserType_t {Author, Reviewer, PCChair};
+enum UserType_t {AUTHOR, REVIEWER, PCCHAIR};
 
 class User {
   public:
     User() { }
     User(const std::string& iuserName,
+         const std::string& ipassword,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
-         const std::string& ipassword,
          int iuserID,
          UserType_t iuserType):
          userName(iuserName),
+         password(ipassword),
          name(iname),
          email(iemail),
          organisation(iorganisation),
          phone(iphone),
-         password(ipassword),
          userID(iuserID),
          userType(iuserType)
          { }
+    virtual ~User() {}
+    
     virtual void view() = 0;
-    void modifyDetails();
+    virtual void modifyDetails();
     void viewConferenceDetails();
     int getUserID() {return userID;}
     std::string getPassword() {return password;}
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 95ebf58..b6c33a8 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,6 +1,8 @@
-#include "mainwindow.h"
+#include "mainwindow.hpp"
 #include "ui_mainwindow.h"
 
+#include "User.hpp" // for UserType_t enum
+
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),
     ui(new Ui::MainWindow)
@@ -18,7 +20,7 @@ MainWindow::~MainWindow()
 void MainWindow::login()
 {
     if(loginMgr.login(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr.currentUser->getUserType());
+        setUser(loginMgr.getCurrentUser()->getUserType());
 }
 
 void MainWindow::logout()
@@ -89,7 +91,7 @@ void MainWindow::on_passwordLogin_returnPressed()
 void MainWindow::on_createAccount_clicked()
 {
     if(loginMgr.createAccount(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
-        setUser(loginMgr.currentUser->getUserType());
+        setUser(loginMgr.getCurrentUser()->getUserType());
 }
 
 void MainWindow::on_apply_clicked()
@@ -155,13 +157,13 @@ void MainWindow::on_rmvAuthKey_clicked()
     delete ui->authKeyList->currentItem();
 }
 
-void MainWindow::on_selectPaperAuthor_activated(int index)
+void MainWindow::on_selectPaperAuthor_activated(int /*index*/) //NOTE
 {
 
 }
 
-void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
-{
+void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &/*arg1*/)
+{ // NOTE: unused parameter 'arg1'
     ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
     if(ui->selectPaperAuthor->findText("*NEW*") == -1)
         ui->selectPaperAuthor->addItem("*NEW*");
diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 3309702..603d770 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -54,9 +54,13 @@ private slots:
     void on_selectPaperAuthor_currentTextChanged(const QString &arg1);
 
 private:
-    void setUser(int userType);
+    void setUser(UserType_t userType);
     void login();
     void logout();
+    
+    // NOTE: the following functions were not declare
+    //       placing in private for now
+    void noUser();
 
     Ui::MainWindow *ui;
     LoginManager loginMgr;
diff --git a/UserClient/moc_UserClientStubForServer.cpp b/UserClient/moc_UserClientStubForServer.cpp
new file mode 100644
index 0000000..3320552
--- /dev/null
+++ b/UserClient/moc_UserClientStubForServer.cpp
@@ -0,0 +1,93 @@
+/****************************************************************************
+** Meta object code from reading C++ file 'UserClientStubForServer.hpp'
+**
+** Created by: The Qt Meta Object Compiler version 63 (Qt 4.8.6)
+**
+** WARNING! All changes made in this file will be lost!
+*****************************************************************************/
+
+#include "UserClientStubForServer.hpp"
+#if !defined(Q_MOC_OUTPUT_REVISION)
+#error "The header file 'UserClientStubForServer.hpp' doesn't include <QObject>."
+#elif Q_MOC_OUTPUT_REVISION != 63
+#error "This file was generated using the moc from 4.8.6. It"
+#error "cannot be used with the include files from this version of Qt."
+#error "(The moc has changed too much.)"
+#endif
+
+QT_BEGIN_MOC_NAMESPACE
+static const uint qt_meta_data_UserClientStubForServer[] = {
+
+ // content:
+       6,       // revision
+       0,       // classname
+       0,    0, // classinfo
+       1,   14, // methods
+       0,    0, // properties
+       0,    0, // enums/sets
+       0,    0, // constructors
+       0,       // flags
+       0,       // signalCount
+
+ // slots: signature, parameters, type, tag, flags
+      25,   24,   24,   24, 0x0a,
+
+       0        // eod
+};
+
+static const char qt_meta_stringdata_UserClientStubForServer[] = {
+    "UserClientStubForServer\0\0readResponseData()\0"
+};
+
+void UserClientStubForServer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
+{
+    if (_c == QMetaObject::InvokeMetaMethod) {
+        Q_ASSERT(staticMetaObject.cast(_o));
+        UserClientStubForServer *_t = static_cast<UserClientStubForServer *>(_o);
+        switch (_id) {
+        case 0: _t->readResponseData(); break;
+        default: ;
+        }
+    }
+    Q_UNUSED(_a);
+}
+
+const QMetaObjectExtraData UserClientStubForServer::staticMetaObjectExtraData = {
+    0,  qt_static_metacall 
+};
+
+const QMetaObject UserClientStubForServer::staticMetaObject = {
+    { &QObject::staticMetaObject, qt_meta_stringdata_UserClientStubForServer,
+      qt_meta_data_UserClientStubForServer, &staticMetaObjectExtraData }
+};
+
+#ifdef Q_NO_DATA_RELOCATION
+const QMetaObject &UserClientStubForServer::getStaticMetaObject() { return staticMetaObject; }
+#endif //Q_NO_DATA_RELOCATION
+
+const QMetaObject *UserClientStubForServer::metaObject() const
+{
+    return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;
+}
+
+void *UserClientStubForServer::qt_metacast(const char *_clname)
+{
+    if (!_clname) return 0;
+    if (!strcmp(_clname, qt_meta_stringdata_UserClientStubForServer))
+        return static_cast<void*>(const_cast< UserClientStubForServer*>(this));
+    return QObject::qt_metacast(_clname);
+}
+
+int UserClientStubForServer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
+{
+    _id = QObject::qt_metacall(_c, _id, _a);
+    if (_id < 0)
+        return _id;
+    if (_c == QMetaObject::InvokeMetaMethod) {
+        if (_id < 1)
+            qt_static_metacall(this, _c, _id, _a);
+        _id -= 1;
+    }
+    return _id;
+}
+QT_END_MOC_NAMESPACE
diff --git a/UserClient/moc_mainwindow.cpp b/UserClient/moc_mainwindow.cpp
new file mode 100644
index 0000000..b9ff7c9
--- /dev/null
+++ b/UserClient/moc_mainwindow.cpp
@@ -0,0 +1,138 @@
+/****************************************************************************
+** Meta object code from reading C++ file 'mainwindow.hpp'
+**
+** Created by: The Qt Meta Object Compiler version 63 (Qt 4.8.6)
+**
+** WARNING! All changes made in this file will be lost!
+*****************************************************************************/
+
+#include "mainwindow.hpp"
+#if !defined(Q_MOC_OUTPUT_REVISION)
+#error "The header file 'mainwindow.hpp' doesn't include <QObject>."
+#elif Q_MOC_OUTPUT_REVISION != 63
+#error "This file was generated using the moc from 4.8.6. It"
+#error "cannot be used with the include files from this version of Qt."
+#error "(The moc has changed too much.)"
+#endif
+
+QT_BEGIN_MOC_NAMESPACE
+static const uint qt_meta_data_MainWindow[] = {
+
+ // content:
+       6,       // revision
+       0,       // classname
+       0,    0, // classinfo
+      18,   14, // methods
+       0,    0, // properties
+       0,    0, // enums/sets
+       0,    0, // constructors
+       0,       // flags
+       0,       // signalCount
+
+ // slots: signature, parameters, type, tag, flags
+      12,   11,   11,   11, 0x08,
+      31,   11,   11,   11, 0x08,
+      49,   11,   11,   11, 0x08,
+      69,   11,   11,   11, 0x08,
+      91,   11,   11,   11, 0x08,
+     124,   11,   11,   11, 0x08,
+     151,   11,   11,   11, 0x08,
+     170,   11,   11,   11, 0x08,
+     191,   11,   11,   11, 0x08,
+     215,   11,   11,   11, 0x08,
+     239,   11,   11,   11, 0x08,
+     262,   11,   11,   11, 0x08,
+     285,   11,   11,   11, 0x08,
+     310,   11,   11,   11, 0x08,
+     335,   11,   11,   11, 0x08,
+     359,   11,   11,   11, 0x08,
+     389,  383,   11,   11, 0x08,
+     430,  425,   11,   11, 0x08,
+
+       0        // eod
+};
+
+static const char qt_meta_stringdata_MainWindow[] = {
+    "MainWindow\0\0on_login_clicked()\0"
+    "on_quit_clicked()\0on_logout_clicked()\0"
+    "on_logout_2_clicked()\0"
+    "on_passwordLogin_returnPressed()\0"
+    "on_createAccount_clicked()\0"
+    "on_apply_clicked()\0on_apply_2_clicked()\0"
+    "on_addConfKey_clicked()\0on_rmvConfKey_clicked()\0"
+    "on_addAuthor_clicked()\0on_rmvAuthor_clicked()\0"
+    "on_addPaperKey_clicked()\0"
+    "on_rmvPaperKey_clicked()\0"
+    "on_addAuthKey_clicked()\0on_rmvAuthKey_clicked()\0"
+    "index\0on_selectPaperAuthor_activated(int)\0"
+    "arg1\0on_selectPaperAuthor_currentTextChanged(QString)\0"
+};
+
+void MainWindow::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
+{
+    if (_c == QMetaObject::InvokeMetaMethod) {
+        Q_ASSERT(staticMetaObject.cast(_o));
+        MainWindow *_t = static_cast<MainWindow *>(_o);
+        switch (_id) {
+        case 0: _t->on_login_clicked(); break;
+        case 1: _t->on_quit_clicked(); break;
+        case 2: _t->on_logout_clicked(); break;
+        case 3: _t->on_logout_2_clicked(); break;
+        case 4: _t->on_passwordLogin_returnPressed(); break;
+        case 5: _t->on_createAccount_clicked(); break;
+        case 6: _t->on_apply_clicked(); break;
+        case 7: _t->on_apply_2_clicked(); break;
+        case 8: _t->on_addConfKey_clicked(); break;
+        case 9: _t->on_rmvConfKey_clicked(); break;
+        case 10: _t->on_addAuthor_clicked(); break;
+        case 11: _t->on_rmvAuthor_clicked(); break;
+        case 12: _t->on_addPaperKey_clicked(); break;
+        case 13: _t->on_rmvPaperKey_clicked(); break;
+        case 14: _t->on_addAuthKey_clicked(); break;
+        case 15: _t->on_rmvAuthKey_clicked(); break;
+        case 16: _t->on_selectPaperAuthor_activated((*reinterpret_cast< int(*)>(_a[1]))); break;
+        case 17: _t->on_selectPaperAuthor_currentTextChanged((*reinterpret_cast< const QString(*)>(_a[1]))); break;
+        default: ;
+        }
+    }
+}
+
+const QMetaObjectExtraData MainWindow::staticMetaObjectExtraData = {
+    0,  qt_static_metacall 
+};
+
+const QMetaObject MainWindow::staticMetaObject = {
+    { &QMainWindow::staticMetaObject, qt_meta_stringdata_MainWindow,
+      qt_meta_data_MainWindow, &staticMetaObjectExtraData }
+};
+
+#ifdef Q_NO_DATA_RELOCATION
+const QMetaObject &MainWindow::getStaticMetaObject() { return staticMetaObject; }
+#endif //Q_NO_DATA_RELOCATION
+
+const QMetaObject *MainWindow::metaObject() const
+{
+    return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;
+}
+
+void *MainWindow::qt_metacast(const char *_clname)
+{
+    if (!_clname) return 0;
+    if (!strcmp(_clname, qt_meta_stringdata_MainWindow))
+        return static_cast<void*>(const_cast< MainWindow*>(this));
+    return QMainWindow::qt_metacast(_clname);
+}
+
+int MainWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
+{
+    _id = QMainWindow::qt_metacall(_c, _id, _a);
+    if (_id < 0)
+        return _id;
+    if (_c == QMetaObject::InvokeMetaMethod) {
+        if (_id < 18)
+            qt_static_metacall(this, _c, _id, _a);
+        _id -= 18;
+    }
+    return _id;
+}
+QT_END_MOC_NAMESPACE
diff --git a/UserClient/ui_mainwindow.h b/UserClient/ui_mainwindow.h
new file mode 100644
index 0000000..c7ea865
--- /dev/null
+++ b/UserClient/ui_mainwindow.h
@@ -0,0 +1,1682 @@
+/********************************************************************************
+** Form generated from reading UI file 'mainwindow.ui'
+**
+** Created by: Qt User Interface Compiler version 4.8.6
+**
+** WARNING! All changes made in this file will be lost when recompiling UI file!
+********************************************************************************/
+
+#ifndef UI_MAINWINDOW_H
+#define UI_MAINWINDOW_H
+
+#include <QtCore/QVariant>
+#include <QtGui/QAction>
+#include <QtGui/QApplication>
+#include <QtGui/QButtonGroup>
+#include <QtGui/QComboBox>
+#include <QtGui/QFormLayout>
+#include <QtGui/QGridLayout>
+#include <QtGui/QHBoxLayout>
+#include <QtGui/QHeaderView>
+#include <QtGui/QLabel>
+#include <QtGui/QLineEdit>
+#include <QtGui/QListWidget>
+#include <QtGui/QMainWindow>
+#include <QtGui/QPushButton>
+#include <QtGui/QSpacerItem>
+#include <QtGui/QSpinBox>
+#include <QtGui/QTabWidget>
+#include <QtGui/QTableWidget>
+#include <QtGui/QTextBrowser>
+#include <QtGui/QTextEdit>
+#include <QtGui/QVBoxLayout>
+#include <QtGui/QWidget>
+
+QT_BEGIN_NAMESPACE
+
+class Ui_MainWindow
+{
+public:
+    QWidget *centralWidget;
+    QWidget *centralwidget;
+    QTabWidget *tabWidget;
+    QWidget *loginTab;
+    QWidget *verticalLayoutWidget_2;
+    QVBoxLayout *verticalLayout_2;
+    QLabel *label_7;
+    QHBoxLayout *horizontalLayout_7;
+    QSpacerItem *horizontalSpacer_4;
+    QLabel *label_9;
+    QLineEdit *usernameLogin;
+    QSpacerItem *horizontalSpacer_5;
+    QHBoxLayout *horizontalLayout;
+    QSpacerItem *horizontalSpacer_2;
+    QLabel *label_8;
+    QLineEdit *passwordLogin;
+    QSpacerItem *horizontalSpacer_3;
+    QHBoxLayout *horizontalLayout_10;
+    QPushButton *login;
+    QPushButton *createAccount;
+    QPushButton *quit;
+    QWidget *infoTabAuthor;
+    QWidget *verticalLayoutWidget;
+    QVBoxLayout *verticalLayout;
+    QHBoxLayout *horizontalLayout_2;
+    QLabel *username;
+    QLabel *userid;
+    QLineEdit *name;
+    QLineEdit *email;
+    QLineEdit *organisation;
+    QLineEdit *phone;
+    QLabel *label;
+    QHBoxLayout *horizontalLayout_21;
+    QListWidget *authKeyList;
+    QVBoxLayout *verticalLayout_15;
+    QLineEdit *authKeyEntry;
+    QPushButton *addAuthKey;
+    QPushButton *rmvAuthKey;
+    QSpacerItem *verticalSpacer_8;
+    QPushButton *apply;
+    QPushButton *logout;
+    QWidget *verticalLayoutWidget_14;
+    QVBoxLayout *verticalLayout_16;
+    QLabel *conferenceName;
+    QLabel *label_2;
+    QLabel *label_3;
+    QHBoxLayout *horizontalLayout_22;
+    QLabel *label_26;
+    QListWidget *confKeyListNoEdit;
+    QTextBrowser *textBrowser_2;
+    QWidget *infoTabChair;
+    QWidget *verticalLayoutWidget_3;
+    QVBoxLayout *verticalLayout_3;
+    QHBoxLayout *horizontalLayout_3;
+    QLabel *username_2;
+    QLabel *userid_2;
+    QLineEdit *name_2;
+    QLineEdit *email_2;
+    QLineEdit *organisation_2;
+    QLineEdit *phone_2;
+    QSpacerItem *verticalSpacer_9;
+    QPushButton *apply_2;
+    QPushButton *logout_2;
+    QWidget *verticalLayoutWidget_4;
+    QVBoxLayout *verticalLayout_4;
+    QLineEdit *lineEdit;
+    QLineEdit *lineEdit_2;
+    QLineEdit *lineEdit_3;
+    QTextEdit *textEdit_2;
+    QLabel *label_25;
+    QHBoxLayout *horizontalLayout_20;
+    QListWidget *confKeyList;
+    QVBoxLayout *verticalLayout_11;
+    QLineEdit *confKeyEntry;
+    QPushButton *addConfKey;
+    QPushButton *rmvConfKey;
+    QWidget *authorTab;
+    QWidget *gridLayoutWidget_3;
+    QGridLayout *gridLayout_3;
+    QVBoxLayout *verticalLayout_8;
+    QTableWidget *authorsTable;
+    QComboBox *selectMainKey;
+    QComboBox *selectPaperAuthor;
+    QTextEdit *paperAbstract;
+    QVBoxLayout *verticalLayout_14;
+    QHBoxLayout *horizontalLayout_4;
+    QLineEdit *paperKeyEntry;
+    QPushButton *addPaperKey;
+    QPushButton *rmvPaperKey;
+    QListWidget *paperKeyListAuth;
+    QVBoxLayout *verticalLayout_10;
+    QPushButton *addAuthor;
+    QPushButton *rmvAuthor;
+    QLineEdit *filename;
+    QPushButton *selectFile;
+    QPushButton *submit;
+    QWidget *reviewerTab;
+    QWidget *gridLayoutWidget_4;
+    QGridLayout *gridLayout_4;
+    QLabel *discussionLabel_2;
+    QPushButton *submitPosts;
+    QTextEdit *postBody;
+    QTextBrowser *discussionBody_2;
+    QWidget *horizontalLayoutWidget;
+    QHBoxLayout *horizontalLayout_5;
+    QSpacerItem *horizontalSpacer;
+    QLabel *bidlabel;
+    QComboBox *selectBid;
+    QPushButton *submitBid;
+    QWidget *gridLayoutWidget_5;
+    QGridLayout *gridLayout_5;
+    QLabel *paperName_3;
+    QLabel *mainKey_3;
+    QLabel *fileName_2;
+    QComboBox *selectPaperReviewer;
+    QPushButton *download_2;
+    QListWidget *paperKeyListRev;
+    QWidget *papersTab;
+    QTableWidget *tableWidget;
+    QWidget *gridLayoutWidget_6;
+    QGridLayout *gridLayout_6;
+    QLabel *paperName_4;
+    QLabel *fileName_3;
+    QPushButton *download_3;
+    QLabel *mainKey_4;
+    QTableWidget *authorsTableMng;
+    QListWidget *paperKeyListMng;
+    QWidget *verticalLayoutWidget_11;
+    QVBoxLayout *verticalLayout_12;
+    QGridLayout *gridLayout_7;
+    QLabel *discussionLabel_3;
+    QTextBrowser *discussionBody_3;
+    QVBoxLayout *verticalLayout_5;
+    QTableWidget *reviewersTable;
+    QHBoxLayout *horizontalLayout_9;
+    QLabel *label_5;
+    QLineEdit *toReview_2;
+    QPushButton *addAsReviewer_2;
+    QLabel *label_6;
+    QVBoxLayout *verticalLayout_13;
+    QLabel *label_41;
+    QTextBrowser *commentsBrowser;
+    QFormLayout *formLayout;
+    QLabel *label_24;
+    QLabel *overallScore;
+    QLabel *label_27;
+    QLabel *confidenceScore;
+    QLabel *label_29;
+    QLabel *relevanceScore;
+    QLabel *label_31;
+    QLabel *originalityScore;
+    QLabel *label_33;
+    QLabel *significanceScore;
+    QLabel *label_35;
+    QLabel *presentationScore;
+    QLabel *label_37;
+    QLabel *techqualScore;
+    QLabel *label_39;
+    QLabel *evaluationScore;
+    QPushButton *acceptPaper;
+    QPushButton *rejectPaper;
+    QWidget *usersTab;
+    QTableWidget *tableWidget_2;
+    QWidget *verticalLayoutWidget_6;
+    QVBoxLayout *verticalLayout_6;
+    QHBoxLayout *horizontalLayout_8;
+    QLabel *username_5;
+    QLabel *userid_5;
+    QLabel *name_5;
+    QLabel *email_5;
+    QLabel *organisation_5;
+    QLabel *phone_5;
+    QLabel *label_10;
+    QListWidget *userKeyList;
+    QWidget *horizontalLayoutWidget_2;
+    QHBoxLayout *horizontalLayout_6;
+    QLabel *label_4;
+    QLineEdit *toReview;
+    QPushButton *addAsReviewer;
+    QWidget *verticalLayoutWidget_15;
+    QVBoxLayout *verticalLayout_17;
+    QHBoxLayout *horizontalLayout_23;
+    QLabel *label_30;
+    QLabel *label_28;
+    QHBoxLayout *horizontalLayout_24;
+    QListWidget *authoredPapers;
+    QListWidget *assignedPapers;
+    QWidget *reviewTab;
+    QWidget *verticalLayoutWidget_7;
+    QVBoxLayout *verticalLayout_7;
+    QHBoxLayout *horizontalLayout_11;
+    QLabel *label_11;
+    QSpinBox *overall;
+    QLabel *label_12;
+    QSpinBox *confidence;
+    QHBoxLayout *horizontalLayout_12;
+    QLabel *label_13;
+    QSpinBox *relevance;
+    QLabel *label_14;
+    QSpinBox *originality;
+    QHBoxLayout *horizontalLayout_13;
+    QLabel *label_15;
+    QSpinBox *significance;
+    QLabel *label_16;
+    QSpinBox *spinBox_8;
+    QHBoxLayout *horizontalLayout_14;
+    QLabel *label_17;
+    QSpinBox *techQuality;
+    QLabel *label_18;
+    QSpinBox *evaluation;
+    QHBoxLayout *horizontalLayout_15;
+    QLabel *label_19;
+    QLabel *label_20;
+    QHBoxLayout *horizontalLayout_16;
+    QTextEdit *commentsStrengths;
+    QTextEdit *commentsWeaknesses;
+    QHBoxLayout *horizontalLayout_17;
+    QLabel *label_21;
+    QLabel *label_22;
+    QHBoxLayout *horizontalLayout_18;
+    QTextEdit *commentsShortPaper;
+    QTextEdit *commentsBestAward;
+    QHBoxLayout *horizontalLayout_19;
+    QLabel *label_23;
+    QTextEdit *commentsSuggestions;
+    QWidget *gridLayoutWidget;
+    QGridLayout *gridLayout;
+    QLabel *mainKey;
+    QLabel *fileName;
+    QTextBrowser *textBrowser;
+    QPushButton *download;
+    QLabel *paperName;
+    QComboBox *selectPaperReview;
+
+    void setupUi(QMainWindow *MainWindow)
+    {
+        if (MainWindow->objectName().isEmpty())
+            MainWindow->setObjectName(QString::fromUtf8("MainWindow"));
+        MainWindow->resize(790, 606);
+        centralWidget = new QWidget(MainWindow);
+        centralWidget->setObjectName(QString::fromUtf8("centralWidget"));
+        centralwidget = new QWidget(centralWidget);
+        centralwidget->setObjectName(QString::fromUtf8("centralwidget"));
+        centralwidget->setGeometry(QRect(0, 0, 801, 601));
+        tabWidget = new QTabWidget(centralwidget);
+        tabWidget->setObjectName(QString::fromUtf8("tabWidget"));
+        tabWidget->setGeometry(QRect(0, 0, 871, 651));
+        loginTab = new QWidget();
+        loginTab->setObjectName(QString::fromUtf8("loginTab"));
+        verticalLayoutWidget_2 = new QWidget(loginTab);
+        verticalLayoutWidget_2->setObjectName(QString::fromUtf8("verticalLayoutWidget_2"));
+        verticalLayoutWidget_2->setGeometry(QRect(210, 150, 353, 211));
+        verticalLayout_2 = new QVBoxLayout(verticalLayoutWidget_2);
+        verticalLayout_2->setSpacing(6);
+        verticalLayout_2->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_2->setObjectName(QString::fromUtf8("verticalLayout_2"));
+        verticalLayout_2->setContentsMargins(0, 0, 0, 0);
+        label_7 = new QLabel(verticalLayoutWidget_2);
+        label_7->setObjectName(QString::fromUtf8("label_7"));
+        QFont font;
+        font.setPointSize(18);
+        label_7->setFont(font);
+
+        verticalLayout_2->addWidget(label_7);
+
+        horizontalLayout_7 = new QHBoxLayout();
+        horizontalLayout_7->setSpacing(6);
+        horizontalLayout_7->setObjectName(QString::fromUtf8("horizontalLayout_7"));
+        horizontalSpacer_4 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
+
+        horizontalLayout_7->addItem(horizontalSpacer_4);
+
+        label_9 = new QLabel(verticalLayoutWidget_2);
+        label_9->setObjectName(QString::fromUtf8("label_9"));
+
+        horizontalLayout_7->addWidget(label_9);
+
+        usernameLogin = new QLineEdit(verticalLayoutWidget_2);
+        usernameLogin->setObjectName(QString::fromUtf8("usernameLogin"));
+
+        horizontalLayout_7->addWidget(usernameLogin);
+
+        horizontalSpacer_5 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
+
+        horizontalLayout_7->addItem(horizontalSpacer_5);
+
+
+        verticalLayout_2->addLayout(horizontalLayout_7);
+
+        horizontalLayout = new QHBoxLayout();
+        horizontalLayout->setSpacing(6);
+        horizontalLayout->setObjectName(QString::fromUtf8("horizontalLayout"));
+        horizontalSpacer_2 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
+
+        horizontalLayout->addItem(horizontalSpacer_2);
+
+        label_8 = new QLabel(verticalLayoutWidget_2);
+        label_8->setObjectName(QString::fromUtf8("label_8"));
+
+        horizontalLayout->addWidget(label_8);
+
+        passwordLogin = new QLineEdit(verticalLayoutWidget_2);
+        passwordLogin->setObjectName(QString::fromUtf8("passwordLogin"));
+
+        horizontalLayout->addWidget(passwordLogin);
+
+        horizontalSpacer_3 = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);
+
+        horizontalLayout->addItem(horizontalSpacer_3);
+
+
+        verticalLayout_2->addLayout(horizontalLayout);
+
+        horizontalLayout_10 = new QHBoxLayout();
+        horizontalLayout_10->setSpacing(6);
+        horizontalLayout_10->setObjectName(QString::fromUtf8("horizontalLayout_10"));
+        login = new QPushButton(verticalLayoutWidget_2);
+        login->setObjectName(QString::fromUtf8("login"));
+
+        horizontalLayout_10->addWidget(login);
+
+        createAccount = new QPushButton(verticalLayoutWidget_2);
+        createAccount->setObjectName(QString::fromUtf8("createAccount"));
+
+        horizontalLayout_10->addWidget(createAccount);
+
+
+        verticalLayout_2->addLayout(horizontalLayout_10);
+
+        quit = new QPushButton(verticalLayoutWidget_2);
+        quit->setObjectName(QString::fromUtf8("quit"));
+
+        verticalLayout_2->addWidget(quit);
+
+        tabWidget->addTab(loginTab, QString());
+        infoTabAuthor = new QWidget();
+        infoTabAuthor->setObjectName(QString::fromUtf8("infoTabAuthor"));
+        verticalLayoutWidget = new QWidget(infoTabAuthor);
+        verticalLayoutWidget->setObjectName(QString::fromUtf8("verticalLayoutWidget"));
+        verticalLayoutWidget->setGeometry(QRect(20, 10, 233, 551));
+        verticalLayout = new QVBoxLayout(verticalLayoutWidget);
+        verticalLayout->setSpacing(6);
+        verticalLayout->setContentsMargins(11, 11, 11, 11);
+        verticalLayout->setObjectName(QString::fromUtf8("verticalLayout"));
+        verticalLayout->setContentsMargins(0, 0, 0, 0);
+        horizontalLayout_2 = new QHBoxLayout();
+        horizontalLayout_2->setSpacing(6);
+        horizontalLayout_2->setObjectName(QString::fromUtf8("horizontalLayout_2"));
+        username = new QLabel(verticalLayoutWidget);
+        username->setObjectName(QString::fromUtf8("username"));
+
+        horizontalLayout_2->addWidget(username);
+
+        userid = new QLabel(verticalLayoutWidget);
+        userid->setObjectName(QString::fromUtf8("userid"));
+
+        horizontalLayout_2->addWidget(userid);
+
+
+        verticalLayout->addLayout(horizontalLayout_2);
+
+        name = new QLineEdit(verticalLayoutWidget);
+        name->setObjectName(QString::fromUtf8("name"));
+
+        verticalLayout->addWidget(name);
+
+        email = new QLineEdit(verticalLayoutWidget);
+        email->setObjectName(QString::fromUtf8("email"));
+
+        verticalLayout->addWidget(email);
+
+        organisation = new QLineEdit(verticalLayoutWidget);
+        organisation->setObjectName(QString::fromUtf8("organisation"));
+
+        verticalLayout->addWidget(organisation);
+
+        phone = new QLineEdit(verticalLayoutWidget);
+        phone->setObjectName(QString::fromUtf8("phone"));
+
+        verticalLayout->addWidget(phone);
+
+        label = new QLabel(verticalLayoutWidget);
+        label->setObjectName(QString::fromUtf8("label"));
+
+        verticalLayout->addWidget(label);
+
+        horizontalLayout_21 = new QHBoxLayout();
+        horizontalLayout_21->setSpacing(6);
+        horizontalLayout_21->setObjectName(QString::fromUtf8("horizontalLayout_21"));
+        authKeyList = new QListWidget(verticalLayoutWidget);
+        authKeyList->setObjectName(QString::fromUtf8("authKeyList"));
+
+        horizontalLayout_21->addWidget(authKeyList);
+
+        verticalLayout_15 = new QVBoxLayout();
+        verticalLayout_15->setSpacing(6);
+        verticalLayout_15->setObjectName(QString::fromUtf8("verticalLayout_15"));
+        authKeyEntry = new QLineEdit(verticalLayoutWidget);
+        authKeyEntry->setObjectName(QString::fromUtf8("authKeyEntry"));
+
+        verticalLayout_15->addWidget(authKeyEntry);
+
+        addAuthKey = new QPushButton(verticalLayoutWidget);
+        addAuthKey->setObjectName(QString::fromUtf8("addAuthKey"));
+
+        verticalLayout_15->addWidget(addAuthKey);
+
+        rmvAuthKey = new QPushButton(verticalLayoutWidget);
+        rmvAuthKey->setObjectName(QString::fromUtf8("rmvAuthKey"));
+
+        verticalLayout_15->addWidget(rmvAuthKey);
+
+
+        horizontalLayout_21->addLayout(verticalLayout_15);
+
+
+        verticalLayout->addLayout(horizontalLayout_21);
+
+        verticalSpacer_8 = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding);
+
+        verticalLayout->addItem(verticalSpacer_8);
+
+        apply = new QPushButton(verticalLayoutWidget);
+        apply->setObjectName(QString::fromUtf8("apply"));
+
+        verticalLayout->addWidget(apply);
+
+        logout = new QPushButton(verticalLayoutWidget);
+        logout->setObjectName(QString::fromUtf8("logout"));
+
+        verticalLayout->addWidget(logout);
+
+        verticalLayoutWidget_14 = new QWidget(infoTabAuthor);
+        verticalLayoutWidget_14->setObjectName(QString::fromUtf8("verticalLayoutWidget_14"));
+        verticalLayoutWidget_14->setGeometry(QRect(270, 10, 501, 551));
+        verticalLayout_16 = new QVBoxLayout(verticalLayoutWidget_14);
+        verticalLayout_16->setSpacing(6);
+        verticalLayout_16->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_16->setObjectName(QString::fromUtf8("verticalLayout_16"));
+        verticalLayout_16->setContentsMargins(0, 0, 0, 0);
+        conferenceName = new QLabel(verticalLayoutWidget_14);
+        conferenceName->setObjectName(QString::fromUtf8("conferenceName"));
+        QFont font1;
+        font1.setPointSize(16);
+        font1.setBold(true);
+        font1.setItalic(true);
+        font1.setWeight(75);
+        conferenceName->setFont(font1);
+        conferenceName->setScaledContents(false);
+
+        verticalLayout_16->addWidget(conferenceName);
+
+        label_2 = new QLabel(verticalLayoutWidget_14);
+        label_2->setObjectName(QString::fromUtf8("label_2"));
+
+        verticalLayout_16->addWidget(label_2);
+
+        label_3 = new QLabel(verticalLayoutWidget_14);
+        label_3->setObjectName(QString::fromUtf8("label_3"));
+
+        verticalLayout_16->addWidget(label_3);
+
+        horizontalLayout_22 = new QHBoxLayout();
+        horizontalLayout_22->setSpacing(6);
+        horizontalLayout_22->setObjectName(QString::fromUtf8("horizontalLayout_22"));
+        label_26 = new QLabel(verticalLayoutWidget_14);
+        label_26->setObjectName(QString::fromUtf8("label_26"));
+
+        horizontalLayout_22->addWidget(label_26);
+
+        confKeyListNoEdit = new QListWidget(verticalLayoutWidget_14);
+        confKeyListNoEdit->setObjectName(QString::fromUtf8("confKeyListNoEdit"));
+
+        horizontalLayout_22->addWidget(confKeyListNoEdit);
+
+
+        verticalLayout_16->addLayout(horizontalLayout_22);
+
+        textBrowser_2 = new QTextBrowser(verticalLayoutWidget_14);
+        textBrowser_2->setObjectName(QString::fromUtf8("textBrowser_2"));
+
+        verticalLayout_16->addWidget(textBrowser_2);
+
+        tabWidget->addTab(infoTabAuthor, QString());
+        infoTabChair = new QWidget();
+        infoTabChair->setObjectName(QString::fromUtf8("infoTabChair"));
+        verticalLayoutWidget_3 = new QWidget(infoTabChair);
+        verticalLayoutWidget_3->setObjectName(QString::fromUtf8("verticalLayoutWidget_3"));
+        verticalLayoutWidget_3->setGeometry(QRect(20, 10, 233, 551));
+        verticalLayout_3 = new QVBoxLayout(verticalLayoutWidget_3);
+        verticalLayout_3->setSpacing(6);
+        verticalLayout_3->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_3->setObjectName(QString::fromUtf8("verticalLayout_3"));
+        verticalLayout_3->setContentsMargins(0, 0, 0, 0);
+        horizontalLayout_3 = new QHBoxLayout();
+        horizontalLayout_3->setSpacing(6);
+        horizontalLayout_3->setObjectName(QString::fromUtf8("horizontalLayout_3"));
+        username_2 = new QLabel(verticalLayoutWidget_3);
+        username_2->setObjectName(QString::fromUtf8("username_2"));
+
+        horizontalLayout_3->addWidget(username_2);
+
+        userid_2 = new QLabel(verticalLayoutWidget_3);
+        userid_2->setObjectName(QString::fromUtf8("userid_2"));
+
+        horizontalLayout_3->addWidget(userid_2);
+
+
+        verticalLayout_3->addLayout(horizontalLayout_3);
+
+        name_2 = new QLineEdit(verticalLayoutWidget_3);
+        name_2->setObjectName(QString::fromUtf8("name_2"));
+
+        verticalLayout_3->addWidget(name_2);
+
+        email_2 = new QLineEdit(verticalLayoutWidget_3);
+        email_2->setObjectName(QString::fromUtf8("email_2"));
+
+        verticalLayout_3->addWidget(email_2);
+
+        organisation_2 = new QLineEdit(verticalLayoutWidget_3);
+        organisation_2->setObjectName(QString::fromUtf8("organisation_2"));
+
+        verticalLayout_3->addWidget(organisation_2);
+
+        phone_2 = new QLineEdit(verticalLayoutWidget_3);
+        phone_2->setObjectName(QString::fromUtf8("phone_2"));
+
+        verticalLayout_3->addWidget(phone_2);
+
+        verticalSpacer_9 = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding);
+
+        verticalLayout_3->addItem(verticalSpacer_9);
+
+        apply_2 = new QPushButton(verticalLayoutWidget_3);
+        apply_2->setObjectName(QString::fromUtf8("apply_2"));
+
+        verticalLayout_3->addWidget(apply_2);
+
+        logout_2 = new QPushButton(verticalLayoutWidget_3);
+        logout_2->setObjectName(QString::fromUtf8("logout_2"));
+
+        verticalLayout_3->addWidget(logout_2);
+
+        verticalLayoutWidget_4 = new QWidget(infoTabChair);
+        verticalLayoutWidget_4->setObjectName(QString::fromUtf8("verticalLayoutWidget_4"));
+        verticalLayoutWidget_4->setGeometry(QRect(280, 10, 481, 551));
+        verticalLayout_4 = new QVBoxLayout(verticalLayoutWidget_4);
+        verticalLayout_4->setSpacing(6);
+        verticalLayout_4->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_4->setObjectName(QString::fromUtf8("verticalLayout_4"));
+        verticalLayout_4->setContentsMargins(0, 0, 0, 0);
+        lineEdit = new QLineEdit(verticalLayoutWidget_4);
+        lineEdit->setObjectName(QString::fromUtf8("lineEdit"));
+
+        verticalLayout_4->addWidget(lineEdit);
+
+        lineEdit_2 = new QLineEdit(verticalLayoutWidget_4);
+        lineEdit_2->setObjectName(QString::fromUtf8("lineEdit_2"));
+
+        verticalLayout_4->addWidget(lineEdit_2);
+
+        lineEdit_3 = new QLineEdit(verticalLayoutWidget_4);
+        lineEdit_3->setObjectName(QString::fromUtf8("lineEdit_3"));
+
+        verticalLayout_4->addWidget(lineEdit_3);
+
+        textEdit_2 = new QTextEdit(verticalLayoutWidget_4);
+        textEdit_2->setObjectName(QString::fromUtf8("textEdit_2"));
+
+        verticalLayout_4->addWidget(textEdit_2);
+
+        label_25 = new QLabel(verticalLayoutWidget_4);
+        label_25->setObjectName(QString::fromUtf8("label_25"));
+
+        verticalLayout_4->addWidget(label_25);
+
+        horizontalLayout_20 = new QHBoxLayout();
+        horizontalLayout_20->setSpacing(6);
+        horizontalLayout_20->setObjectName(QString::fromUtf8("horizontalLayout_20"));
+        confKeyList = new QListWidget(verticalLayoutWidget_4);
+        confKeyList->setObjectName(QString::fromUtf8("confKeyList"));
+
+        horizontalLayout_20->addWidget(confKeyList);
+
+        verticalLayout_11 = new QVBoxLayout();
+        verticalLayout_11->setSpacing(6);
+        verticalLayout_11->setObjectName(QString::fromUtf8("verticalLayout_11"));
+        confKeyEntry = new QLineEdit(verticalLayoutWidget_4);
+        confKeyEntry->setObjectName(QString::fromUtf8("confKeyEntry"));
+
+        verticalLayout_11->addWidget(confKeyEntry);
+
+        addConfKey = new QPushButton(verticalLayoutWidget_4);
+        addConfKey->setObjectName(QString::fromUtf8("addConfKey"));
+
+        verticalLayout_11->addWidget(addConfKey);
+
+        rmvConfKey = new QPushButton(verticalLayoutWidget_4);
+        rmvConfKey->setObjectName(QString::fromUtf8("rmvConfKey"));
+
+        verticalLayout_11->addWidget(rmvConfKey);
+
+
+        horizontalLayout_20->addLayout(verticalLayout_11);
+
+
+        verticalLayout_4->addLayout(horizontalLayout_20);
+
+        tabWidget->addTab(infoTabChair, QString());
+        authorTab = new QWidget();
+        authorTab->setObjectName(QString::fromUtf8("authorTab"));
+        gridLayoutWidget_3 = new QWidget(authorTab);
+        gridLayoutWidget_3->setObjectName(QString::fromUtf8("gridLayoutWidget_3"));
+        gridLayoutWidget_3->setGeometry(QRect(20, 10, 741, 531));
+        gridLayout_3 = new QGridLayout(gridLayoutWidget_3);
+        gridLayout_3->setSpacing(6);
+        gridLayout_3->setContentsMargins(11, 11, 11, 11);
+        gridLayout_3->setObjectName(QString::fromUtf8("gridLayout_3"));
+        gridLayout_3->setContentsMargins(0, 0, 0, 0);
+        verticalLayout_8 = new QVBoxLayout();
+        verticalLayout_8->setSpacing(6);
+        verticalLayout_8->setObjectName(QString::fromUtf8("verticalLayout_8"));
+        authorsTable = new QTableWidget(gridLayoutWidget_3);
+        if (authorsTable->columnCount() < 4)
+            authorsTable->setColumnCount(4);
+        QTableWidgetItem *__qtablewidgetitem = new QTableWidgetItem();
+        authorsTable->setHorizontalHeaderItem(0, __qtablewidgetitem);
+        QTableWidgetItem *__qtablewidgetitem1 = new QTableWidgetItem();
+        authorsTable->setHorizontalHeaderItem(1, __qtablewidgetitem1);
+        QTableWidgetItem *__qtablewidgetitem2 = new QTableWidgetItem();
+        authorsTable->setHorizontalHeaderItem(2, __qtablewidgetitem2);
+        QTableWidgetItem *__qtablewidgetitem3 = new QTableWidgetItem();
+        authorsTable->setHorizontalHeaderItem(3, __qtablewidgetitem3);
+        authorsTable->setObjectName(QString::fromUtf8("authorsTable"));
+
+        verticalLayout_8->addWidget(authorsTable);
+
+
+        gridLayout_3->addLayout(verticalLayout_8, 2, 0, 1, 1);
+
+        selectMainKey = new QComboBox(gridLayoutWidget_3);
+        selectMainKey->setObjectName(QString::fromUtf8("selectMainKey"));
+
+        gridLayout_3->addWidget(selectMainKey, 1, 1, 1, 1);
+
+        selectPaperAuthor = new QComboBox(gridLayoutWidget_3);
+        selectPaperAuthor->setObjectName(QString::fromUtf8("selectPaperAuthor"));
+        selectPaperAuthor->setEditable(true);
+
+        gridLayout_3->addWidget(selectPaperAuthor, 1, 0, 1, 1);
+
+        paperAbstract = new QTextEdit(gridLayoutWidget_3);
+        paperAbstract->setObjectName(QString::fromUtf8("paperAbstract"));
+
+        gridLayout_3->addWidget(paperAbstract, 5, 1, 1, 1);
+
+        verticalLayout_14 = new QVBoxLayout();
+        verticalLayout_14->setSpacing(6);
+        verticalLayout_14->setObjectName(QString::fromUtf8("verticalLayout_14"));
+        horizontalLayout_4 = new QHBoxLayout();
+        horizontalLayout_4->setSpacing(6);
+        horizontalLayout_4->setObjectName(QString::fromUtf8("horizontalLayout_4"));
+        paperKeyEntry = new QLineEdit(gridLayoutWidget_3);
+        paperKeyEntry->setObjectName(QString::fromUtf8("paperKeyEntry"));
+
+        horizontalLayout_4->addWidget(paperKeyEntry);
+
+        addPaperKey = new QPushButton(gridLayoutWidget_3);
+        addPaperKey->setObjectName(QString::fromUtf8("addPaperKey"));
+
+        horizontalLayout_4->addWidget(addPaperKey);
+
+        rmvPaperKey = new QPushButton(gridLayoutWidget_3);
+        rmvPaperKey->setObjectName(QString::fromUtf8("rmvPaperKey"));
+
+        horizontalLayout_4->addWidget(rmvPaperKey);
+
+
+        verticalLayout_14->addLayout(horizontalLayout_4);
+
+        paperKeyListAuth = new QListWidget(gridLayoutWidget_3);
+        paperKeyListAuth->setObjectName(QString::fromUtf8("paperKeyListAuth"));
+
+        verticalLayout_14->addWidget(paperKeyListAuth);
+
+
+        gridLayout_3->addLayout(verticalLayout_14, 2, 1, 1, 1);
+
+        verticalLayout_10 = new QVBoxLayout();
+        verticalLayout_10->setSpacing(6);
+        verticalLayout_10->setObjectName(QString::fromUtf8("verticalLayout_10"));
+        addAuthor = new QPushButton(gridLayoutWidget_3);
+        addAuthor->setObjectName(QString::fromUtf8("addAuthor"));
+
+        verticalLayout_10->addWidget(addAuthor);
+
+        rmvAuthor = new QPushButton(gridLayoutWidget_3);
+        rmvAuthor->setObjectName(QString::fromUtf8("rmvAuthor"));
+
+        verticalLayout_10->addWidget(rmvAuthor);
+
+        filename = new QLineEdit(gridLayoutWidget_3);
+        filename->setObjectName(QString::fromUtf8("filename"));
+
+        verticalLayout_10->addWidget(filename);
+
+        selectFile = new QPushButton(gridLayoutWidget_3);
+        selectFile->setObjectName(QString::fromUtf8("selectFile"));
+
+        verticalLayout_10->addWidget(selectFile);
+
+        submit = new QPushButton(gridLayoutWidget_3);
+        submit->setObjectName(QString::fromUtf8("submit"));
+
+        verticalLayout_10->addWidget(submit);
+
+
+        gridLayout_3->addLayout(verticalLayout_10, 5, 0, 1, 1);
+
+        tabWidget->addTab(authorTab, QString());
+        reviewerTab = new QWidget();
+        reviewerTab->setObjectName(QString::fromUtf8("reviewerTab"));
+        gridLayoutWidget_4 = new QWidget(reviewerTab);
+        gridLayoutWidget_4->setObjectName(QString::fromUtf8("gridLayoutWidget_4"));
+        gridLayoutWidget_4->setGeometry(QRect(20, 200, 741, 351));
+        gridLayout_4 = new QGridLayout(gridLayoutWidget_4);
+        gridLayout_4->setSpacing(6);
+        gridLayout_4->setContentsMargins(11, 11, 11, 11);
+        gridLayout_4->setObjectName(QString::fromUtf8("gridLayout_4"));
+        gridLayout_4->setContentsMargins(0, 0, 0, 0);
+        discussionLabel_2 = new QLabel(gridLayoutWidget_4);
+        discussionLabel_2->setObjectName(QString::fromUtf8("discussionLabel_2"));
+
+        gridLayout_4->addWidget(discussionLabel_2, 0, 0, 1, 1);
+
+        submitPosts = new QPushButton(gridLayoutWidget_4);
+        submitPosts->setObjectName(QString::fromUtf8("submitPosts"));
+
+        gridLayout_4->addWidget(submitPosts, 2, 1, 1, 1);
+
+        postBody = new QTextEdit(gridLayoutWidget_4);
+        postBody->setObjectName(QString::fromUtf8("postBody"));
+
+        gridLayout_4->addWidget(postBody, 1, 1, 1, 1);
+
+        discussionBody_2 = new QTextBrowser(gridLayoutWidget_4);
+        discussionBody_2->setObjectName(QString::fromUtf8("discussionBody_2"));
+
+        gridLayout_4->addWidget(discussionBody_2, 1, 0, 1, 1);
+
+        horizontalLayoutWidget = new QWidget(reviewerTab);
+        horizontalLayoutWidget->setObjectName(QString::fromUtf8("horizontalLayoutWidget"));
+        horizontalLayoutWidget->setGeometry(QRect(20, 160, 741, 31));
+        horizontalLayout_5 = new QHBoxLayout(horizontalLayoutWidget);
+        horizontalLayout_5->setSpacing(6);
+        horizontalLayout_5->setContentsMargins(11, 11, 11, 11);
+        horizontalLayout_5->setObjectName(QString::fromUtf8("horizontalLayout_5"));
+        horizontalLayout_5->setContentsMargins(0, 0, 0, 0);
+        horizontalSpacer = new QSpacerItem(40, 20, QSizePolicy::Ignored, QSizePolicy::Minimum);
+
+        horizontalLayout_5->addItem(horizontalSpacer);
+
+        bidlabel = new QLabel(horizontalLayoutWidget);
+        bidlabel->setObjectName(QString::fromUtf8("bidlabel"));
+
+        horizontalLayout_5->addWidget(bidlabel);
+
+        selectBid = new QComboBox(horizontalLayoutWidget);
+        selectBid->setObjectName(QString::fromUtf8("selectBid"));
+
+        horizontalLayout_5->addWidget(selectBid);
+
+        submitBid = new QPushButton(horizontalLayoutWidget);
+        submitBid->setObjectName(QString::fromUtf8("submitBid"));
+
+        horizontalLayout_5->addWidget(submitBid);
+
+        gridLayoutWidget_5 = new QWidget(reviewerTab);
+        gridLayoutWidget_5->setObjectName(QString::fromUtf8("gridLayoutWidget_5"));
+        gridLayoutWidget_5->setGeometry(QRect(20, 10, 741, 151));
+        gridLayout_5 = new QGridLayout(gridLayoutWidget_5);
+        gridLayout_5->setSpacing(6);
+        gridLayout_5->setContentsMargins(11, 11, 11, 11);
+        gridLayout_5->setObjectName(QString::fromUtf8("gridLayout_5"));
+        gridLayout_5->setContentsMargins(0, 0, 0, 0);
+        paperName_3 = new QLabel(gridLayoutWidget_5);
+        paperName_3->setObjectName(QString::fromUtf8("paperName_3"));
+
+        gridLayout_5->addWidget(paperName_3, 0, 1, 1, 1);
+
+        mainKey_3 = new QLabel(gridLayoutWidget_5);
+        mainKey_3->setObjectName(QString::fromUtf8("mainKey_3"));
+
+        gridLayout_5->addWidget(mainKey_3, 1, 0, 1, 1);
+
+        fileName_2 = new QLabel(gridLayoutWidget_5);
+        fileName_2->setObjectName(QString::fromUtf8("fileName_2"));
+
+        gridLayout_5->addWidget(fileName_2, 2, 0, 1, 1);
+
+        selectPaperReviewer = new QComboBox(gridLayoutWidget_5);
+        selectPaperReviewer->setObjectName(QString::fromUtf8("selectPaperReviewer"));
+
+        gridLayout_5->addWidget(selectPaperReviewer, 0, 0, 1, 1);
+
+        download_2 = new QPushButton(gridLayoutWidget_5);
+        download_2->setObjectName(QString::fromUtf8("download_2"));
+
+        gridLayout_5->addWidget(download_2, 2, 1, 1, 1);
+
+        paperKeyListRev = new QListWidget(gridLayoutWidget_5);
+        paperKeyListRev->setObjectName(QString::fromUtf8("paperKeyListRev"));
+
+        gridLayout_5->addWidget(paperKeyListRev, 1, 1, 1, 1);
+
+        tabWidget->addTab(reviewerTab, QString());
+        papersTab = new QWidget();
+        papersTab->setObjectName(QString::fromUtf8("papersTab"));
+        tableWidget = new QTableWidget(papersTab);
+        if (tableWidget->columnCount() < 2)
+            tableWidget->setColumnCount(2);
+        QTableWidgetItem *__qtablewidgetitem4 = new QTableWidgetItem();
+        tableWidget->setHorizontalHeaderItem(0, __qtablewidgetitem4);
+        QTableWidgetItem *__qtablewidgetitem5 = new QTableWidgetItem();
+        __qtablewidgetitem5->setText(QString::fromUtf8("id"));
+        tableWidget->setHorizontalHeaderItem(1, __qtablewidgetitem5);
+        tableWidget->setObjectName(QString::fromUtf8("tableWidget"));
+        tableWidget->setGeometry(QRect(20, 20, 211, 531));
+        gridLayoutWidget_6 = new QWidget(papersTab);
+        gridLayoutWidget_6->setObjectName(QString::fromUtf8("gridLayoutWidget_6"));
+        gridLayoutWidget_6->setGeometry(QRect(250, 20, 511, 151));
+        gridLayout_6 = new QGridLayout(gridLayoutWidget_6);
+        gridLayout_6->setSpacing(6);
+        gridLayout_6->setContentsMargins(11, 11, 11, 11);
+        gridLayout_6->setObjectName(QString::fromUtf8("gridLayout_6"));
+        gridLayout_6->setContentsMargins(0, 0, 0, 0);
+        paperName_4 = new QLabel(gridLayoutWidget_6);
+        paperName_4->setObjectName(QString::fromUtf8("paperName_4"));
+
+        gridLayout_6->addWidget(paperName_4, 0, 0, 1, 1);
+
+        fileName_3 = new QLabel(gridLayoutWidget_6);
+        fileName_3->setObjectName(QString::fromUtf8("fileName_3"));
+
+        gridLayout_6->addWidget(fileName_3, 2, 0, 1, 1);
+
+        download_3 = new QPushButton(gridLayoutWidget_6);
+        download_3->setObjectName(QString::fromUtf8("download_3"));
+
+        gridLayout_6->addWidget(download_3, 2, 1, 1, 1);
+
+        mainKey_4 = new QLabel(gridLayoutWidget_6);
+        mainKey_4->setObjectName(QString::fromUtf8("mainKey_4"));
+
+        gridLayout_6->addWidget(mainKey_4, 0, 1, 1, 1);
+
+        authorsTableMng = new QTableWidget(gridLayoutWidget_6);
+        if (authorsTableMng->columnCount() < 4)
+            authorsTableMng->setColumnCount(4);
+        QTableWidgetItem *__qtablewidgetitem6 = new QTableWidgetItem();
+        authorsTableMng->setHorizontalHeaderItem(0, __qtablewidgetitem6);
+        QTableWidgetItem *__qtablewidgetitem7 = new QTableWidgetItem();
+        authorsTableMng->setHorizontalHeaderItem(1, __qtablewidgetitem7);
+        QTableWidgetItem *__qtablewidgetitem8 = new QTableWidgetItem();
+        authorsTableMng->setHorizontalHeaderItem(2, __qtablewidgetitem8);
+        QTableWidgetItem *__qtablewidgetitem9 = new QTableWidgetItem();
+        authorsTableMng->setHorizontalHeaderItem(3, __qtablewidgetitem9);
+        authorsTableMng->setObjectName(QString::fromUtf8("authorsTableMng"));
+
+        gridLayout_6->addWidget(authorsTableMng, 1, 0, 1, 1);
+
+        paperKeyListMng = new QListWidget(gridLayoutWidget_6);
+        paperKeyListMng->setObjectName(QString::fromUtf8("paperKeyListMng"));
+
+        gridLayout_6->addWidget(paperKeyListMng, 1, 1, 1, 1);
+
+        verticalLayoutWidget_11 = new QWidget(papersTab);
+        verticalLayoutWidget_11->setObjectName(QString::fromUtf8("verticalLayoutWidget_11"));
+        verticalLayoutWidget_11->setGeometry(QRect(250, 190, 511, 361));
+        verticalLayout_12 = new QVBoxLayout(verticalLayoutWidget_11);
+        verticalLayout_12->setSpacing(6);
+        verticalLayout_12->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_12->setObjectName(QString::fromUtf8("verticalLayout_12"));
+        verticalLayout_12->setContentsMargins(0, 0, 0, 0);
+        gridLayout_7 = new QGridLayout();
+        gridLayout_7->setSpacing(6);
+        gridLayout_7->setObjectName(QString::fromUtf8("gridLayout_7"));
+        discussionLabel_3 = new QLabel(verticalLayoutWidget_11);
+        discussionLabel_3->setObjectName(QString::fromUtf8("discussionLabel_3"));
+
+        gridLayout_7->addWidget(discussionLabel_3, 0, 0, 1, 1);
+
+        discussionBody_3 = new QTextBrowser(verticalLayoutWidget_11);
+        discussionBody_3->setObjectName(QString::fromUtf8("discussionBody_3"));
+
+        gridLayout_7->addWidget(discussionBody_3, 1, 0, 1, 1);
+
+        verticalLayout_5 = new QVBoxLayout();
+        verticalLayout_5->setSpacing(6);
+        verticalLayout_5->setObjectName(QString::fromUtf8("verticalLayout_5"));
+        reviewersTable = new QTableWidget(verticalLayoutWidget_11);
+        if (reviewersTable->columnCount() < 4)
+            reviewersTable->setColumnCount(4);
+        QTableWidgetItem *__qtablewidgetitem10 = new QTableWidgetItem();
+        reviewersTable->setHorizontalHeaderItem(0, __qtablewidgetitem10);
+        QTableWidgetItem *__qtablewidgetitem11 = new QTableWidgetItem();
+        reviewersTable->setHorizontalHeaderItem(1, __qtablewidgetitem11);
+        QTableWidgetItem *__qtablewidgetitem12 = new QTableWidgetItem();
+        reviewersTable->setHorizontalHeaderItem(2, __qtablewidgetitem12);
+        QTableWidgetItem *__qtablewidgetitem13 = new QTableWidgetItem();
+        reviewersTable->setHorizontalHeaderItem(3, __qtablewidgetitem13);
+        reviewersTable->setObjectName(QString::fromUtf8("reviewersTable"));
+
+        verticalLayout_5->addWidget(reviewersTable);
+
+        horizontalLayout_9 = new QHBoxLayout();
+        horizontalLayout_9->setSpacing(6);
+        horizontalLayout_9->setObjectName(QString::fromUtf8("horizontalLayout_9"));
+        label_5 = new QLabel(verticalLayoutWidget_11);
+        label_5->setObjectName(QString::fromUtf8("label_5"));
+
+        horizontalLayout_9->addWidget(label_5);
+
+        toReview_2 = new QLineEdit(verticalLayoutWidget_11);
+        toReview_2->setObjectName(QString::fromUtf8("toReview_2"));
+
+        horizontalLayout_9->addWidget(toReview_2);
+
+        addAsReviewer_2 = new QPushButton(verticalLayoutWidget_11);
+        addAsReviewer_2->setObjectName(QString::fromUtf8("addAsReviewer_2"));
+
+        horizontalLayout_9->addWidget(addAsReviewer_2);
+
+
+        verticalLayout_5->addLayout(horizontalLayout_9);
+
+
+        gridLayout_7->addLayout(verticalLayout_5, 1, 1, 1, 1);
+
+        label_6 = new QLabel(verticalLayoutWidget_11);
+        label_6->setObjectName(QString::fromUtf8("label_6"));
+
+        gridLayout_7->addWidget(label_6, 0, 1, 1, 1);
+
+        verticalLayout_13 = new QVBoxLayout();
+        verticalLayout_13->setSpacing(6);
+        verticalLayout_13->setObjectName(QString::fromUtf8("verticalLayout_13"));
+        label_41 = new QLabel(verticalLayoutWidget_11);
+        label_41->setObjectName(QString::fromUtf8("label_41"));
+
+        verticalLayout_13->addWidget(label_41);
+
+        commentsBrowser = new QTextBrowser(verticalLayoutWidget_11);
+        commentsBrowser->setObjectName(QString::fromUtf8("commentsBrowser"));
+
+        verticalLayout_13->addWidget(commentsBrowser);
+
+
+        gridLayout_7->addLayout(verticalLayout_13, 2, 1, 1, 1);
+
+        formLayout = new QFormLayout();
+        formLayout->setSpacing(6);
+        formLayout->setObjectName(QString::fromUtf8("formLayout"));
+        formLayout->setFieldGrowthPolicy(QFormLayout::AllNonFixedFieldsGrow);
+        label_24 = new QLabel(verticalLayoutWidget_11);
+        label_24->setObjectName(QString::fromUtf8("label_24"));
+
+        formLayout->setWidget(0, QFormLayout::LabelRole, label_24);
+
+        overallScore = new QLabel(verticalLayoutWidget_11);
+        overallScore->setObjectName(QString::fromUtf8("overallScore"));
+
+        formLayout->setWidget(0, QFormLayout::FieldRole, overallScore);
+
+        label_27 = new QLabel(verticalLayoutWidget_11);
+        label_27->setObjectName(QString::fromUtf8("label_27"));
+
+        formLayout->setWidget(1, QFormLayout::LabelRole, label_27);
+
+        confidenceScore = new QLabel(verticalLayoutWidget_11);
+        confidenceScore->setObjectName(QString::fromUtf8("confidenceScore"));
+
+        formLayout->setWidget(1, QFormLayout::FieldRole, confidenceScore);
+
+        label_29 = new QLabel(verticalLayoutWidget_11);
+        label_29->setObjectName(QString::fromUtf8("label_29"));
+
+        formLayout->setWidget(2, QFormLayout::LabelRole, label_29);
+
+        relevanceScore = new QLabel(verticalLayoutWidget_11);
+        relevanceScore->setObjectName(QString::fromUtf8("relevanceScore"));
+
+        formLayout->setWidget(2, QFormLayout::FieldRole, relevanceScore);
+
+        label_31 = new QLabel(verticalLayoutWidget_11);
+        label_31->setObjectName(QString::fromUtf8("label_31"));
+
+        formLayout->setWidget(3, QFormLayout::LabelRole, label_31);
+
+        originalityScore = new QLabel(verticalLayoutWidget_11);
+        originalityScore->setObjectName(QString::fromUtf8("originalityScore"));
+
+        formLayout->setWidget(3, QFormLayout::FieldRole, originalityScore);
+
+        label_33 = new QLabel(verticalLayoutWidget_11);
+        label_33->setObjectName(QString::fromUtf8("label_33"));
+
+        formLayout->setWidget(4, QFormLayout::LabelRole, label_33);
+
+        significanceScore = new QLabel(verticalLayoutWidget_11);
+        significanceScore->setObjectName(QString::fromUtf8("significanceScore"));
+
+        formLayout->setWidget(4, QFormLayout::FieldRole, significanceScore);
+
+        label_35 = new QLabel(verticalLayoutWidget_11);
+        label_35->setObjectName(QString::fromUtf8("label_35"));
+
+        formLayout->setWidget(5, QFormLayout::LabelRole, label_35);
+
+        presentationScore = new QLabel(verticalLayoutWidget_11);
+        presentationScore->setObjectName(QString::fromUtf8("presentationScore"));
+
+        formLayout->setWidget(5, QFormLayout::FieldRole, presentationScore);
+
+        label_37 = new QLabel(verticalLayoutWidget_11);
+        label_37->setObjectName(QString::fromUtf8("label_37"));
+
+        formLayout->setWidget(6, QFormLayout::LabelRole, label_37);
+
+        techqualScore = new QLabel(verticalLayoutWidget_11);
+        techqualScore->setObjectName(QString::fromUtf8("techqualScore"));
+
+        formLayout->setWidget(6, QFormLayout::FieldRole, techqualScore);
+
+        label_39 = new QLabel(verticalLayoutWidget_11);
+        label_39->setObjectName(QString::fromUtf8("label_39"));
+
+        formLayout->setWidget(7, QFormLayout::LabelRole, label_39);
+
+        evaluationScore = new QLabel(verticalLayoutWidget_11);
+        evaluationScore->setObjectName(QString::fromUtf8("evaluationScore"));
+
+        formLayout->setWidget(7, QFormLayout::FieldRole, evaluationScore);
+
+        acceptPaper = new QPushButton(verticalLayoutWidget_11);
+        acceptPaper->setObjectName(QString::fromUtf8("acceptPaper"));
+
+        formLayout->setWidget(8, QFormLayout::LabelRole, acceptPaper);
+
+        rejectPaper = new QPushButton(verticalLayoutWidget_11);
+        rejectPaper->setObjectName(QString::fromUtf8("rejectPaper"));
+
+        formLayout->setWidget(8, QFormLayout::FieldRole, rejectPaper);
+
+
+        gridLayout_7->addLayout(formLayout, 2, 0, 1, 1);
+
+
+        verticalLayout_12->addLayout(gridLayout_7);
+
+        tabWidget->addTab(papersTab, QString());
+        tableWidget->raise();
+        gridLayoutWidget_6->raise();
+        verticalLayoutWidget_11->raise();
+        usersTab = new QWidget();
+        usersTab->setObjectName(QString::fromUtf8("usersTab"));
+        tableWidget_2 = new QTableWidget(usersTab);
+        if (tableWidget_2->columnCount() < 3)
+            tableWidget_2->setColumnCount(3);
+        QTableWidgetItem *__qtablewidgetitem14 = new QTableWidgetItem();
+        tableWidget_2->setHorizontalHeaderItem(0, __qtablewidgetitem14);
+        QTableWidgetItem *__qtablewidgetitem15 = new QTableWidgetItem();
+        tableWidget_2->setHorizontalHeaderItem(1, __qtablewidgetitem15);
+        QTableWidgetItem *__qtablewidgetitem16 = new QTableWidgetItem();
+        tableWidget_2->setHorizontalHeaderItem(2, __qtablewidgetitem16);
+        tableWidget_2->setObjectName(QString::fromUtf8("tableWidget_2"));
+        tableWidget_2->setGeometry(QRect(20, 10, 311, 531));
+        verticalLayoutWidget_6 = new QWidget(usersTab);
+        verticalLayoutWidget_6->setObjectName(QString::fromUtf8("verticalLayoutWidget_6"));
+        verticalLayoutWidget_6->setGeometry(QRect(370, 10, 291, 381));
+        verticalLayout_6 = new QVBoxLayout(verticalLayoutWidget_6);
+        verticalLayout_6->setSpacing(6);
+        verticalLayout_6->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_6->setObjectName(QString::fromUtf8("verticalLayout_6"));
+        verticalLayout_6->setContentsMargins(0, 0, 0, 0);
+        horizontalLayout_8 = new QHBoxLayout();
+        horizontalLayout_8->setSpacing(6);
+        horizontalLayout_8->setObjectName(QString::fromUtf8("horizontalLayout_8"));
+        username_5 = new QLabel(verticalLayoutWidget_6);
+        username_5->setObjectName(QString::fromUtf8("username_5"));
+
+        horizontalLayout_8->addWidget(username_5);
+
+        userid_5 = new QLabel(verticalLayoutWidget_6);
+        userid_5->setObjectName(QString::fromUtf8("userid_5"));
+
+        horizontalLayout_8->addWidget(userid_5);
+
+
+        verticalLayout_6->addLayout(horizontalLayout_8);
+
+        name_5 = new QLabel(verticalLayoutWidget_6);
+        name_5->setObjectName(QString::fromUtf8("name_5"));
+
+        verticalLayout_6->addWidget(name_5);
+
+        email_5 = new QLabel(verticalLayoutWidget_6);
+        email_5->setObjectName(QString::fromUtf8("email_5"));
+
+        verticalLayout_6->addWidget(email_5);
+
+        organisation_5 = new QLabel(verticalLayoutWidget_6);
+        organisation_5->setObjectName(QString::fromUtf8("organisation_5"));
+
+        verticalLayout_6->addWidget(organisation_5);
+
+        phone_5 = new QLabel(verticalLayoutWidget_6);
+        phone_5->setObjectName(QString::fromUtf8("phone_5"));
+
+        verticalLayout_6->addWidget(phone_5);
+
+        label_10 = new QLabel(verticalLayoutWidget_6);
+        label_10->setObjectName(QString::fromUtf8("label_10"));
+
+        verticalLayout_6->addWidget(label_10);
+
+        userKeyList = new QListWidget(verticalLayoutWidget_6);
+        userKeyList->setObjectName(QString::fromUtf8("userKeyList"));
+
+        verticalLayout_6->addWidget(userKeyList);
+
+        horizontalLayoutWidget_2 = new QWidget(usersTab);
+        horizontalLayoutWidget_2->setObjectName(QString::fromUtf8("horizontalLayoutWidget_2"));
+        horizontalLayoutWidget_2->setGeometry(QRect(370, 500, 291, 41));
+        horizontalLayout_6 = new QHBoxLayout(horizontalLayoutWidget_2);
+        horizontalLayout_6->setSpacing(6);
+        horizontalLayout_6->setContentsMargins(11, 11, 11, 11);
+        horizontalLayout_6->setObjectName(QString::fromUtf8("horizontalLayout_6"));
+        horizontalLayout_6->setContentsMargins(0, 0, 0, 0);
+        label_4 = new QLabel(horizontalLayoutWidget_2);
+        label_4->setObjectName(QString::fromUtf8("label_4"));
+
+        horizontalLayout_6->addWidget(label_4);
+
+        toReview = new QLineEdit(horizontalLayoutWidget_2);
+        toReview->setObjectName(QString::fromUtf8("toReview"));
+
+        horizontalLayout_6->addWidget(toReview);
+
+        addAsReviewer = new QPushButton(horizontalLayoutWidget_2);
+        addAsReviewer->setObjectName(QString::fromUtf8("addAsReviewer"));
+
+        horizontalLayout_6->addWidget(addAsReviewer);
+
+        verticalLayoutWidget_15 = new QWidget(usersTab);
+        verticalLayoutWidget_15->setObjectName(QString::fromUtf8("verticalLayoutWidget_15"));
+        verticalLayoutWidget_15->setGeometry(QRect(370, 400, 291, 101));
+        verticalLayout_17 = new QVBoxLayout(verticalLayoutWidget_15);
+        verticalLayout_17->setSpacing(6);
+        verticalLayout_17->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_17->setObjectName(QString::fromUtf8("verticalLayout_17"));
+        verticalLayout_17->setContentsMargins(0, 0, 0, 0);
+        horizontalLayout_23 = new QHBoxLayout();
+        horizontalLayout_23->setSpacing(6);
+        horizontalLayout_23->setObjectName(QString::fromUtf8("horizontalLayout_23"));
+        label_30 = new QLabel(verticalLayoutWidget_15);
+        label_30->setObjectName(QString::fromUtf8("label_30"));
+
+        horizontalLayout_23->addWidget(label_30);
+
+        label_28 = new QLabel(verticalLayoutWidget_15);
+        label_28->setObjectName(QString::fromUtf8("label_28"));
+
+        horizontalLayout_23->addWidget(label_28);
+
+
+        verticalLayout_17->addLayout(horizontalLayout_23);
+
+        horizontalLayout_24 = new QHBoxLayout();
+        horizontalLayout_24->setSpacing(6);
+        horizontalLayout_24->setObjectName(QString::fromUtf8("horizontalLayout_24"));
+        authoredPapers = new QListWidget(verticalLayoutWidget_15);
+        authoredPapers->setObjectName(QString::fromUtf8("authoredPapers"));
+
+        horizontalLayout_24->addWidget(authoredPapers);
+
+        assignedPapers = new QListWidget(verticalLayoutWidget_15);
+        assignedPapers->setObjectName(QString::fromUtf8("assignedPapers"));
+
+        horizontalLayout_24->addWidget(assignedPapers);
+
+
+        verticalLayout_17->addLayout(horizontalLayout_24);
+
+        tabWidget->addTab(usersTab, QString());
+        reviewTab = new QWidget();
+        reviewTab->setObjectName(QString::fromUtf8("reviewTab"));
+        verticalLayoutWidget_7 = new QWidget(reviewTab);
+        verticalLayoutWidget_7->setObjectName(QString::fromUtf8("verticalLayoutWidget_7"));
+        verticalLayoutWidget_7->setGeometry(QRect(10, 150, 761, 401));
+        verticalLayout_7 = new QVBoxLayout(verticalLayoutWidget_7);
+        verticalLayout_7->setSpacing(6);
+        verticalLayout_7->setContentsMargins(11, 11, 11, 11);
+        verticalLayout_7->setObjectName(QString::fromUtf8("verticalLayout_7"));
+        verticalLayout_7->setContentsMargins(0, 0, 0, 0);
+        horizontalLayout_11 = new QHBoxLayout();
+        horizontalLayout_11->setSpacing(6);
+        horizontalLayout_11->setObjectName(QString::fromUtf8("horizontalLayout_11"));
+        label_11 = new QLabel(verticalLayoutWidget_7);
+        label_11->setObjectName(QString::fromUtf8("label_11"));
+
+        horizontalLayout_11->addWidget(label_11);
+
+        overall = new QSpinBox(verticalLayoutWidget_7);
+        overall->setObjectName(QString::fromUtf8("overall"));
+
+        horizontalLayout_11->addWidget(overall);
+
+        label_12 = new QLabel(verticalLayoutWidget_7);
+        label_12->setObjectName(QString::fromUtf8("label_12"));
+
+        horizontalLayout_11->addWidget(label_12);
+
+        confidence = new QSpinBox(verticalLayoutWidget_7);
+        confidence->setObjectName(QString::fromUtf8("confidence"));
+
+        horizontalLayout_11->addWidget(confidence);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_11);
+
+        horizontalLayout_12 = new QHBoxLayout();
+        horizontalLayout_12->setSpacing(6);
+        horizontalLayout_12->setObjectName(QString::fromUtf8("horizontalLayout_12"));
+        label_13 = new QLabel(verticalLayoutWidget_7);
+        label_13->setObjectName(QString::fromUtf8("label_13"));
+
+        horizontalLayout_12->addWidget(label_13);
+
+        relevance = new QSpinBox(verticalLayoutWidget_7);
+        relevance->setObjectName(QString::fromUtf8("relevance"));
+
+        horizontalLayout_12->addWidget(relevance);
+
+        label_14 = new QLabel(verticalLayoutWidget_7);
+        label_14->setObjectName(QString::fromUtf8("label_14"));
+
+        horizontalLayout_12->addWidget(label_14);
+
+        originality = new QSpinBox(verticalLayoutWidget_7);
+        originality->setObjectName(QString::fromUtf8("originality"));
+
+        horizontalLayout_12->addWidget(originality);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_12);
+
+        horizontalLayout_13 = new QHBoxLayout();
+        horizontalLayout_13->setSpacing(6);
+        horizontalLayout_13->setObjectName(QString::fromUtf8("horizontalLayout_13"));
+        label_15 = new QLabel(verticalLayoutWidget_7);
+        label_15->setObjectName(QString::fromUtf8("label_15"));
+
+        horizontalLayout_13->addWidget(label_15);
+
+        significance = new QSpinBox(verticalLayoutWidget_7);
+        significance->setObjectName(QString::fromUtf8("significance"));
+
+        horizontalLayout_13->addWidget(significance);
+
+        label_16 = new QLabel(verticalLayoutWidget_7);
+        label_16->setObjectName(QString::fromUtf8("label_16"));
+
+        horizontalLayout_13->addWidget(label_16);
+
+        spinBox_8 = new QSpinBox(verticalLayoutWidget_7);
+        spinBox_8->setObjectName(QString::fromUtf8("spinBox_8"));
+
+        horizontalLayout_13->addWidget(spinBox_8);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_13);
+
+        horizontalLayout_14 = new QHBoxLayout();
+        horizontalLayout_14->setSpacing(6);
+        horizontalLayout_14->setObjectName(QString::fromUtf8("horizontalLayout_14"));
+        label_17 = new QLabel(verticalLayoutWidget_7);
+        label_17->setObjectName(QString::fromUtf8("label_17"));
+
+        horizontalLayout_14->addWidget(label_17);
+
+        techQuality = new QSpinBox(verticalLayoutWidget_7);
+        techQuality->setObjectName(QString::fromUtf8("techQuality"));
+
+        horizontalLayout_14->addWidget(techQuality);
+
+        label_18 = new QLabel(verticalLayoutWidget_7);
+        label_18->setObjectName(QString::fromUtf8("label_18"));
+
+        horizontalLayout_14->addWidget(label_18);
+
+        evaluation = new QSpinBox(verticalLayoutWidget_7);
+        evaluation->setObjectName(QString::fromUtf8("evaluation"));
+
+        horizontalLayout_14->addWidget(evaluation);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_14);
+
+        horizontalLayout_15 = new QHBoxLayout();
+        horizontalLayout_15->setSpacing(6);
+        horizontalLayout_15->setObjectName(QString::fromUtf8("horizontalLayout_15"));
+        label_19 = new QLabel(verticalLayoutWidget_7);
+        label_19->setObjectName(QString::fromUtf8("label_19"));
+
+        horizontalLayout_15->addWidget(label_19);
+
+        label_20 = new QLabel(verticalLayoutWidget_7);
+        label_20->setObjectName(QString::fromUtf8("label_20"));
+
+        horizontalLayout_15->addWidget(label_20);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_15);
+
+        horizontalLayout_16 = new QHBoxLayout();
+        horizontalLayout_16->setSpacing(6);
+        horizontalLayout_16->setObjectName(QString::fromUtf8("horizontalLayout_16"));
+        commentsStrengths = new QTextEdit(verticalLayoutWidget_7);
+        commentsStrengths->setObjectName(QString::fromUtf8("commentsStrengths"));
+
+        horizontalLayout_16->addWidget(commentsStrengths);
+
+        commentsWeaknesses = new QTextEdit(verticalLayoutWidget_7);
+        commentsWeaknesses->setObjectName(QString::fromUtf8("commentsWeaknesses"));
+
+        horizontalLayout_16->addWidget(commentsWeaknesses);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_16);
+
+        horizontalLayout_17 = new QHBoxLayout();
+        horizontalLayout_17->setSpacing(6);
+        horizontalLayout_17->setObjectName(QString::fromUtf8("horizontalLayout_17"));
+        label_21 = new QLabel(verticalLayoutWidget_7);
+        label_21->setObjectName(QString::fromUtf8("label_21"));
+
+        horizontalLayout_17->addWidget(label_21);
+
+        label_22 = new QLabel(verticalLayoutWidget_7);
+        label_22->setObjectName(QString::fromUtf8("label_22"));
+
+        horizontalLayout_17->addWidget(label_22);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_17);
+
+        horizontalLayout_18 = new QHBoxLayout();
+        horizontalLayout_18->setSpacing(6);
+        horizontalLayout_18->setObjectName(QString::fromUtf8("horizontalLayout_18"));
+        commentsShortPaper = new QTextEdit(verticalLayoutWidget_7);
+        commentsShortPaper->setObjectName(QString::fromUtf8("commentsShortPaper"));
+
+        horizontalLayout_18->addWidget(commentsShortPaper);
+
+        commentsBestAward = new QTextEdit(verticalLayoutWidget_7);
+        commentsBestAward->setObjectName(QString::fromUtf8("commentsBestAward"));
+
+        horizontalLayout_18->addWidget(commentsBestAward);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_18);
+
+        horizontalLayout_19 = new QHBoxLayout();
+        horizontalLayout_19->setSpacing(6);
+        horizontalLayout_19->setObjectName(QString::fromUtf8("horizontalLayout_19"));
+        label_23 = new QLabel(verticalLayoutWidget_7);
+        label_23->setObjectName(QString::fromUtf8("label_23"));
+
+        horizontalLayout_19->addWidget(label_23);
+
+        commentsSuggestions = new QTextEdit(verticalLayoutWidget_7);
+        commentsSuggestions->setObjectName(QString::fromUtf8("commentsSuggestions"));
+
+        horizontalLayout_19->addWidget(commentsSuggestions);
+
+
+        verticalLayout_7->addLayout(horizontalLayout_19);
+
+        gridLayoutWidget = new QWidget(reviewTab);
+        gridLayoutWidget->setObjectName(QString::fromUtf8("gridLayoutWidget"));
+        gridLayoutWidget->setGeometry(QRect(10, 20, 761, 128));
+        gridLayout = new QGridLayout(gridLayoutWidget);
+        gridLayout->setSpacing(6);
+        gridLayout->setContentsMargins(11, 11, 11, 11);
+        gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
+        gridLayout->setContentsMargins(0, 0, 0, 0);
+        mainKey = new QLabel(gridLayoutWidget);
+        mainKey->setObjectName(QString::fromUtf8("mainKey"));
+
+        gridLayout->addWidget(mainKey, 1, 0, 1, 1);
+
+        fileName = new QLabel(gridLayoutWidget);
+        fileName->setObjectName(QString::fromUtf8("fileName"));
+
+        gridLayout->addWidget(fileName, 2, 0, 1, 1);
+
+        textBrowser = new QTextBrowser(gridLayoutWidget);
+        textBrowser->setObjectName(QString::fromUtf8("textBrowser"));
+
+        gridLayout->addWidget(textBrowser, 1, 1, 1, 1);
+
+        download = new QPushButton(gridLayoutWidget);
+        download->setObjectName(QString::fromUtf8("download"));
+
+        gridLayout->addWidget(download, 2, 1, 1, 1);
+
+        paperName = new QLabel(gridLayoutWidget);
+        paperName->setObjectName(QString::fromUtf8("paperName"));
+
+        gridLayout->addWidget(paperName, 0, 1, 1, 1);
+
+        selectPaperReview = new QComboBox(gridLayoutWidget);
+        selectPaperReview->setObjectName(QString::fromUtf8("selectPaperReview"));
+
+        gridLayout->addWidget(selectPaperReview, 0, 0, 1, 1);
+
+        tabWidget->addTab(reviewTab, QString());
+        MainWindow->setCentralWidget(centralWidget);
+
+        retranslateUi(MainWindow);
+
+        tabWidget->setCurrentIndex(3);
+
+
+        QMetaObject::connectSlotsByName(MainWindow);
+    } // setupUi
+
+    void retranslateUi(QMainWindow *MainWindow)
+    {
+        MainWindow->setWindowTitle(QApplication::translate("MainWindow", "MainWindow", 0, QApplication::UnicodeUTF8));
+        label_7->setText(QApplication::translate("MainWindow", "Conference Management System", 0, QApplication::UnicodeUTF8));
+        label_9->setText(QApplication::translate("MainWindow", "UserName", 0, QApplication::UnicodeUTF8));
+        label_8->setText(QApplication::translate("MainWindow", "Password", 0, QApplication::UnicodeUTF8));
+        login->setText(QApplication::translate("MainWindow", "Login", 0, QApplication::UnicodeUTF8));
+        createAccount->setText(QApplication::translate("MainWindow", "Create Account", 0, QApplication::UnicodeUTF8));
+        quit->setText(QApplication::translate("MainWindow", "Quit", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(loginTab), QApplication::translate("MainWindow", "Login", 0, QApplication::UnicodeUTF8));
+        username->setText(QApplication::translate("MainWindow", "USERNAME", 0, QApplication::UnicodeUTF8));
+        userid->setText(QApplication::translate("MainWindow", "USERID", 0, QApplication::UnicodeUTF8));
+        name->setText(QApplication::translate("MainWindow", "NAME", 0, QApplication::UnicodeUTF8));
+        email->setText(QApplication::translate("MainWindow", "EMAIL", 0, QApplication::UnicodeUTF8));
+        organisation->setText(QApplication::translate("MainWindow", "ORGANISATION", 0, QApplication::UnicodeUTF8));
+        phone->setText(QApplication::translate("MainWindow", "PHONE", 0, QApplication::UnicodeUTF8));
+        label->setText(QApplication::translate("MainWindow", "Keywords", 0, QApplication::UnicodeUTF8));
+        addAuthKey->setText(QApplication::translate("MainWindow", "Add Keyword", 0, QApplication::UnicodeUTF8));
+        rmvAuthKey->setText(QApplication::translate("MainWindow", "Remove Keyword", 0, QApplication::UnicodeUTF8));
+        apply->setText(QApplication::translate("MainWindow", "Apply", 0, QApplication::UnicodeUTF8));
+        logout->setText(QApplication::translate("MainWindow", "Logout", 0, QApplication::UnicodeUTF8));
+        conferenceName->setText(QApplication::translate("MainWindow", "CONFERENCENAME", 0, QApplication::UnicodeUTF8));
+        label_2->setText(QApplication::translate("MainWindow", "CONFERENCETOPIC", 0, QApplication::UnicodeUTF8));
+        label_3->setText(QApplication::translate("MainWindow", "CONFERENCELOCATION", 0, QApplication::UnicodeUTF8));
+        label_26->setText(QApplication::translate("MainWindow", "Keywords", 0, QApplication::UnicodeUTF8));
+        textBrowser_2->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">CONFERENCE DESCRIPTION</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(infoTabAuthor), QApplication::translate("MainWindow", "Information", 0, QApplication::UnicodeUTF8));
+        username_2->setText(QApplication::translate("MainWindow", "USERNAME", 0, QApplication::UnicodeUTF8));
+        userid_2->setText(QApplication::translate("MainWindow", "USERID", 0, QApplication::UnicodeUTF8));
+        name_2->setText(QApplication::translate("MainWindow", "NAME", 0, QApplication::UnicodeUTF8));
+        email_2->setText(QApplication::translate("MainWindow", "EMAIL", 0, QApplication::UnicodeUTF8));
+        organisation_2->setText(QApplication::translate("MainWindow", "ORGANISATION", 0, QApplication::UnicodeUTF8));
+        phone_2->setText(QApplication::translate("MainWindow", "PHONE", 0, QApplication::UnicodeUTF8));
+        apply_2->setText(QApplication::translate("MainWindow", "Apply", 0, QApplication::UnicodeUTF8));
+        logout_2->setText(QApplication::translate("MainWindow", "Logout", 0, QApplication::UnicodeUTF8));
+        lineEdit->setText(QApplication::translate("MainWindow", "CONFERENCE NAME", 0, QApplication::UnicodeUTF8));
+        lineEdit_2->setText(QApplication::translate("MainWindow", "CONFERENCE TOPIC", 0, QApplication::UnicodeUTF8));
+        lineEdit_3->setText(QApplication::translate("MainWindow", "CONFERENCE LOCATION", 0, QApplication::UnicodeUTF8));
+        textEdit_2->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">CONFERENCE DESCRIPTION</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        label_25->setText(QApplication::translate("MainWindow", "Keywords", 0, QApplication::UnicodeUTF8));
+        addConfKey->setText(QApplication::translate("MainWindow", "Add Keyword", 0, QApplication::UnicodeUTF8));
+        rmvConfKey->setText(QApplication::translate("MainWindow", "Remove Keyword", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(infoTabChair), QApplication::translate("MainWindow", "Information", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem = authorsTable->horizontalHeaderItem(0);
+        ___qtablewidgetitem->setText(QApplication::translate("MainWindow", "Name", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem1 = authorsTable->horizontalHeaderItem(1);
+        ___qtablewidgetitem1->setText(QApplication::translate("MainWindow", "Email", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem2 = authorsTable->horizontalHeaderItem(2);
+        ___qtablewidgetitem2->setText(QApplication::translate("MainWindow", "Org", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem3 = authorsTable->horizontalHeaderItem(3);
+        ___qtablewidgetitem3->setText(QApplication::translate("MainWindow", "Phone", 0, QApplication::UnicodeUTF8));
+        selectPaperAuthor->clear();
+        selectPaperAuthor->insertItems(0, QStringList()
+         << QApplication::translate("MainWindow", "*NEW*", 0, QApplication::UnicodeUTF8)
+        );
+        paperAbstract->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">ABSTRACT</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        addPaperKey->setText(QApplication::translate("MainWindow", "Add Key", 0, QApplication::UnicodeUTF8));
+        rmvPaperKey->setText(QApplication::translate("MainWindow", "Remove Key", 0, QApplication::UnicodeUTF8));
+        addAuthor->setText(QApplication::translate("MainWindow", "Add Author", 0, QApplication::UnicodeUTF8));
+        rmvAuthor->setText(QApplication::translate("MainWindow", "Remove Author", 0, QApplication::UnicodeUTF8));
+        filename->setText(QApplication::translate("MainWindow", "FILENAME", 0, QApplication::UnicodeUTF8));
+        selectFile->setText(QApplication::translate("MainWindow", "Select File", 0, QApplication::UnicodeUTF8));
+        submit->setText(QApplication::translate("MainWindow", "Submit", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(authorTab), QApplication::translate("MainWindow", "Author", 0, QApplication::UnicodeUTF8));
+        discussionLabel_2->setText(QApplication::translate("MainWindow", "Discussion", 0, QApplication::UnicodeUTF8));
+        submitPosts->setText(QApplication::translate("MainWindow", "Submit Post", 0, QApplication::UnicodeUTF8));
+        postBody->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">POST INPUT</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        discussionBody_2->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">DISCUSSION POSTS</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        bidlabel->setText(QApplication::translate("MainWindow", "Bid:", 0, QApplication::UnicodeUTF8));
+        submitBid->setText(QApplication::translate("MainWindow", "Submit Bid", 0, QApplication::UnicodeUTF8));
+        paperName_3->setText(QApplication::translate("MainWindow", "PAPERNAME", 0, QApplication::UnicodeUTF8));
+        mainKey_3->setText(QApplication::translate("MainWindow", "MAINKEY", 0, QApplication::UnicodeUTF8));
+        fileName_2->setText(QApplication::translate("MainWindow", "FILENAME", 0, QApplication::UnicodeUTF8));
+        download_2->setText(QApplication::translate("MainWindow", "Download", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(reviewerTab), QApplication::translate("MainWindow", "Reviewer", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem4 = tableWidget->horizontalHeaderItem(0);
+        ___qtablewidgetitem4->setText(QApplication::translate("MainWindow", "Title", 0, QApplication::UnicodeUTF8));
+        paperName_4->setText(QApplication::translate("MainWindow", "PAPERNAME", 0, QApplication::UnicodeUTF8));
+        fileName_3->setText(QApplication::translate("MainWindow", "FILENAME", 0, QApplication::UnicodeUTF8));
+        download_3->setText(QApplication::translate("MainWindow", "Download", 0, QApplication::UnicodeUTF8));
+        mainKey_4->setText(QApplication::translate("MainWindow", "MAINKEY", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem5 = authorsTableMng->horizontalHeaderItem(0);
+        ___qtablewidgetitem5->setText(QApplication::translate("MainWindow", "Name", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem6 = authorsTableMng->horizontalHeaderItem(1);
+        ___qtablewidgetitem6->setText(QApplication::translate("MainWindow", "Email", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem7 = authorsTableMng->horizontalHeaderItem(2);
+        ___qtablewidgetitem7->setText(QApplication::translate("MainWindow", "Org", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem8 = authorsTableMng->horizontalHeaderItem(3);
+        ___qtablewidgetitem8->setText(QApplication::translate("MainWindow", "Phone", 0, QApplication::UnicodeUTF8));
+        discussionLabel_3->setText(QApplication::translate("MainWindow", "Discussion", 0, QApplication::UnicodeUTF8));
+        discussionBody_3->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">DISCUSSION POSTS</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem9 = reviewersTable->horizontalHeaderItem(0);
+        ___qtablewidgetitem9->setText(QApplication::translate("MainWindow", "Name", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem10 = reviewersTable->horizontalHeaderItem(1);
+        ___qtablewidgetitem10->setText(QApplication::translate("MainWindow", "Email", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem11 = reviewersTable->horizontalHeaderItem(2);
+        ___qtablewidgetitem11->setText(QApplication::translate("MainWindow", "Org", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem12 = reviewersTable->horizontalHeaderItem(3);
+        ___qtablewidgetitem12->setText(QApplication::translate("MainWindow", "Phone", 0, QApplication::UnicodeUTF8));
+        label_5->setText(QApplication::translate("MainWindow", "User:", 0, QApplication::UnicodeUTF8));
+        addAsReviewer_2->setText(QApplication::translate("MainWindow", "Add as Reviewer", 0, QApplication::UnicodeUTF8));
+        label_6->setText(QApplication::translate("MainWindow", "Reviewers", 0, QApplication::UnicodeUTF8));
+        label_41->setText(QApplication::translate("MainWindow", "Comments", 0, QApplication::UnicodeUTF8));
+        label_24->setText(QApplication::translate("MainWindow", "Overall", 0, QApplication::UnicodeUTF8));
+        overallScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_27->setText(QApplication::translate("MainWindow", "Confidence", 0, QApplication::UnicodeUTF8));
+        confidenceScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_29->setText(QApplication::translate("MainWindow", "Relevance", 0, QApplication::UnicodeUTF8));
+        relevanceScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_31->setText(QApplication::translate("MainWindow", "Originality", 0, QApplication::UnicodeUTF8));
+        originalityScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_33->setText(QApplication::translate("MainWindow", "Significance", 0, QApplication::UnicodeUTF8));
+        significanceScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_35->setText(QApplication::translate("MainWindow", "Presentation", 0, QApplication::UnicodeUTF8));
+        presentationScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_37->setText(QApplication::translate("MainWindow", "Technical Quality", 0, QApplication::UnicodeUTF8));
+        techqualScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        label_39->setText(QApplication::translate("MainWindow", "Evaluation", 0, QApplication::UnicodeUTF8));
+        evaluationScore->setText(QApplication::translate("MainWindow", "-", 0, QApplication::UnicodeUTF8));
+        acceptPaper->setText(QApplication::translate("MainWindow", "Accept Paper", 0, QApplication::UnicodeUTF8));
+        rejectPaper->setText(QApplication::translate("MainWindow", "Reject Paper", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(papersTab), QApplication::translate("MainWindow", "Paper Management", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem13 = tableWidget_2->horizontalHeaderItem(0);
+        ___qtablewidgetitem13->setText(QApplication::translate("MainWindow", "Name", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem14 = tableWidget_2->horizontalHeaderItem(1);
+        ___qtablewidgetitem14->setText(QApplication::translate("MainWindow", "User Name", 0, QApplication::UnicodeUTF8));
+        QTableWidgetItem *___qtablewidgetitem15 = tableWidget_2->horizontalHeaderItem(2);
+        ___qtablewidgetitem15->setText(QApplication::translate("MainWindow", "id", 0, QApplication::UnicodeUTF8));
+        username_5->setText(QApplication::translate("MainWindow", "USERNAME", 0, QApplication::UnicodeUTF8));
+        userid_5->setText(QApplication::translate("MainWindow", "USERID", 0, QApplication::UnicodeUTF8));
+        name_5->setText(QApplication::translate("MainWindow", "NAME", 0, QApplication::UnicodeUTF8));
+        email_5->setText(QApplication::translate("MainWindow", "EMAIL", 0, QApplication::UnicodeUTF8));
+        organisation_5->setText(QApplication::translate("MainWindow", "ORGANISATION", 0, QApplication::UnicodeUTF8));
+        phone_5->setText(QApplication::translate("MainWindow", "PHONE", 0, QApplication::UnicodeUTF8));
+        label_10->setText(QApplication::translate("MainWindow", "Keywords", 0, QApplication::UnicodeUTF8));
+        label_4->setText(QApplication::translate("MainWindow", "Paper:", 0, QApplication::UnicodeUTF8));
+        addAsReviewer->setText(QApplication::translate("MainWindow", "Add to Review", 0, QApplication::UnicodeUTF8));
+        label_30->setText(QApplication::translate("MainWindow", "Authored Papers", 0, QApplication::UnicodeUTF8));
+        label_28->setText(QApplication::translate("MainWindow", "Assigned to Review", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(usersTab), QApplication::translate("MainWindow", "User Management", 0, QApplication::UnicodeUTF8));
+        label_11->setText(QApplication::translate("MainWindow", "Overall", 0, QApplication::UnicodeUTF8));
+        label_12->setText(QApplication::translate("MainWindow", "Confidence", 0, QApplication::UnicodeUTF8));
+        label_13->setText(QApplication::translate("MainWindow", "Relevance", 0, QApplication::UnicodeUTF8));
+        label_14->setText(QApplication::translate("MainWindow", "Originality", 0, QApplication::UnicodeUTF8));
+        label_15->setText(QApplication::translate("MainWindow", "Significance", 0, QApplication::UnicodeUTF8));
+        label_16->setText(QApplication::translate("MainWindow", "Presentation", 0, QApplication::UnicodeUTF8));
+        label_17->setText(QApplication::translate("MainWindow", "Technical Quality", 0, QApplication::UnicodeUTF8));
+        label_18->setText(QApplication::translate("MainWindow", "Evaluation", 0, QApplication::UnicodeUTF8));
+        label_19->setText(QApplication::translate("MainWindow", "Strengths of the paper", 0, QApplication::UnicodeUTF8));
+        label_20->setText(QApplication::translate("MainWindow", "Weaknesses of the paper", 0, QApplication::UnicodeUTF8));
+        label_21->setText(QApplication::translate("MainWindow", "Would this paper be suitable as a short paper?", 0, QApplication::UnicodeUTF8));
+        label_22->setText(QApplication::translate("MainWindow", "Should this paper be considered for a best paper award?", 0, QApplication::UnicodeUTF8));
+        label_23->setText(QApplication::translate("MainWindow", "Detailed comments and suggestions", 0, QApplication::UnicodeUTF8));
+        commentsSuggestions->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;\"><br /></p></body></html>", 0, QApplication::UnicodeUTF8));
+        mainKey->setText(QApplication::translate("MainWindow", "MAINKEY", 0, QApplication::UnicodeUTF8));
+        fileName->setText(QApplication::translate("MainWindow", "FILENAME", 0, QApplication::UnicodeUTF8));
+        textBrowser->setHtml(QApplication::translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
+"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
+"p, li { white-space: pre-wrap; }\n"
+"</style></head><body style=\" font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">KEYWORDS</span></p>\n"
+"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:'Ubuntu'; font-size:11pt;\">SEMI COLON DELIMITED</span></p></body></html>", 0, QApplication::UnicodeUTF8));
+        download->setText(QApplication::translate("MainWindow", "Download", 0, QApplication::UnicodeUTF8));
+        paperName->setText(QApplication::translate("MainWindow", "PAPERNAME", 0, QApplication::UnicodeUTF8));
+        tabWidget->setTabText(tabWidget->indexOf(reviewTab), QApplication::translate("MainWindow", "Review", 0, QApplication::UnicodeUTF8));
+    } // retranslateUi
+
+};
+
+namespace Ui {
+    class MainWindow: public Ui_MainWindow {};
+} // namespace Ui
+
+QT_END_NAMESPACE
+
+#endif // UI_MAINWINDOW_H

commit 2518fbe390ee3b49fc2964f9f163aa137143a03d
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 25 22:34:14 2014 +1100

    Major fixes to database, compiling/running at home now

diff --git a/Database/Database.cpp b/Database/Database.cpp
index 3058b9f..8d652b6 100644
--- a/Database/Database.cpp
+++ b/Database/Database.cpp
@@ -1,4 +1,4 @@
-#include "Database.h"
+#include "Database.hpp"
 
 #include "cppconn/driver.h"
 #include "cppconn/exception.h"
@@ -51,19 +51,33 @@ Database::~Database()
         }
 }
 
-User *Database::fetchUser(const char* key) throw (const char*)
+void Database::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+User *Database::fetchUser(std::string key) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
 
 	// Add information on user from database to User object
-	const char* getUser = "SELECT FROM UserAccount where userID=?";
+	const char* getUser = "SELECT * FROM UserAccount where username=?";
+	const char* getPersonalInfo = "SELECT * FROM PersonalInfo where userID=?";
+	const char* getExpertise = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT expertiseID FROM ExpertiseArea where userID=?)";
 
+        // =======================================
+        // user account
 	sql::PreparedStatement *pstmt = NULL;
 	sql::ResultSet *rs = NULL;
 	
 	pstmt = dbcon->prepareStatement(getUser);
 	pstmt->setString(1, key);
+
 	rs = pstmt->executeQuery();
 	bool haveRecord = rs->next();
 	if (!haveRecord)
@@ -73,312 +87,652 @@ User *Database::fetchUser(const char* key) throw (const char*)
 		return NULL;
 	}
 
-        std::string userID = rs->getString(1);
+        int userID = rs->getInt(1);
         std::string username = rs->getString(2);
         std::string password = rs->getString(3);
-	std::string infoID = rs->getString(4);
-
-        User *user = new User(id);
-        arec->setName(name);
-        arec->setEmail(email);
-        arec->setInfo(info);
-        arec->setImage(image);
 
         delete rs;
         delete pstmt;
+
         // =======================================
-        // Now ask about roles
-        pstmt = dbcon->prepareStatement(getroles);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        while (rs->next())
-        {
-                std::string arole = rs->getString(1);
-                arec->addRole(arole);
-        }
+        // Personal Info
+	pstmt = dbcon->prepareStatement(getPersonalInfo);
+	pstmt->setInt(1, userID);
+	rs = pstmt->executeQuery();
+	haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return NULL;
+	}
+
+        std::string name = rs->getString(3);
+	std::string email = rs->getString(4);
+	std::string organisation = rs->getString(5);
+	std::string phone = rs->getString(6);
+
         delete rs;
         delete pstmt;
-}
 
+        // =======================================
+        // Expertise Area
+        std::vector<std::string> vptr;
+	
+	pstmt = dbcon->prepareStatement(getExpertise);
+	pstmt->setInt(1, userID);
 
+	rs = pstmt->executeQuery();
 
-void Database::close()
-{
-        if (!invalid) {
-                dbcon->close();
-                delete dbcon;
+        while (rs->next()) {
+                std::string expertise = rs->getString(1);
+                vptr.push_back(expertise);
         }
-        invalid = true;
+
+        User *user = new User(
+		username,
+		name,
+		email,
+		organisation,
+		phone,
+		password,
+		userID,
+		vptr);
+
+        delete rs;
+        delete pstmt;
+	
+	return user;
 }
 
-bool Database::exists(const char* key) throw (const char*)
+bool Database::existsUserName(std::string key) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
-        const char* countrecord = "select count(*) from myrecord where _id=?";
+
+	const char* countUser = "SELECT COUNT(*) FROM UserAccount WHERE username=?";
+
         sql::PreparedStatement *pstmt = NULL;
         sql::ResultSet * rs = NULL;
 
-        pstmt = dbcon->prepareStatement(countrecord);
+        pstmt = dbcon->prepareStatement(countUser);
 
         int count = 0;
         pstmt->setString(1, key);
         rs = pstmt->executeQuery();
+
         if (rs->next()) {
                 count = rs->getInt(1);
         }
         delete rs;
         delete pstmt;
 
-        return count = 1;
+        return count == 1;
 }
 
-std::vector<std::string> *Database::allKeys()
+void Database::putUser(std::string key, const User *user) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
-
-        const char* selectall = "select _id from MyRecord";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
 
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string anid = rs->getString(1);
-                vptr->push_back(anid);
+        if (this->existsUserName(key))
+	{
+                this->updateUser(user);
         }
-
-        return vptr;
+	else
+	{
+        	this->createUser(user);
+	}
 }
 
-std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
+void Database::createUser(const User* user)
 {
         if (invalid)
                 throw (noDB);
-        // Laboured
-        // First get a list of the ids with the role, then one by one get the
-        // complete records.
-        const char* getrolepersons = "selects personid from roles where _role=?";
 
+	const char* insertPersonalInfo = "INSERT INTO PersonalInfo(userID, name, email, organisation, phone) VALUES(NULL, ?, ?, ?, ?)";
+	const char* insertUser = "INSERT INTO UserAccount(username, password, infoID) VALUES(?, ?, LAST_INSERT_ID())";
+	const char* updatePIuserID = "UPDATE PersonalInfo SET userID = LAST_INSERT_ID() where infoID=(SELECT infoID FROM UserAccount where userID=LAST_INSERT_ID())";
+	const char* getUserID = "SELECT LAST_INSERT_ID()";
+	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Personal Info
         sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
+        pstmt = dbcon->prepareStatement(insertPersonalInfo);
+        pstmt->setString(1, user->name);
+        pstmt->setString(2, user->email);
+        pstmt->setString(3, user->organisation);
+        pstmt->setString(4, user->phone);
 
-        pstmt = dbcon->prepareStatement(getrolepersons);
-        pstmt->setString(1, role);
-        rs = pstmt->executeQuery();
+        pstmt->executeUpdate();
 
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
+        delete pstmt;
 
-        std::vector<std::string> people;
+        // =======================================
+        // user account
+        pstmt = dbcon->prepareStatement(insertUser);
+        pstmt->setString(1, user->userName);
+        pstmt->setString(2, user->password);
 
-        // rc = sqlite3_step(stmt);
+        pstmt->executeUpdate();
 
-        while (rs->next()) {
-                std::string apersonid = std::string(rs->getString(1));
-//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
-                people.push_back(apersonid);
-        }
+        delete pstmt;
 
-        // Maybe there weren't any
-        if (people.size() == 0)
-                return NULL;
+        // =======================================
+        // Personal Info Update
+        pstmt = dbcon->prepareStatement(updatePIuserID);
 
-        // Build collection by getting each record
-        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+        pstmt->executeUpdate();
 
-        std::vector<std::string>::const_iterator it;
-        for (it = people.begin(); it != people.end(); it++) {
-                std::string aperson = *it;
-                MyRecord* rec = this->get(aperson.c_str());
-                roleholders->push_back(rec);
-        }
+        delete pstmt;
 
-        return roleholders;
-}
+        // =======================================
+        // Store userID
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
 
-void Database::put(const char* key, const MyRecord *data) throw (const char*)
-{
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
 
-        if (invalid)
-                throw (noDB);
+        int userID = rs->getInt(1);
 
-        // Tiresome
-        // If it exists - delete it
-        if (this->exists(key)) {
-                bool done = this->deleteRecord(key);
-        }
-        // Insert it
-        this->recordToTables(data);
+        delete rs;
+        delete pstmt;
+
+        // =======================================
+        // Expertise
+      	if (user->keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertExpertise);
+		std::vector<std::string>::const_iterator it;
+      		for (it = user->keywords.begin(); it != user->keywords.end(); it ++)
+		{
+			std::string word = *it;	
+
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			
+			pstmt->setInt(1, userID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
 }
 
-bool Database::deleteRecord(const char* key) throw (const char*)
+void Database::updateUser(const User* user)
 {
         if (invalid)
                 throw (noDB);
-        // explicitly delete subordinate records in Phones, Address, others and Roles
-        // then delete the myrecord entry
-        // recreating the prepared statements for each operation - costly
-        const char* deletephones = "delete from phones where personid=?";
-        const char* deleteaddress = "delete from addresses where personid=?";
-        const char* deleteother = "delete from other where personid=?";
-        const char* deleteroles = "delete from roles where personid=?";
-        const char* deletemyrecord = "delete from myrecord where _id=?";
-        const char* unused; // Pointer to unused part of sql string (?)
+
+        // Insert the myrecord data first, then deal with Other data tables
+
+	const char* getUserID = "SELECT userID FROM UserAccount where username = ?";
+	const char* updateUser = "UPDATE UserAccount SET username=?, password=? WHERE userID=?";
+	const char* updatePersonalInfo = "UPDATE PersonalInfo SET name=?, email=?, organisation=?, phone=? WHERE infoID=?";
+
+        const char* deleteExpertise = "DELETE FROM ExpertiseArea WHERE userID=?";
+	const char* insertExpertise = "INSERT IGNORE INTO ExpertiseArea VALUES(?, (SELECT keywordID FROM Keywords WHERE keyword=?))";
+
+        // =======================================
+        // Store userID
         sql::PreparedStatement *pstmt = NULL;
-        // Phones
-        pstmt = dbcon->prepareStatement(deletephones);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUserID);
+        pstmt->setString(1, user->userName);
 
-        // Addresses
-        pstmt = dbcon->prepareStatement(deleteaddress);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+
+        int userID = rs->getInt(1);
+
+        delete rs;
         delete pstmt;
 
-        //Other
-        pstmt = dbcon->prepareStatement(deleteother);
-        pstmt->setString(1, key);
+        // =======================================
+        // user account
+        pstmt = dbcon->prepareStatement(updateUser);
+        pstmt->setString(1, user->userName);
+        pstmt->setString(2, user->password);
+        pstmt->setInt(3, userID);
+
         pstmt->executeUpdate();
+
         delete pstmt;
 
-        // Roles
-        pstmt = dbcon->prepareStatement(deleteroles);
-        pstmt->setString(1, key);
+        // =======================================
+        // Personal Info
+        pstmt = dbcon->prepareStatement(updatePersonalInfo);
+        pstmt->setString(1, user->name);
+        pstmt->setString(2, user->email);
+        pstmt->setString(3, user->organisation);
+        pstmt->setString(4, user->phone);
+        pstmt->setInt(5, userID);
+
         pstmt->executeUpdate();
+
         delete pstmt;
 
-        // Finally
-        pstmt = dbcon->prepareStatement(deletemyrecord);
-        pstmt->setString(1, key);
+        // =======================================
+        // Expertise Delete
+        pstmt = dbcon->prepareStatement(deleteExpertise);
+        pstmt->setInt(1, userID);
+
         pstmt->executeUpdate();
+
         delete pstmt;
 
-        return true;
+        // =======================================
+        // Expertise Insert
+      	if (user->keywords.size() > 0)
+      	{
+      		pstmt = dbcon->prepareStatement(insertExpertise);
+		std::vector<std::string>::const_iterator it;
+      		for (it = user->keywords.begin(); it != user->keywords.end(); it ++)
+		{
+			std::string word = *it;	
+        		if (!this->existsKeyword(word))
+			{
+				this->addKeyword(word);
+			}
+			pstmt->setInt(1, userID);
+			pstmt->setString(2, word);
+
+      		        pstmt->executeUpdate();
+		}
+      		delete pstmt;
+
+      	}
 }
 
-MyRecord *Database::get(const char* key) throw (const char*)
+std::vector<int> *Database::allUserIDs()
 {
         if (invalid)
                 throw (noDB);
-        // Again laborious
-        // Load the MyRecord from its table, then add data from Other tables.
-        const char* getrecord = "select * from myrecord where _id=?";
-        const char* getroles = "select role from roles where personid=?";
-        const char* getphones = "select type, number from phones where personid=?";
-        const char* getaddress = "select type, address from addresses where personid=?";
-        const char* getother = "select key, valyue from other where personid=?";
+        std::vector<int> *vptr = new std::vector<int>();
+
+        const char* selectall = "select userID from UserAccount";
 
         sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet *rs = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
 
-        pstmt = dbcon->prepareStatement(getrecord);
-        pstmt->setString(1, key);
         rs = pstmt->executeQuery();
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
+        while (rs->next()) {
+                int anid = rs->getInt(1);
+                vptr->push_back(anid);
         }
 
-        std::string id = rs->getString(1);
-        std::string name = rs->getString(2);
-        std::string email = rs->getString(3);
-        std::string info = rs->getString(4);
-        std::string image = rs->getString(5);
+        return vptr;
+}
 
-        MyRecord *arec = new MyRecord(id);
-        arec->setName(name);
-        arec->setEmail(email);
-        arec->setInfo(info);
-        arec->setImage(image);
+std::vector<std::string> *Database::allUserNames()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> *vptr = new std::vector<std::string>();
+
+        const char* selectall = "select username from UserAccount";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
 
-        delete rs;
-        delete pstmt;
-        // =======================================
-        // Now ask about roles
-        pstmt = dbcon->prepareStatement(getroles);
-        pstmt->setString(1, key);
         rs = pstmt->executeQuery();
-        while (rs->next())
-        {
-                std::string arole = rs->getString(1);
-                arec->addRole(arole);
+        while (rs->next()) {
+                std::string aname = rs->getString(1);
+                vptr->push_back(aname);
         }
-        delete rs;
-        delete pstmt;
+
+        return vptr;
 }
 
-void Database::recordToTables(const MyRecord* data)
+bool Database::existsKeyword(std::string key) throw (const char*)
 {
         if (invalid)
                 throw (noDB);
 
-        // Insert the myrecord data first, then deal with Other data tables
+	const char* countKeyword = "SELECT COUNT(*) FROM Keywords WHERE keyword=?";
 
-        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
-        const char* putrole = "insert into roles values(?, ?)";
-        const char* putphone = "insert into phones values (?, ?, ?)";
-        const char* putaddress = "insert into addresses values (?, ?, ?)";
-        const char* putother = "insert into other values (?, ?, ?)";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countKeyword);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count == 1;
+}
+
+void Database::addKeyword(std::string key) throw (const char*)
+{
+	if (invalid)
+		throw (noDB);
+
+	const char* insertKeyword = "INSERT INTO Keywords VALUES(NULL, ?)";
 
         sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(putmyrecord);
-        pstmt->setString(1, data->getID());
-        pstmt->setString(2, data->getName());
-        pstmt->setString(3, data->getEmail());
-        pstmt->setString(4, data->getInfo());
-        pstmt->setString(5, data->getImage());
+        pstmt = dbcon->prepareStatement(insertKeyword);
+        pstmt->setString(1, key);
 
         pstmt->executeUpdate();
 
         delete pstmt;
-
-        // Role 
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-
-//      // Other
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
 }
+
+//Conference *Database::fetchConference(int key) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//
+//	// Add information on user from database to User object
+//	const char* getConference = "SELECT * FROM Conference WHERE confID=?
+//	const char* getConfKeywords = "SELECT keyword FROM Keywords WHERE keywordID in (SELECT keywordID FROM ConferenceKeywords where confID=?)";
+//
+//        // =======================================
+//        // user account
+//	sql::PreparedStatement *pstmt = NULL;
+//	sql::ResultSet *rs = NULL;
+//	
+//	pstmt = dbcon->prepareStatement(getUser);
+//	pstmt->setInt(1, key);
+//
+//	rs = pstmt->executeQuery();
+//	bool haveRecord = rs->next();
+//	if (!haveRecord)
+//	{
+//		delete rs;
+//		delete pstmt;
+//		return NULL;
+//	}
+//
+//        int userID = rs->getInt(1);
+//        std::string username = rs->getString(2);
+//        std::string password = rs->getString(3);
+//
+//        delete rs;
+//        delete pstmt;
+//
+//        // =======================================
+//        // Personal Info
+//	pstmt = dbcon->prepareStatement(getPersonalInfo);
+//	pstmt->setInt(1, userID);
+//	rs = pstmt->executeQuery();
+//	haveRecord = rs->next();
+//	if (!haveRecord)
+//	{
+//		delete rs;
+//		delete pstmt;
+//		return NULL;
+//	}
+//
+//        std::string name = rs->getString(3);
+//	std::string email = rs->getString(4);
+//	std::string organisation = rs->getString(5);
+//	std::string phone = rs->getString(6);
+//
+//        delete rs;
+//        delete pstmt;
+//
+//        // =======================================
+//        // Expertise Area
+//        std::vector<std::string> vptr;
+//	
+//	pstmt = dbcon->prepareStatement(getExpertise);
+//	pstmt->setInt(1, userID);
+//	rs = pstmt->executeQuery();
+//
+//        while (rs->next()) {
+//                std::string expertise = rs->getString(2);
+//                vptr.push_back(expertise);
+//        }
+//
+//        User *user = new User(
+//		username,
+//		name,
+//		email,
+//		organisation,
+//		phone,
+//		password,
+//		userID,
+//		vptr);
+//
+//        delete rs;
+//        delete pstmt;
+//	
+//	return user;
+//}
+
+//
+//std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//        // Laboured
+//        // First get a list of the ids with the role, then one by one get the
+//        // complete records.
+//        const char* getrolepersons = "selects personid from roles where _role=?";
+//
+//        sql::PreparedStatement *pstmt = NULL;
+//        sql::ResultSet * rs = NULL;
+//
+//        pstmt = dbcon->prepareStatement(getrolepersons);
+//        pstmt->setString(1, role);
+//        rs = pstmt->executeQuery();
+//
+//        bool haveRecord = rs->next();
+//        if (!haveRecord)
+//        {
+//                delete rs;
+//                delete pstmt;
+//                return NULL;
+//        }
+//
+//        std::vector<std::string> people;
+//
+//        // rc = sqlite3_step(stmt);
+//
+//        while (rs->next()) {
+//                std::string apersonid = std::string(rs->getString(1));
+////              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
+//                people.push_back(apersonid);
+//        }
+//
+//        // Maybe there weren't any
+//        if (people.size() == 0)
+//                return NULL;
+//
+//        // Build collection by getting each record
+//        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+//
+//        std::vector<std::string>::const_iterator it;
+//        for (it = people.begin(); it != people.end(); it++) {
+//                std::string aperson = *it;
+//                MyRecord* rec = this->get(aperson.c_str());
+//                roleholders->push_back(rec);
+//        }
+//
+//        return roleholders;
+//}
+//
+
+//bool Database::deleteUser(int* key) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//        // explicitly delete subordinate records in Phones, Address, others and Roles
+//        // then delete the myrecord entry
+//        // recreating the prepared statements for each operation - costly
+//        const char* deletephones = "delete from phones where personid=?";
+//        const char* deleteaddress = "delete from addresses where personid=?";
+//        const char* deleteother = "delete from other where personid=?";
+//        const char* deleteroles = "delete from roles where personid=?";
+//        const char* deletemyrecord = "delete from myrecord where _id=?";
+//        const char* unused; // Pointer to unused part of sql string (?)
+//        sql::PreparedStatement *pstmt = NULL;
+//        // Phones
+//        pstmt = dbcon->prepareStatement(deletephones);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        // Addresses
+//        pstmt = dbcon->prepareStatement(deleteaddress);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        //Other
+//        pstmt = dbcon->prepareStatement(deleteother);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        // Roles
+//        pstmt = dbcon->prepareStatement(deleteroles);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        // Finally
+//        pstmt = dbcon->prepareStatement(deletemyrecord);
+//        pstmt->setString(1, key);
+//        pstmt->executeUpdate();
+//        delete pstmt;
+//
+//        return true;
+//}
+//
+//
+//MyRecord *Database::get(const char* key) throw (const char*)
+//{
+//        if (invalid)
+//                throw (noDB);
+//        // Again laborious
+//        // Load the MyRecord from its table, then add data from Other tables.
+//        const char* getrecord = "select * from myrecord where _id=?";
+//        const char* getroles = "select role from roles where personid=?";
+//        const char* getphones = "select type, number from phones where personid=?";
+//        const char* getaddress = "select type, address from addresses where personid=?";
+//        const char* getother = "select key, valyue from other where personid=?";
+//
+//        sql::PreparedStatement *pstmt = NULL;
+//        sql::ResultSet *rs = NULL;
+//
+//        pstmt = dbcon->prepareStatement(getrecord);
+//        pstmt->setString(1, key);
+//        rs = pstmt->executeQuery();
+//        bool haveRecord = rs->next();
+//        if (!haveRecord)
+//        {
+//                delete rs;
+//                delete pstmt;
+//                return NULL;
+//        }
+//
+//        std::string id = rs->getString(1);
+//        std::string name = rs->getString(2);
+//        std::string email = rs->getString(3);
+//        std::string info = rs->getString(4);
+//        std::string image = rs->getString(5);
+//
+//        MyRecord *arec = new MyRecord(id);
+//        arec->setName(name);
+//        arec->setEmail(email);
+//        arec->setInfo(info);
+//        arec->setImage(image);
+//
+//        delete rs;
+//        delete pstmt;
+//        // =======================================
+//        // Now ask about roles
+//        pstmt = dbcon->prepareStatement(getroles);
+//        pstmt->setString(1, key);
+//        rs = pstmt->executeQuery();
+//        while (rs->next())
+//        {
+//                std::string arole = rs->getString(1);
+//                arec->addRole(arole);
+//        }
+//        delete rs;
+//        delete pstmt;
+//}
+//
+//void Database::recordToTables(const MyRecord* data)
+//{
+//        if (invalid)
+//                throw (noDB);
+//
+//        // Insert the myrecord data first, then deal with Other data tables
+//
+//        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
+//        const char* putrole = "insert into roles values(?, ?)";
+//        const char* putphone = "insert into phones values (?, ?, ?)";
+//        const char* putaddress = "insert into addresses values (?, ?, ?)";
+//        const char* putother = "insert into other values (?, ?, ?)";
+//
+//        sql::PreparedStatement *pstmt = NULL;
+//        pstmt = dbcon->prepareStatement(putmyrecord);
+//        pstmt->setString(1, data->getID());
+//        pstmt->setString(2, data->getName());
+//        pstmt->setString(3, data->getEmail());
+//        pstmt->setString(4, data->getInfo());
+//        pstmt->setString(5, data->getImage());
+//
+//        pstmt->executeUpdate();
+//
+//        delete pstmt;
+//
+//        // Role 
+////      if (data->getOtherKV().size() > 0)
+////      {
+////              pstmt = dbcon->prepareStatement(putother);
+////              std::map<std::string, std::string>::const_iterator it;
+////              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
+////              {
+////                      std::string akey = it->first;
+////                      std::string avalue = it->second;
+////                      pstmt->setString(1, data->getID());
+////                      pstmt->setString(2, akey);
+////                      pstmt->setString(3, avalue);
+////                      pstmt->executeUpdate();
+////              }
+////              delete pstmt;
+////
+////      }
+//
+////      // Other
+////      if (data->getOtherKV().size() > 0)
+////      {
+////              pstmt = dbcon->prepareStatement(putother);
+////              std::map<std::string, std::string>::const_iterator it;
+////              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+////              {
+////                      std::string akey = it->first;
+////                      std::string avalue = it->second;
+////                      pstmt->setString(1, data->getID());
+////                      pstmt->setString(2, akey);
+////                      pstmt->setString(3, avalue);
+////                      pstmt->executeUpdate();
+////              }
+////              delete pstmt;
+////
+////      }
+//}
diff --git a/Database/Database.hpp b/Database/Database.hpp
index ba09f5d..3b4d9f2 100644
--- a/Database/Database.hpp
+++ b/Database/Database.hpp
@@ -3,33 +3,43 @@
 #include "mysql_connection.h"
 #include "mysql_driver.h"
 #include "MyRecord.h"
+#include "../Server/User.hpp"
+#include "../Server/Conference.hpp"
 
-class DataBase {
+class Database {
 public:
         Database();
 
         ~Database();
 
-	// CSCI222
-
-	User *fetchUser(const char*key) throw (const char*);
-
-
-        // Delete - returns false if there wasn't a record with that key
-        bool deleteRecord(const char* key) throw (const char*);
-        // Exists - is there a record with a given key
-        bool exists(const char* key) throw (const char*);
-        // Put - insert/replace a record; returns false if failed
-        // (In this example, key is actually the same as name field in data record)
-        void put(const char* key, const MyRecord *data) throw (const char*);
-        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
-        MyRecord *get(const char*key) throw (const char*);
-
-        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
-
         void close();
 
-        std::vector<std::string> *allKeys();
+	// USER
+	User *fetchUser(std::string key) throw (const char*);
+        bool existsUserName(std::string key) throw (const char*);
+        void putUser(std::string key, const User *user) throw (const char*);
+        std::vector<int> *allUserIDs();
+        std::vector<std::string> *allUserNames();
+
+	// KEYWORD
+        bool existsKeyword(std::string key) throw (const char*);
+	void addKeyword(std::string key) throw (const char*);
+
+	// CONFERENCE
+	Conference *fetchConference(int key) throw (const char*);
+
+
+//        // Delete - returns false if there wasn't a record with that key
+//        bool deleteRecord(const char* key) throw (const char*);
+//        // Put - insert/replace a record; returns false if failed
+//        // (In this example, key is actually the same as name field in data record)
+//        void put(const char* key, const MyRecord *data) throw (const char*);
+//        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
+//        MyRecord *get(const char*key) throw (const char*);
+//
+//        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+//
+//
 
         bool isOK()
         {
@@ -44,6 +54,8 @@ private:
         Database(const Database& orig);
         Database& operator=(const Database);
 
-        void recordToTables(const MyRecord *data);
+//        void recordToTables(const MyRecord *data);
+        void createUser(const User *user);
+        void updateUser(const User *user);
 
 };
diff --git a/Database/create_tables.txt b/Database/create_tables.txt
index ec3745c..e959aed 100644
--- a/Database/create_tables.txt
+++ b/Database/create_tables.txt
@@ -1,17 +1,19 @@
 USE csci222;
 
+SET foreign_key_checks = 0;
+
 CREATE TABLE `UserType` (
 	`userID` int NOT NULL,
 	`confID` int NOT NULL,
 	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
 	`paidAmount` float NOT NULL DEFAULT 0,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
 CREATE TABLE `UserAccount` (
 	`userID` int NOT NULL AUTO_INCREMENT,
-	`username` varchar(32) NOT NULL,
+	`username` varchar(32) NOT NULL UNIQUE,
 	`password` varchar(32) NOT NULL,
 	`infoID` int NOT NULL,
 	PRIMARY KEY(`userID`),
@@ -33,9 +35,9 @@ CREATE TABLE `Emails` (
 	`emailID` int NOT NULL AUTO_INCREMENT,
 	`userID` int NOT NULL,
 	`confID` int NOT NULL,
-	`emailType` ENUM(`accountCreation`, `accountModified`, `paperSubmitted`, `paperAssigned`, `paperReviewed`, `rebuttalNeeded`, `rebuttalSubmitted`, `biddingOpen`, `paperAccepted`, `paperRejected`, `ReviewersNeeded`, `AllPapersReviewed`, `invitationCommitte`, `invitationChair`, `softDeadline`, `hardDeadline`),
+	`emailType` ENUM('accountCreation', 'accountModified', 'paperSubmitted', 'paperAssigned', 'paperReviewed', 'rebuttalNeeded', 'rebuttalSubmitted', 'biddingOpen', 'paperAccepted', 'paperRejected', 'ReviewersNeeded', 'AllPapersReviewed', 'invitationCommitte', 'invitationChair', 'softDeadline', 'hardDeadline'),
 	PRIMARY KEY(`emailID`),
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
@@ -46,10 +48,12 @@ CREATE TABLE `ExpertiseArea` (
 	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
+ALTER TABLE `ExpertiseArea` ADD UNIQUE `unique_index`(`userID`, `expertiseID`);
+
 CREATE TABLE `Keywords` (
 	`keywordID` int NOT NULL AUTO_INCREMENT,
-	`keyword` varchar(64) NOT NULL,
-	PRIMARY KEY(`expertiseID`)
+	`keyword` varchar(64) NOT NULL UNIQUE,
+	PRIMARY KEY(`keywordID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
 CREATE TABLE `Conference` (
@@ -68,7 +72,7 @@ CREATE TABLE `Conference` (
 	`discussDeadline` datetime,
 	`discussDeadlineBool` bool,
 	`reviewersPerPaper` int NOT NULL,
-	PRIMARY KEY(`conf_id`)
+	PRIMARY KEY(`confID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
 CREATE TABLE `ConferenceKeywords` (
@@ -76,6 +80,7 @@ CREATE TABLE `ConferenceKeywords` (
 	`keywordID` int,
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
 	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
 CREATE TABLE `Paper` (
 	`paperID` int NOT NULL AUTO_INCREMENT,
@@ -84,7 +89,7 @@ CREATE TABLE `Paper` (
 	`keywordID` int NOT NULL,
 	`paperTitle` varchar(512) NOT NULL,
 	`paperAbstract` varchar(4096) NOT NULL,
-	`paperStatus` ENUM(`accepted`, `rejected`, submitted`, `assigned`, `reviewed`),
+	`paperStatus` ENUM('accepted', 'rejected', 'submitted', 'assigned', 'reviewed'),
 	`paper` blob NOT NULL,
 	PRIMARY KEY(`paperID`),
 	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
@@ -102,7 +107,7 @@ CREATE TABLE `AcceptedPapers` (
 CREATE TABLE `paperAuthors` (
 	`paperID` int NOT NULL,
 	`authorID` int NOT NULL,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
 	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
@@ -139,9 +144,9 @@ CREATE TABLE `Review` (
 	`commentsShortPaper` varchar(4096),
 	`commentsBestAward` varchar(4096),
 	`authorRebuttal` varchar(4096),
-	PRIMARY KEY(`report_id`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+	PRIMARY KEY(`reportID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`),
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
@@ -157,3 +162,4 @@ CREATE TABLE `ReviewerDiscussion` (
 	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+SET foreign_key_checks = 1;
diff --git a/Database/main.cpp b/Database/main.cpp
index 05cbb35..6a3c8ab 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -6,95 +6,109 @@
 #include "MyRecord.h"
 #include "MyRecordStore.h"
 
+#include "Database.hpp"
+#include "../Server/User.hpp"
+
 #include <vector>
 
-typedef MyRecord* RecordPtr;
-std::vector<RecordPtr> g_theRecords;
+typedef User* userPtr;
+std::vector<userPtr> g_theUsers;
 
-static void createData();
+static void createUsers();
 
 int main(int arc, char *argv[])
 {
-        createData();
-        MyRecordStore astore;
-        if (!astore.isOK())
+        createUsers();
+        Database db;
+        if (!db.isOK())
         {
                 std::cout << "Failed to open database file" << std::endl;
                 exit(1);
         }
 
-        vector<RecordPtr>::const_iterator it;
-        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
+        vector<userPtr>::const_iterator it;
+        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
         {
-                RecordPtr ptr = (*it);
-                const char* key = ptr->getID().c_str();
-                astore.put(key, ptr);
+                userPtr ptr = (*it);
+                std::string key = ptr->userName;
+                db.putUser(key, ptr);
                 std::cout << "Wrote record " << key << std::endl;
         }
-        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
+
+	std::vector<std::string> *Names = db.allUserNames();
+	std::vector<std::string>::iterator iter;
+
+        for(iter=Names->begin(); iter!=Names->end(); iter++)
         {
-                RecordPtr ptr = (*it);
-                const char* key = ptr->getID().c_str();
-                astore.deleteRecord(key);
-                std::cout << "Deleted record " << key << std::endl;
+                std::string key = (*iter);
+                userPtr user = db.fetchUser(key);
+                std::cout << user->userName << " " << user->name << " " <<  user->keywords[0] << " " << user->email << " " << key << std::endl;
         }
+//        for(it=g_theUsers.begin(); it!=g_theUsers.end(); it++)
+//        {
+//                userPtr ptr = (*it);
+//                int key = ptr->userID;
+//                db.deleteRecord(key);
+//                std::cout << "Deleted record " << key << std::endl;
+//        }
         return EXIT_SUCCESS;
 }
 
-static void createData()
+static void createUsers()
 {
         // Hard code procedural creation of a few records so that can
         // have some data to show in the Qt based GUI
-        RecordPtr next;
-        std::string id;
+        userPtr next;
+        std::string username;
+        std::string password;
         std::string name;
-        std::string aRole;
-        std::string imagestr;
-        std::string file;
+        std::string email;
+        std::string organisation;
+	std::string phone;
 
         // You will need to adjust filenames etc to match the image files
         // that you provide
         {
-                id = "tom";
+		std::vector<std::string> keywords;
+                username = "tom";
+		password = "fake";
                 name = "Thomas";
-                file = "./images/om.jpg";
-                next = new MyRecord(id);
-                next->setName(name);
-                aRole = "Boss";
-                next->addRole(aRole);
-                aRole="Manager";
-                next->addRole(aRole);
-                std::string email = "boos_tom@ourcompany.com.au";
-                next->setEmail(email);
-                std::string phones = "Phones";
-                std::string mbl = "Mobile";
-                std::string phnnum = "04666666666";
-                next->addKeyValue(phones, mbl, phnnum);
-                std::string others = "Other";
-                std::string key = "Height";
-                std::string value = "1.89m";
-                next->addKeyValue(others, key, value);
-                key = "Golf Handicap";
-                value = "6";
-                next->addKeyValue(others, key, value);
-                g_theRecords.push_back(next);
+                email = "boos_tom@ourcompany.com.au";
+		organisation = "University of Wollongong";
+                phone = "04666666666";
+		keywords.push_back("mathematics");
+		keywords.push_back("science");
+		next = new User(
+			username,
+			name,
+			email,
+			organisation,
+			phone,
+			password,
+			keywords);
+
+                g_theUsers.push_back(next);
         }
         {
-                id = "dick";
+		std::vector<std::string> keywords;
+                username = "dick";
+		password = "wrong";
                 name = "Dick";
-                file = "./images/dick.jpg";
-                next = new MyRecord(id);
-                next->setName(name);
-                aRole="Accountant";
-                next->addRole(aRole);
-                std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
-                next->setInfo(info);
-                std::string email = "clever_dick@ourcompany.com.au";
-                next->setEmail(email);
-                std::string phones = "Phones";
-                std::string mbl = "Mobile";
-                std::string phnnum = "04666667666";
-                next->addKeyValue(phones, mbl, phnnum);
-                g_theRecords.push_back(next);
+                email = "clever_dick@ourcompany.com.au";
+                email = "boos_m@ourcompany.com.au";
+		organisation = "University of Wollongong";
+                phone = "04666667666";
+		keywords.push_back("geographyt");
+		keywords.push_back("english");
+		next = new User(
+			username,
+			name,
+			email,
+			organisation,
+			phone,
+			password,
+			keywords);
+
+                g_theUsers.push_back(next);
         }
 }
diff --git a/Server/User.hpp b/Server/User.hpp
index 041c206..2fa0ddb 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -6,13 +6,30 @@
 
 
 struct User {
+  User(std::string& iuserName,
+         std::string& iname,
+         std::string& iemail,
+         std::string& iorganisation,
+         std::string& iphone,
+         std::string& ipassword,
+         int iuserID,
+         std::vector<std::string>& ikeywords):
+         userName(iuserName),
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         userID(iuserID),
+         keywords(ikeywords)
+         { }
+
   User(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
          const std::string& ipassword,
-         int iuserID,
          const std::vector<std::string>& ikeywords):
          userName(iuserName),
          name(iname),
@@ -20,7 +37,6 @@ struct User {
          organisation(iorganisation),
          phone(iphone),
          password(ipassword),
-         userID(iuserID),
          keywords(ikeywords)
          { }
   std::string userName{""};

commit b9344ac7c0420f114523d56de2d955a160a336fb
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Sat Oct 25 18:08:24 2014 +1100

    removed executables

diff --git a/UserClient/UserClientDriver.exe b/UserClient/UserClientDriver.exe
deleted file mode 100644
index e0356fa..0000000
Binary files a/UserClient/UserClientDriver.exe and /dev/null differ
diff --git a/UserClient/UserClientDriver.o b/UserClient/UserClientDriver.o
deleted file mode 100644
index 7a9e899..0000000
Binary files a/UserClient/UserClientDriver.o and /dev/null differ

commit 3f8c5ed467d6de05642efe96944599b16ba82af0
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Sat Oct 25 18:04:16 2014 +1100

    removed executables

diff --git a/AdminClient/AdminClientDriver.exe b/AdminClient/AdminClientDriver.exe
deleted file mode 100644
index 789328e..0000000
Binary files a/AdminClient/AdminClientDriver.exe and /dev/null differ
diff --git a/AdminClient/AdminClientDriver.o b/AdminClient/AdminClientDriver.o
deleted file mode 100644
index 4e7a548..0000000
Binary files a/AdminClient/AdminClientDriver.o and /dev/null differ
diff --git a/AdminClient/Conference.exe b/AdminClient/Conference.exe
deleted file mode 100644
index 7a2a5d4..0000000
Binary files a/AdminClient/Conference.exe and /dev/null differ
diff --git a/AdminClient/Conference.o b/AdminClient/Conference.o
deleted file mode 100644
index d0de159..0000000
Binary files a/AdminClient/Conference.o and /dev/null differ
diff --git a/Database/a.out b/Database/a.out
deleted file mode 100755
index 6da0062..0000000
Binary files a/Database/a.out and /dev/null differ
diff --git a/Server/ServerDriver.exe b/Server/ServerDriver.exe
deleted file mode 100644
index f9b0561..0000000
Binary files a/Server/ServerDriver.exe and /dev/null differ
diff --git a/Server/ServerDriver.o b/Server/ServerDriver.o
deleted file mode 100644
index d51dec9..0000000
Binary files a/Server/ServerDriver.o and /dev/null differ

commit 9f80e14d4c30abcb736d678744a23cc71d7e72e9
Author: laurencerm <l.robinsonmills+git@gmail.com>
Date:   Sat Oct 25 17:56:14 2014 +1100

    added gitignore file

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..56b00a6
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,13 @@
+# Files to be ignored by git
+# Lines that start with '#' are comments.
+# Please add anything you wish to nut push to git
+# to add to repository use command: "git add -f .gitignore"
+*.[oa]
+*~
+*.exe
+a.out
+*nbproject/
+Makefile
+*build/
+*dist/
+.*

commit 7adc045e27ef623feee699043e3cb4926e116d68
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 16:30:26 2014 +1100

    added definitions

diff --git a/Server/ClientHandler.cpp b/Server/ClientHandler.cpp
new file mode 100644
index 0000000..b733311
--- /dev/null
+++ b/Server/ClientHandler.cpp
@@ -0,0 +1,144 @@
+/* 
+ * 
+ */
+
+#include "ClientHandler.hpp"
+//#include "UserList.h" NOTE: old
+#include <iostream> 
+
+#include <QtNetwork>
+
+ClientHandler::ClientHandler(int socketDescriptor, QObject* parent)
+    : QThread(parent), socketDescriptor(socketDescriptor) {
+    this->tcpSocket = NULL;
+}
+
+void ClientHandler::run() {
+    //using namespace std;
+    std::cout << "Handling a new client at socketDescriptor " << this->socketDescriptor << std::endl;
+    this->tcpSocket = new QTcpSocket(0);
+    this->tcpSocket->setSocketDescriptor(this->socketDescriptor);
+    
+    this->running = true;
+    while (this->running)
+        handleOneRequest();
+    
+    std::cout << "Client terminated on socketOescriptor " << this->socketDescriptor << std::endl;
+    if (this->tcpSocket->state() == QAbstractSocket::ConnectedState) {
+        this->tcpSocket->disconnectFromHost();
+        this->tcpSocket->waitForDisconnected();
+    }
+}
+
+void ClientHandler::handleOneRequest() {
+    if (this->getRequest())
+        this->dispatchRequest(); 
+}
+
+bool ClientHandler::getRequest() {
+    //using namespace std;
+    requestData.clear();
+    // Requests:
+    // there is a 4byte integer in Ot's wire format that specifies
+    // size of the data portion
+    // then there is a data portion of some number of bytes 
+
+    // Wait, with timeout, for the 4byte header
+    // Then wait again for all the data to arrive before reading data.
+
+    if (!this->waitForBytes((int) sizeof (quint32)))
+        return false;
+
+    quint32 blockSize;
+    QDataStream in(tcpSocket);
+    in.setVersion(QDataStream::Qt_4_0);
+    in >> blockSize;
+    if (!waitForBytes((int) blockSize)) return NULL;
+
+    // Simply read the bytes into requestData - leave it to the dispatch
+    // function to sort out what information is there. 
+
+    this->requestData = this->tcpSocket->read(blockSize);
+    return true; 
+} 
+
+bool ClientHandler::waitForBytes(int numbytes) {
+    //using namespace std; 
+
+    const int Timeout = 500000;
+    while (tcpSocket->bytesAvailable() < numbytes) {
+        bool ready = tcpSocket->waitForReadyRead(Timeout);
+
+        if (!ready) {
+            // "wait for ready read" will return false if no bytes received
+            // and have timed out
+            // abortOnError("time out while waiting data on socket");
+            this->running = false;
+            return false;
+        }
+        // more bytes received, but were they sufficient in number?
+    }
+    // Finally have required number of bytes
+    return true; 
+}
+
+void ClientHandler::dispatchRequest() {
+    //using namespace std; 
+
+    requestReader = new QDataStream(&requestData, QIODevice::ReadOnly);
+    requestReader->setVersion(QDataStream::Qt_4_0);
+    QString cmd;
+    (*requestReader) >> cmd;
+    if (cmd == "CHECKUSER")
+        this->handleUserCheckRequest();
+
+    delete requestReader;
+    this->requestData.clear();
+}
+
+void ClientHandler::handleUserCheckRequest() {
+    QString uname;
+    QString pword;
+    (*requestReader) >> uname;
+    (*requestReader) >> pword;
+
+    prepareToRespond();
+    
+    //UserList users;
+    bool response = true; // NOTE: check username here. was: users.CheckUserPassword(uname, pword);
+    
+    QString cmd = "CHECKUSER";
+    (*this->responseWriter) << cmd;
+    
+    (*this->responseWriter) << response;
+    this->sendResponse(); 
+}
+
+void ClientHandler::prepareToRespond() {
+    this->responseData.clear(); 
+    this->responseWriter = new QDataStream(&responseData, QIODevice::WriteOnly);
+    this->responseWriter->setVersion(QDataStream::Qt_4_0);
+    // place a 4-byte "0" value in the data buffer - will overwrite with length
+    // later
+    (*this->responseWriter) << (quint32) 0;
+    // Can now use responseWriter to write other elements of request to same
+    // buffer; 
+}
+
+void ClientHandler::sendResponse() {
+    // Request is complete - just have to adjust the length field
+    int datalength = this->responseData.size();
+
+    datalength -= sizeof (quint32);
+
+    this->responseWriter->device()->seek(0);
+    (*this->responseWriter) << (quint32) datalength; 
+
+    // send it
+    tcpSocket->write(responseData);
+    tcpSocket->flush();
+
+    // Now tidy up
+    delete this->responseWriter; 
+} 
+

commit e3e6b6c20b6a22e471471c5d0e859df903a19aaa
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 16:26:08 2014 +1100

    completed reworked

diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index 0fa6dcc..b98e2f9 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -1,3 +1,50 @@
+/*
+ *    acts as the client for the server
+ */
+
+#ifndef CLIENTHANDLER_H
+#define	CLIENTHANDLER_H
+
+#include <QThread>
+#include <QTcpSocket>
+#include <QByteArray>
+
+class ClientHandler : public QThread {
+    Q_OBJECT
+
+public:
+    ClientHandler(int socketDescriptor, QObject *parent);
+
+    void run();
+
+private: 
+
+    // handler functions here
+    void handleUserCheckRequest();
+
+    void handleOneRequest();
+    bool getRequest();
+    bool waitForBytes(int numbytes);
+
+    void dispatchRequest();
+    void prepareToRespond();
+    void sendResponse(); 
+
+    int socketDescriptor;
+    QTcpSocket *tcpSocket;
+    bool running;
+    QByteArray requestData;
+    QByteArray responseData; 
+
+    QDataStream *requestReader;
+    QDataStream *responseWriter; 
+
+};
+
+#endif	/* CLIENTHANDLER_H */
+
+
+/* old stuff
 #ifndef CLIENT_HANDLER_H
 #define CLIENT_HANDLER_H
 
@@ -19,3 +66,4 @@ private:
 
 };
 #endif
+*/

commit f369a3e4dd35a29b84955b4dc02788cae3fcb783
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sat Oct 25 15:37:25 2014 +1100

    Algo cleaned up a bit. Required SQL queries at bot

diff --git a/Algorithm/Algo b/Algorithm/Algo
index 96e86be..3a01765 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -1,5 +1,8 @@
 Algo:
+//PaperForReview Class has a paper and calculates a score for all the potential reviewers. This is then stored in an
+//array (of structs) which has the reviewerID and associated score for that reviewer.
 
+//TODO: getter function for a vector(?) of the reviewers
 
 struct ReviewerBid
 {
@@ -11,22 +14,25 @@ class PaperForReview
 {
 	private:
 		int paperID;
-
-
+		int conferenceID;
 		ReviewerBid[numOfReqReviewrs] reviewerBids;
 
 		std::vector<int> authors;
 		std::vector<int> involvedOrganisation;
 		std::vector<int> conflictingReviewersVec;
-	public:
 		PapersForReview(int);
 		~PapersForReview();
 		int getMinScore();
 		void setNewReviewer(int, int);
 		void checkNewReviewer(int, int);
 		void addAuthor(int);
-		void readInAllPapers();
 		void conflictingReviewers();
+		void algo();
+		void fillVectors();
+		
+	public:
+		//getter
+
 };
 
 void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
@@ -50,7 +56,7 @@ int PaperForReview::getMinScore()
 	return minScore;
 }
 
-void setNewReviewer(int newScore, int newReviewer)
+void PaperForReview::setNewReviewer(int newScore, int newReviewer)
 {
 
 	minScore = getMinScore();
@@ -71,14 +77,19 @@ PaperForReview::~PaperForReview()
 
 }
 
-PaperForReview::PaperForReview(int newPaperID)
+PaperForReview::PaperForReview(int newPaperID, int confID)
 {
 	paperID = newPaperID
+	conferenceID = confID;
 	
 	for(int i=0; i< NumOfReqReviewrs; i++)
 	{
 		reviewerBids[i].score = -1;
 	}
+	
+	fillVectors(paperID);
+	
+	algo(PaperID, confID);
 }
 
 
@@ -94,64 +105,93 @@ void  PaperForReview::conflictingReviewers()
 		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());
 
 
-	//usersFromSameOrganisation
+	//(3)usersFromSameOrganisation
 		//ForEachAuthor:   SelectOrganisation
 			//SelectAllUsersFromEachOrganisation
 				//PushBack^
 
 	//pastCoAuthors
-		//ForEachAuthor:   selectAllPapers in temp
+		//(4)ForEachAuthor:   selectAllPapers in temp
 			//Select All authors for each paper in temp
 				//pushBack^
 }
 
 
 
-std::map<PaperForReview*, int> allPapers; //Key is paper ID *** NEEDS TO BE DELETED***
 
-
-//TODO
-
-void readInAllPapers()
+int calculateScore(int userID, int paperID)
 {
-	// for all papers
-		//create new papers object
-
-		// select all Authors where paper==paperID
-			//addAuthors to paper
+	int score = 1;
 
-		// select organisation for each author
-			//add involved organisation
+	//(5)&(6)for each keyword match
+		 ++score;
 
-		// push new PaperForReview objects into the map
+	return score;
 
 }
 
+void PaperForReview::algo(int paperID, int conferenceID)
+{
+	std::vector<int> userIDs;
+	
+	//(7) fill userIDs with reviewers from conference
+	
+	 for all in userIDs
+	 {
+	 	int score = 0;
+		If UserID not in  conflictingReviewers
+		{
+			if(isYES())
+			{
+				score = calculateScore(userID, paperID) * (isYES()*1000000);
+				checkNewReviewer(score, userID);
+			}
+			elseif(isMAYBE())
+			{
+				score = calculateScore(userID, paperID) * (isMAYBE()*1000);
+				checkNewReviewer(score, userID);
+			}
+			elseif(!isCONFLICT())
+			{
+				score = calculate score(userID, paperID);
+				checkNewReviewer(score, userID);
+			}
+		}
+	}
+}
 
 
-
-
-int calculateScore(int userID, int paperID)
+void fillVectors(int paperID)
 {
-	int score = 1;
 
-	//for each keyword match
-		// ++ score
-
-	return score;
+	// (1)select all Authors where paper==paperID
+		//addAuthors to paper
 
+	// (2)select organisation for each author
+		//add involved organisation
+	
+	// CONFLICTING HERE
 }
 
+//(1)select author
+		//Where Paper ID = ?
+		
+//(2)select organisation
+		//where author = ?
+		
+
+//(3) select author
+		//where organisation = ?
+		
+//(4) select paperIDs
+		//where Author =?
+		
+//(5) select keywords
+		//where paperID = ?
+		
+//(6) select keywords
+		//where userID = ?
+		
+//(7) select pcs(reviewrs)
+		//where conferfence = ?
 
-//TODO
-//for each paper
-	//IfUserID not in  conflictingReviewers
-		//if(isYES())
-			//calculate score * (isYES()*1000)
-				//checkNewReviewer
-			//elseif(isMAYBE)
-				//calculate score * (isMAYBE()*100)
-				//checkNewReviewer
-			//else
-				//calculate score
-				//checkNewReviewer

commit 7949a0b8af491785e0cd9c7a84bddb2e3ed61329
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:36:57 2014 +1100

    Create AdminClientStubForServer.cpp
    
     *      definition for AdminClientStubForServer class
     *      acts as the server for the user client
     *      sends/handles requests/responses to/from the server

diff --git a/AdminClient/AdminClientStubForServer.cpp b/AdminClient/AdminClientStubForServer.cpp
new file mode 100644
index 0000000..26cec61
--- /dev/null
+++ b/AdminClient/AdminClientStubForServer.cpp
@@ -0,0 +1,137 @@
+/* 
+ * File:   AdminClientStubForServer.cpp
+ *      definition for AdminClientStubForServer class
+ *      acts as the server for the user client
+ *      sends/handles requests/responses to/from the server
+ * 
+ * Authors: Alex Cremona, Sam Evans, Matthew Hollingsworth, Luke Mazur,
+ *          Laurence Robinson-Mills
+ */
+
+// #include ui file for admin client
+#include "AdminClientStubForServer.hpp"
+
+// NOTE: future possible includes:
+// #include "LoginManager.hpp"
+// #include "User.hpp" // for UserType_t enum
+// etc.
+
+void AdminClientStubForServer::checkLoginDetails(QString uname, QString pword)
+{
+    if (this->busy)
+        return;
+
+    this->setupForRequest();
+    this->setupForResponse(); // expecting a response to this request
+    
+    // Send a QString with command name
+    QString checkLoginCmd = "CHECKLOGIN"; // NOTE: might be changed to enum
+    
+    (*this->requestWriter) << checkLoginCmd;
+    (*this->requestWriter) << uname;
+    (*this->requestWriter) << pword;
+    this->sendRequest();
+}
+
+void AdminClientStubForServer::handleCheckLoginDetailsResponse()
+{
+    int userType; // NOTE: UserType_t
+    QString msg;
+    (*this->responseReader) >> userType;
+    
+    
+    
+//    
+//    if(userType == "PCCHAIR")
+//        setUser(1);
+//    else if(userType == "REVIEWER")
+//        setUser(2);
+//    else if(userType == "AUTHOR")
+//        setUser(3);
+//    
+//    mainGui->showReponse(msg);
+    
+    
+}
+
+void AdminClientStubForServer::dispatch(QString responseName) {
+    if (responseName == "CHECKLOGIN")
+        handleCheckLoginDetailsResponse();
+}
+
+void AdminClientStubForServer::handleResponse() {
+    QString responseName;
+    (*this->responseReader) >> responseName;
+    this->dispatch(responseName);
+    this->busy = false; 
+} 
+
+void AdminClientStubForServer::setupForRequest() {
+    this->requestData.clear();
+    this->requestWriter = new QDataStream(&requestData, QIODevice::WriteOnly);
+    this->requestWriter->setVersion(QDataStream::Qt_4_0);
+    // place a 4-byte "0" value in the data buffer - will overwrite with length
+    // later
+    (*this->requestWriter) << (quint32) 0;
+    // Can now use requestWriter to write other elements of request to same
+    // buffer
+}
+
+void AdminClientStubForServer::sendRequest() {
+    // Request is complete - just have to adjust the length field
+    int datalength = this->requestData.size();
+    
+    datalength -= sizeof (quint32);
+    this->requestWriter->device()->seek(0);
+    (*this->requestWriter) << (quint32) datalength;
+    
+    // send it
+    this->theServer->write(requestData);
+    this->theServer->flush();
+    
+    // Now tidy up
+    delete this->requestWriter; 
+} 
+
+void AdminClientStubForServer::setupForResponse() {
+    this->busy = true;
+    // don't want any other requests made if need a response
+    
+    this->responseData.clear();
+    this->responseLength = 0;
+    this->responseLengthReceived = false;
+    this->responseReader = new QDataStream(&responseData, QIODevice::ReadOnly);
+    this->responseReader->setVersion(QDataStream::Qt_4_0);
+}
+
+void AdminClientStubForServer::readResponseData() {
+    // This function will be called repeatedly as the underlying system
+    // detects incoming bytes on the tcp connection.
+    
+    // First four bytes represent length of data block with real response
+    // Read these to set the hlocksize;
+    // then, in effect, "wait" for the complete message to arrive
+    // when message is complete, read the data into a buffer and call
+    // a dispatch routine to handle response
+    int headersize = sizeof (quint32);
+    if (!this->responseLengthReceived) {
+        // Waiting for the 4byte header
+        if (theServer->bytesAvailable() < headersize) return; // not ready
+        quint32 tmp;
+        QDataStream in(theServer);
+        in.setVersion(QDataStream::Qt_4_0);
+        in >> tmp;
+        
+        this->responseLength = tmp;
+        this->responseLengthReceived = true;
+    } 
+
+    // Waiting for the body of message
+    if (theServer->bytesAvailable() < this->responseLength) return; // not ready
+
+    this->responseData = theServer->read(this->responseLength);
+    // message received, so process it
+    this->handleResponse();
+    // and tidy up
+    delete this->responseReader;
+}

commit a434deee8360435c279ea029aec7eeda751a8f2d
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:36:31 2014 +1100

    Create AdminClientStubForServer.hpp
    
     *      header for AdminClientStubForServer class
     *      acts as the server for the admin client
     *      sends/handles requests/responses to/from the server

diff --git a/AdminClient/AdminClientStubForServer.hpp b/AdminClient/AdminClientStubForServer.hpp
new file mode 100644
index 0000000..e3c848d
--- /dev/null
+++ b/AdminClient/AdminClientStubForServer.hpp
@@ -0,0 +1,75 @@
+/* 
+ * File:   AdminClientStubForServer.hpp
+ *      header for AdminClientStubForServer class
+ *      acts as the server for the admin client
+ *      sends/handles requests/responses to/from the server
+ * 
+ * Authors: Alex Cremona, Sam Evans, Matthew Hollingsworth, Luke Mazur,
+ *          Laurence Robinson-Mills
+ */
+
+#ifndef USERCLIENTSTUBFORSERVER_H
+#define	USERCLIENTSTUBFORSERVER_H
+
+#include <qt4/Qt/QtCore>
+#include <qt4/Qt/QtNetwork>
+
+class MainWindow;
+
+class AdminClientStubForServer : public QObject {
+    
+    Q_OBJECT;
+public:
+    AdminClientStubForServer(QTcpSocket *aServer, MainWindow* aMainGui) {
+        this->theServer = aServer;
+        this->mainGui = aMainGui;
+        this->busy = false;
+    }
+    
+    // The communications are asynchronous - so the requests are "void"
+    // a request is sent; if a response is expect, the link is marked as busy
+    // any other requests will be discarded
+    
+    // Sometime a response will arrive - because its a network connection
+    // the response may come as several separate blocks of bytes 
+    // When a complete response is received, it is handled - there is a
+    // dispatcher function that recognises the different reponses and
+    // calls appropriate "call-back" functions that adjust data in the form
+    
+    // NOTE: functions for requests sent to server go here
+    void checkLoginDetails(QString uname, QString pword); // NOTE: example
+   
+public slots:
+    void readResponseData(); 
+
+private:
+    void setupForRequest();
+    void sendRequest();
+    void setupForResponse();
+    void handleResponse();
+    // Specific response handler routines
+    void dispatch(QString responseName);
+    
+    // NOTE: functions to handle responses from server go here
+    void handleCheckLoginDetailsResponse(); // NOTE: example
+    
+    // NOTE: probably delete
+    // Don't define copy constructor
+    // AdminClientStubForServer(const AdminClientStubForServer&) {}
+private:
+    bool busy;
+    QByteArray requestData;
+    QDataStream *requestWriter;
+    
+    QByteArray responseData;
+    QDataStream *responseReader;
+    bool responseLengthReceived;
+    int responseLength; 
+
+    // Collaborators 
+    QTcpSocket *theServer;
+    MainWindow *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
+
+};
+
+#endif	/* USERCLIENTSTUBFORSERVER_H */

commit f8efba5c7473698b6dbdb6f8e7b3db9a4a1a57a8
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:15:17 2014 +1100

    update temp testing main to open gui

diff --git a/UserClient/UserClientDriver.cpp b/UserClient/UserClientDriver.cpp
index 3d84db4..04e5b8c 100644
--- a/UserClient/UserClientDriver.cpp
+++ b/UserClient/UserClientDriver.cpp
@@ -1,4 +1,5 @@
 #include <iostream>
+#include <QApplication> // NOTE: might need to be <QtGui/QApplication>
 
 #include "Author.hpp"
 #include "Conference.hpp"
@@ -12,13 +13,19 @@
 #include "Reviewer.hpp"
 #include "User.hpp"
 
+#include "mainwindow.hpp" //NOTE: used for testing atm
 
+int main(int argc, char *argv[]) {
+    // initialize resources, if needed
+    // Q_INIT_RESOURCE(resfile);
 
-int main()
-{
-std::cout << "hello world" << std::endl;
-int foo = 6;
-auto bar = foo;
-std::cout << bar << "bar" << std::endl;
-return 0;
+    QApplication app(argc, argv);
+
+    MainWindow *foo = new MainWindow();
+    
+    foo->show();
+    
+    // create and show your widgets here
+
+    return app.exec();
 }

commit dd4e9c5efbb30fd14fd1364fcc28c4781ef488c7
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:11:29 2014 +1100

    began integration

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index f7c8785..95ebf58 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -6,7 +6,7 @@ MainWindow::MainWindow(QWidget *parent) :
     ui(new Ui::MainWindow)
 {
     ui->setupUi(this);
-    setUser(0);
+    noUser();
     ui->passwordLogin->setEchoMode(QLineEdit::Password);
 }
 
@@ -17,50 +17,40 @@ MainWindow::~MainWindow()
 
 void MainWindow::login()
 {
-    std::string username = ui->usernameLogin->text().toStdString();
-    std::string password = ui->passwordLogin->text().toStdString();
-
-    if(username == "PCChair" && password == "admin")
-        setUser(3);
-    else if(username == "Reviewer" && password == "user")
-        setUser(2);
-    else if(username == "Author" && password == "user")
-        setUser(1);
-
-    //if(loginMgr.login(ui->usernameLogin->text(), ui->passwordLogin->text()))
-      //  setUser(loginMgr.currentUser->uType);
-
-
+    if(loginMgr.login(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
+        setUser(loginMgr.currentUser->getUserType());
 }
 
 void MainWindow::logout()
 {
-    setUser(0);
-    //loginMgr.logout();
+    noUser();
+    loginMgr.logout();
+}
+
+void MainWindow::noUser()
+{
+    ui->tabWidget->clear();
+    ui->tabWidget->addTab(ui->loginTab, "Login");
 }
 
-void MainWindow::setUser(int userType)
+void MainWindow::setUser(UserType_t userType)
 {
     switch(userType)
     {
-    case 0://no user
-        ui->tabWidget->clear();
-        ui->tabWidget->addTab(ui->loginTab, "Login");
-        break;
-    case 1://author
+    case AUTHOR://author
         ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
         ui->tabWidget->addTab(ui->authorTab, "Author");
         //ui->tabWidget->removeTab(0);
         break;
-    case 2://reviewer
+    case REVIEWER://reviewer
         ui->tableWidget->clear();
         ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
         ui->tabWidget->addTab(ui->authorTab, "Author");
         ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
         ui->tabWidget->removeTab(0);
         break;
-    case 3://pcchair
+    case PCCHAIR://pcchair
         ui->tableWidget->clear();
         ui->tabWidget->addTab(ui->infoTabChair, "Information");
         ui->tabWidget->addTab(ui->usersTab, "User Management");
@@ -98,8 +88,8 @@ void MainWindow::on_passwordLogin_returnPressed()
 
 void MainWindow::on_createAccount_clicked()
 {
-    //if(loginMgr.createAccount(ui->usernameLogin->text(), ui->passwordLogin->text()))
-    //    setUser(loginMgr.currentUser->uType);
+    if(loginMgr.createAccount(ui->usernameLogin->text().toStdString(), ui->passwordLogin->text().toStdString()))
+        setUser(loginMgr.currentUser->getUserType());
 }
 
 void MainWindow::on_apply_clicked()
@@ -170,7 +160,6 @@ void MainWindow::on_selectPaperAuthor_activated(int index)
 
 }
 
-
 void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
 {
     ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());

commit 5269871174b2ed3ff53dd01fbf47e11ff10a6380
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:10:36 2014 +1100

    Create LoginManager.cpp

diff --git a/UserClient/LoginManager.cpp b/UserClient/LoginManager.cpp
new file mode 100644
index 0000000..a191957
--- /dev/null
+++ b/UserClient/LoginManager.cpp
@@ -0,0 +1,49 @@
+#include "LoginManager.hpp"
+
+bool LoginManager::login(std::string username, std::string password)
+{
+//    UserType_t uType;//from packet
+
+//        if(username == "PCChair" && password == "admin")
+//            uType = AUTHOR;
+//        else if(username == "Reviewer" && password == "user")
+//            uType = REVIEWER;
+//        else if(username == "Author" && password == "user")
+//            uType = PCCHAIR;
+
+
+//    std::vector<std::string> keys;
+//    std::vector<PaperSummary> papers;
+//    std::string blank = "";
+//    if(uType == AUTHOR){
+//        currentUser = new Author(username, blank, blank, blank, blank, 0, AUTHOR);
+//        currentUser->setUserType(AUTHOR);
+//        return true;
+//    } else if (uType == REVIEWER){
+//        currentUser = new Reviewer(username, "", "", "", "", 0, REVIEWER);
+//        currentUser->setUserType(REVIEWER);
+//        return true;
+//    } else if (uType == PCCHAIR) {
+//        currentUser = new PCChair(username, "", "", "", "", 0, PCCHAIR);
+//        currentUser->setUserType(PCCHAIR);
+//        return true;
+//    } else return false;
+
+    //this function sends the username and password to the server for verification
+    //the response received is used to construct the currentUser pointer member of loginmanager
+
+
+
+}
+
+void LoginManager::logout()
+{
+    //no server client interaction
+    //acts as a destructor basically
+}
+
+bool LoginManager::createAccount(std::string username, std::string password)
+{
+    //this functions identically to login except that a new record is created in the database with the supplkied details
+    //rather than verifying that one exists with matching details
+}

commit f528222153f343f6ee02e87a548a1327c66a1059
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:09:45 2014 +1100

    removed redundant fns

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index cdf1bec..15669ec 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -31,6 +31,7 @@ class Reviewer : public Author {
       papersToBid(ipapersToBid),
       reviews(ireviews)
       { } */
+    Reviewer() {}
     Reviewer(const std::string& iuserName,
       const std::string& iname,
       const std::string& iemail,
@@ -65,8 +66,8 @@ class Reviewer : public Author {
     void submitReview();
     void editReview();
     void bidOnPaper();
-    void modifyPaper();
-    void viewDiscussion();
+//    void modifyPaper();
+    void getDiscussion();
     void addDiscussion();
 
     std::vector<PaperSummary> getAllocatedPapers() {return allocatedPapers;}

commit 5a86999f676649c5b92b672f63e0a3ed3699eb8d
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:08:53 2014 +1100

    added allUsers vector, removed redundant fns

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index cc55913..986b0b1 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -14,23 +14,25 @@ class PCChair : public User {
   { }
   std::vector<PaperSummary> getAllPapers() {return allPapers;}
   void setAllPapers(const std::vector<PaperSummary>& iallPapers) {allPapers = iallPapers;}
-  Conference* getActiveConference() {return activeConference;}
-  void setActiveConference(Conference* iactiveConference) {activeConference = iactiveConference;}
   void view();
-  void removeReviewer();
+  void removeReviewerFromConf(int);
+  void removeReviewerFromPaper(int, int);
   bool removeReviewerByName(std::string);
-  void checkConferencesDeadlines();
   void editConfDetails();
-  void setConfDeadlines();
-  void setConfKWords();
-  int getAvgScoreForPaper();
-  void acceptOrRejectPaper();
-  void addReviewerToConf();
+  //void setConfDeadlines();
+  //void setConfKWords();covered by above
+  //int getAvgScoreForPaper();dont think we really need this
+  void acceptOrRejectPaper(int);
+  void addReviewerToConf(int);
+  void addReviewerToPaper(int, int);
+  void fetchPapers();
+  void fetchUsers();
 
   private:
   PaperSummary* getPaperByTitle(std::string);
   PaperSummary* getPaperById(int);
   std::vector<PaperSummary> allPapers;
+  std::vector<User> allUsers;
   Conference* activeConference{nullptr};
 };
 #endif

commit 8b9e337bde84396345741c93e753b6cc130d5b4a
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:07:06 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 8efc2ca..a8c13c1 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -57,7 +57,8 @@ class Author : public User {
          ownPapers(iownPapers)
          { }
     virtual void view();
-    void getPapers();
+    void getAllPapers();
+    void getPaper();
     void submitPaper();
     void modifyPaper();
     void submitRebuttal();
@@ -66,6 +67,5 @@ class Author : public User {
 
   protected:
     std::vector<PaperSummary> ownPapers;
-
 };
 #endif

commit 01752a3417006537ea2c71ef1b243052338eb9ff
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:06:45 2014 +1100

    Create UserClientStubForServer.cpp
    
     *      definition for UserClientStubForServer class
     *      acts as the server for the user client
     *      sends/handles requests/responses to/from the server

diff --git a/UserClient/UserClientStubForServer.cpp b/UserClient/UserClientStubForServer.cpp
new file mode 100644
index 0000000..6645d91
--- /dev/null
+++ b/UserClient/UserClientStubForServer.cpp
@@ -0,0 +1,137 @@
+/* 
+ * File:   UserClientStubForServer.cpp
+ *      definition for UserClientStubForServer class
+ *      acts as the server for the user client
+ *      sends/handles requests/responses to/from the server
+ * 
+ * Authors: Alex Cremona, Sam Evans, Matthew Hollingsworth, Luke Mazur,
+ *          Laurence Robinson-Mills
+ */
+
+#include "mainwindow.hpp"
+#include "UserClientStubForServer.hpp"
+
+// NOTE: future possible includes:
+// #include "LoginManager.hpp"
+// #include "User.hpp" // for UserType_t enum
+// etc.
+
+void UserClientStubForServer::checkLoginDetails(QString uname, QString pword)
+{
+    if (this->busy)
+        return;
+
+    this->setupForRequest();
+    this->setupForResponse(); // expecting a response to this request
+    
+    // Send a QString with command name
+    QString checkLoginCmd = "CHECKLOGIN"; // NOTE: might be changed to enum
+    
+    (*this->requestWriter) << checkLoginCmd;
+    (*this->requestWriter) << uname;
+    (*this->requestWriter) << pword;
+    this->sendRequest();
+}
+
+void UserClientStubForServer::handleCheckLoginDetailsResponse()
+{
+    int userType; // NOTE: UserType_t
+    QString msg;
+    (*this->responseReader) >> userType;
+    
+    
+    
+//    
+//    if(userType == "PCCHAIR")
+//        setUser(1);
+//    else if(userType == "REVIEWER")
+//        setUser(2);
+//    else if(userType == "AUTHOR")
+//        setUser(3);
+//    
+//    mainGui->showReponse(msg);
+    
+    
+}
+
+void UserClientStubForServer::dispatch(QString responseName) {
+    if (responseName == "CHECKLOGIN")
+        handleCheckLoginDetailsResponse();
+}
+
+void UserClientStubForServer::handleResponse() {
+    QString responseName;
+    (*this->responseReader) >> responseName;
+    this->dispatch(responseName);
+    this->busy = false; 
+} 
+
+void UserClientStubForServer::setupForRequest() {
+    this->requestData.clear();
+    this->requestWriter = new QDataStream(&requestData, QIODevice::WriteOnly);
+    this->requestWriter->setVersion(QDataStream::Qt_4_0);
+    // place a 4-byte "0" value in the data buffer - will overwrite with length
+    // later
+    (*this->requestWriter) << (quint32) 0;
+    // Can now use requestWriter to write other elements of request to same
+    // buffer
+}
+
+void UserClientStubForServer::sendRequest() {
+    // Request is complete - just have to adjust the length field
+    int datalength = this->requestData.size();
+    
+    datalength -= sizeof (quint32);
+    this->requestWriter->device()->seek(0);
+    (*this->requestWriter) << (quint32) datalength;
+    
+    // send it
+    this->theServer->write(requestData);
+    this->theServer->flush();
+    
+    // Now tidy up
+    delete this->requestWriter; 
+} 
+
+void UserClientStubForServer::setupForResponse() {
+    this->busy = true;
+    // don't want any other requests made if need a response
+    
+    this->responseData.clear();
+    this->responseLength = 0;
+    this->responseLengthReceived = false;
+    this->responseReader = new QDataStream(&responseData, QIODevice::ReadOnly);
+    this->responseReader->setVersion(QDataStream::Qt_4_0);
+}
+
+void UserClientStubForServer::readResponseData() {
+    // This function will be called repeatedly as the underlying system
+    // detects incoming bytes on the tcp connection.
+    
+    // First four bytes represent length of data block with real response
+    // Read these to set the hlocksize;
+    // then, in effect, "wait" for the complete message to arrive
+    // when message is complete, read the data into a buffer and call
+    // a dispatch routine to handle response
+    int headersize = sizeof (quint32);
+    if (!this->responseLengthReceived) {
+        // Waiting for the 4byte header
+        if (theServer->bytesAvailable() < headersize) return; // not ready
+        quint32 tmp;
+        QDataStream in(theServer);
+        in.setVersion(QDataStream::Qt_4_0);
+        in >> tmp;
+        
+        this->responseLength = tmp;
+        this->responseLengthReceived = true;
+    } 
+
+    // Waiting for the body of message
+    if (theServer->bytesAvailable() < this->responseLength) return; // not ready
+
+    this->responseData = theServer->read(this->responseLength);
+    // message received, so process it
+    this->handleResponse();
+    // and tidy up
+    delete this->responseReader;
+}

commit 119b5ed554bb77e617a89a8aca8b745571b5fbdf
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:06:13 2014 +1100

    Create UserClientStubForServer.hpp
    
     *      header for UserClientStubForServer class
     *      acts as the server for the user client
     *      sends/handles requests/responses to/from the server

diff --git a/UserClient/UserClientStubForServer.hpp b/UserClient/UserClientStubForServer.hpp
new file mode 100644
index 0000000..6eb2a03
--- /dev/null
+++ b/UserClient/UserClientStubForServer.hpp
@@ -0,0 +1,75 @@
+/* 
+ * File:   UserClientStubForServer.hpp
+ *      header for UserClientStubForServer class
+ *      acts as the server for the user client
+ *      sends/handles requests/responses to/from the server
+ * 
+ * Authors: Alex Cremona, Sam Evans, Matthew Hollingsworth, Luke Mazur,
+ *          Laurence Robinson-Mills
+ */
+
+#ifndef USERCLIENTSTUBFORSERVER_H
+#define	USERCLIENTSTUBFORSERVER_H
+
+#include <qt4/Qt/QtCore>
+#include <qt4/Qt/QtNetwork>
+
+class MainWindow;
+
+class UserClientStubForServer : public QObject {
+    
+    Q_OBJECT;
+public:
+    UserClientStubForServer(QTcpSocket *aServer, MainWindow* aMainGui) {
+        this->theServer = aServer;
+        this->mainGui = aMainGui;
+        this->busy = false;
+    }
+    
+    // The communications are asynchronous - so the requests are "void"
+    // a request is sent; if a response is expect, the link is marked as busy
+    // any other requests will be discarded
+    
+    // Sometime a response will arrive - because its a network connection
+    // the response may come as several separate blocks of bytes 
+    // When a complete response is received, it is handled - there is a
+    // dispatcher function that recognises the different reponses and
+    // calls appropriate "call-back" functions that adjust data in the form
+    
+    // NOTE: functions for requests sent to server go here
+    void checkLoginDetails(QString uname, QString pword); // NOTE: example
+   
+public slots:
+    void readResponseData(); 
+
+private:
+    void setupForRequest();
+    void sendRequest();
+    void setupForResponse();
+    void handleResponse();
+    // Specific response handler routines
+    void dispatch(QString responseName);
+    
+    // NOTE: functions to handle responses from server go here
+    void handleCheckLoginDetailsResponse(); // NOTE: example
+    
+    // NOTE: probably delete
+    // Don't define copy constructor
+    // UserClientStubForServer(const UserClientStubForServer&) {}
+private:
+    bool busy;
+    QByteArray requestData;
+    QDataStream *requestWriter;
+    
+    QByteArray responseData;
+    QDataStream *responseReader;
+    bool responseLengthReceived;
+    int responseLength; 
+
+    // Collaborators 
+    QTcpSocket *theServer;
+    MainWindow *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
+
+};
+
+#endif	/* USERCLIENTSTUBFORSERVER_H */

commit 43b3627be7f2e61ea9524c11a1c140b23a121dd5
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:05:54 2014 +1100

    Create Author.cpp

diff --git a/UserClient/Author.cpp b/UserClient/Author.cpp
new file mode 100644
index 0000000..9973212
--- /dev/null
+++ b/UserClient/Author.cpp
@@ -0,0 +1,28 @@
+#include "Author.hpp"
+
+void Author::getAllPapers()
+{
+    //sends request to server asking for PaperSummaries
+
+    //populates ownPaper vector with response
+
+
+}
+
+void Author::getPaper()
+{
+    //sends request to server asking for Paper with id matching the id of the current PaperSummary
+    //sets currentPaper equal to the Paper returned in the response
+}
+
+void Author::modifyDetails()
+{
+    //sends a modified User packet to the server
+    //no response
+}
+
+void Author::modifyPaper()
+{
+    //sends a modified Paper packet to the server
+    //no response
+}

commit 51d1cabc91c933504882f614e8f83fb71f4ad7d1
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:05:03 2014 +1100

    Create Reviewer.cpp

diff --git a/UserClient/Reviewer.cpp b/UserClient/Reviewer.cpp
new file mode 100644
index 0000000..615f03d
--- /dev/null
+++ b/UserClient/Reviewer.cpp
@@ -0,0 +1,43 @@
+#include "Reviewer.hpp"
+
+void Reviewer::getPapersToReview()
+{
+    //sends request to server asking for all PaperSummaries allocated to the reviewer
+    //populates the allocatedPapers vector with the response PaperSummaries
+}
+
+void Reviewer::submitReview()
+{
+    //sends a Review packet to the server
+    // no response
+}
+
+void Reviewer::editReview()
+{
+    //sends a Review packet to the server
+    // no response
+    //may not need this function, may just be able to use the above
+}
+
+void Reviewer::bidOnPaper()
+{
+    //sends a bid packet to the server
+    //no response
+}
+
+//void Reviewer::modifyPaper()
+//{
+//dont think this is needed
+//}
+
+void Reviewer::getDiscussion()
+{
+    //requests a dicussion packet from the server
+    //sets the discussion of the currentPaper based on the response
+}
+
+void Reviewer::addDiscussion()
+{
+    //sends a discussion packet to the server
+    //no response, gui will hack the text onto the end of the discussion
+}

commit 53ad6d35199dd7fb5a485955d2f1098d2c26b1b7
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:04:54 2014 +1100

    Delete UserClientStubForServer.hpp
    
    added file to wrong folder, sorry :/

diff --git a/UserClientStubForServer.hpp b/UserClientStubForServer.hpp
deleted file mode 100644
index 6f17d04..0000000
--- a/UserClientStubForServer.hpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/* 
- * File:   ClientStubForRecordServer.hpp
- *      header for UserClientStubForServer class
- *      acts as the server for the user client
- *      sends/handles requests/responses to/from the server
- * 
- * Authors: Alex Cremona, Sam Evans, Matthew Hollingsworth, Luke Mazur,
- *          Laurence Robinson-Mills
- */
-
-#ifndef USERCLIENTSTUBFORSERVER_H
-#define	USERCLIENTSTUBFORSERVER_H
-
-#include <qt4/Qt/QtCore>
-#include <qt4/Qt/QtNetwork>
-
-class MainWindow;
-
-class UserClientStubForServer : public QObject {
-    
-    Q_OBJECT;
-public:
-    UserClientStubForServer(QTcpSocket *aServer, MainWindow* aMainGui) {
-        this->theServer = aServer;
-        this->mainGui = aMainGui;
-        this->busy = false;
-    }
-    
-    // The communications are asynchronous - so the requests are "void"
-    // a request is sent; if a response is expect, the link is marked as busy
-    // any other requests will be discarded
-    
-    // Sometime a response will arrive - because its a network connection
-    // the response may come as several separate blocks of bytes 
-    // When a complete response is received, it is handled - there is a
-    // dispatcher function that recognises the different reponses and
-    // calls appropriate "call-back" functions that adjust data in the form
-    
-    // NOTE: functions for requests sent to server go here
-    void checkLoginDetails(QString uname, QString pword); // NOTE: example
-   
-public slots:
-    void readResponseData(); 
-
-private:
-    void setupForRequest();
-    void sendRequest();
-    void setupForResponse();
-    void handleResponse();
-    // Specific response handler routines
-    void dispatch(QString responseName);
-    
-    // NOTE: functions to handle responses from server go here
-    void handleCheckLoginDetailsResponse(); // NOTE: example
-    
-    // NOTE: probably delete
-    // Don't define copy constructor
-    // UserClientStubForServer(const UserClientStubForServer&) {}
-private:
-    bool busy;
-    QByteArray requestData;
-    QDataStream *requestWriter;
-    
-    QByteArray responseData;
-    QDataStream *responseReader;
-    bool responseLengthReceived;
-    int responseLength; 
-
-    // Collaborators 
-    QTcpSocket *theServer;
-    MainWindow *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
-
-};
-
-#endif	/* USERCLIENTSTUBFORSERVER_H */

commit 19e2a824597ef242e8a72626236bcd46e000c781
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 15:04:26 2014 +1100

    Update PCChair.cpp
    
    added stub functions

diff --git a/UserClient/PCChair.cpp b/UserClient/PCChair.cpp
index c79a43e..1ebb2db 100644
--- a/UserClient/PCChair.cpp
+++ b/UserClient/PCChair.cpp
@@ -6,3 +6,54 @@ PCChair::checkConferencesDeadlines()
   //need to use getActiveConference to obtain it
   //returns nothing
 }
+
+void PCChair::fetchPapers()
+{
+    //request PaperSummaries for ALL Papers belonging to this conference
+    //populate allPapers vector with the PaperSummaries in the response
+
+}
+
+void PCChair::fetchUsers()
+{
+    //as above except for Users
+
+}
+
+void PCChair::removeReviewerFromConf(int)
+{
+    //construct packet matching data of the user with given uid but changing the utype to author
+    //no response
+}
+
+void PCChair::editConfDetails()
+{
+    //send modified conference packet to the server
+    //no response
+}
+
+void PCChair::acceptOrRejectPaper(bool)
+{
+    //send paper packet to server with data matching the current except that paper status is set to accepted if bool = true
+    //else set to false
+
+}
+
+void PCChair::addReviewerToConf(int)
+{
+    //construct packet matching data of the user with given uid but changing the utype to reviewer
+    //no response
+}
+
+void PCChair::addReviewerToPaper(int, int)
+{
+    //send PaperAssigned packet to server
+    //no response
+}
+
+void PCChair::removeReviewerFromPaper(int, int)
+{
+    //send PaperAssigned packet to server to be deleted
+    //no resposne
+
+}

commit 2a892c70311cc5514866ea6f20cdd3c7855024b8
Author: laurencerm <laurencerm@users.noreply.github.com>
Date:   Sat Oct 25 15:03:27 2014 +1100

    added ClientStubForServer
    
     *      header for UserClientStubForServer class
     *      acts as the server for the user client
     *      sends/handles requests/responses to/from the server

diff --git a/UserClientStubForServer.hpp b/UserClientStubForServer.hpp
new file mode 100644
index 0000000..6f17d04
--- /dev/null
+++ b/UserClientStubForServer.hpp
@@ -0,0 +1,75 @@
+/* 
+ * File:   ClientStubForRecordServer.hpp
+ *      header for UserClientStubForServer class
+ *      acts as the server for the user client
+ *      sends/handles requests/responses to/from the server
+ * 
+ * Authors: Alex Cremona, Sam Evans, Matthew Hollingsworth, Luke Mazur,
+ *          Laurence Robinson-Mills
+ */
+
+#ifndef USERCLIENTSTUBFORSERVER_H
+#define	USERCLIENTSTUBFORSERVER_H
+
+#include <qt4/Qt/QtCore>
+#include <qt4/Qt/QtNetwork>
+
+class MainWindow;
+
+class UserClientStubForServer : public QObject {
+    
+    Q_OBJECT;
+public:
+    UserClientStubForServer(QTcpSocket *aServer, MainWindow* aMainGui) {
+        this->theServer = aServer;
+        this->mainGui = aMainGui;
+        this->busy = false;
+    }
+    
+    // The communications are asynchronous - so the requests are "void"
+    // a request is sent; if a response is expect, the link is marked as busy
+    // any other requests will be discarded
+    
+    // Sometime a response will arrive - because its a network connection
+    // the response may come as several separate blocks of bytes 
+    // When a complete response is received, it is handled - there is a
+    // dispatcher function that recognises the different reponses and
+    // calls appropriate "call-back" functions that adjust data in the form
+    
+    // NOTE: functions for requests sent to server go here
+    void checkLoginDetails(QString uname, QString pword); // NOTE: example
+   
+public slots:
+    void readResponseData(); 
+
+private:
+    void setupForRequest();
+    void sendRequest();
+    void setupForResponse();
+    void handleResponse();
+    // Specific response handler routines
+    void dispatch(QString responseName);
+    
+    // NOTE: functions to handle responses from server go here
+    void handleCheckLoginDetailsResponse(); // NOTE: example
+    
+    // NOTE: probably delete
+    // Don't define copy constructor
+    // UserClientStubForServer(const UserClientStubForServer&) {}
+private:
+    bool busy;
+    QByteArray requestData;
+    QDataStream *requestWriter;
+    
+    QByteArray responseData;
+    QDataStream *responseReader;
+    bool responseLengthReceived;
+    int responseLength; 
+
+    // Collaborators 
+    QTcpSocket *theServer;
+    MainWindow *mainGui; // used to send server responses to gui NOTE: was LoginManager *theLoginForm;
+
+};
+
+#endif	/* USERCLIENTSTUBFORSERVER_H */

commit 2321d54c608ff5de666aa6de3fd7ba85ec52596e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:50:02 2014 +1100

    added allocation date

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 3ed3fd7..bf3410b 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -24,8 +24,20 @@ void ConferenceManager::checkDeadlines(Conference* in)
     Date today(now->tm_year + 1900,
                now->tm_mon + 1,
                now->tm_mday);
+    Date yesterday(now->tm_year + 1900,
+               now->tm_mon + 1,
+               now->tm_mday - 1);
     in->isBeforePaperDeadline = in->paperDeadline.compare(today);
+    in->isBeforeAllocationDate = in->allocationDate.compare(yesterday);
+    //for deadlines, you can still submit papers on the day of the paper deadline
+    //for dates, it occurs on the day, so if it is the day of the allocation date or after, allocation is done
+    //this means that it occurs one day earlier, this is why we use yesterday
     in->isBeforeSoftReviewDeadline = in->reviewDeadlineSoft.compare(today);
+    
+    if(!isBeforeAllocationDate) {
+        //run allocation
+    }
+    
     in->isBeforeHardReviewDeadline = in->reviewDeadlineHard.compare(today);
     in->isBeforeDiscussDeadline = in->discussDeadline.compare(today);
 

commit 8ffc7f10f8866e35ab5b4a0d1e0a705d8560bbb2
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:39:21 2014 +1100

    Update Conference.hpp

diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index b0507c8..7188c6e 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -18,6 +18,8 @@ struct Conference {
   const std::vector<std::string>& ikeywords,
   bool iisBeforePaperDeadline,
   const Date& ipaperDeadline,
+  bool iisBeforeAllocationDate,
+  const Date& iallocationDate,
   bool iisBeforeSoftReviewDeadline,
   const Date& ireviewDeadlineSoft,
   bool iisBeforeHardReviewDeadline,
@@ -35,6 +37,8 @@ struct Conference {
   keywords(ikeywords),
   isBeforePaperDeadline(iisBeforePaperDeadline),
   paperDeadline(ipaperDeadline),
+  isBeforeAllocationDate(iisBeforeAllocationDate),
+  allocationDate(iallocationDate),
   isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
   reviewDeadlineSoft(ireviewDeadlineSoft),
   isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
@@ -54,6 +58,8 @@ struct Conference {
   std::vector<std::string> keywords;
   bool isBeforePaperDeadline;
   Date paperDeadline;
+  bool isBeforeAllocationDate;
+  Date allocationDate;
   bool isBeforeSoftReviewDeadline;
   Date reviewDeadlineSoft;
   bool isBeforeHardReviewDeadline;

commit 8398d7deced1fe9a1bac94f64332b52ada25675e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:38:16 2014 +1100

    Update Conference.hpp

diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
index 239a1d6..e348cd5 100644
--- a/AdminClient/Conference.hpp
+++ b/AdminClient/Conference.hpp
@@ -15,6 +15,8 @@ struct Conference {
   const std::vector<std::string>& ikeywords,
   bool iisBeforePaperDeadline,
   const Date& ipaperDeadline,
+  bool iisBeforeAllocationDate,
+  const Date& iallocationDate,
   bool iisBeforeSoftReviewDeadline,
   const Date& ireviewDeadlineSoft,
   bool iisBeforeHardReviewDeadline,
@@ -32,6 +34,8 @@ struct Conference {
   keywords(ikeywords),
   isBeforePaperDeadline(iisBeforePaperDeadline),
   paperDeadline(ipaperDeadline),
+  isBeforeAllocationDate(iisBeforeAllocationDate),
+  allocationDate(iallocationDate),
   isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
   reviewDeadlineSoft(ireviewDeadlineSoft),
   isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
@@ -51,6 +55,8 @@ struct Conference {
   std::vector<std::string> keywords;
   bool isBeforePaperDeadline;
   Date paperDeadline;
+  bool isBeforeAllocationDate;
+  Date allocationDate;
   bool isBeforeSoftReviewDeadline;
   Date reviewDeadlineSoft;
   bool isBeforeHardReviewDeadline;

commit b37786c48b7bedcdb9af1594288096d91aa9aa11
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:30:49 2014 +1100

    added allocation date

diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 372778f..4849866 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -16,6 +16,8 @@ struct Conference {
   const std::vector<std::string>& ikeywords,
   bool iisBeforePaperDeadline,
   const Date& ipaperDeadline,
+  bool iisBeforeAllocationDate,
+  const Date& iallocationDate,
   bool iisBeforeSoftReviewDeadline,
   const Date& ireviewDeadlineSoft,
   bool iisBeforeHardReviewDeadline,
@@ -33,6 +35,8 @@ struct Conference {
   keywords(ikeywords),
   isBeforePaperDeadline(iisBeforePaperDeadline),
   paperDeadline(ipaperDeadline),
+  isBeforeAllocationDate(iisBeforeAllocationDate),
+  allocationDate(iallocationDate),
   isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
   reviewDeadlineSoft(ireviewDeadlineSoft),
   isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
@@ -52,6 +56,8 @@ struct Conference {
   std::vector<std::string> keywords;
   bool isBeforePaperDeadline;
   Date paperDeadline;
+  bool isBeforeAllocationDate;
+  Date allocationDate;
   bool isBeforeSoftReviewDeadline;
   Date reviewDeadlineSoft;
   bool isBeforeHardReviewDeadline;

commit 9f22cf07e6012f0685339b590dbb79b95cce0c5e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:15:25 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 41d052e..cc55913 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -14,9 +14,12 @@ class PCChair : public User {
   { }
   std::vector<PaperSummary> getAllPapers() {return allPapers;}
   void setAllPapers(const std::vector<PaperSummary>& iallPapers) {allPapers = iallPapers;}
+  Conference* getActiveConference() {return activeConference;}
+  void setActiveConference(Conference* iactiveConference) {activeConference = iactiveConference;}
   void view();
   void removeReviewer();
   bool removeReviewerByName(std::string);
+  void checkConferencesDeadlines();
   void editConfDetails();
   void setConfDeadlines();
   void setConfKWords();

commit 842e5d9a913dde89197f2386f10b7f710c2e64b8
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:15:21 2014 +1100

    Create PCChair.cpp

diff --git a/UserClient/PCChair.cpp b/UserClient/PCChair.cpp
new file mode 100644
index 0000000..c79a43e
--- /dev/null
+++ b/UserClient/PCChair.cpp
@@ -0,0 +1,8 @@
+#include "PCChair.hpp"
+
+PCChair::checkConferencesDeadlines()
+{
+  //calls checkDeadlines in conferenceManager on server with activeConference* 
+  //need to use getActiveConference to obtain it
+  //returns nothing
+}

commit 484d424f68ed72054f27a26fbd4aaa164d47b080
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:11:34 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 6991024..a299fad 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -25,7 +25,7 @@ public:
 
 
 private:
-  void checkDeadlines(const Conference&);
+  void checkDeadlines(Conference*);
   void fetchConference(int);
   std::vector<Conference*> conferences;
 };

commit e8c50bd3eed0cd047a80e523cb5d56211044f27c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:11:11 2014 +1100

    Update ConferenceManager.cpp

diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
index 72e5309..3ed3fd7 100644
--- a/Server/ConferenceManager.cpp
+++ b/Server/ConferenceManager.cpp
@@ -14,17 +14,20 @@
          << endl;
 }*/
 
-void ConferenceManager::checkDeadlines(const Conference& in)
+void ConferenceManager::checkDeadlines(Conference* in)
 {
+    if (in == nullptr) {
+        return;
+    }
     time_t t = time(0);   // get time now
     struct tm * now = localtime( & t );
     Date today(now->tm_year + 1900,
                now->tm_mon + 1,
                now->tm_mday);
-    in.isBeforePaperDeadline = in.paperDeadline.compare(today);
-    in.isBeforeSoftReviewDeadline = in.reviewDeadlineSoft.compare(today);
-    in.isBeforeHardReviewDeadline = in.reviewDeadlineHard.compare(today);
-    in.isBeforeDiscussDeadline = in.discussDeadline.compare(today);
+    in->isBeforePaperDeadline = in->paperDeadline.compare(today);
+    in->isBeforeSoftReviewDeadline = in->reviewDeadlineSoft.compare(today);
+    in->isBeforeHardReviewDeadline = in->reviewDeadlineHard.compare(today);
+    in->isBeforeDiscussDeadline = in->discussDeadline.compare(today);
 
 }
 

commit edd68409d43e5cfb6569b64e633ff12237c603b6
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:08:50 2014 +1100

    Update and rename Conference.cpp to ConferenceManager.cpp

diff --git a/Server/Conference.cpp b/Server/Conference.cpp
deleted file mode 100644
index cfa08e9..0000000
--- a/Server/Conference.cpp
+++ /dev/null
@@ -1,36 +0,0 @@
-#include <ctime>
-#include <iostream>
-
-#include "Conference.hpp"
-#include "Date.hpp"
-
-/*int main() {
-    time_t t = time(0);   // get time now
-    struct tm * now = localtime( & t );
-    int foo = now->tm_year + 1900;
-    std::cout << (foo) << '-'
-         << (now->tm_mon + 1) << '-'
-         <<  now->tm_mday
-         << endl;
-}*/
-
-void ConferenceManager::checkDeadlines(const Conference& in)
-{
-    time_t t = time(0);   // get time now
-    struct tm * now = localtime( & t );
-    Date today(now->tm_year + 1900,
-               now->tm_mon + 1,
-               now->tm_mday);
-    in.isBeforePaperDeadline = in.paperDeadline.compare(today);
-    in.isBeforeSoftReviewDeadline = in.reviewDeadlineSoft.compare(today);
-    in.isBeforeHardReviewDeadline = in.reviewDeadlineHard.compare(today);
-    in.isBeforeDiscussDeadline = in.discussDeadline.compare(today);
-
-}
-
-void ConferenceManager::checkAllDeadlines()
-{
-    for (unsigned i=0; i < conferences.size(); i++) {
-    checkDeadlines(conferences[i]);
-  }
-}
diff --git a/Server/ConferenceManager.cpp b/Server/ConferenceManager.cpp
new file mode 100644
index 0000000..72e5309
--- /dev/null
+++ b/Server/ConferenceManager.cpp
@@ -0,0 +1,36 @@
+#include <ctime>
+#include <iostream>
+
+#include "ConferenceManager.hpp"
+#include "Date.hpp"
+
+/*int main() {
+    time_t t = time(0);   // get time now
+    struct tm * now = localtime( & t );
+    int foo = now->tm_year + 1900;
+    std::cout << (foo) << '-'
+         << (now->tm_mon + 1) << '-'
+         <<  now->tm_mday
+         << endl;
+}*/
+
+void ConferenceManager::checkDeadlines(const Conference& in)
+{
+    time_t t = time(0);   // get time now
+    struct tm * now = localtime( & t );
+    Date today(now->tm_year + 1900,
+               now->tm_mon + 1,
+               now->tm_mday);
+    in.isBeforePaperDeadline = in.paperDeadline.compare(today);
+    in.isBeforeSoftReviewDeadline = in.reviewDeadlineSoft.compare(today);
+    in.isBeforeHardReviewDeadline = in.reviewDeadlineHard.compare(today);
+    in.isBeforeDiscussDeadline = in.discussDeadline.compare(today);
+
+}
+
+void ConferenceManager::checkAllDeadlines()
+{
+    for (unsigned i=0; i < conferences.size(); i++) {
+    checkDeadlines(conferences[i]);
+  }
+}

commit 84c9cffff3a72c9adf93a65ffba39b01bc03213a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 14:03:06 2014 +1100

    Create SuperUser.cpp

diff --git a/AdminClient/SuperUser.cpp b/AdminClient/SuperUser.cpp
new file mode 100644
index 0000000..684804b
--- /dev/null
+++ b/AdminClient/SuperUser.cpp
@@ -0,0 +1,8 @@
+#include "SuperUser.hpp"
+
+void SuperUser::checkAllDeadlines() 
+{
+  // returns nothing
+  // calls the checkAllDeadlines on the conf manager on the server
+  // takes no inputs
+}

commit aad9406912a92b5f2a82b28c858887e8172e0d0d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:50:25 2014 +1100

    added check all deadlines

diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index ea7b914..588417f 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -13,6 +13,7 @@ public:
 
   void view();
   void changeDetails();
+  void checkAllDeadlines();
   std::string getPassword() {return password;}
   void setPassword(const std::string& ipassword) {password = ipassword;}
 

commit 34f5796500e33dea6dd7cf380b0925ac3905f5e9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:46:58 2014 +1100

    implemented checkalldeadlines

diff --git a/Server/Conference.cpp b/Server/Conference.cpp
index 441e0a9..cfa08e9 100644
--- a/Server/Conference.cpp
+++ b/Server/Conference.cpp
@@ -14,16 +14,23 @@
          << endl;
 }*/
 
-void Conference::checkDeadlines()
+void ConferenceManager::checkDeadlines(const Conference& in)
 {
     time_t t = time(0);   // get time now
     struct tm * now = localtime( & t );
     Date today(now->tm_year + 1900,
                now->tm_mon + 1,
                now->tm_mday);
-    isBeforePaperDeadline = paperDeadline.compare(today);
-    isBeforeSoftReviewDeadline = reviewDeadlineSoft.compare(today);
-    isBeforeHardReviewDeadline = reviewDeadlineHard.compare(today);
-    isBeforeDiscussDeadline = discussDeadline.compare(today);
+    in.isBeforePaperDeadline = in.paperDeadline.compare(today);
+    in.isBeforeSoftReviewDeadline = in.reviewDeadlineSoft.compare(today);
+    in.isBeforeHardReviewDeadline = in.reviewDeadlineHard.compare(today);
+    in.isBeforeDiscussDeadline = in.discussDeadline.compare(today);
 
 }
+
+void ConferenceManager::checkAllDeadlines()
+{
+    for (unsigned i=0; i < conferences.size(); i++) {
+    checkDeadlines(conferences[i]);
+  }
+}

commit c346faf81b39acbc7f9265927c3f363faf45b705
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:28:59 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index ed67655..6991024 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -25,7 +25,7 @@ public:
 
 
 private:
-  void checkDeadlines();
+  void checkDeadlines(const Conference&);
   void fetchConference(int);
   std::vector<Conference*> conferences;
 };

commit 9ebd6972a392fa995fc558e13f257fadbf944a7b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:25:03 2014 +1100

    changed createAccount

diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 9535002..f0d8c2d 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -30,7 +30,7 @@ class LoginManager {
 
   bool login(std::string, std::string);
   void logout();
-  void createAccount();
+  bool createAccount(std::string, std::string);
   void listConferences();
   void viewActiveConfDetails();
   Conference* getActiveConference() {return activeConference;}

commit fa89bba1bf66d06c2009aa5fa7effccd16f96f0a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:21:47 2014 +1100

    moved methods to conference manager

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 50b8186..ed67655 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -20,12 +20,12 @@ public:
   void sendConference();
   void sendConferenceBatch();
   void checkAllDeadlines();
-  void checkDeadlines();
   void allocatePapers();
 
 
 
 private:
+  void checkDeadlines();
   void fetchConference(int);
   std::vector<Conference*> conferences;
 };

commit 67aa25c417d65ec43c96db4312784e8505b2f2c7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:14:09 2014 +1100

    moved methods to conference manager

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 207b37f..50b8186 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -20,6 +20,8 @@ public:
   void sendConference();
   void sendConferenceBatch();
   void checkAllDeadlines();
+  void checkDeadlines();
+  void allocatePapers();
 
 
 

commit b7ee84655d6dfa1ae7b6ab522cfa9e4491adefb0
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 13:10:59 2014 +1100

    moved methods to conference manager

diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 2da23ea..372778f 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -43,9 +43,6 @@ struct Conference {
   postWordLimit(ipostWordLimit)
   { }
 
-  void checkDeadlines();
-  void allocatePapers();
-
   bool isActive;
   std::string title{""};
   std::string confID{""};

commit 2c6443420ffedfaf734aaf73ffd7c4005042875f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:50:55 2014 +1100

    made class

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index f7e3a54..d4b8adc 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -3,12 +3,15 @@
 
 #include <string>
 
-struct UserManager {
-  UserManager() {temp = NULL;}
-  UserManager(User* itemp) : temp(itemp) { }
-  ~UserManager() { if(temp != nullptr)
-                     delete temp;}
-  User* temp{nullptr};
+class UserManager {
+public:
+  UserManager() { }
+  UserManager(User* icurrentUser) : currentUser(icurrentUser) { }
+  ~UserManager() { if(currentUser != nullptr)
+                     delete currentUser;}
+
+  User* getCurrentUser() {return currentUser;}
+  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
   void addUser();
   void modifyUser();
   bool deleteUser(int);
@@ -19,5 +22,6 @@ struct UserManager {
 
 private:
  void fetchUser(int);
+ User* currentUser{nullptr};
 };
 #endif

commit d8a95c0b3e24f56c0984d589c826b2b29931f443
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:47:13 2014 +1100

    made class

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 9bb1b39..e7b1e61 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -2,13 +2,15 @@
 #define PAPER_MANAGER_H
 #include "Paper.hpp"
 
-struct PaperManager {
-  PaperManager() {}
-  PaperManager(Paper* itemp) : temp(itemp) { }
-  ~PaperManager() { if(temp != nullptr)
-                      delete temp;}
-  Paper* temp{nullptr};
+class PaperManager {
+public:
+  PaperManager() { }
+  PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
+  ~PaperManager() { if(currentPaper != nullptr)
+                      delete currentPaper;}
 
+  Paper* getCurrentPaper() {return currentPaper;}
+  void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
   void addPaper();
   void modifyPaper(int);
   bool deleteDiscPost(int);
@@ -23,6 +25,6 @@ struct PaperManager {
 
 private:
 void fetchPaper(int);
-
+Paper* currentPaper{nullptr};
 };
 #endif

commit f441cb5a5358389b2dbaf5bea6aa24b0756b2393
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:40:12 2014 +1100

    made class

diff --git a/Server/Date.hpp b/Server/Date.hpp
index a94d1f0..8a78592 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -1,34 +1,39 @@
 #ifndef DATE_H
 #define DATE_H
 
-struct Date {
-  Date(int iday,
-    int imonth,
-    int iyear):
-    day(iday),
-    month(imonth),
-    year(iyear)
-    { }
-  Date(const Date& in) {
-  day = in.day;
-  month = in.month;
-  year = in.year;}
+class Date {
+public:
+Date() { }
+Date(int iday,
+int imonth,
+int iyear):
+day(iday),
+month(imonth),
+year(iyear)
+{ }
+Date(const Date& in) {
+day = in.day;
+month = in.month;
+year = in.year;}
+int getDay(int iday) {day = iday;}
+int getMonth(int imonth) {month = imonth;}
+int getYear(int iyear) {year = iyear;}
 bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-  {
-    if(idate.year != year) {
-      return idate.year < year;
-    } else {
-      if(idate.month != month) {
-        return idate.month < month;
-        } else {
-        if(idate.day != day) {
-      return idate.day < day;
-          }
-        }
-    }
-    return true;
-  }
-
+{
+if(idate.year != year) {
+return idate.year < year;
+} else {
+if(idate.month != month) {
+return idate.month < month;
+} else {
+if(idate.day != day) {
+return idate.day < day;
+}
+}
+}
+return true;
+}
+private:
 int day{0};
 int month{0};
 int year{0};

commit 40d107904bbf892011535036ca566778e0ced60a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:39:37 2014 +1100

    made class

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 06e569e..207b37f 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -3,7 +3,8 @@
 
 #include "Conference.hpp"
 
-struct ConferenceManager {
+class ConferenceManager {
+public:
   ConferenceManager(std::vector<Conference*> iconferences) : conferences(iconferences) { }
   ~ConferenceManager() {
   for (unsigned i=0; i < conferences.size(); i++) {
@@ -11,6 +12,8 @@ struct ConferenceManager {
   }
 }
 
+  std::vector<Conference*> getConferences() {return conferences;}
+  void setConferences(const std::vector<Conference*>& iconferences) {conferences = iconferences;}
   void addConference();
   void modifyConference(int);
   bool deleteConference(int);
@@ -18,10 +21,10 @@ struct ConferenceManager {
   void sendConferenceBatch();
   void checkAllDeadlines();
 
-  std::vector<Conference*> conferences;
+
 
 private:
   void fetchConference(int);
-
+  std::vector<Conference*> conferences;
 };
 #endif

commit 35afe0953803aec8ce7d85911bcf1b0a85de7c95
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:37:17 2014 +1100

    made class

diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index b9f8c75..0fa6dcc 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -5,15 +5,17 @@
 
 enum Request_t {ConferenceRequest, PaperRequest, UserRequest};
 
-struct ClientHandler {
+class ClientHandler {
+public:
   ClientHandler(Request_t irequest) : request(irequest)
     { }
-
-Request_t request;
-
-void handleClient();
-bool authenticate(std::string, std::string);
-bool connectToDB();
+  Request_t getRequest() {return request;}   
+  void setRequest(Request_t irequest) {request = irequest;}
+  void handleClient();
+  bool authenticate(std::string, std::string);
+  bool connectToDB();
+private:
+  Request_t request;
 
 };
 #endif

commit 9cb0aced6fcd78c24e59b7b58be1bdbe5936d24e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:34:16 2014 +1100

    added initialization list

diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
index c2be89d..5d0dbe5 100644
--- a/UserClient/PaperSummary.hpp
+++ b/UserClient/PaperSummary.hpp
@@ -4,6 +4,9 @@
 #include <string>
 
 struct PaperSummary {
+  PaperSummary(int ipaperId, const std::String& ipaperName) :
+              paperId(ipaperId), paperName(ipaperName)
+              { }
   int paperId{0};
   std::string paperName{""};
 };

commit 17faa836b9a6fd5e6e3fa39f6b55e88309e0ca36
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:30:12 2014 +1100

    made class

diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index 7b1aab4..8a78592 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -1,36 +1,39 @@
 #ifndef DATE_H
 #define DATE_H
 
-struct Date {
-  Date(int iday,
-    int imonth,
-    int iyear):
-    day(iday),
-    month(imonth),
-    year(iyear)
-    { }
-
-  Date(const Date& in) {
-  day = in.day;
-  month = in.month;
-  year = in.year;}
+class Date {
+public:
+Date() { }
+Date(int iday,
+int imonth,
+int iyear):
+day(iday),
+month(imonth),
+year(iyear)
+{ }
+Date(const Date& in) {
+day = in.day;
+month = in.month;
+year = in.year;}
+int getDay(int iday) {day = iday;}
+int getMonth(int imonth) {month = imonth;}
+int getYear(int iyear) {year = iyear;}
 bool compare(const Date& idate) //returns true if idate is before or on the same day as this
-  {
-    if(idate.year != year) {
-      return idate.year < year;
-    } else {
-      if(idate.month != month) {
-        return idate.month < month;
-        } else {
-        if(idate.day != day) {
-      return idate.day < day;
-          }
-        }
-    }
-    return true;
-  }
-
-
+{
+if(idate.year != year) {
+return idate.year < year;
+} else {
+if(idate.month != month) {
+return idate.month < month;
+} else {
+if(idate.day != day) {
+return idate.day < day;
+}
+}
+}
+return true;
+}
+private:
 int day{0};
 int month{0};
 int year{0};

commit 21cda42ae71ffff1aa3bee1ffbc4e89c146253e9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:29:16 2014 +1100

    moved searchforkwords to login manager and made class

diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index c9392ce..9535002 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -21,8 +21,13 @@ class LoginManager {
   }
   delete currentUser;
 }
-  User* currentUser{nullptr};
+
 // no other constructors deemed necessary at this point
+  User* getCurrentUser() {return currentUser;}
+  bool getLoggedIn() {return loggedIn;}
+  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}
+  void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}  
+
   bool login(std::string, std::string);
   void logout();
   void createAccount();
@@ -32,11 +37,14 @@ class LoginManager {
   std::vector<Conference*> getConferences() {return conferences;}
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
   void setConferences(const std::vector<Conference*>& iconferences) {conferences =  iconferences;}
+  std::vector<std::string> searchForKWords(std::string);
+
 
-  bool loggedIn;
   private:
+  User* currentUser{nullptr};
   std::vector<Conference*> conferences;
   Conference* activeConference{nullptr};
+  bool loggedIn;
 
 };
 #endif

commit 7aa53f9fd8f2f797a3ce2204063137b25cac3e6f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 12:26:08 2014 +1100

    moved searchforkwords to conference manager

diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index 6868cb3..b0507c8 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -45,8 +45,6 @@ struct Conference {
   postWordLimit(ipostWordLimit)
   { }
 
-  std::vector<std::string> searchForKWords(std::string);
-
   bool isActive;
   std::string title{""};
   std::string confID{""};

commit fa8cc07e59a2f58de1bcdf0b4d8ace4b555ff3cc
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sat Oct 25 12:15:21 2014 +1100

    minor changes

diff --git a/Algorithm/Algo b/Algorithm/Algo
index 4acf67f..96e86be 100644
--- a/Algorithm/Algo
+++ b/Algorithm/Algo
@@ -25,6 +25,7 @@ class PaperForReview
 		void setNewReviewer(int, int);
 		void checkNewReviewer(int, int);
 		void addAuthor(int);
+		void readInAllPapers();
 		void conflictingReviewers();
 };
 
@@ -107,14 +108,14 @@ void  PaperForReview::conflictingReviewers()
 
 
 std::map<PaperForReview*, int> allPapers; //Key is paper ID *** NEEDS TO BE DELETED***
-void readInAllPapers();
+
 
 //TODO
 
 void readInAllPapers()
 {
 	// for all papers
-		//create new paers object
+		//create new papers object
 
 		// select all Authors where paper==paperID
 			//addAuthors to paper

commit 9ff32a3e76ba23b7f5a9b1ac8687a089656d99fe
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:50:35 2014 +1100

    made class

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index ef6b35d..62873ce 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -5,9 +5,12 @@
 class PaperManager {
 public:
   PaperManager() { }
-  PaperManager(Paper* itemp) : temp(itemp) { }
-  ~PaperManager() { if(temp != nullptr)
-                     delete temp;}
+  PaperManager(Paper* icurrentPaper) : currentPaper(icurrentPaper) { }
+  ~PaperManager() { if(currentPaper != nullptr)
+                     delete currentPaper;}
+  Paper* getCurrentPaper() {return currentPaper;}
+  void setCurrentPaper(Paper* icurrentPaper) {currentPaper = icurrentPaper;}
+
   void createPaper();
   void removePaper();
   void listPapers();
@@ -15,7 +18,6 @@ public:
   void editPaper();
   void downloadPaper();
 
-  Paper* temp{nullptr};
 private:
   void viewDiscussion();
   void addDiscPost();
@@ -25,5 +27,8 @@ private:
   void listReviews();
   void editReview();
   void removeReview();
+
+  Paper* currentPaper{nullptr};
+
 };
 #endif

commit 37011bf4c3cffb403956d29877a40098afb2eef9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:48:17 2014 +1100

    made class

diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index 240d7b3..e3a373b 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -2,17 +2,21 @@
 #define USER_MANAGER_H
 #include "User.hpp"
 
-struct UserManager {
+class UserManager {
+public:
   UserManager() { }
-  UserManager(User* itemp) : temp(itemp) { }
-  ~UserManager() { if(temp != nullptr)
-                     delete temp;}
-  User* temp{nullptr};
+  UserManager(User* icurrentUser) : currentUser(icurrentUser) { }
+  ~UserManager() { if(currentUser != nullptr)
+                     delete currentUser;}
+  User* getCurrentUser() {return currentUser;}
+  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}  
   void createUser();
   void removeUser();
   void listUsers();
   void viewUser();
   void editUser();
+private:  
+  User* currentUser{nullptr};
 
 };
 #endif

commit b193df759accd9bc65fcaf2b7b326d041a5fb712
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:43:11 2014 +1100

    moved download paper to papermanager

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 6b9c41c..ef6b35d 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -2,7 +2,8 @@
 #define PAPER_MANAGER_H
 #include "Paper.hpp"
 
-struct PaperManager {
+class PaperManager {
+public:
   PaperManager() { }
   PaperManager(Paper* itemp) : temp(itemp) { }
   ~PaperManager() { if(temp != nullptr)
@@ -12,6 +13,7 @@ struct PaperManager {
   void listPapers();
   void viewPaper();
   void editPaper();
+  void downloadPaper();
 
   Paper* temp{nullptr};
 private:

commit eb55df66649d3e009efab77dc07fa2704fc74628
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:40:21 2014 +1100

    moved download paper to papermanager

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 103e5d5..3f6fb32 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -38,7 +38,5 @@ struct Paper {
       { }
 
     // no assignment operator or copy constructor deemed necessary at this point
-    void downloadPaper();
-
 };
 #endif

commit be258818c74373eacbff5650b0a7c9529a25ab71
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:35:29 2014 +1100

    made class

diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index 13fd999..1f859df 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -3,16 +3,24 @@
 
 #include "User.hpp"
 
-struct LoginManager {
+class LoginManager {
+public:
   LoginManager(bool iloggedIn) :
     loggedIn(iloggedIn)
     { }
   ~LoginManager() {
     delete currentUser;
   }
-  bool loggedIn;
+  bool getLoggedIn() {return loggedIn;}
+  User* getCurrentUser() {return currentUser;}
+  void setLoggedIn(bool iloggedIn) {loggedIn = iloggedIn;}
+  void setCurrentUser(User* icurrentUser) {currentUser = icurrentUser;}  
+  
   bool login(std::string, std::string);
   void logout();
+  
+private:
+  bool loggedIn;
   User* currentUser{nullptr};
 };
 #endif

commit 7aad4d2292a6c86a470e79d763b10b7e63f4598e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:30:59 2014 +1100

    made class

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index d4933aa..7593eb2 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -1,6 +1,7 @@
 #ifndef DATE_H
 #define DATE_H
-struct Date {
+class Date {
+public:  
   Date() { }
   Date(int iday,
     int imonth,
@@ -14,6 +15,11 @@ struct Date {
   day = in.day;
   month = in.month;
   year = in.year;}
+  
+  int getDay(int iday) {day = iday;}
+  int getMonth(int imonth) {month = imonth;}
+  int getYear(int iyear) {year = iyear;}
+  
   bool compare(const Date& idate) //returns true if idate is before or on the same day as this
   {
     if(idate.year != year) {
@@ -29,7 +35,7 @@ struct Date {
     }
     return true;
   }
-
+private:
 int day{0};
 int month{0};
 int year{0};

commit 40c43ee4ed6c08f9f62a9c197e116f9f3ea12119
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 25 11:28:19 2014 +1100

    made class

diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index d6a054c..6f0eb35 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -2,20 +2,25 @@
 #define CONFERENCE_MANAGER_H
 #include "Conference.hpp"
 
-struct ConferenceManager {
+class ConferenceManager {
+public:
   ConferenceManager() { }
-  ConferenceManager(Conference* itemp) : temp(itemp) { }
-  ~ConferenceManager() { if(temp != nullptr)
-                     delete temp;}
+  ConferenceManager(Conference* icurrentConference) : currentConference(icurrentConference) { }
+  ~ConferenceManager() { if(currentConference != nullptr)
+                     delete currentConference;}
 
+  Conference* getcurrentConference(return currentConference;)
+  void setConference(Conference* icurrentConference) {currentConference = icurrentConference;}
   void createConference();
   void removeConference();
   void listConferences();
   void viewConference();
   void editConference();
   void addKWords();
-
-  Conference* temp{nullptr};
+  
+  
+private:
+  Conference* currentConference{nullptr};
 
 };
 #endif

commit e188e9d4c0eba8a3249a1fc86b234aa00c62e786
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 10:35:51 2014 +1100

    Update mainwindow.ui

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index de76629..af90b00 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -33,7 +33,7 @@
       </rect>
      </property>
      <property name="currentIndex">
-      <number>7</number>
+      <number>3</number>
      </property>
      <widget class="QWidget" name="loginTab">
       <attribute name="title">
@@ -151,14 +151,21 @@
            </widget>
           </item>
           <item>
-           <widget class="QPushButton" name="quit">
+           <widget class="QPushButton" name="createAccount">
             <property name="text">
-             <string>Quit</string>
+             <string>Create Account</string>
             </property>
            </widget>
           </item>
          </layout>
         </item>
+        <item>
+         <widget class="QPushButton" name="quit">
+          <property name="text">
+           <string>Quit</string>
+          </property>
+         </widget>
+        </item>
        </layout>
       </widget>
      </widget>
@@ -230,16 +237,32 @@
          </widget>
         </item>
         <item>
-         <widget class="QTextEdit" name="textEdit">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
+         <layout class="QHBoxLayout" name="horizontalLayout_21">
+          <item>
+           <widget class="QListWidget" name="authKeyList"/>
+          </item>
+          <item>
+           <layout class="QVBoxLayout" name="verticalLayout_15">
+            <item>
+             <widget class="QLineEdit" name="authKeyEntry"/>
+            </item>
+            <item>
+             <widget class="QPushButton" name="addAuthKey">
+              <property name="text">
+               <string>Add Keyword</string>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QPushButton" name="rmvAuthKey">
+              <property name="text">
+               <string>Remove Keyword</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
         </item>
         <item>
          <spacer name="verticalSpacer_8">
@@ -270,72 +293,74 @@ p, li { white-space: pre-wrap; }
         </item>
        </layout>
       </widget>
-      <widget class="QLabel" name="conferenceName">
+      <widget class="QWidget" name="verticalLayoutWidget_14">
        <property name="geometry">
         <rect>
          <x>270</x>
          <y>10</y>
-         <width>271</width>
-         <height>71</height>
-        </rect>
-       </property>
-       <property name="font">
-        <font>
-         <pointsize>16</pointsize>
-         <weight>75</weight>
-         <italic>true</italic>
-         <bold>true</bold>
-        </font>
-       </property>
-       <property name="text">
-        <string>CONFERENCENAME</string>
-       </property>
-       <property name="scaledContents">
-        <bool>false</bool>
-       </property>
-      </widget>
-      <widget class="QLabel" name="label_2">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>70</y>
-         <width>391</width>
-         <height>41</height>
-        </rect>
-       </property>
-       <property name="text">
-        <string>CONFERENCETOPIC</string>
-       </property>
-      </widget>
-      <widget class="QLabel" name="label_3">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>120</y>
-         <width>221</width>
-         <height>31</height>
-        </rect>
-       </property>
-       <property name="text">
-        <string>CONFERENCELOCATION</string>
-       </property>
-      </widget>
-      <widget class="QTextBrowser" name="textBrowser_2">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>160</y>
-         <width>491</width>
-         <height>401</height>
+         <width>501</width>
+         <height>551</height>
         </rect>
        </property>
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+       <layout class="QVBoxLayout" name="verticalLayout_16">
+        <item>
+         <widget class="QLabel" name="conferenceName">
+          <property name="font">
+           <font>
+            <pointsize>16</pointsize>
+            <weight>75</weight>
+            <italic>true</italic>
+            <bold>true</bold>
+           </font>
+          </property>
+          <property name="text">
+           <string>CONFERENCENAME</string>
+          </property>
+          <property name="scaledContents">
+           <bool>false</bool>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label_2">
+          <property name="text">
+           <string>CONFERENCETOPIC</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label_3">
+          <property name="text">
+           <string>CONFERENCELOCATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_22">
+          <item>
+           <widget class="QLabel" name="label_26">
+            <property name="text">
+             <string>Keywords</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QListWidget" name="confKeyListNoEdit"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="textBrowser_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
 &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
 &lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
+          </property>
+         </widget>
+        </item>
+       </layout>
       </widget>
      </widget>
      <widget class="QWidget" name="infoTabChair">
@@ -469,6 +494,41 @@ p, li { white-space: pre-wrap; }
           </property>
          </widget>
         </item>
+        <item>
+         <widget class="QLabel" name="label_25">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_20">
+          <item>
+           <widget class="QListWidget" name="confKeyList"/>
+          </item>
+          <item>
+           <layout class="QVBoxLayout" name="verticalLayout_11">
+            <item>
+             <widget class="QLineEdit" name="confKeyEntry"/>
+            </item>
+            <item>
+             <widget class="QPushButton" name="addConfKey">
+              <property name="text">
+               <string>Add Keyword</string>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QPushButton" name="rmvConfKey">
+              <property name="text">
+               <string>Remove Keyword</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+         </layout>
+        </item>
        </layout>
       </widget>
      </widget>
@@ -487,30 +547,49 @@ p, li { white-space: pre-wrap; }
        </property>
        <layout class="QGridLayout" name="gridLayout_3">
         <item row="2" column="0">
-         <widget class="QTextEdit" name="authors_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
+         <layout class="QVBoxLayout" name="verticalLayout_8">
+          <item>
+           <widget class="QTableWidget" name="authorsTable">
+            <column>
+             <property name="text">
+              <string>Name</string>
+             </property>
+            </column>
+            <column>
+             <property name="text">
+              <string>Email</string>
+             </property>
+            </column>
+            <column>
+             <property name="text">
+              <string>Org</string>
+             </property>
+            </column>
+            <column>
+             <property name="text">
+              <string>Phone</string>
+             </property>
+            </column>
+           </widget>
+          </item>
+         </layout>
         </item>
         <item row="1" column="1">
-         <widget class="QTextEdit" name="keywords">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         <widget class="QComboBox" name="selectMainKey"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QComboBox" name="selectPaperAuthor">
+          <property name="editable">
+           <bool>true</bool>
           </property>
+          <item>
+           <property name="text">
+            <string>*NEW*</string>
+           </property>
+          </item>
          </widget>
         </item>
-        <item row="2" column="1">
+        <item row="5" column="1">
          <widget class="QTextEdit" name="paperAbstract">
           <property name="html">
            <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
@@ -521,28 +600,57 @@ p, li { white-space: pre-wrap; }
           </property>
          </widget>
         </item>
-        <item row="0" column="1">
-         <widget class="QLineEdit" name="paperName_2">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="3" column="0">
-         <widget class="QLineEdit" name="filename">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect"/>
-        </item>
-        <item row="1" column="0">
-         <widget class="QSpinBox" name="mainKey_2"/>
+        <item row="2" column="1">
+         <layout class="QVBoxLayout" name="verticalLayout_14">
+          <item>
+           <layout class="QHBoxLayout" name="horizontalLayout_4">
+            <item>
+             <widget class="QLineEdit" name="paperKeyEntry"/>
+            </item>
+            <item>
+             <widget class="QPushButton" name="addPaperKey">
+              <property name="text">
+               <string>Add Key</string>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QPushButton" name="rmvPaperKey">
+              <property name="text">
+               <string>Remove Key</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+          <item>
+           <widget class="QListWidget" name="paperKeyListAuth"/>
+          </item>
+         </layout>
         </item>
-        <item row="3" column="1">
-         <layout class="QHBoxLayout" name="horizontalLayout_4">
+        <item row="5" column="0">
+         <layout class="QVBoxLayout" name="verticalLayout_10">
+          <item>
+           <widget class="QPushButton" name="addAuthor">
+            <property name="text">
+             <string>Add Author</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="rmvAuthor">
+            <property name="text">
+             <string>Remove Author</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="filename">
+            <property name="text">
+             <string>FILENAME</string>
+            </property>
+           </widget>
+          </item>
           <item>
            <widget class="QPushButton" name="selectFile">
             <property name="text">
@@ -551,9 +659,9 @@ p, li { white-space: pre-wrap; }
            </widget>
           </item>
           <item>
-           <widget class="QPushButton" name="upload">
+           <widget class="QPushButton" name="submit">
             <property name="text">
-             <string>Upload</string>
+             <string>Submit</string>
             </property>
            </widget>
           </item>
@@ -648,7 +756,7 @@ p, li { white-space: pre-wrap; }
          </widget>
         </item>
         <item>
-         <widget class="QSpinBox" name="bid"/>
+         <widget class="QComboBox" name="selectBid"/>
         </item>
         <item>
          <widget class="QPushButton" name="submitBid">
@@ -676,16 +784,6 @@ p, li { white-space: pre-wrap; }
           </property>
          </widget>
         </item>
-        <item row="2" column="2">
-         <widget class="QPushButton" name="download_2">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect_2"/>
-        </item>
         <item row="1" column="0">
          <widget class="QLabel" name="mainKey_3">
           <property name="text">
@@ -700,25 +798,19 @@ p, li { white-space: pre-wrap; }
           </property>
          </widget>
         </item>
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
+        <item row="0" column="0">
+         <widget class="QComboBox" name="selectPaperReviewer"/>
         </item>
         <item row="2" column="1">
-         <widget class="QPushButton" name="pushButton">
+         <widget class="QPushButton" name="download_2">
           <property name="text">
-           <string>Review Paper</string>
+           <string>Download</string>
           </property>
          </widget>
         </item>
+        <item row="1" column="1">
+         <widget class="QListWidget" name="paperKeyListRev"/>
+        </item>
        </layout>
       </widget>
      </widget>
@@ -759,30 +851,6 @@ p, li { white-space: pre-wrap; }
         </rect>
        </property>
        <layout class="QGridLayout" name="gridLayout_6">
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser_4">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextEdit" name="authors_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
         <item row="0" column="0">
          <widget class="QLabel" name="paperName_4">
           <property name="text">
@@ -811,81 +879,276 @@ p, li { white-space: pre-wrap; }
           </property>
          </widget>
         </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_7">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>180</y>
-         <width>281</width>
-         <height>371</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_7">
-        <item row="0" column="0">
-         <widget class="QLabel" name="discussionLabel_3">
-          <property name="text">
-           <string>Discussion</string>
-          </property>
-         </widget>
-        </item>
         <item row="1" column="0">
-         <widget class="QTextBrowser" name="discussionBody_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
+         <widget class="QTableWidget" name="authorsTableMng">
+          <column>
+           <property name="text">
+            <string>Name</string>
+           </property>
+          </column>
+          <column>
+           <property name="text">
+            <string>Email</string>
+           </property>
+          </column>
+          <column>
+           <property name="text">
+            <string>Org</string>
+           </property>
+          </column>
+          <column>
+           <property name="text">
+            <string>Phone</string>
+           </property>
+          </column>
          </widget>
         </item>
+        <item row="1" column="1">
+         <widget class="QListWidget" name="paperKeyListMng"/>
+        </item>
        </layout>
       </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_5">
+      <widget class="QWidget" name="verticalLayoutWidget_11">
        <property name="geometry">
         <rect>
-         <x>540</x>
-         <y>180</y>
-         <width>221</width>
-         <height>371</height>
+         <x>250</x>
+         <y>190</y>
+         <width>511</width>
+         <height>361</height>
         </rect>
        </property>
-       <layout class="QVBoxLayout" name="verticalLayout_5">
+       <layout class="QVBoxLayout" name="verticalLayout_12">
         <item>
-         <widget class="QLabel" name="label_6">
-          <property name="text">
-           <string>Reviewers</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextBrowser" name="textBrowser_5"/>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_9">
-          <item>
-           <widget class="QLabel" name="label_5">
+         <layout class="QGridLayout" name="gridLayout_7">
+          <item row="0" column="0">
+           <widget class="QLabel" name="discussionLabel_3">
             <property name="text">
-             <string>User:</string>
+             <string>Discussion</string>
             </property>
            </widget>
           </item>
-          <item>
-           <widget class="QLineEdit" name="toReview_2"/>
+          <item row="1" column="0">
+           <widget class="QTextBrowser" name="discussionBody_3">
+            <property name="html">
+             <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+            </property>
+           </widget>
           </item>
-          <item>
-           <widget class="QPushButton" name="addAsReviewer_2">
+          <item row="1" column="1">
+           <layout class="QVBoxLayout" name="verticalLayout_5">
+            <item>
+             <widget class="QTableWidget" name="reviewersTable">
+              <column>
+               <property name="text">
+                <string>Name</string>
+               </property>
+              </column>
+              <column>
+               <property name="text">
+                <string>Email</string>
+               </property>
+              </column>
+              <column>
+               <property name="text">
+                <string>Org</string>
+               </property>
+              </column>
+              <column>
+               <property name="text">
+                <string>Phone</string>
+               </property>
+              </column>
+             </widget>
+            </item>
+            <item>
+             <layout class="QHBoxLayout" name="horizontalLayout_9">
+              <item>
+               <widget class="QLabel" name="label_5">
+                <property name="text">
+                 <string>User:</string>
+                </property>
+               </widget>
+              </item>
+              <item>
+               <widget class="QLineEdit" name="toReview_2"/>
+              </item>
+              <item>
+               <widget class="QPushButton" name="addAsReviewer_2">
+                <property name="text">
+                 <string>Add as Reviewer</string>
+                </property>
+               </widget>
+              </item>
+             </layout>
+            </item>
+           </layout>
+          </item>
+          <item row="0" column="1">
+           <widget class="QLabel" name="label_6">
             <property name="text">
-             <string>Add as Reviewer</string>
+             <string>Reviewers</string>
             </property>
            </widget>
           </item>
+          <item row="2" column="1">
+           <layout class="QVBoxLayout" name="verticalLayout_13">
+            <item>
+             <widget class="QLabel" name="label_41">
+              <property name="text">
+               <string>Comments</string>
+              </property>
+             </widget>
+            </item>
+            <item>
+             <widget class="QTextBrowser" name="commentsBrowser"/>
+            </item>
+           </layout>
+          </item>
+          <item row="2" column="0">
+           <layout class="QFormLayout" name="formLayout">
+            <property name="fieldGrowthPolicy">
+             <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+            </property>
+            <item row="0" column="0">
+             <widget class="QLabel" name="label_24">
+              <property name="text">
+               <string>Overall</string>
+              </property>
+             </widget>
+            </item>
+            <item row="0" column="1">
+             <widget class="QLabel" name="overallScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="1" column="0">
+             <widget class="QLabel" name="label_27">
+              <property name="text">
+               <string>Confidence</string>
+              </property>
+             </widget>
+            </item>
+            <item row="1" column="1">
+             <widget class="QLabel" name="confidenceScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="0">
+             <widget class="QLabel" name="label_29">
+              <property name="text">
+               <string>Relevance</string>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="1">
+             <widget class="QLabel" name="relevanceScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="3" column="0">
+             <widget class="QLabel" name="label_31">
+              <property name="text">
+               <string>Originality</string>
+              </property>
+             </widget>
+            </item>
+            <item row="3" column="1">
+             <widget class="QLabel" name="originalityScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="4" column="0">
+             <widget class="QLabel" name="label_33">
+              <property name="text">
+               <string>Significance</string>
+              </property>
+             </widget>
+            </item>
+            <item row="4" column="1">
+             <widget class="QLabel" name="significanceScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="5" column="0">
+             <widget class="QLabel" name="label_35">
+              <property name="text">
+               <string>Presentation</string>
+              </property>
+             </widget>
+            </item>
+            <item row="5" column="1">
+             <widget class="QLabel" name="presentationScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="6" column="0">
+             <widget class="QLabel" name="label_37">
+              <property name="text">
+               <string>Technical Quality</string>
+              </property>
+             </widget>
+            </item>
+            <item row="6" column="1">
+             <widget class="QLabel" name="techqualScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="7" column="0">
+             <widget class="QLabel" name="label_39">
+              <property name="text">
+               <string>Evaluation</string>
+              </property>
+             </widget>
+            </item>
+            <item row="7" column="1">
+             <widget class="QLabel" name="evaluationScore">
+              <property name="text">
+               <string>-</string>
+              </property>
+             </widget>
+            </item>
+            <item row="8" column="0">
+             <widget class="QPushButton" name="acceptPaper">
+              <property name="text">
+               <string>Accept Paper</string>
+              </property>
+             </widget>
+            </item>
+            <item row="8" column="1">
+             <widget class="QPushButton" name="rejectPaper">
+              <property name="text">
+               <string>Reject Paper</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
          </layout>
         </item>
        </layout>
       </widget>
+      <zorder>tableWidget</zorder>
+      <zorder>gridLayoutWidget_6</zorder>
+      <zorder>verticalLayoutWidget_11</zorder>
+      <zorder>gridLayoutWidget_7</zorder>
      </widget>
      <widget class="QWidget" name="usersTab">
       <attribute name="title">
@@ -980,7 +1243,7 @@ p, li { white-space: pre-wrap; }
          </widget>
         </item>
         <item>
-         <widget class="QTextBrowser" name="keywords_2"/>
+         <widget class="QListWidget" name="userKeyList"/>
         </item>
        </layout>
       </widget>
@@ -988,8 +1251,8 @@ p, li { white-space: pre-wrap; }
        <property name="geometry">
         <rect>
          <x>370</x>
-         <y>390</y>
-         <width>251</width>
+         <y>500</y>
+         <width>291</width>
          <height>41</height>
         </rect>
        </property>
@@ -1013,6 +1276,46 @@ p, li { white-space: pre-wrap; }
         </item>
        </layout>
       </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_15">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>400</y>
+         <width>291</width>
+         <height>101</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_17">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_23">
+          <item>
+           <widget class="QLabel" name="label_30">
+            <property name="text">
+             <string>Authored Papers</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_28">
+            <property name="text">
+             <string>Assigned to Review</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_24">
+          <item>
+           <widget class="QListWidget" name="authoredPapers"/>
+          </item>
+          <item>
+           <widget class="QListWidget" name="assignedPapers"/>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
      </widget>
      <widget class="QWidget" name="reviewTab">
       <attribute name="title">
@@ -1210,13 +1513,10 @@ p, li { white-space: pre-wrap; }
          <x>10</x>
          <y>20</y>
          <width>761</width>
-         <height>121</height>
+         <height>128</height>
         </rect>
        </property>
        <layout class="QGridLayout" name="gridLayout">
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect_3"/>
-        </item>
         <item row="1" column="0">
          <widget class="QLabel" name="mainKey">
           <property name="text">
@@ -1257,6 +1557,9 @@ p, li { white-space: pre-wrap; }
           </property>
          </widget>
         </item>
+        <item row="0" column="0">
+         <widget class="QComboBox" name="selectPaperReview"/>
+        </item>
        </layout>
       </widget>
      </widget>

commit 190cb7a2b177fcc80332567cbe8ed463f6a9eda3
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 10:34:31 2014 +1100

    Update mainwindow.cpp

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 8aff629..f7c8785 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,5 +1,5 @@
-#include "mainwindow.hpp"
-#include "mainwindow.ui"
+#include "mainwindow.h"
+#include "ui_mainwindow.h"
 
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),
@@ -15,6 +15,30 @@ MainWindow::~MainWindow()
     delete ui;
 }
 
+void MainWindow::login()
+{
+    std::string username = ui->usernameLogin->text().toStdString();
+    std::string password = ui->passwordLogin->text().toStdString();
+
+    if(username == "PCChair" && password == "admin")
+        setUser(3);
+    else if(username == "Reviewer" && password == "user")
+        setUser(2);
+    else if(username == "Author" && password == "user")
+        setUser(1);
+
+    //if(loginMgr.login(ui->usernameLogin->text(), ui->passwordLogin->text()))
+      //  setUser(loginMgr.currentUser->uType);
+
+
+}
+
+void MainWindow::logout()
+{
+    setUser(0);
+    //loginMgr.logout();
+}
+
 void MainWindow::setUser(int userType)
 {
     switch(userType)
@@ -23,12 +47,11 @@ void MainWindow::setUser(int userType)
         ui->tabWidget->clear();
         ui->tabWidget->addTab(ui->loginTab, "Login");
         break;
-    case 1://pcchair
-        ui->tableWidget->clear();
-        ui->tabWidget->addTab(ui->infoTabChair, "Information");
-        ui->tabWidget->addTab(ui->usersTab, "User Management");
-        ui->tabWidget->addTab(ui->papersTab, "Paper Management");
-        ui->tabWidget->removeTab(0);
+    case 1://author
+        ui->tabWidget->clear();
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
+        ui->tabWidget->addTab(ui->authorTab, "Author");
+        //ui->tabWidget->removeTab(0);
         break;
     case 2://reviewer
         ui->tableWidget->clear();
@@ -37,11 +60,12 @@ void MainWindow::setUser(int userType)
         ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
         ui->tabWidget->removeTab(0);
         break;
-    case 3://author
-        ui->tabWidget->clear();
-        ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
-        ui->tabWidget->addTab(ui->authorTab, "Author");
-        //ui->tabWidget->removeTab(0);
+    case 3://pcchair
+        ui->tableWidget->clear();
+        ui->tabWidget->addTab(ui->infoTabChair, "Information");
+        ui->tabWidget->addTab(ui->usersTab, "User Management");
+        ui->tabWidget->addTab(ui->papersTab, "Paper Management");
+        ui->tabWidget->removeTab(0);
         break;
     }
 
@@ -49,12 +73,7 @@ void MainWindow::setUser(int userType)
 
 void MainWindow::on_login_clicked()
 {
-    if(username == "PCChair" && password == "admin")
-        setUser(1);
-    else if(username == "Reviewer" && password == "user")
-        setUser(2);
-    else if(username == "Author" && password == "user")
-        setUser(3);
+    login();
 }
 
 void MainWindow::on_quit_clicked()
@@ -62,22 +81,99 @@ void MainWindow::on_quit_clicked()
     qApp->quit();
 }
 
-void MainWindow::on_usernameLogin_editingFinished()
+void MainWindow::on_logout_clicked()
 {
-    username = ui->usernameLogin->text();
+    logout();
 }
 
-void MainWindow::on_passwordLogin_editingFinished()
+void MainWindow::on_logout_2_clicked()
 {
-    password = ui->passwordLogin->text();
+    logout();
 }
 
-void MainWindow::on_logout_clicked()
+void MainWindow::on_passwordLogin_returnPressed()
 {
-    setUser(0);
+    login();
 }
 
-void MainWindow::on_logout_2_clicked()
+void MainWindow::on_createAccount_clicked()
 {
-    setUser(0);
+    //if(loginMgr.createAccount(ui->usernameLogin->text(), ui->passwordLogin->text()))
+    //    setUser(loginMgr.currentUser->uType);
+}
+
+void MainWindow::on_apply_clicked()
+{
+    //send user details to server
+}
+
+void MainWindow::on_apply_2_clicked()
+{
+    //send user details to server
+}
+
+void MainWindow::on_addConfKey_clicked()
+{
+    ui->confKeyList->addItem(ui->confKeyEntry->text());
+}
+
+void MainWindow::on_rmvConfKey_clicked()
+{
+    //for(int i = 0; i < ui->confKeyList->selectedItems().size(); i++)
+    //    ui->confKeyList->(ui->confKeyList->selectedItems().at(i));
+    delete ui->confKeyList->currentItem();
+}
+
+void MainWindow::on_addAuthor_clicked()
+{
+    int row = ui->authorsTable->rowCount();
+    ui->authorsTable->insertRow(row);
+//    QTableWidgetItem item[4];
+//    item[0].setText(ui->newAuthorName->text());
+//    item[1].setText(ui->newAuthorEmail->text());
+//    item[2].setText(ui->newAuthorOrg->text());
+//    item[3].setText(ui->newAuthorPhone->text());
+//    ui->authorsTable->setItem(row, 0 , &item[0]);
+//    ui->authorsTable->setItem(row, 1 , &item[1]);
+//    ui->authorsTable->setItem(row, 2 , &item[2]);
+//    ui->authorsTable->setItem(row, 3 , &item[3]);
+}
+
+void MainWindow::on_rmvAuthor_clicked()
+{
+    ui->authorsTable->removeRow(ui->authorsTable->currentRow());
+    ui->authorsTable->clearSelection();
+}
+
+void MainWindow::on_addPaperKey_clicked()
+{
+    ui->paperKeyListAuth->addItem(ui->paperKeyEntry->text());
+}
+
+void MainWindow::on_rmvPaperKey_clicked()
+{
+    delete ui->paperKeyListAuth->currentItem();
+}
+
+void MainWindow::on_addAuthKey_clicked()
+{
+    ui->authKeyList->addItem(ui->authKeyEntry->text());
+}
+
+void MainWindow::on_rmvAuthKey_clicked()
+{
+    delete ui->authKeyList->currentItem();
+}
+
+void MainWindow::on_selectPaperAuthor_activated(int index)
+{
+
+}
+
+
+void MainWindow::on_selectPaperAuthor_currentTextChanged(const QString &arg1)
+{
+    ui->selectPaperAuthor->setItemText(ui->selectPaperAuthor->currentIndex(), ui->selectPaperAuthor->currentText());
+    if(ui->selectPaperAuthor->findText("*NEW*") == -1)
+        ui->selectPaperAuthor->addItem("*NEW*");
 }

commit f7272e77c37b61b724515335d7955935a9c2ea3c
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 25 10:34:08 2014 +1100

    Update mainwindow.hpp

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
index 90cf7d9..3309702 100644
--- a/UserClient/mainwindow.hpp
+++ b/UserClient/mainwindow.hpp
@@ -1,7 +1,8 @@
-#ifndef MAINWINDOW_HPP
-#define MAINWINDOW_HPP
+#ifndef MAINWINDOW_H
+#define MAINWINDOW_H
 
 #include <QMainWindow>
+#include "LoginManager.hpp"
 
 namespace Ui {
 class MainWindow;
@@ -20,17 +21,45 @@ private slots:
 
     void on_quit_clicked();
 
-    void on_usernameLogin_editingFinished();
-
-    void on_passwordLogin_editingFinished();
-
     void on_logout_clicked();
 
     void on_logout_2_clicked();
 
+    void on_passwordLogin_returnPressed();
+
+    void on_createAccount_clicked();
+
+    void on_apply_clicked();
+
+    void on_apply_2_clicked();
+
+    void on_addConfKey_clicked();
+
+    void on_rmvConfKey_clicked();
+
+    void on_addAuthor_clicked();
+
+    void on_rmvAuthor_clicked();
+
+    void on_addPaperKey_clicked();
+
+    void on_rmvPaperKey_clicked();
+
+    void on_addAuthKey_clicked();
+
+    void on_rmvAuthKey_clicked();
+
+    void on_selectPaperAuthor_activated(int index);
+
+    void on_selectPaperAuthor_currentTextChanged(const QString &arg1);
+
 private:
-    Ui::MainWindow *ui;
     void setUser(int userType);
+    void login();
+    void logout();
+
+    Ui::MainWindow *ui;
+    LoginManager loginMgr;
     QString username;
     QString password;
 };

commit 7c5ba38ed60df9f2b932a6c856637df8af47c0ad
Merge: 237df80 cf5c39c
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 25 08:51:44 2014 +1100

    Merge branch 'master' of https://github.com/CSCI222-Group-4/master

commit 237df803834711e0425a251d2ba5a03ca3f350c8
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 25 08:49:31 2014 +1100

    Initial version of our Database

diff --git a/Database/Database.cpp b/Database/Database.cpp
new file mode 100644
index 0000000..3058b9f
--- /dev/null
+++ b/Database/Database.cpp
@@ -0,0 +1,384 @@
+#include "Database.h"
+
+#include "cppconn/driver.h"
+#include "cppconn/exception.h"
+#include "cppconn/resultset.h"
+#include "cppconn/statement.h"
+#include "cppconn/prepared_statement.h"
+
+#include <cstring>
+#include <stdlib.h>
+#include <iostream>
+
+#include <vector>
+#include <map>
+#include <string>
+
+using namespace sql;
+
+const char* databaseStr = "localhost";
+const char* databaseUserName = "user";
+const char* databaseUserPassword = "user";
+const char* databaseSchema = "csci222";
+
+const char* noDB = "Sorry, but was unable to open database so operation failed";
+
+const char* prepareFailed = "Failure when preparing statement";
+const char* bindFailed = "Failure when binding arguments";
+const char* writeFailed = "Failure when writing to database";
+
+Database::Database()
+{
+        // Constructors should always succeed. But suppose it failed and
+        // the database couldn't be created?
+        invalid = true;
+        driver = get_driver_instance();
+        try {
+                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
+        } catch (sql::SQLException &e) {
+                // Failed
+                return;
+        }
+        dbcon->setSchema(databaseSchema);
+        // It's ok
+        invalid = false;
+}
+
+Database::~Database()
+{
+        if (!invalid) {
+                this->close();
+        }
+}
+
+User *Database::fetchUser(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+
+	// Add information on user from database to User object
+	const char* getUser = "SELECT FROM UserAccount where userID=?";
+
+	sql::PreparedStatement *pstmt = NULL;
+	sql::ResultSet *rs = NULL;
+	
+	pstmt = dbcon->prepareStatement(getUser);
+	pstmt->setString(1, key);
+	rs = pstmt->executeQuery();
+	bool haveRecord = rs->next();
+	if (!haveRecord)
+	{
+		delete rs;
+		delete pstmt;
+		return NULL;
+	}
+
+        std::string userID = rs->getString(1);
+        std::string username = rs->getString(2);
+        std::string password = rs->getString(3);
+	std::string infoID = rs->getString(4);
+
+        User *user = new User(id);
+        arec->setName(name);
+        arec->setEmail(email);
+        arec->setInfo(info);
+        arec->setImage(image);
+
+        delete rs;
+        delete pstmt;
+        // =======================================
+        // Now ask about roles
+        pstmt = dbcon->prepareStatement(getroles);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        while (rs->next())
+        {
+                std::string arole = rs->getString(1);
+                arec->addRole(arole);
+        }
+        delete rs;
+        delete pstmt;
+}
+
+
+
+void Database::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+bool Database::exists(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        const char* countrecord = "select count(*) from myrecord where _id=?";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countrecord);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count = 1;
+}
+
+std::vector<std::string> *Database::allKeys()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> *vptr = new std::vector<std::string>();
+
+        const char* selectall = "select _id from MyRecord";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string anid = rs->getString(1);
+                vptr->push_back(anid);
+        }
+
+        return vptr;
+}
+
+std::vector<MyRecord*> *Database::getInRole(const char* role) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Laboured
+        // First get a list of the ids with the role, then one by one get the
+        // complete records.
+        const char* getrolepersons = "selects personid from roles where _role=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrolepersons);
+        pstmt->setString(1, role);
+        rs = pstmt->executeQuery();
+
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::vector<std::string> people;
+
+        // rc = sqlite3_step(stmt);
+
+        while (rs->next()) {
+                std::string apersonid = std::string(rs->getString(1));
+//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
+                people.push_back(apersonid);
+        }
+
+        // Maybe there weren't any
+        if (people.size() == 0)
+                return NULL;
+
+        // Build collection by getting each record
+        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+
+        std::vector<std::string>::const_iterator it;
+        for (it = people.begin(); it != people.end(); it++) {
+                std::string aperson = *it;
+                MyRecord* rec = this->get(aperson.c_str());
+                roleholders->push_back(rec);
+        }
+
+        return roleholders;
+}
+
+void Database::put(const char* key, const MyRecord *data) throw (const char*)
+{
+
+        if (invalid)
+                throw (noDB);
+
+        // Tiresome
+        // If it exists - delete it
+        if (this->exists(key)) {
+                bool done = this->deleteRecord(key);
+        }
+        // Insert it
+        this->recordToTables(data);
+}
+
+bool Database::deleteRecord(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // explicitly delete subordinate records in Phones, Address, others and Roles
+        // then delete the myrecord entry
+        // recreating the prepared statements for each operation - costly
+        const char* deletephones = "delete from phones where personid=?";
+        const char* deleteaddress = "delete from addresses where personid=?";
+        const char* deleteother = "delete from other where personid=?";
+        const char* deleteroles = "delete from roles where personid=?";
+        const char* deletemyrecord = "delete from myrecord where _id=?";
+        const char* unused; // Pointer to unused part of sql string (?)
+        sql::PreparedStatement *pstmt = NULL;
+        // Phones
+        pstmt = dbcon->prepareStatement(deletephones);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Addresses
+        pstmt = dbcon->prepareStatement(deleteaddress);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        //Other
+        pstmt = dbcon->prepareStatement(deleteother);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Roles
+        pstmt = dbcon->prepareStatement(deleteroles);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Finally
+        pstmt = dbcon->prepareStatement(deletemyrecord);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        return true;
+}
+
+MyRecord *Database::get(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Again laborious
+        // Load the MyRecord from its table, then add data from Other tables.
+        const char* getrecord = "select * from myrecord where _id=?";
+        const char* getroles = "select role from roles where personid=?";
+        const char* getphones = "select type, number from phones where personid=?";
+        const char* getaddress = "select type, address from addresses where personid=?";
+        const char* getother = "select key, valyue from other where personid=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet *rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrecord);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::string id = rs->getString(1);
+        std::string name = rs->getString(2);
+        std::string email = rs->getString(3);
+        std::string info = rs->getString(4);
+        std::string image = rs->getString(5);
+
+        MyRecord *arec = new MyRecord(id);
+        arec->setName(name);
+        arec->setEmail(email);
+        arec->setInfo(info);
+        arec->setImage(image);
+
+        delete rs;
+        delete pstmt;
+        // =======================================
+        // Now ask about roles
+        pstmt = dbcon->prepareStatement(getroles);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        while (rs->next())
+        {
+                std::string arole = rs->getString(1);
+                arec->addRole(arole);
+        }
+        delete rs;
+        delete pstmt;
+}
+
+void Database::recordToTables(const MyRecord* data)
+{
+        if (invalid)
+                throw (noDB);
+
+        // Insert the myrecord data first, then deal with Other data tables
+
+        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
+        const char* putrole = "insert into roles values(?, ?)";
+        const char* putphone = "insert into phones values (?, ?, ?)";
+        const char* putaddress = "insert into addresses values (?, ?, ?)";
+        const char* putother = "insert into other values (?, ?, ?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(putmyrecord);
+        pstmt->setString(1, data->getID());
+        pstmt->setString(2, data->getName());
+        pstmt->setString(3, data->getEmail());
+        pstmt->setString(4, data->getInfo());
+        pstmt->setString(5, data->getImage());
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // Role 
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+
+//      // Other
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+}
diff --git a/Database/Database.hpp b/Database/Database.hpp
new file mode 100644
index 0000000..ba09f5d
--- /dev/null
+++ b/Database/Database.hpp
@@ -0,0 +1,49 @@
+#include <string>
+#include <vector>
+#include "mysql_connection.h"
+#include "mysql_driver.h"
+#include "MyRecord.h"
+
+class DataBase {
+public:
+        Database();
+
+        ~Database();
+
+	// CSCI222
+
+	User *fetchUser(const char*key) throw (const char*);
+
+
+        // Delete - returns false if there wasn't a record with that key
+        bool deleteRecord(const char* key) throw (const char*);
+        // Exists - is there a record with a given key
+        bool exists(const char* key) throw (const char*);
+        // Put - insert/replace a record; returns false if failed
+        // (In this example, key is actually the same as name field in data record)
+        void put(const char* key, const MyRecord *data) throw (const char*);
+        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
+        MyRecord *get(const char*key) throw (const char*);
+
+        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+
+        void close();
+
+        std::vector<std::string> *allKeys();
+
+        bool isOK()
+        {
+                return !(this->invalid);
+        }
+
+private:
+        bool invalid;
+        const char* dbname;
+        sql::Connection *dbcon;
+        sql::Driver *driver;
+        Database(const Database& orig);
+        Database& operator=(const Database);
+
+        void recordToTables(const MyRecord *data);
+
+};

commit cf5c39c6d380fca5323e79f1c00334f79fc52a62
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 22 23:22:20 2014 +1100

    added checkDeadlines

diff --git a/AdminClient/Conference.exe b/AdminClient/Conference.exe
new file mode 100644
index 0000000..7a2a5d4
Binary files /dev/null and b/AdminClient/Conference.exe differ
diff --git a/AdminClient/Conference.o b/AdminClient/Conference.o
new file mode 100644
index 0000000..d0de159
Binary files /dev/null and b/AdminClient/Conference.o differ
diff --git a/Server/Conference.cpp b/Server/Conference.cpp
new file mode 100644
index 0000000..441e0a9
--- /dev/null
+++ b/Server/Conference.cpp
@@ -0,0 +1,29 @@
+#include <ctime>
+#include <iostream>
+
+#include "Conference.hpp"
+#include "Date.hpp"
+
+/*int main() {
+    time_t t = time(0);   // get time now
+    struct tm * now = localtime( & t );
+    int foo = now->tm_year + 1900;
+    std::cout << (foo) << '-'
+         << (now->tm_mon + 1) << '-'
+         <<  now->tm_mday
+         << endl;
+}*/
+
+void Conference::checkDeadlines()
+{
+    time_t t = time(0);   // get time now
+    struct tm * now = localtime( & t );
+    Date today(now->tm_year + 1900,
+               now->tm_mon + 1,
+               now->tm_mday);
+    isBeforePaperDeadline = paperDeadline.compare(today);
+    isBeforeSoftReviewDeadline = reviewDeadlineSoft.compare(today);
+    isBeforeHardReviewDeadline = reviewDeadlineHard.compare(today);
+    isBeforeDiscussDeadline = discussDeadline.compare(today);
+
+}
diff --git a/Server/ServerDriver.exe b/Server/ServerDriver.exe
index de2f928..f9b0561 100644
Binary files a/Server/ServerDriver.exe and b/Server/ServerDriver.exe differ

commit eafa0185f18cb6ed6defcf281458432e5aa3e364
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 22 21:16:45 2014 +1100

    fixed #includes in UserClient/mainwindow.cpp and added email validation regex

diff --git a/Database/.create_tables.txt.swp b/Database/.create_tables.txt.swp
deleted file mode 100644
index 089cd1c..0000000
Binary files a/Database/.create_tables.txt.swp and /dev/null differ
diff --git a/Database/.temp_database_create.txt.swp b/Database/.temp_database_create.txt.swp
deleted file mode 100644
index f0d2a7b..0000000
Binary files a/Database/.temp_database_create.txt.swp and /dev/null differ
diff --git a/Database/MyRecord.cpp b/Database/MyRecord.cpp
index 73124b8..f8c7c46 100644
--- a/Database/MyRecord.cpp
+++ b/Database/MyRecord.cpp
@@ -6,52 +6,15 @@
  * 
  * See MyRecord.h for some explanation!
  * 
- * class MyRecord {
-public:
-    explicit MyRecord(string& id); 
-    void setName(string& aname) throw (MyException);
-    void setEmail(string& amail) throw (MyException);
-    void setInfo(string& info) throw (MyException);
-    void setImage(string& imagestr) throw (MyException);
-    void addRole(string& anotherrole) throw (MyException);
-    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
-
-    string getID() const { return this->id; }
-    string getName() const { return this->name; }
-    string getEmail() const { return this->email; }
-    string getInfo() const { return this->info; }
-    string getImage() const { return this->image; }
-    string getAttribute(string& collectionname, string& key) const throw(MyException);
-    vector<string> getRoles() const { return this->roles; }
-    map<string,string> getPhones() const { return this->phones; }
-    map<string,string> getAddresses() const { return this->addresses; }
-    map<string,string> getOtherKV() const { return this->other; }
-    
-    bool hasRole(string& queryrole) const;
-    
-private:
-    string id; 
-    string name; 
-    string email; 
-    string image;
-    string info;
-    vector<string> roles;
-    map<string,string> phones;
-    map<string,string> addresses;
-    map<string,string> other;
-
-
-
- * 
- * 
  */
 
 #include <vector>
 #include <algorithm>
 #include "MyRecord.h"
 #include "stringtrimmer.h"
+#include "email_regex.hpp"
 
-//#include <boost/regex.hpp>
+#include <boost/regex.hpp>
 
 MyRecord::MyRecord(string& id) {
     this->id = id;
@@ -60,20 +23,17 @@ MyRecord::MyRecord(string& id) {
 void MyRecord::setName(string& aname) throw (MyException) {
     this->name = aname;
 }
-
+         
 void MyRecord::setEmail(string& amail) throw (MyException) {
- //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
- //   amail = trim(amail);
- //   boost::match_results<std::string::const_iterator> results;
- //   if (boost::regex_match(amail, results, validationExpression))
- //   {
-        this->email = amail;
- //   }
- //   else
- //   {
- //       string msg = "Email of wrong format";
- //       throw MyException(msg);
- //   }
+    if (boost::regex_match(amail, validationExpression))
+    {
+      this->email = amail;
+    }
+    else
+    {
+        std::string msg = "Email of wrong format";
+        throw MyException(msg);
+    }
 }
 
 void MyRecord::setInfo(string& info) throw (MyException) {
diff --git a/Database/MyRecordStore.cpp b/Database/MyRecordStore.cpp
index 7c634c2..c840738 100644
--- a/Database/MyRecordStore.cpp
+++ b/Database/MyRecordStore.cpp
@@ -152,49 +152,6 @@ std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const
 
         return roleholders;
 }
-//
-//      sqlite3_stmt* stmt;
-//      int rc;
-//      rc = sqlite3_prepare_v2(db,
-//              getrolepersons, strlen(getrolepersons),
-//              &stmt, &unused);
-//      if (rc != SQLITE_OK) {
-//              std::cerr << prepareFailed << std::endl;
-//              exit(1);
-//      }
-//
-//      rc = sqlite3_bind_text(stmt, 1, role, -1 , SQLITE_STATIC);
-//      if (rc != SQLITE_OK) {
-//              std::cerr << bindFailed << std::endl;
-//              exit(1);
-//      }
-//      std::vector<std::string> people;
-//
-//      // rc = sqlite3_step(stmt);
-//
-//      while (sqlite3_step(stmt) == SQLITE_ROW) {
-//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
-//              people.push_back(apersonid);
-//      }
-//      sqlite3_finalize(stmt);
-//
-//
-//      // Maybe there weren't any
-//      if (people.size() == 0)
-//              return NULL;
-//
-//      // Build collection by getting each record
-//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-//
-//      std::vector<std::string>::const_iterator it;
-//      for (it = people.begin(); it != people.end(); it++) {
-//              std::string aperson = *it;
-//              MyRecord* rec = this->get(aperson.c_str());
-//              roleholders->push_back(rec);
-//      }
-//      
-//      return roleholders;
-//}     
 
 void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
 {
diff --git a/Database/a.out b/Database/a.out
index 8632149..6da0062 100755
Binary files a/Database/a.out and b/Database/a.out differ
diff --git a/Database/email_regex.hpp b/Database/email_regex.hpp
new file mode 100644
index 0000000..f886084
--- /dev/null
+++ b/Database/email_regex.hpp
@@ -0,0 +1,3 @@
+#include <boost/regex.hpp>
+
+static const boost::regex validationExpression("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
diff --git a/Database/hardcopy.4 b/Database/hardcopy.4
deleted file mode 100644
index 002d416..0000000
--- a/Database/hardcopy.4
+++ /dev/null
@@ -1,58 +0,0 @@
-#include <cstdlib>                                                                                    |//              exit(1);
-#include <iostream>                                                                                   |//      }
-#include <fstream>                                                                                    |//      std::vector<std::string> people;
-#include <string>                                                                                     |//
-                                                                                                      |//      // rc = sqlite3_step(stmt);
-#include "MyRecord.h"                                                                                 |//
-#include "MyRecordStore.h"                                                                            |//      while (sqlite3_step(stmt) == SQLITE_ROW) {
-                                                                                                      |//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
-#include <vector>                                                                                     |//              people.push_back(apersonid);
-                                                                                                      |//      }
-typedef MyRecord* RecordPtr;                                                                          |//      sqlite3_finalize(stmt);
-std::vector<RecordPtr> g_theRecords;                                                                  |//
-                                                                                                      |//
-//std::string getImage(std::string filename);                                                         |//      // Maybe there weren't any
-                                                                                                      |//      if (people.size() == 0)
-static void createData();                                                                             |//              return NULL;
-                                                                                                      |//
-int main(int arc, char *argv[])                                                                       |//      // Build collection by getting each record
-{                                                                                                     |//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-        createData();                                                                                 |//
-        MyRecordStore astore;                                                                         |//      std::vector<std::string>::const_iterator it;
-        if (!astore.isOK())                                                                           |//      for (it = people.begin(); it != people.end(); it++) {
-        {                                                                                             |//              std::string aperson = *it;
-                std::cout << "Failed to open database file" << std::endl;                             |//              MyRecord* rec = this->get(aperson.c_str());
-                exit(1);                                                                              |//              roleholders->push_back(rec);
-        }                                                                                             |//      }
-                                                                                                      |//
-        vector<RecordPtr>::const_iterator it;                                                         |//      return roleholders;
-        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)                                    |//}
-        {                                                                                             |
-                RecordPtr ptr = (*it);                                                                |void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
-                const char* key = ptr->getID().c_str();                                               |{
-                astore.put(key, ptr);                                                                 |
-                std::cout << "Wrote record " << key << std::endl;                                     |        if (invalid)
-        }                                                                                             |                throw (noDB);
-        return EXIT_SUCCESS;                                                                          |
-}                                                                                                     |        // Tiresome
-                                                                                                      |        // If it exists - delete it
-//static std::string getImage(std::string filename)                                                   |        if (this->exists(key)) {
-//{                                                                                                   |                bool done = this->deleteRecord(key);
-//      // Qt library has its own string class, convert STL string                                    |        }
-//      QString qtfilename(filename.c_str());                                                         |        // Insert it
-//      QImage animage;                                                                               |        this->recordToTables(data);
-//      bool readimage = animage.load(qtfilename);                                                    |}
-//      if (!readimage)                                                                               |
-//      {                                                                                             |bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
-//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl; |{
-//              exit(1);                                                                              |        if (invalid)
-//      }                                                                                             |                throw (noDB);
-//                                                                                                    |        // explicitly delete subordinate records in Phones, Address, others and Roles
-//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);                           |        // then delete the myrecord entry
-//                                                                                                    |        // recreating the prepared statements for each operation - costly
-//      QByteArray ba;                                                                                |        const char* deletephones = "delete from Phones where idPerson=?";
-//      QBuffer buf(&ba);                                                                             |        const char* deleteaddress = "delete from Addresses where idPerson=?";
-//      resized.save(&buf, "JPG");                                                                    |        const char* deleteother = "delete from Other where idPerson=?";
-//                                                                                                    |        const char* deleteroles = "delete from Roles where idPerson=?";
-main.cpp                                                                            33,1           Top MyRecordStore.cpp                                                                   211,1          52%
-
diff --git a/Database/main.cpp b/Database/main.cpp
index 73e16d2..05cbb35 100644
--- a/Database/main.cpp
+++ b/Database/main.cpp
@@ -11,8 +11,6 @@
 typedef MyRecord* RecordPtr;
 std::vector<RecordPtr> g_theRecords;
 
-//std::string getImage(std::string filename);
-
 static void createData();
 
 int main(int arc, char *argv[])
@@ -33,32 +31,16 @@ int main(int arc, char *argv[])
                 astore.put(key, ptr);
                 std::cout << "Wrote record " << key << std::endl;
         }
+        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
+        {
+                RecordPtr ptr = (*it);
+                const char* key = ptr->getID().c_str();
+                astore.deleteRecord(key);
+                std::cout << "Deleted record " << key << std::endl;
+        }
         return EXIT_SUCCESS;
 }
 
-//static std::string getImage(std::string filename)
-//{
-//      // Qt library has its own string class, convert STL string
-//      QString qtfilename(filename.c_str());
-//      QImage animage;
-//      bool readimage = animage.load(qtfilename);
-//      if (!readimage)
-//      {
-//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl;
-//              exit(1);
-//      }
-//
-//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);
-//
-//      QByteArray ba;
-//      QBuffer buf(&ba);
-//      resized.save(&buf, "JPG");
-//      
-//      QByteArray coded = ba.toBase64();
-//      std::string result(coded); // relying on QByteArray operator char*
-//      return result;
-//}
-
 static void createData()
 {
         // Hard code procedural creation of a few records so that can
@@ -76,10 +58,8 @@ static void createData()
                 id = "tom";
                 name = "Thomas";
                 file = "./images/om.jpg";
-//              imagestr = getImage(file);
                 next = new MyRecord(id);
                 next->setName(name);
-//              next->setImage(imagestr);
                 aRole = "Boss";
                 next->addRole(aRole);
                 aRole="Manager";
@@ -103,10 +83,8 @@ static void createData()
                 id = "dick";
                 name = "Dick";
                 file = "./images/dick.jpg";
-//              imagestr = getImage(file);
                 next = new MyRecord(id);
                 next->setName(name);
-//              next->setImage(imagestr);
                 aRole="Accountant";
                 next->addRole(aRole);
                 std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
index 1ea181c..8aff629 100644
--- a/UserClient/mainwindow.cpp
+++ b/UserClient/mainwindow.cpp
@@ -1,5 +1,5 @@
-#include "mainwindow.h"
-#include "ui_mainwindow.h"
+#include "mainwindow.hpp"
+#include "mainwindow.ui"
 
 MainWindow::MainWindow(QWidget *parent) :
     QMainWindow(parent),

commit 2f42b812b7c40bf233cca2e95b00ba22d17a0ed4
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Wed Oct 22 19:17:20 2014 +1100

    fixed file structure + minor changes

diff --git a/Database/.create_tables.txt.swp b/Database/.create_tables.txt.swp
new file mode 100644
index 0000000..089cd1c
Binary files /dev/null and b/Database/.create_tables.txt.swp differ
diff --git a/Database/.temp_database_create.txt.swp b/Database/.temp_database_create.txt.swp
new file mode 100644
index 0000000..f0d2a7b
Binary files /dev/null and b/Database/.temp_database_create.txt.swp differ
diff --git a/Database/MyException.h b/Database/MyException.h
new file mode 100644
index 0000000..216cca4
--- /dev/null
+++ b/Database/MyException.h
@@ -0,0 +1,25 @@
+/*
+ * File:        MyException.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:20 AM
+ */
+
+#ifndef MYEXCEPTION_H
+#define MYEXCEPTION_H
+
+#include <string>
+#include <exception>
+using namespace std;
+
+class MyException : public exception {
+public:
+    MyException(string& whatsup) : message(whatsup) {  }
+    ~MyException() throw() {}
+    const char* what(){return message.c_str();}
+private:
+    string message;
+};
+
+#endif  /* MYEXCEPTION_H */
+
diff --git a/Database/MyRecord.cpp b/Database/MyRecord.cpp
new file mode 100644
index 0000000..73124b8
--- /dev/null
+++ b/Database/MyRecord.cpp
@@ -0,0 +1,151 @@
+/*
+ * File:        MyRecord.cpp
+ * Author:      nabg
+ * 
+ * Created on 23 November 2012, 1:25 PM
+ * 
+ * See MyRecord.h for some explanation!
+ * 
+ * class MyRecord {
+public:
+    explicit MyRecord(string& id); 
+    void setName(string& aname) throw (MyException);
+    void setEmail(string& amail) throw (MyException);
+    void setInfo(string& info) throw (MyException);
+    void setImage(string& imagestr) throw (MyException);
+    void addRole(string& anotherrole) throw (MyException);
+    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
+
+    string getID() const { return this->id; }
+    string getName() const { return this->name; }
+    string getEmail() const { return this->email; }
+    string getInfo() const { return this->info; }
+    string getImage() const { return this->image; }
+    string getAttribute(string& collectionname, string& key) const throw(MyException);
+    vector<string> getRoles() const { return this->roles; }
+    map<string,string> getPhones() const { return this->phones; }
+    map<string,string> getAddresses() const { return this->addresses; }
+    map<string,string> getOtherKV() const { return this->other; }
+    
+    bool hasRole(string& queryrole) const;
+    
+private:
+    string id; 
+    string name; 
+    string email; 
+    string image;
+    string info;
+    vector<string> roles;
+    map<string,string> phones;
+    map<string,string> addresses;
+    map<string,string> other;
+
+
+
+ * 
+ * 
+ */
+
+#include <vector>
+#include <algorithm>
+#include "MyRecord.h"
+#include "stringtrimmer.h"
+
+//#include <boost/regex.hpp>
+
+MyRecord::MyRecord(string& id) {
+    this->id = id;
+}
+
+void MyRecord::setName(string& aname) throw (MyException) {
+    this->name = aname;
+}
+
+void MyRecord::setEmail(string& amail) throw (MyException) {
+ //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
+ //   amail = trim(amail);
+ //   boost::match_results<std::string::const_iterator> results;
+ //   if (boost::regex_match(amail, results, validationExpression))
+ //   {
+        this->email = amail;
+ //   }
+ //   else
+ //   {
+ //       string msg = "Email of wrong format";
+ //       throw MyException(msg);
+ //   }
+}
+
+void MyRecord::setInfo(string& info) throw (MyException) {
+    this->info = info;
+}
+
+void MyRecord::setImage(string& imagestr) throw (MyException) {
+    this->image = imagestr;
+}
+
+void MyRecord::addRole(string& anotherrole)  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+    if (it != this->roles.end()) return; // Found it, so don't duplicate
+    roles.push_back(anotherrole);
+}
+
+void MyRecord::removeRole(std::string& oldrole)
+{
+    this->roles.erase(remove(this->roles.begin(),
+        this->roles.end(), oldrole),
+        this->roles.end());
+}
+
+void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
+    if (key.empty() || value.empty()) {
+        string msg = "Empty key or value";
+        throw MyException(msg);
+    }
+    // If same collection/key combination specified more than once, later value
+    // overwrites earlier value for that key.
+
+// Change to allow of rSTL's insert() not allowing for replacement
+    if (collectionname == "Phones") {
+        this->phones[key]=value;
+    } else
+        if (collectionname == "Addresses") {
+        this->addresses[key]=value;
+    } else
+        if (collectionname == "Other") {
+         this->other[key]=value;
+    } else {
+        string errmsg = "There is no collection called " + collectionname;
+        throw MyException(errmsg);
+    }
+}
+
+string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
+
+
+    if (collectionname == "Phones") {
+        return phones.find(key)->second;
+    } else
+        if (collectionname == "Addresses") {
+        return addresses.find(key)->second;
+    } else
+        if (collectionname == "Other") {
+        return other.find(key)->second;
+    }
+
+    string errmsg = "There is no collection called " + collectionname;
+    throw MyException(errmsg);
+
+}
+
+
+bool MyRecord::hasRole(string&  anotherrole) const  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::const_iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+   return(it != this->roles.end()) ;
+}
diff --git a/Database/MyRecord.h b/Database/MyRecord.h
new file mode 100644
index 0000000..076ae54
--- /dev/null
+++ b/Database/MyRecord.h
@@ -0,0 +1,63 @@
+/*
+ * File:        MyRecord.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:18 AM
+ */
+
+#ifndef MYRECORD_H
+#define MYRECORD_H
+#include "MyException.h"
+#include <map>
+#include <string>
+#include <vector>
+using namespace std;
+
+class MyRecord {
+public:
+    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
+    // Mutator functions - setting of other fields
+    // In this version, hardly any of the implementations will actually throw exceptions
+    // later validation functions will be added
+    void setName(std::string& aname) throw (MyException);
+    void setEmail(std::string& amail) throw (MyException);
+    void setInfo(std::string& info) throw (MyException);
+    void setImage(std::string& imagestr) throw (MyException);
+    void addRole(std::string& anotherrole) ;
+    void removeRole(std::string& oldrole);
+    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
+    // Accessor functions
+
+    std::string getID() const { return this->id; }
+    std::string getName() const { return this->name; }
+    std::string getEmail() const { return this->email; }
+    std::string getInfo() const { return this->info; }
+    std::string getImage() const { return this->image; }
+    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
+    const std::vector<std::string>& getRoles() const { return this->roles; }
+    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
+    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
+    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
+
+    bool hasRole(std::string& queryrole) const;
+
+private:
+    std::string id; // Also known as "nickname", or even "primary key"
+    std::string name; // full name
+    std::string email;
+    std::string image;
+    std::string info;
+    std::vector<std::string> roles;
+    std::map<std::string,std::string> phones;
+    std::map<std::string,std::string> addresses;
+    std::map<std::string,std::string> other;
+     // Finally, note that copy constructor and assignment operator are
+    // private (and no implementations will be defined).  I choose to 
+    // disallow such operations.
+    MyRecord(const MyRecord& orig);
+    MyRecord& operator=(const MyRecord&);
+    // Further there is no virtual destructor, I do not intend MyRecord
+    // to be the base class in some hierarchy.
+};
+
+#endif  /* MYRECORD_H */
diff --git a/Database/MyRecordStore.cpp b/Database/MyRecordStore.cpp
new file mode 100644
index 0000000..7c634c2
--- /dev/null
+++ b/Database/MyRecordStore.cpp
@@ -0,0 +1,375 @@
+#include "MyRecordStore.h"
+
+#include "cppconn/driver.h"
+#include "cppconn/exception.h"
+#include "cppconn/resultset.h"
+#include "cppconn/statement.h"
+#include "cppconn/prepared_statement.h"
+
+#include <cstring>
+#include <stdlib.h>
+#include <iostream>
+
+#include <vector>
+#include <map>
+#include <string>
+
+using namespace sql;
+
+const char* databaseStr = "localhost";
+const char* databaseUserName = "matt";
+const char* databaseUserPassword = "nuria1990";
+const char* databaseSchema = "csci222";
+
+const char* noDB = "Sorry, but was unable to open database so operation failed";
+
+const char* prepareFailed = "Failure when preparing statement";
+const char* bindFailed = "Failure when binding arguments";
+const char* writeFailed = "Failure when writing to database";
+
+MyRecordStore::MyRecordStore()
+{
+        // Constructors should always succeed. But suppose it failed and
+        // the database couldn't be created?
+        invalid = true;
+        driver = get_driver_instance();
+        try {
+                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
+        } catch (sql::SQLException &e) {
+                // Failed
+                return;
+        }
+        dbcon->setSchema(databaseSchema);
+        // It's ok
+        invalid = false;
+}
+
+MyRecordStore::~MyRecordStore()
+{
+        if (!invalid) {
+                this->close();
+        }
+}
+
+void MyRecordStore::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+bool MyRecordStore::exists(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        const char* countrecord = "select count(*) from myrecord where _id=?";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countrecord);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count = 1;
+}
+
+std::vector<std::string> *MyRecordStore::allKeys()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> *vptr = new std::vector<std::string>();
+
+        const char* selectall = "select _id from MyRecord";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string anid = rs->getString(1);
+                vptr->push_back(anid);
+        }
+
+        return vptr;
+}
+std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Laboured
+        // First get a list of the ids with the role, then one by one get the
+        // complete records.
+        const char* getrolepersons = "selects personid from roles where _role=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrolepersons);
+        pstmt->setString(1, role);
+        rs = pstmt->executeQuery();
+
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::vector<std::string> people;
+
+        // rc = sqlite3_step(stmt);
+
+        while (rs->next()) {
+                std::string apersonid = std::string(rs->getString(1));
+//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
+                people.push_back(apersonid);
+        }
+
+        // Maybe there weren't any
+        if (people.size() == 0)
+                return NULL;
+
+        // Build collection by getting each record
+        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+
+        std::vector<std::string>::const_iterator it;
+        for (it = people.begin(); it != people.end(); it++) {
+                std::string aperson = *it;
+                MyRecord* rec = this->get(aperson.c_str());
+                roleholders->push_back(rec);
+        }
+
+        return roleholders;
+}
+//
+//      sqlite3_stmt* stmt;
+//      int rc;
+//      rc = sqlite3_prepare_v2(db,
+//              getrolepersons, strlen(getrolepersons),
+//              &stmt, &unused);
+//      if (rc != SQLITE_OK) {
+//              std::cerr << prepareFailed << std::endl;
+//              exit(1);
+//      }
+//
+//      rc = sqlite3_bind_text(stmt, 1, role, -1 , SQLITE_STATIC);
+//      if (rc != SQLITE_OK) {
+//              std::cerr << bindFailed << std::endl;
+//              exit(1);
+//      }
+//      std::vector<std::string> people;
+//
+//      // rc = sqlite3_step(stmt);
+//
+//      while (sqlite3_step(stmt) == SQLITE_ROW) {
+//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
+//              people.push_back(apersonid);
+//      }
+//      sqlite3_finalize(stmt);
+//
+//
+//      // Maybe there weren't any
+//      if (people.size() == 0)
+//              return NULL;
+//
+//      // Build collection by getting each record
+//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+//
+//      std::vector<std::string>::const_iterator it;
+//      for (it = people.begin(); it != people.end(); it++) {
+//              std::string aperson = *it;
+//              MyRecord* rec = this->get(aperson.c_str());
+//              roleholders->push_back(rec);
+//      }
+//      
+//      return roleholders;
+//}     
+
+void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
+{
+
+        if (invalid)
+                throw (noDB);
+
+        // Tiresome
+        // If it exists - delete it
+        if (this->exists(key)) {
+                bool done = this->deleteRecord(key);
+        }
+        // Insert it
+        this->recordToTables(data);
+}
+
+bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // explicitly delete subordinate records in Phones, Address, others and Roles
+        // then delete the myrecord entry
+        // recreating the prepared statements for each operation - costly
+        const char* deletephones = "delete from phones where personid=?";
+        const char* deleteaddress = "delete from addresses where personid=?";
+        const char* deleteother = "delete from other where personid=?";
+        const char* deleteroles = "delete from roles where personid=?";
+        const char* deletemyrecord = "delete from myrecord where _id=?";
+        const char* unused; // Pointer to unused part of sql string (?)
+        sql::PreparedStatement *pstmt = NULL;
+        // Phones
+        pstmt = dbcon->prepareStatement(deletephones);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Addresses
+        pstmt = dbcon->prepareStatement(deleteaddress);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        //Other
+        pstmt = dbcon->prepareStatement(deleteother);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Roles
+        pstmt = dbcon->prepareStatement(deleteroles);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Finally
+        pstmt = dbcon->prepareStatement(deletemyrecord);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        return true;
+}
+
+MyRecord *MyRecordStore::get(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Again laborious
+        // Load the MyRecord from its table, then add data from Other tables.
+        const char* getrecord = "select * from myrecord where _id=?";
+        const char* getroles = "select role from roles where personid=?";
+        const char* getphones = "select type, number from phones where personid=?";
+        const char* getaddress = "select type, address from addresses where personid=?";
+        const char* getother = "select key, valyue from other where personid=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet *rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrecord);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::string id = rs->getString(1);
+        std::string name = rs->getString(2);
+        std::string email = rs->getString(3);
+        std::string info = rs->getString(4);
+        std::string image = rs->getString(5);
+
+        MyRecord *arec = new MyRecord(id);
+        arec->setName(name);
+        arec->setEmail(email);
+        arec->setInfo(info);
+        arec->setImage(image);
+
+        delete rs;
+        delete pstmt;
+        // =======================================
+        // Now ask about roles
+        pstmt = dbcon->prepareStatement(getroles);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        while (rs->next())
+        {
+                std::string arole = rs->getString(1);
+                arec->addRole(arole);
+        }
+        delete rs;
+        delete pstmt;
+}
+
+void MyRecordStore::recordToTables(const MyRecord* data)
+{
+        if (invalid)
+                throw (noDB);
+
+        // Insert the myrecord data first, then deal with Other data tables
+
+        const char* putmyrecord = "insert into myrecord values( ?, ?, ?, ?, ?)";
+        const char* putrole = "insert into roles values(?, ?)";
+        const char* putphone = "insert into phones values (?, ?, ?)";
+        const char* putaddress = "insert into addresses values (?, ?, ?)";
+        const char* putother = "insert into other values (?, ?, ?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(putmyrecord);
+        pstmt->setString(1, data->getID());
+        pstmt->setString(2, data->getName());
+        pstmt->setString(3, data->getEmail());
+        pstmt->setString(4, data->getInfo());
+        pstmt->setString(5, data->getImage());
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // Role 
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+
+//      // Other
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+}
diff --git a/Database/MyRecordStore.h b/Database/MyRecordStore.h
new file mode 100644
index 0000000..261bd0e
--- /dev/null
+++ b/Database/MyRecordStore.h
@@ -0,0 +1,43 @@
+#include <string>
+#include <vector>
+#include "mysql_connection.h"
+#include "mysql_driver.h"
+#include "MyRecord.h"
+
+class MyRecordStore {
+public:
+        MyRecordStore();
+
+        ~MyRecordStore();
+        // Delete - returns false if there wasn't a record with that key
+        bool deleteRecord(const char* key) throw (const char*);
+        // Exists - is there a record with a given key
+        bool exists(const char* key) throw (const char*);
+        // Put - insert/replace a record; returns false if failed
+        // (In this example, key is actually the same as name field in data record)
+        void put(const char* key, const MyRecord *data) throw (const char*);
+        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
+        MyRecord *get(const char*key) throw (const char*);
+
+        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+
+        void close();
+
+        std::vector<std::string> *allKeys();
+
+        bool isOK()
+        {
+                return !(this->invalid);
+        }
+
+private:
+        bool invalid;
+        const char* dbname;
+        sql::Connection *dbcon;
+        sql::Driver *driver;
+        MyRecordStore(const MyRecordStore& orig);
+        MyRecordStore& operator=(const MyRecordStore);
+
+        void recordToTables(const MyRecord *data);
+
+};
diff --git a/Database/a.out b/Database/a.out
new file mode 100755
index 0000000..8632149
Binary files /dev/null and b/Database/a.out differ
diff --git a/Database/create_tables.txt b/Database/create_tables.txt
new file mode 100644
index 0000000..ec3745c
--- /dev/null
+++ b/Database/create_tables.txt
@@ -0,0 +1,159 @@
+USE csci222;
+
+CREATE TABLE `UserType` (
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
+	`paidAmount` float NOT NULL DEFAULT 0,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `UserAccount` (
+	`userID` int NOT NULL AUTO_INCREMENT,
+	`username` varchar(32) NOT NULL,
+	`password` varchar(32) NOT NULL,
+	`infoID` int NOT NULL,
+	PRIMARY KEY(`userID`),
+	FOREIGN KEY(`infoID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PersonalInfo` (
+	`infoID` int NOT NULL AUTO_INCREMENT,
+	`userID` int,
+	`name` varchar(128) NOT NULL,
+	`email` varchar(128),
+	`organisation` varchar(256) NOT NULL,
+	`phone` varchar(32), 
+	PRIMARY KEY(`infoID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Emails` (
+	`emailID` int NOT NULL AUTO_INCREMENT,
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`emailType` ENUM(`accountCreation`, `accountModified`, `paperSubmitted`, `paperAssigned`, `paperReviewed`, `rebuttalNeeded`, `rebuttalSubmitted`, `biddingOpen`, `paperAccepted`, `paperRejected`, `ReviewersNeeded`, `AllPapersReviewed`, `invitationCommitte`, `invitationChair`, `softDeadline`, `hardDeadline`),
+	PRIMARY KEY(`emailID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ExpertiseArea` (
+	`userID` int NOT NULL,
+	`expertiseID` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Keywords` (
+	`keywordID` int NOT NULL AUTO_INCREMENT,
+	`keyword` varchar(64) NOT NULL,
+	PRIMARY KEY(`expertiseID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Conference` (
+	`confID` int NOT NULL AUTO_INCREMENT,
+	`name` varchar(256) NOT NULL,
+	`topic` varchar(512) NOT NULL,
+	`description` varchar(4096) NOT NULL,
+	`location` varchar(256) NOT NULL,
+	`active` boolean NOT NULL DEFAULT 1,
+	`paperDeadline` datetime,
+	`paperDeadlineBool` bool,
+	`reviewDeadlineSoft` datetime,
+	`reviewDeadlineSoftBool` bool,
+	`reviewDeadlineHard` datetime,
+	`reviewDeadlineHardBool` bool,
+	`discussDeadline` datetime,
+	`discussDeadlineBool` bool,
+	`reviewersPerPaper` int NOT NULL,
+	PRIMARY KEY(`conf_id`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ConferenceKeywords` (
+	`confID` int,
+	`keywordID` int,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+
+CREATE TABLE `Paper` (
+	`paperID` int NOT NULL AUTO_INCREMENT,
+	`leadAuthorID` int NOT NULL,
+	`confID` int NOT NULL,
+	`keywordID` int NOT NULL,
+	`paperTitle` varchar(512) NOT NULL,
+	`paperAbstract` varchar(4096) NOT NULL,
+	`paperStatus` ENUM(`accepted`, `rejected`, submitted`, `assigned`, `reviewed`),
+	`paper` blob NOT NULL,
+	PRIMARY KEY(`paperID`),
+	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `AcceptedPapers` (
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `paperAuthors` (
+	`paperID` int NOT NULL,
+	`authorID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PaperKeywords` (
+	`paperID` int NOT NULL,
+	`keyword` varchar(64) NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PaperAssigned` (
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`reviewed` boolean NOT NULL DEFAULT 0,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+	
+CREATE TABLE `Review` (
+	`reportID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
+	`overall` int,
+	`confidence` int,
+	`relevance` int,
+	`originality` int,
+	`significance` int,
+	`presentation` int,
+	`techQuality` int,
+	`evaluation` int,
+	`commentsStrength` varchar(4096),
+	`commentsWeakness` varchar(4096),
+	`commentsSuggestions` varchar(4096),
+	`commentsShortPaper` varchar(4096),
+	`commentsBestAward` varchar(4096),
+	`authorRebuttal` varchar(4096),
+	PRIMARY KEY(`report_id`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ReviewerDiscussion` (
+	`commentID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`confID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`comment` varchar(4096),
+	PRIMARY KEY(`commentID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
diff --git a/Database/hardcopy.4 b/Database/hardcopy.4
new file mode 100644
index 0000000..002d416
--- /dev/null
+++ b/Database/hardcopy.4
@@ -0,0 +1,58 @@
+#include <cstdlib>                                                                                    |//              exit(1);
+#include <iostream>                                                                                   |//      }
+#include <fstream>                                                                                    |//      std::vector<std::string> people;
+#include <string>                                                                                     |//
+                                                                                                      |//      // rc = sqlite3_step(stmt);
+#include "MyRecord.h"                                                                                 |//
+#include "MyRecordStore.h"                                                                            |//      while (sqlite3_step(stmt) == SQLITE_ROW) {
+                                                                                                      |//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
+#include <vector>                                                                                     |//              people.push_back(apersonid);
+                                                                                                      |//      }
+typedef MyRecord* RecordPtr;                                                                          |//      sqlite3_finalize(stmt);
+std::vector<RecordPtr> g_theRecords;                                                                  |//
+                                                                                                      |//
+//std::string getImage(std::string filename);                                                         |//      // Maybe there weren't any
+                                                                                                      |//      if (people.size() == 0)
+static void createData();                                                                             |//              return NULL;
+                                                                                                      |//
+int main(int arc, char *argv[])                                                                       |//      // Build collection by getting each record
+{                                                                                                     |//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+        createData();                                                                                 |//
+        MyRecordStore astore;                                                                         |//      std::vector<std::string>::const_iterator it;
+        if (!astore.isOK())                                                                           |//      for (it = people.begin(); it != people.end(); it++) {
+        {                                                                                             |//              std::string aperson = *it;
+                std::cout << "Failed to open database file" << std::endl;                             |//              MyRecord* rec = this->get(aperson.c_str());
+                exit(1);                                                                              |//              roleholders->push_back(rec);
+        }                                                                                             |//      }
+                                                                                                      |//
+        vector<RecordPtr>::const_iterator it;                                                         |//      return roleholders;
+        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)                                    |//}
+        {                                                                                             |
+                RecordPtr ptr = (*it);                                                                |void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
+                const char* key = ptr->getID().c_str();                                               |{
+                astore.put(key, ptr);                                                                 |
+                std::cout << "Wrote record " << key << std::endl;                                     |        if (invalid)
+        }                                                                                             |                throw (noDB);
+        return EXIT_SUCCESS;                                                                          |
+}                                                                                                     |        // Tiresome
+                                                                                                      |        // If it exists - delete it
+//static std::string getImage(std::string filename)                                                   |        if (this->exists(key)) {
+//{                                                                                                   |                bool done = this->deleteRecord(key);
+//      // Qt library has its own string class, convert STL string                                    |        }
+//      QString qtfilename(filename.c_str());                                                         |        // Insert it
+//      QImage animage;                                                                               |        this->recordToTables(data);
+//      bool readimage = animage.load(qtfilename);                                                    |}
+//      if (!readimage)                                                                               |
+//      {                                                                                             |bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
+//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl; |{
+//              exit(1);                                                                              |        if (invalid)
+//      }                                                                                             |                throw (noDB);
+//                                                                                                    |        // explicitly delete subordinate records in Phones, Address, others and Roles
+//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);                           |        // then delete the myrecord entry
+//                                                                                                    |        // recreating the prepared statements for each operation - costly
+//      QByteArray ba;                                                                                |        const char* deletephones = "delete from Phones where idPerson=?";
+//      QBuffer buf(&ba);                                                                             |        const char* deleteaddress = "delete from Addresses where idPerson=?";
+//      resized.save(&buf, "JPG");                                                                    |        const char* deleteother = "delete from Other where idPerson=?";
+//                                                                                                    |        const char* deleteroles = "delete from Roles where idPerson=?";
+main.cpp                                                                            33,1           Top MyRecordStore.cpp                                                                   211,1          52%
+
diff --git a/Database/main.cpp b/Database/main.cpp
new file mode 100644
index 0000000..73e16d2
--- /dev/null
+++ b/Database/main.cpp
@@ -0,0 +1,122 @@
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "MyRecord.h"
+#include "MyRecordStore.h"
+
+#include <vector>
+
+typedef MyRecord* RecordPtr;
+std::vector<RecordPtr> g_theRecords;
+
+//std::string getImage(std::string filename);
+
+static void createData();
+
+int main(int arc, char *argv[])
+{
+        createData();
+        MyRecordStore astore;
+        if (!astore.isOK())
+        {
+                std::cout << "Failed to open database file" << std::endl;
+                exit(1);
+        }
+
+        vector<RecordPtr>::const_iterator it;
+        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
+        {
+                RecordPtr ptr = (*it);
+                const char* key = ptr->getID().c_str();
+                astore.put(key, ptr);
+                std::cout << "Wrote record " << key << std::endl;
+        }
+        return EXIT_SUCCESS;
+}
+
+//static std::string getImage(std::string filename)
+//{
+//      // Qt library has its own string class, convert STL string
+//      QString qtfilename(filename.c_str());
+//      QImage animage;
+//      bool readimage = animage.load(qtfilename);
+//      if (!readimage)
+//      {
+//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl;
+//              exit(1);
+//      }
+//
+//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);
+//
+//      QByteArray ba;
+//      QBuffer buf(&ba);
+//      resized.save(&buf, "JPG");
+//      
+//      QByteArray coded = ba.toBase64();
+//      std::string result(coded); // relying on QByteArray operator char*
+//      return result;
+//}
+
+static void createData()
+{
+        // Hard code procedural creation of a few records so that can
+        // have some data to show in the Qt based GUI
+        RecordPtr next;
+        std::string id;
+        std::string name;
+        std::string aRole;
+        std::string imagestr;
+        std::string file;
+
+        // You will need to adjust filenames etc to match the image files
+        // that you provide
+        {
+                id = "tom";
+                name = "Thomas";
+                file = "./images/om.jpg";
+//              imagestr = getImage(file);
+                next = new MyRecord(id);
+                next->setName(name);
+//              next->setImage(imagestr);
+                aRole = "Boss";
+                next->addRole(aRole);
+                aRole="Manager";
+                next->addRole(aRole);
+                std::string email = "boos_tom@ourcompany.com.au";
+                next->setEmail(email);
+                std::string phones = "Phones";
+                std::string mbl = "Mobile";
+                std::string phnnum = "04666666666";
+                next->addKeyValue(phones, mbl, phnnum);
+                std::string others = "Other";
+                std::string key = "Height";
+                std::string value = "1.89m";
+                next->addKeyValue(others, key, value);
+                key = "Golf Handicap";
+                value = "6";
+                next->addKeyValue(others, key, value);
+                g_theRecords.push_back(next);
+        }
+        {
+                id = "dick";
+                name = "Dick";
+                file = "./images/dick.jpg";
+//              imagestr = getImage(file);
+                next = new MyRecord(id);
+                next->setName(name);
+//              next->setImage(imagestr);
+                aRole="Accountant";
+                next->addRole(aRole);
+                std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
+                next->setInfo(info);
+                std::string email = "clever_dick@ourcompany.com.au";
+                next->setEmail(email);
+                std::string phones = "Phones";
+                std::string mbl = "Mobile";
+                std::string phnnum = "04666667666";
+                next->addKeyValue(phones, mbl, phnnum);
+                g_theRecords.push_back(next);
+        }
+}
diff --git a/Database/stringtrimmer.h b/Database/stringtrimmer.h
new file mode 100644
index 0000000..a2d38a1
--- /dev/null
+++ b/Database/stringtrimmer.h
@@ -0,0 +1,31 @@
+#ifndef STRINGTRIMMER_H
+#define STRINGTRIMMER_H
+
+#include <algorithm>
+#include <functional>
+#include <cctype>
+#include <locale>
+
+// trim from start
+static inline std::string &ltrim(std::string &s)
+{
+        s.erase(s.begin(), std::find_if(s.begin(), s.end(),
+                std::not1(std::ptr_fun<int, int>(std::isspace))));
+        return s;
+}
+
+//trim from end
+static inline std::string &rtrim(std::string &s)
+{
+        s.erase(std::find_if(s.begin(), s.end(),
+                std::not1(std::ptr_fun<int, int>(std::isspace))), s.end());
+        return s;
+}
+
+//trim from both ends
+static inline std::string &trim(std::string &s)
+{
+        return ltrim(rtrim(s));
+}
+
+#endif
diff --git a/Database/temp_database_create.txt b/Database/temp_database_create.txt
new file mode 100644
index 0000000..d97c32c
--- /dev/null
+++ b/Database/temp_database_create.txt
@@ -0,0 +1,34 @@
+USE csci222;
+
+CREATE TABLE `myrecord` (
+        `_id` text,
+        `_name` text,
+        `email` text,
+	`info` text,
+	`image` text
+);
+
+CREATE TABLE `roles` (
+	`personid` text,
+	`_role` text
+);
+
+CREATE TABLE `addresses` (
+	`personid` text,
+	`addresstype` text,
+	`address` text
+);
+
+CREATE TABLE `phones` (
+	`personid` text,
+	`phonetype` text,
+	`phonenumber` text
+);
+
+CREATE TABLE `other` (
+	`personid` text,
+	`_key` text,
+	`value` text
+);
+
+INSERT INTO myrecord VALUES ('testperson' ,'Test', 'test@test.com', 'No info', NULL);
diff --git a/database/Exception.h b/database/Exception.h
deleted file mode 100644
index 216cca4..0000000
--- a/database/Exception.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * File:        MyException.h
- * Author:      nabg
- *
- * Created on 27 November 2012, 11:20 AM
- */
-
-#ifndef MYEXCEPTION_H
-#define MYEXCEPTION_H
-
-#include <string>
-#include <exception>
-using namespace std;
-
-class MyException : public exception {
-public:
-    MyException(string& whatsup) : message(whatsup) {  }
-    ~MyException() throw() {}
-    const char* what(){return message.c_str();}
-private:
-    string message;
-};
-
-#endif  /* MYEXCEPTION_H */
-
diff --git a/database/Record.cpp b/database/Record.cpp
deleted file mode 100644
index 73124b8..0000000
--- a/database/Record.cpp
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * File:        MyRecord.cpp
- * Author:      nabg
- * 
- * Created on 23 November 2012, 1:25 PM
- * 
- * See MyRecord.h for some explanation!
- * 
- * class MyRecord {
-public:
-    explicit MyRecord(string& id); 
-    void setName(string& aname) throw (MyException);
-    void setEmail(string& amail) throw (MyException);
-    void setInfo(string& info) throw (MyException);
-    void setImage(string& imagestr) throw (MyException);
-    void addRole(string& anotherrole) throw (MyException);
-    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
-
-    string getID() const { return this->id; }
-    string getName() const { return this->name; }
-    string getEmail() const { return this->email; }
-    string getInfo() const { return this->info; }
-    string getImage() const { return this->image; }
-    string getAttribute(string& collectionname, string& key) const throw(MyException);
-    vector<string> getRoles() const { return this->roles; }
-    map<string,string> getPhones() const { return this->phones; }
-    map<string,string> getAddresses() const { return this->addresses; }
-    map<string,string> getOtherKV() const { return this->other; }
-    
-    bool hasRole(string& queryrole) const;
-    
-private:
-    string id; 
-    string name; 
-    string email; 
-    string image;
-    string info;
-    vector<string> roles;
-    map<string,string> phones;
-    map<string,string> addresses;
-    map<string,string> other;
-
-
-
- * 
- * 
- */
-
-#include <vector>
-#include <algorithm>
-#include "MyRecord.h"
-#include "stringtrimmer.h"
-
-//#include <boost/regex.hpp>
-
-MyRecord::MyRecord(string& id) {
-    this->id = id;
-}
-
-void MyRecord::setName(string& aname) throw (MyException) {
-    this->name = aname;
-}
-
-void MyRecord::setEmail(string& amail) throw (MyException) {
- //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
- //   amail = trim(amail);
- //   boost::match_results<std::string::const_iterator> results;
- //   if (boost::regex_match(amail, results, validationExpression))
- //   {
-        this->email = amail;
- //   }
- //   else
- //   {
- //       string msg = "Email of wrong format";
- //       throw MyException(msg);
- //   }
-}
-
-void MyRecord::setInfo(string& info) throw (MyException) {
-    this->info = info;
-}
-
-void MyRecord::setImage(string& imagestr) throw (MyException) {
-    this->image = imagestr;
-}
-
-void MyRecord::addRole(string& anotherrole)  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-    if (it != this->roles.end()) return; // Found it, so don't duplicate
-    roles.push_back(anotherrole);
-}
-
-void MyRecord::removeRole(std::string& oldrole)
-{
-    this->roles.erase(remove(this->roles.begin(),
-        this->roles.end(), oldrole),
-        this->roles.end());
-}
-
-void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
-    if (key.empty() || value.empty()) {
-        string msg = "Empty key or value";
-        throw MyException(msg);
-    }
-    // If same collection/key combination specified more than once, later value
-    // overwrites earlier value for that key.
-
-// Change to allow of rSTL's insert() not allowing for replacement
-    if (collectionname == "Phones") {
-        this->phones[key]=value;
-    } else
-        if (collectionname == "Addresses") {
-        this->addresses[key]=value;
-    } else
-        if (collectionname == "Other") {
-         this->other[key]=value;
-    } else {
-        string errmsg = "There is no collection called " + collectionname;
-        throw MyException(errmsg);
-    }
-}
-
-string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
-
-
-    if (collectionname == "Phones") {
-        return phones.find(key)->second;
-    } else
-        if (collectionname == "Addresses") {
-        return addresses.find(key)->second;
-    } else
-        if (collectionname == "Other") {
-        return other.find(key)->second;
-    }
-
-    string errmsg = "There is no collection called " + collectionname;
-    throw MyException(errmsg);
-
-}
-
-
-bool MyRecord::hasRole(string&  anotherrole) const  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::const_iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-   return(it != this->roles.end()) ;
-}
diff --git a/database/Record.h b/database/Record.h
deleted file mode 100644
index 076ae54..0000000
--- a/database/Record.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * File:        MyRecord.h
- * Author:      nabg
- *
- * Created on 27 November 2012, 11:18 AM
- */
-
-#ifndef MYRECORD_H
-#define MYRECORD_H
-#include "MyException.h"
-#include <map>
-#include <string>
-#include <vector>
-using namespace std;
-
-class MyRecord {
-public:
-    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
-    // Mutator functions - setting of other fields
-    // In this version, hardly any of the implementations will actually throw exceptions
-    // later validation functions will be added
-    void setName(std::string& aname) throw (MyException);
-    void setEmail(std::string& amail) throw (MyException);
-    void setInfo(std::string& info) throw (MyException);
-    void setImage(std::string& imagestr) throw (MyException);
-    void addRole(std::string& anotherrole) ;
-    void removeRole(std::string& oldrole);
-    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
-    // Accessor functions
-
-    std::string getID() const { return this->id; }
-    std::string getName() const { return this->name; }
-    std::string getEmail() const { return this->email; }
-    std::string getInfo() const { return this->info; }
-    std::string getImage() const { return this->image; }
-    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
-    const std::vector<std::string>& getRoles() const { return this->roles; }
-    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
-    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
-    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
-
-    bool hasRole(std::string& queryrole) const;
-
-private:
-    std::string id; // Also known as "nickname", or even "primary key"
-    std::string name; // full name
-    std::string email;
-    std::string image;
-    std::string info;
-    std::vector<std::string> roles;
-    std::map<std::string,std::string> phones;
-    std::map<std::string,std::string> addresses;
-    std::map<std::string,std::string> other;
-     // Finally, note that copy constructor and assignment operator are
-    // private (and no implementations will be defined).  I choose to 
-    // disallow such operations.
-    MyRecord(const MyRecord& orig);
-    MyRecord& operator=(const MyRecord&);
-    // Further there is no virtual destructor, I do not intend MyRecord
-    // to be the base class in some hierarchy.
-};
-
-#endif  /* MYRECORD_H */
diff --git a/database/RecordStore.cpp b/database/RecordStore.cpp
deleted file mode 100644
index 8000f30..0000000
--- a/database/RecordStore.cpp
+++ /dev/null
@@ -1,375 +0,0 @@
-#include "MyRecordStore.h"
-
-#include "cppconn/driver.h"
-#include "cppconn/exception.h"
-#include "cppconn/resultset.h"
-#include "cppconn/statement.h"
-#include "cppconn/prepared_statement.h"
-
-#include <cstring>
-#include <stdlib.h>
-#include <iostream>
-
-#include <vector>
-#include <map>
-#include <string>
-
-using namespace sql;
-
-const char* databaseStr = "tcp://127.0.0.1:3306";
-const char* databaseUserName = "nabg";
-const char* databaseUserPassword = "NotReallyMyPassword";
-const char* databaseSchema = "nabg";
-
-const char* noDB = "Sorry, but was unable to open database so operation failed";
-
-const char* prepareFailed = "Failure when preparing statement";
-const char* bindFailed = "Failure when binding arguments";
-const char* writeFailed = "Failure when writing to database";
-
-MyRecordStore::MyRecordStore()
-{
-        // Constructors should always succeed. But suppose it failed and
-        // the database couldn't be created?
-        invalid = true;
-        driver = get_driver_instance();
-        try {
-                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
-        } catch (sql::SQLException &e) {
-                // Failed
-                return;
-        }
-        dbcon->setSchema(databaseSchema);
-        // It's ok
-        invalid = false;
-}
-
-MyRecordStore::~MyRecordStore()
-{
-        if (!invalid) {
-                this->close();
-        }
-}
-
-void MyRecordStore::close()
-{
-        if (!invalid) {
-                dbcon->close();
-                delete dbcon;
-        }
-        invalid = true;
-}
-
-bool MyRecordStore::exists(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        const char* countrecord = "select count(*) from MyRecord where _id=?";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countrecord);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count = 1;
-}
-
-std::vector<std::string> *MyRecordStore::allKeys()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
-
-        const char* selectall = "select _id from MyRecord";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string anid = rs->getString(1);
-                vptr->push_back(anid);
-        }
-
-        return vptr;
-}
-std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Laboured
-        // First get a list of the ids with the role, then one by one get the
-        // complete records.
-        const char* getrolepersons = "selects personid from roles where _role=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(getrolepersons);
-        pstmt->setString(1, role);
-        rs = pstmt->executeQuery();
-
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
-
-        std::vector<std::string> people;
-
-        // rc = sqlite3_step(stmt);
-
-        while (rs->next()) {
-                std::string apersonid = std::string(rs->getString(1));
-//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
-                people.push_back(apersonid);
-        }
-
-        // Maybe there weren't any
-        if (people.size() == 0)
-                return NULL;
-
-        // Build collection by getting each record
-        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-
-        std::vector<std::string>::const_iterator it;
-        for (it = people.begin(); it != people.end(); it++) {
-                std::string aperson = *it;
-                MyRecord* rec = this->get(aperson.c_str());
-                roleholders->push_back(rec);
-        }
-
-        return roleholders;
-}
-//
-//      sqlite3_stmt* stmt;
-//      int rc;
-//      rc = sqlite3_prepare_v2(db,
-//              getrolepersons, strlen(getrolepersons),
-//              &stmt, &unused);
-//      if (rc != SQLITE_OK) {
-//              std::cerr << prepareFailed << std::endl;
-//              exit(1);
-//      }
-//
-//      rc = sqlite3_bind_text(stmt, 1, role, -1 , SQLITE_STATIC);
-//      if (rc != SQLITE_OK) {
-//              std::cerr << bindFailed << std::endl;
-//              exit(1);
-//      }
-//      std::vector<std::string> people;
-//
-//      // rc = sqlite3_step(stmt);
-//
-//      while (sqlite3_step(stmt) == SQLITE_ROW) {
-//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
-//              people.push_back(apersonid);
-//      }
-//      sqlite3_finalize(stmt);
-//
-//
-//      // Maybe there weren't any
-//      if (people.size() == 0)
-//              return NULL;
-//
-//      // Build collection by getting each record
-//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-//
-//      std::vector<std::string>::const_iterator it;
-//      for (it = people.begin(); it != people.end(); it++) {
-//              std::string aperson = *it;
-//              MyRecord* rec = this->get(aperson.c_str());
-//              roleholders->push_back(rec);
-//      }
-//      
-//      return roleholders;
-//}     
-
-void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
-{
-
-        if (invalid)
-                throw (noDB);
-
-        // Tiresome
-        // If it exists - delete it
-        if (this->exists(key)) {
-                bool done = this->deleteRecord(key);
-        }
-        // Insert it
-        this->recordToTables(data);
-}
-
-bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // explicitly delete subordinate records in Phones, Address, others and Roles
-        // then delete the myrecord entry
-        // recreating the prepared statements for each operation - costly
-        const char* deletephones = "delete from Phones where idPerson=?";
-        const char* deleteaddress = "delete from Addresses where idPerson=?";
-        const char* deleteother = "delete from Other where idPerson=?";
-        const char* deleteroles = "delete from Roles where idPerson=?";
-        const char* deletemyrecord = "delete from MyRecord where _id=?";
-        const char* unused; // Pointer to unused part of sql string (?)
-        sql::PreparedStatement *pstmt = NULL;
-        // Phones
-        pstmt = dbcon->prepareStatement(deletephones);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Addresses
-        pstmt = dbcon->prepareStatement(deleteaddress);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        //Other
-        pstmt = dbcon->prepareStatement(deleteother);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Roles
-        pstmt = dbcon->prepareStatement(deleteroles);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Finally
-        pstmt = dbcon->prepareStatement(deletemyrecord);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        return true;
-}
-
-MyRecord *MyRecordStore::get(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Again laborious
-        // Load the MyRecord from its table, then add data from Other tables.
-        const char* getrecord = "select * from MyRecord where _id=?";
-        const char* getroles = "select role from Roles where idperson=?";
-        const char* getphones = "select type, number from Phones where idPerson=?";
-        const char* getaddress = "select type, address from Addresses where idPerson=?";
-        const char* getother = "select key, valyue from Other where idPerson=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet *rs = NULL;
-
-        pstmt = dbcon->prepareStatement(getrecord);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
-
-        std::string id = rs->getString(1);
-        std::string name = rs->getString(2);
-        std::string email = rs->getString(3);
-        std::string info = rs->getString(4);
-        std::string image = rs->getString(5);
-
-        MyRecord *arec = new MyRecord(id);
-        arec->setName(name);
-        arec->setEmail(email);
-        arec->setInfo(info);
-        arec->setImage(image);
-
-        delete rs;
-        delete pstmt;
-        // =======================================
-        // Now ask about roles
-        pstmt = dbcon->prepareStatement(getroles);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        while (rs->next())
-        {
-                std::string arole = rs->getString(1);
-                arec->addRole(arole);
-        }
-        delete rs;
-        delete pstmt;
-}
-
-void MyRecordStore::recordToTables(const MyRecord* data)
-{
-        if (invalid)
-                throw (noDB);
-
-        // Insert the myrecord data first, then deal with Other data tables
-
-        const char* putmyrecord = "insert into MyRecord values( ?, ?, ?, ?, ?)";
-        const char* putrole = "insert into Roles values(?, ?)";
-        const char* putphone = "insert into Phones values (?, ?, ?)";
-        const char* putaddress = "insert into Addresses values (?, ?, ?)";
-        const char* putother = "insert into Other values (?, ?, ?)";
-
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(putmyrecord);
-        pstmt->setString(1, data->getID());
-        pstmt->setString(2, data->getName());
-        pstmt->setString(3, data->getEmail());
-        pstmt->setString(4, data->getInfo());
-        pstmt->setString(5, data->getImage());
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // Role 
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-
-//      // Other
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-}
diff --git a/database/RecordStore.h b/database/RecordStore.h
deleted file mode 100644
index 261bd0e..0000000
--- a/database/RecordStore.h
+++ /dev/null
@@ -1,43 +0,0 @@
-#include <string>
-#include <vector>
-#include "mysql_connection.h"
-#include "mysql_driver.h"
-#include "MyRecord.h"
-
-class MyRecordStore {
-public:
-        MyRecordStore();
-
-        ~MyRecordStore();
-        // Delete - returns false if there wasn't a record with that key
-        bool deleteRecord(const char* key) throw (const char*);
-        // Exists - is there a record with a given key
-        bool exists(const char* key) throw (const char*);
-        // Put - insert/replace a record; returns false if failed
-        // (In this example, key is actually the same as name field in data record)
-        void put(const char* key, const MyRecord *data) throw (const char*);
-        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
-        MyRecord *get(const char*key) throw (const char*);
-
-        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
-
-        void close();
-
-        std::vector<std::string> *allKeys();
-
-        bool isOK()
-        {
-                return !(this->invalid);
-        }
-
-private:
-        bool invalid;
-        const char* dbname;
-        sql::Connection *dbcon;
-        sql::Driver *driver;
-        MyRecordStore(const MyRecordStore& orig);
-        MyRecordStore& operator=(const MyRecordStore);
-
-        void recordToTables(const MyRecord *data);
-
-};
diff --git a/database/create_tables.txt b/database/create_tables.txt
deleted file mode 100644
index ec3745c..0000000
--- a/database/create_tables.txt
+++ /dev/null
@@ -1,159 +0,0 @@
-USE csci222;
-
-CREATE TABLE `UserType` (
-	`userID` int NOT NULL,
-	`confID` int NOT NULL,
-	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
-	`paidAmount` float NOT NULL DEFAULT 0,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `UserAccount` (
-	`userID` int NOT NULL AUTO_INCREMENT,
-	`username` varchar(32) NOT NULL,
-	`password` varchar(32) NOT NULL,
-	`infoID` int NOT NULL,
-	PRIMARY KEY(`userID`),
-	FOREIGN KEY(`infoID`) REFERENCES PersonalInfo(`infoID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `PersonalInfo` (
-	`infoID` int NOT NULL AUTO_INCREMENT,
-	`userID` int,
-	`name` varchar(128) NOT NULL,
-	`email` varchar(128),
-	`organisation` varchar(256) NOT NULL,
-	`phone` varchar(32), 
-	PRIMARY KEY(`infoID`),
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `Emails` (
-	`emailID` int NOT NULL AUTO_INCREMENT,
-	`userID` int NOT NULL,
-	`confID` int NOT NULL,
-	`emailType` ENUM(`accountCreation`, `accountModified`, `paperSubmitted`, `paperAssigned`, `paperReviewed`, `rebuttalNeeded`, `rebuttalSubmitted`, `biddingOpen`, `paperAccepted`, `paperRejected`, `ReviewersNeeded`, `AllPapersReviewed`, `invitationCommitte`, `invitationChair`, `softDeadline`, `hardDeadline`),
-	PRIMARY KEY(`emailID`),
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ExpertiseArea` (
-	`userID` int NOT NULL,
-	`expertiseID` int NOT NULL,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
-	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `Keywords` (
-	`keywordID` int NOT NULL AUTO_INCREMENT,
-	`keyword` varchar(64) NOT NULL,
-	PRIMARY KEY(`expertiseID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `Conference` (
-	`confID` int NOT NULL AUTO_INCREMENT,
-	`name` varchar(256) NOT NULL,
-	`topic` varchar(512) NOT NULL,
-	`description` varchar(4096) NOT NULL,
-	`location` varchar(256) NOT NULL,
-	`active` boolean NOT NULL DEFAULT 1,
-	`paperDeadline` datetime,
-	`paperDeadlineBool` bool,
-	`reviewDeadlineSoft` datetime,
-	`reviewDeadlineSoftBool` bool,
-	`reviewDeadlineHard` datetime,
-	`reviewDeadlineHardBool` bool,
-	`discussDeadline` datetime,
-	`discussDeadlineBool` bool,
-	`reviewersPerPaper` int NOT NULL,
-	PRIMARY KEY(`conf_id`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ConferenceKeywords` (
-	`confID` int,
-	`keywordID` int,
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
-
-CREATE TABLE `Paper` (
-	`paperID` int NOT NULL AUTO_INCREMENT,
-	`leadAuthorID` int NOT NULL,
-	`confID` int NOT NULL,
-	`keywordID` int NOT NULL,
-	`paperTitle` varchar(512) NOT NULL,
-	`paperAbstract` varchar(4096) NOT NULL,
-	`paperStatus` ENUM(`accepted`, `rejected`, submitted`, `assigned`, `reviewed`),
-	`paper` blob NOT NULL,
-	PRIMARY KEY(`paperID`),
-	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `AcceptedPapers` (
-	`confID` int NOT NULL,
-	`paperID` int NOT NULL,
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `paperAuthors` (
-	`paperID` int NOT NULL,
-	`authorID` int NOT NULL,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `PaperKeywords` (
-	`paperID` int NOT NULL,
-	`keyword` varchar(64) NOT NULL,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `PaperAssigned` (
-	`paperID` int NOT NULL,
-	`reviewerID` int NOT NULL,
-	`reviewed` boolean NOT NULL DEFAULT 0,
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
-) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
-	
-CREATE TABLE `Review` (
-	`reportID` int NOT NULL AUTO_INCREMENT,
-	`paperID` int NOT NULL,
-	`reviewerID` int NOT NULL,
-	`confID` int NOT NULL,
-	`overall` int,
-	`confidence` int,
-	`relevance` int,
-	`originality` int,
-	`significance` int,
-	`presentation` int,
-	`techQuality` int,
-	`evaluation` int,
-	`commentsStrength` varchar(4096),
-	`commentsWeakness` varchar(4096),
-	`commentsSuggestions` varchar(4096),
-	`commentsShortPaper` varchar(4096),
-	`commentsBestAward` varchar(4096),
-	`authorRebuttal` varchar(4096),
-	PRIMARY KEY(`report_id`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
-CREATE TABLE `ReviewerDiscussion` (
-	`commentID` int NOT NULL AUTO_INCREMENT,
-	`paperID` int NOT NULL,
-	`confID` int NOT NULL,
-	`reviewerID` int NOT NULL,
-	`comment` varchar(4096),
-	PRIMARY KEY(`commentID`),
-	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
-	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
-) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
-
diff --git a/database/main.cpp b/database/main.cpp
deleted file mode 100644
index 73e16d2..0000000
--- a/database/main.cpp
+++ /dev/null
@@ -1,122 +0,0 @@
-#include <cstdlib>
-#include <iostream>
-#include <fstream>
-#include <string>
-
-#include "MyRecord.h"
-#include "MyRecordStore.h"
-
-#include <vector>
-
-typedef MyRecord* RecordPtr;
-std::vector<RecordPtr> g_theRecords;
-
-//std::string getImage(std::string filename);
-
-static void createData();
-
-int main(int arc, char *argv[])
-{
-        createData();
-        MyRecordStore astore;
-        if (!astore.isOK())
-        {
-                std::cout << "Failed to open database file" << std::endl;
-                exit(1);
-        }
-
-        vector<RecordPtr>::const_iterator it;
-        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
-        {
-                RecordPtr ptr = (*it);
-                const char* key = ptr->getID().c_str();
-                astore.put(key, ptr);
-                std::cout << "Wrote record " << key << std::endl;
-        }
-        return EXIT_SUCCESS;
-}
-
-//static std::string getImage(std::string filename)
-//{
-//      // Qt library has its own string class, convert STL string
-//      QString qtfilename(filename.c_str());
-//      QImage animage;
-//      bool readimage = animage.load(qtfilename);
-//      if (!readimage)
-//      {
-//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl;
-//              exit(1);
-//      }
-//
-//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);
-//
-//      QByteArray ba;
-//      QBuffer buf(&ba);
-//      resized.save(&buf, "JPG");
-//      
-//      QByteArray coded = ba.toBase64();
-//      std::string result(coded); // relying on QByteArray operator char*
-//      return result;
-//}
-
-static void createData()
-{
-        // Hard code procedural creation of a few records so that can
-        // have some data to show in the Qt based GUI
-        RecordPtr next;
-        std::string id;
-        std::string name;
-        std::string aRole;
-        std::string imagestr;
-        std::string file;
-
-        // You will need to adjust filenames etc to match the image files
-        // that you provide
-        {
-                id = "tom";
-                name = "Thomas";
-                file = "./images/om.jpg";
-//              imagestr = getImage(file);
-                next = new MyRecord(id);
-                next->setName(name);
-//              next->setImage(imagestr);
-                aRole = "Boss";
-                next->addRole(aRole);
-                aRole="Manager";
-                next->addRole(aRole);
-                std::string email = "boos_tom@ourcompany.com.au";
-                next->setEmail(email);
-                std::string phones = "Phones";
-                std::string mbl = "Mobile";
-                std::string phnnum = "04666666666";
-                next->addKeyValue(phones, mbl, phnnum);
-                std::string others = "Other";
-                std::string key = "Height";
-                std::string value = "1.89m";
-                next->addKeyValue(others, key, value);
-                key = "Golf Handicap";
-                value = "6";
-                next->addKeyValue(others, key, value);
-                g_theRecords.push_back(next);
-        }
-        {
-                id = "dick";
-                name = "Dick";
-                file = "./images/dick.jpg";
-//              imagestr = getImage(file);
-                next = new MyRecord(id);
-                next->setName(name);
-//              next->setImage(imagestr);
-                aRole="Accountant";
-                next->addRole(aRole);
-                std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
-                next->setInfo(info);
-                std::string email = "clever_dick@ourcompany.com.au";
-                next->setEmail(email);
-                std::string phones = "Phones";
-                std::string mbl = "Mobile";
-                std::string phnnum = "04666667666";
-                next->addKeyValue(phones, mbl, phnnum);
-                g_theRecords.push_back(next);
-        }
-}
diff --git a/database/stringtrimmer.h b/database/stringtrimmer.h
deleted file mode 100644
index a2d38a1..0000000
--- a/database/stringtrimmer.h
+++ /dev/null
@@ -1,31 +0,0 @@
-#ifndef STRINGTRIMMER_H
-#define STRINGTRIMMER_H
-
-#include <algorithm>
-#include <functional>
-#include <cctype>
-#include <locale>
-
-// trim from start
-static inline std::string &ltrim(std::string &s)
-{
-        s.erase(s.begin(), std::find_if(s.begin(), s.end(),
-                std::not1(std::ptr_fun<int, int>(std::isspace))));
-        return s;
-}
-
-//trim from end
-static inline std::string &rtrim(std::string &s)
-{
-        s.erase(std::find_if(s.begin(), s.end(),
-                std::not1(std::ptr_fun<int, int>(std::isspace))), s.end());
-        return s;
-}
-
-//trim from both ends
-static inline std::string &trim(std::string &s)
-{
-        return ltrim(rtrim(s));
-}
-
-#endif

commit 9b1d59f853c4b0fbceb1663a1efb0b446caa62ee
Merge: 8281d5b eed768c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 22 18:53:14 2014 +1100

    Merge remote-tracking branch 'origin/master'
    
    Conflicts:
    	UserClient/User.hpp

commit 8281d5bd070d83549de371ab4d0e074ef6f5cb0a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 22 18:36:14 2014 +1100

    made login manager responsible for user

diff --git a/AdminClient/AdminClientDriver.exe b/AdminClient/AdminClientDriver.exe
index f093d19..789328e 100644
Binary files a/AdminClient/AdminClientDriver.exe and b/AdminClient/AdminClientDriver.exe differ
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index f8a6907..13fd999 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -7,6 +7,9 @@ struct LoginManager {
   LoginManager(bool iloggedIn) :
     loggedIn(iloggedIn)
     { }
+  ~LoginManager() {
+    delete currentUser;
+  }
   bool loggedIn;
   bool login(std::string, std::string);
   void logout();
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 6d3ab0b..8efc2ca 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -41,6 +41,7 @@ class Author : public User {
          const std::string& iphone,
          const std::string& ipassword,
          int iuserID,
+         UserType_t iuserType,
          const std::vector<std::string>& ikeywords,
          const std::vector<PaperSummary>& iownPapers):
          User(iuserName,
@@ -49,7 +50,8 @@ class Author : public User {
          iorganisation,
          iphone,
          ipassword,
-         iuserID
+         iuserID,
+         iuserType
          ),
          keywords(ikeywords),
          ownPapers(iownPapers)
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index e77d2d6..c9392ce 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -7,6 +7,7 @@
 
 class LoginManager {
   public:
+  LoginManager() { }
   LoginManager(bool iloggedIn,
                const std::vector<Conference*>& iconferences,
                Conference* iactiveConference) :
@@ -18,7 +19,9 @@ class LoginManager {
   for (unsigned i=0; i < conferences.size(); i++) {
     delete conferences[i];
   }
+  delete currentUser;
 }
+  User* currentUser{nullptr};
 // no other constructors deemed necessary at this point
   bool login(std::string, std::string);
   void logout();
@@ -34,6 +37,6 @@ class LoginManager {
   private:
   std::vector<Conference*> conferences;
   Conference* activeConference{nullptr};
-  User* currentUser{nullptr};
+
 };
 #endif
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index c152dfa..cdf1bec 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -38,6 +38,7 @@ class Reviewer : public Author {
       const std::string& iphone,
       const std::string& ipassword,
       int iuserID,
+      UserType_t iuserType,
       const std::vector<std::string>& ikeywords,
       const std::vector<PaperSummary>& iownPapers,
       const std::vector<PaperSummary>& iallocatedPapers,
@@ -51,6 +52,7 @@ class Reviewer : public Author {
       iphone,
       ipassword,
       iuserID,
+      iuserType,
       ikeywords,
       iownPapers
       ),
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index c1b37e0..c2de124 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -5,6 +5,8 @@
 
 #include <string>
 
+enum UserType_t {Author, Reviewer, PCChair};
+
 class User {
   public:
     User() { }
@@ -14,14 +16,16 @@ class User {
          const std::string& iorganisation,
          const std::string& iphone,
          const std::string& ipassword,
-         int iuserID):
+         int iuserID,
+         UserType_t iuserType):
          userName(iuserName),
          name(iname),
          email(iemail),
          organisation(iorganisation),
          phone(iphone),
          password(ipassword),
-         userID(iuserID)
+         userID(iuserID),
+         userType(iuserType)
          { }
     virtual void view() = 0;
     void modifyDetails();
@@ -32,12 +36,14 @@ class User {
     std::string getEmail() {return email;}
     std::string getOrganisation() {return organisation;}
     std::string getPhone() {return phone;}
+    UserType_t getUserType() {return userType;}
     void setUserID(int iuserID) {userID = iuserID;}
     void setPassword(const std::string& ipassword) {password = ipassword;}
     void setName(const std::string& iname) {name = iname;}
     void setEmail(const std::string& iemail) {email = iemail;}
     void setOrganisation(const std::string& iorganisation) {organisation = iorganisation;}
     void setPhone(const std::string& iphone) {phone = iphone;}
+    void setUserType(UserType_t iuserType) {userType = iuserType;}
 
     std::string userName;
 
@@ -49,6 +55,7 @@ std::string email{""};
 std::string organisation{""};
 std::string phone{""};
 int userID{0};
+UserType_t userType;
 Paper currentPaper;
 
 };
diff --git a/UserClient/UserClientDriver.exe b/UserClient/UserClientDriver.exe
index 62f011e..6d1a162 100644
Binary files a/UserClient/UserClientDriver.exe and b/UserClient/UserClientDriver.exe differ

commit eed768c471fc8b2bb6ec4cc017b26590cd27220c
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 22 18:27:13 2014 +1100

    added userType enum

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index c1b37e0..7b00fd8 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -5,8 +5,10 @@
 
 #include <string>
 
+enum userType {AUTHOR, REVIEWER, PCCHAIR};
+
 class User {
-  public:
+public:
     User() { }
     User(const std::string& iuserName,
          const std::string& iname,
@@ -14,14 +16,16 @@ class User {
          const std::string& iorganisation,
          const std::string& iphone,
          const std::string& ipassword,
-         int iuserID):
+         int iuserID,
+         userType iuType):
          userName(iuserName),
          name(iname),
          email(iemail),
          organisation(iorganisation),
          phone(iphone),
          password(ipassword),
-         userID(iuserID)
+         userID(iuserID),
+         uType(iuType)
          { }
     virtual void view() = 0;
     void modifyDetails();
@@ -38,18 +42,17 @@ class User {
     void setEmail(const std::string& iemail) {email = iemail;}
     void setOrganisation(const std::string& iorganisation) {organisation = iorganisation;}
     void setPhone(const std::string& iphone) {phone = iphone;}
+    userType uType;
 
     std::string userName;
-
-  protected:
-
-std::string password{""};
-std::string name{""};
-std::string email{""};
-std::string organisation{""};
-std::string phone{""};
-int userID{0};
-Paper currentPaper;
+protected:
+    std::string password{""};
+    std::string name{""};
+    std::string email{""};
+    std::string organisation{""};
+    std::string phone{""};
+    int userID{0};
+    Paper currentPaper;
 
 };
 #endif

commit 523cc2248fb9a82f7c914eb9ece0e80909a27c2e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Wed Oct 22 18:07:01 2014 +1100

    added User pointers to login manager
    
    also commented out the boost linking thing so it should compile without
    boost, need to get someone to actually compile with boost properly setup
    to check if the unit tests work.

diff --git a/AdminClient/AdminClientDriver.exe b/AdminClient/AdminClientDriver.exe
index 82236ad..f093d19 100644
Binary files a/AdminClient/AdminClientDriver.exe and b/AdminClient/AdminClientDriver.exe differ
diff --git a/AdminClient/DateTest.cpp b/AdminClient/DateTest.cpp
index 68b8b12..0217327 100644
--- a/AdminClient/DateTest.cpp
+++ b/AdminClient/DateTest.cpp
@@ -1,6 +1,7 @@
-#define BOOST_TEST_DYN_LINK
-#define BOOST_TEST_MODULE CompareTest
+//#define BOOST_TEST_DYN_LINK
+//#define BOOST_TEST_MODULE CompareTest
 #include <boost/test/unit_test.hpp>
+//#include "C:\Users\Lucha\Documents\Boost\boost\test\unit_test.hpp"
 #include "Date.hpp"
 
 //BOOST_AUTO_TEST_SUITE(CompareTest)
@@ -27,7 +28,7 @@ BOOST_AUTO_TEST_CASE(YearAheadMonthBehind) {
   BOOST_CHECK(b.compare(a));
 }
 
-BOOST_AUTO_TEST_CASE(YearBehindDayAhead {
+BOOST_AUTO_TEST_CASE(YearBehindDayAhead) {
   Date a;
   a.year = 1;
   Date b(1,0,0);
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index ffb9511..f8a6907 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -1,5 +1,8 @@
 #ifndef LOGIN_MANAGER_H
 #define LOGIN_MANAGER_H
+
+#include "User.hpp"
+
 struct LoginManager {
   LoginManager(bool iloggedIn) :
     loggedIn(iloggedIn)
@@ -7,5 +10,6 @@ struct LoginManager {
   bool loggedIn;
   bool login(std::string, std::string);
   void logout();
+  User* currentUser{nullptr};
 };
 #endif
diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index db108a2..103e5d5 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -10,6 +10,15 @@
 
 struct Paper {
 
+
+    std::string title{""};
+    std::string abstract{""};
+    std::vector<std::string> authorNames;
+    std::vector<std::string> keywords;
+    std::string fname{""};
+    Discussion discussion;
+    std::vector<Review> reviews;
+
     Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
@@ -31,12 +40,5 @@ struct Paper {
     // no assignment operator or copy constructor deemed necessary at this point
     void downloadPaper();
 
-    std::string title{""};
-    std::string abstract{""};
-    std::vector<std::string> authorNames;
-    std::vector<std::string> keywords;
-    std::string fname{""};
-    Discussion discussion;
-    std::vector<Review> reviews;
 };
 #endif
diff --git a/AdminClient/User.hpp b/AdminClient/User.hpp
index 658e658..035eaba 100644
--- a/AdminClient/User.hpp
+++ b/AdminClient/User.hpp
@@ -5,6 +5,7 @@
 
 
 struct User {
+  User() { }
   User(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 4b2d552..e77d2d6 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -3,6 +3,7 @@
 #define LOGIN_MANAGER_H
 
 #include "Conference.hpp"
+#include "User.hpp"
 
 class LoginManager {
   public:
@@ -33,5 +34,6 @@ class LoginManager {
   private:
   std::vector<Conference*> conferences;
   Conference* activeConference{nullptr};
+  User* currentUser{nullptr};
 };
 #endif
diff --git a/UserClient/UserClientDriver.exe b/UserClient/UserClientDriver.exe
index ff22fcf..62f011e 100644
Binary files a/UserClient/UserClientDriver.exe and b/UserClient/UserClientDriver.exe differ

commit 3a7836e2eae0bd72408ae7d71e2a64ddf62b610f
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 22 14:30:10 2014 +1100

    added missing review tab

diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
index 49dc25a..de76629 100644
--- a/UserClient/mainwindow.ui
+++ b/UserClient/mainwindow.ui
@@ -6,8 +6,8 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>800</width>
-    <height>602</height>
+    <width>790</width>
+    <height>606</height>
    </rect>
   </property>
   <property name="windowTitle">
@@ -28,12 +28,12 @@
       <rect>
        <x>0</x>
        <y>0</y>
-       <width>801</width>
-       <height>601</height>
+       <width>871</width>
+       <height>651</height>
       </rect>
      </property>
      <property name="currentIndex">
-      <number>0</number>
+      <number>7</number>
      </property>
      <widget class="QWidget" name="loginTab">
       <attribute name="title">
@@ -1014,6 +1014,252 @@ p, li { white-space: pre-wrap; }
        </layout>
       </widget>
      </widget>
+     <widget class="QWidget" name="reviewTab">
+      <attribute name="title">
+       <string>Review</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_7">
+       <property name="geometry">
+        <rect>
+         <x>10</x>
+         <y>150</y>
+         <width>761</width>
+         <height>401</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_7">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_11">
+          <item>
+           <widget class="QLabel" name="label_11">
+            <property name="text">
+             <string>Overall</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="overall"/>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_12">
+            <property name="text">
+             <string>Confidence</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="confidence"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_12">
+          <item>
+           <widget class="QLabel" name="label_13">
+            <property name="text">
+             <string>Relevance</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="relevance"/>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_14">
+            <property name="text">
+             <string>Originality</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="originality"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_13">
+          <item>
+           <widget class="QLabel" name="label_15">
+            <property name="text">
+             <string>Significance</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="significance"/>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_16">
+            <property name="text">
+             <string>Presentation</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="spinBox_8"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_14">
+          <item>
+           <widget class="QLabel" name="label_17">
+            <property name="text">
+             <string>Technical Quality</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="techQuality"/>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_18">
+            <property name="text">
+             <string>Evaluation</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QSpinBox" name="evaluation"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_15">
+          <item>
+           <widget class="QLabel" name="label_19">
+            <property name="text">
+             <string>Strengths of the paper</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_20">
+            <property name="text">
+             <string>Weaknesses of the paper</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_16">
+          <item>
+           <widget class="QTextEdit" name="commentsStrengths"/>
+          </item>
+          <item>
+           <widget class="QTextEdit" name="commentsWeaknesses"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_17">
+          <item>
+           <widget class="QLabel" name="label_21">
+            <property name="text">
+             <string>Would this paper be suitable as a short paper?</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_22">
+            <property name="text">
+             <string>Should this paper be considered for a best paper award?</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_18">
+          <item>
+           <widget class="QTextEdit" name="commentsShortPaper"/>
+          </item>
+          <item>
+           <widget class="QTextEdit" name="commentsBestAward"/>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_19">
+          <item>
+           <widget class="QLabel" name="label_23">
+            <property name="text">
+             <string>Detailed comments and suggestions</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QTextEdit" name="commentsSuggestions">
+            <property name="html">
+             <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>10</x>
+         <y>20</y>
+         <width>761</width>
+         <height>121</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout">
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect_3"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QLabel" name="mainKey">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="download">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLabel" name="paperName">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
     </widget>
    </widget>
   </widget>

commit 6ee9a9c1b44ca3bd9037e9e87c154dbf641182e9
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 22 14:29:32 2014 +1100

    Rename mainclient.ui to mainwindow.ui

diff --git a/UserClient/mainclient.ui b/UserClient/mainclient.ui
deleted file mode 100644
index 49dc25a..0000000
--- a/UserClient/mainclient.ui
+++ /dev/null
@@ -1,1024 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>800</width>
-    <height>602</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>MainWindow</string>
-  </property>
-  <widget class="QWidget" name="centralWidget">
-   <widget class="QWidget" name="centralwidget" native="true">
-    <property name="geometry">
-     <rect>
-      <x>0</x>
-      <y>0</y>
-      <width>801</width>
-      <height>601</height>
-     </rect>
-    </property>
-    <widget class="QTabWidget" name="tabWidget">
-     <property name="geometry">
-      <rect>
-       <x>0</x>
-       <y>0</y>
-       <width>801</width>
-       <height>601</height>
-      </rect>
-     </property>
-     <property name="currentIndex">
-      <number>0</number>
-     </property>
-     <widget class="QWidget" name="loginTab">
-      <attribute name="title">
-       <string>Login</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>210</x>
-         <y>150</y>
-         <width>353</width>
-         <height>211</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_2">
-        <item>
-         <widget class="QLabel" name="label_7">
-          <property name="font">
-           <font>
-            <pointsize>18</pointsize>
-           </font>
-          </property>
-          <property name="text">
-           <string>Conference Management System</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_7">
-          <item>
-           <spacer name="horizontalSpacer_4">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_9">
-            <property name="text">
-             <string>UserName</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="usernameLogin"/>
-          </item>
-          <item>
-           <spacer name="horizontalSpacer_5">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout">
-          <item>
-           <spacer name="horizontalSpacer_2">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_8">
-            <property name="text">
-             <string>Password</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="passwordLogin"/>
-          </item>
-          <item>
-           <spacer name="horizontalSpacer_3">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_10">
-          <item>
-           <widget class="QPushButton" name="login">
-            <property name="text">
-             <string>Login</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="quit">
-            <property name="text">
-             <string>Quit</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="infoTabAuthor">
-      <attribute name="title">
-       <string>Information</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>233</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_2">
-          <item>
-           <widget class="QLabel" name="username">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="name">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="email">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="organisation">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="phone">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextEdit" name="textEdit">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <spacer name="verticalSpacer_8">
-          <property name="orientation">
-           <enum>Qt::Vertical</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>20</width>
-            <height>40</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QPushButton" name="apply">
-          <property name="text">
-           <string>Apply</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="logout">
-          <property name="text">
-           <string>Logout</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QLabel" name="conferenceName">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>10</y>
-         <width>271</width>
-         <height>71</height>
-        </rect>
-       </property>
-       <property name="font">
-        <font>
-         <pointsize>16</pointsize>
-         <weight>75</weight>
-         <italic>true</italic>
-         <bold>true</bold>
-        </font>
-       </property>
-       <property name="text">
-        <string>CONFERENCENAME</string>
-       </property>
-       <property name="scaledContents">
-        <bool>false</bool>
-       </property>
-      </widget>
-      <widget class="QLabel" name="label_2">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>70</y>
-         <width>391</width>
-         <height>41</height>
-        </rect>
-       </property>
-       <property name="text">
-        <string>CONFERENCETOPIC</string>
-       </property>
-      </widget>
-      <widget class="QLabel" name="label_3">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>120</y>
-         <width>221</width>
-         <height>31</height>
-        </rect>
-       </property>
-       <property name="text">
-        <string>CONFERENCELOCATION</string>
-       </property>
-      </widget>
-      <widget class="QTextBrowser" name="textBrowser_2">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>160</y>
-         <width>491</width>
-         <height>401</height>
-        </rect>
-       </property>
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="infoTabChair">
-      <attribute name="title">
-       <string>Information</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_3">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>233</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_3">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_3">
-          <item>
-           <widget class="QLabel" name="username_2">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid_2">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="name_2">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="email_2">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="organisation_2">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="phone_2">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <spacer name="verticalSpacer_9">
-          <property name="orientation">
-           <enum>Qt::Vertical</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>20</width>
-            <height>40</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QPushButton" name="apply_2">
-          <property name="text">
-           <string>Apply</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="logout_2">
-          <property name="text">
-           <string>Logout</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_4">
-       <property name="geometry">
-        <rect>
-         <x>280</x>
-         <y>10</y>
-         <width>481</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_4">
-        <item>
-         <widget class="QLineEdit" name="lineEdit">
-          <property name="text">
-           <string>CONFERENCE NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="lineEdit_2">
-          <property name="text">
-           <string>CONFERENCE TOPIC</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="lineEdit_3">
-          <property name="text">
-           <string>CONFERENCE LOCATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextEdit" name="textEdit_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="authorTab">
-      <attribute name="title">
-       <string>Author</string>
-      </attribute>
-      <widget class="QWidget" name="gridLayoutWidget_3">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>741</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_3">
-        <item row="2" column="0">
-         <widget class="QTextEdit" name="authors_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextEdit" name="keywords">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QTextEdit" name="paperAbstract">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="1">
-         <widget class="QLineEdit" name="paperName_2">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="3" column="0">
-         <widget class="QLineEdit" name="filename">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect"/>
-        </item>
-        <item row="1" column="0">
-         <widget class="QSpinBox" name="mainKey_2"/>
-        </item>
-        <item row="3" column="1">
-         <layout class="QHBoxLayout" name="horizontalLayout_4">
-          <item>
-           <widget class="QPushButton" name="selectFile">
-            <property name="text">
-             <string>Select File</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="upload">
-            <property name="text">
-             <string>Upload</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="reviewerTab">
-      <attribute name="title">
-       <string>Reviewer</string>
-      </attribute>
-      <widget class="QWidget" name="gridLayoutWidget_4">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>200</y>
-         <width>741</width>
-         <height>351</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_4">
-        <item row="0" column="0">
-         <widget class="QLabel" name="discussionLabel_2">
-          <property name="text">
-           <string>Discussion</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="submitPosts">
-          <property name="text">
-           <string>Submit Post</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextEdit" name="postBody">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextBrowser" name="discussionBody_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="horizontalLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>160</y>
-         <width>741</width>
-         <height>31</height>
-        </rect>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout_5">
-        <item>
-         <spacer name="horizontalSpacer">
-          <property name="orientation">
-           <enum>Qt::Horizontal</enum>
-          </property>
-          <property name="sizeType">
-           <enum>QSizePolicy::Ignored</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>40</width>
-            <height>20</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QLabel" name="bidlabel">
-          <property name="text">
-           <string>Bid:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QSpinBox" name="bid"/>
-        </item>
-        <item>
-         <widget class="QPushButton" name="submitBid">
-          <property name="text">
-           <string>Submit Bid</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_5">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>741</width>
-         <height>151</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_5">
-        <item row="0" column="1">
-         <widget class="QLabel" name="paperName_3">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="2">
-         <widget class="QPushButton" name="download_2">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect_2"/>
-        </item>
-        <item row="1" column="0">
-         <widget class="QLabel" name="mainKey_3">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName_2">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="pushButton">
-          <property name="text">
-           <string>Review Paper</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="papersTab">
-      <attribute name="title">
-       <string>Paper Management</string>
-      </attribute>
-      <widget class="QTableWidget" name="tableWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>20</y>
-         <width>211</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <column>
-        <property name="text">
-         <string>Title</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string notr="true">id</string>
-        </property>
-        <property name="toolTip">
-         <string notr="true"/>
-        </property>
-       </column>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_6">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>20</y>
-         <width>511</width>
-         <height>151</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_6">
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser_4">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextEdit" name="authors_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QLabel" name="paperName_4">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName_3">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="download_3">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="1">
-         <widget class="QLabel" name="mainKey_4">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_7">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>180</y>
-         <width>281</width>
-         <height>371</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_7">
-        <item row="0" column="0">
-         <widget class="QLabel" name="discussionLabel_3">
-          <property name="text">
-           <string>Discussion</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextBrowser" name="discussionBody_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_5">
-       <property name="geometry">
-        <rect>
-         <x>540</x>
-         <y>180</y>
-         <width>221</width>
-         <height>371</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_5">
-        <item>
-         <widget class="QLabel" name="label_6">
-          <property name="text">
-           <string>Reviewers</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextBrowser" name="textBrowser_5"/>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_9">
-          <item>
-           <widget class="QLabel" name="label_5">
-            <property name="text">
-             <string>User:</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="toReview_2"/>
-          </item>
-          <item>
-           <widget class="QPushButton" name="addAsReviewer_2">
-            <property name="text">
-             <string>Add as Reviewer</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="usersTab">
-      <attribute name="title">
-       <string>User Management</string>
-      </attribute>
-      <widget class="QTableWidget" name="tableWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>311</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <column>
-        <property name="text">
-         <string>Name</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string>User Name</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string>id</string>
-        </property>
-       </column>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_6">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>10</y>
-         <width>291</width>
-         <height>381</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_6">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_8">
-          <item>
-           <widget class="QLabel" name="username_5">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid_5">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLabel" name="name_5">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="email_5">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="organisation_5">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="phone_5">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label_10">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextBrowser" name="keywords_2"/>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="horizontalLayoutWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>390</y>
-         <width>251</width>
-         <height>41</height>
-        </rect>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout_6">
-        <item>
-         <widget class="QLabel" name="label_4">
-          <property name="text">
-           <string>Paper:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="toReview"/>
-        </item>
-        <item>
-         <widget class="QPushButton" name="addAsReviewer">
-          <property name="text">
-           <string>Add to Review</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-    </widget>
-   </widget>
-  </widget>
- </widget>
- <layoutdefault spacing="6" margin="11"/>
- <resources/>
- <connections/>
-</ui>
diff --git a/UserClient/mainwindow.ui b/UserClient/mainwindow.ui
new file mode 100644
index 0000000..49dc25a
--- /dev/null
+++ b/UserClient/mainwindow.ui
@@ -0,0 +1,1024 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>602</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralWidget">
+   <widget class="QWidget" name="centralwidget" native="true">
+    <property name="geometry">
+     <rect>
+      <x>0</x>
+      <y>0</y>
+      <width>801</width>
+      <height>601</height>
+     </rect>
+    </property>
+    <widget class="QTabWidget" name="tabWidget">
+     <property name="geometry">
+      <rect>
+       <x>0</x>
+       <y>0</y>
+       <width>801</width>
+       <height>601</height>
+      </rect>
+     </property>
+     <property name="currentIndex">
+      <number>0</number>
+     </property>
+     <widget class="QWidget" name="loginTab">
+      <attribute name="title">
+       <string>Login</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>210</x>
+         <y>150</y>
+         <width>353</width>
+         <height>211</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_2">
+        <item>
+         <widget class="QLabel" name="label_7">
+          <property name="font">
+           <font>
+            <pointsize>18</pointsize>
+           </font>
+          </property>
+          <property name="text">
+           <string>Conference Management System</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_7">
+          <item>
+           <spacer name="horizontalSpacer_4">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_9">
+            <property name="text">
+             <string>UserName</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="usernameLogin"/>
+          </item>
+          <item>
+           <spacer name="horizontalSpacer_5">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout">
+          <item>
+           <spacer name="horizontalSpacer_2">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_8">
+            <property name="text">
+             <string>Password</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="passwordLogin"/>
+          </item>
+          <item>
+           <spacer name="horizontalSpacer_3">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_10">
+          <item>
+           <widget class="QPushButton" name="login">
+            <property name="text">
+             <string>Login</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="quit">
+            <property name="text">
+             <string>Quit</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="infoTabAuthor">
+      <attribute name="title">
+       <string>Information</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>233</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_2">
+          <item>
+           <widget class="QLabel" name="username">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="name">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="email">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="organisation">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="phone">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextEdit" name="textEdit">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="verticalSpacer_8">
+          <property name="orientation">
+           <enum>Qt::Vertical</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>20</width>
+            <height>40</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="apply">
+          <property name="text">
+           <string>Apply</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="logout">
+          <property name="text">
+           <string>Logout</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QLabel" name="conferenceName">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>10</y>
+         <width>271</width>
+         <height>71</height>
+        </rect>
+       </property>
+       <property name="font">
+        <font>
+         <pointsize>16</pointsize>
+         <weight>75</weight>
+         <italic>true</italic>
+         <bold>true</bold>
+        </font>
+       </property>
+       <property name="text">
+        <string>CONFERENCENAME</string>
+       </property>
+       <property name="scaledContents">
+        <bool>false</bool>
+       </property>
+      </widget>
+      <widget class="QLabel" name="label_2">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>70</y>
+         <width>391</width>
+         <height>41</height>
+        </rect>
+       </property>
+       <property name="text">
+        <string>CONFERENCETOPIC</string>
+       </property>
+      </widget>
+      <widget class="QLabel" name="label_3">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>120</y>
+         <width>221</width>
+         <height>31</height>
+        </rect>
+       </property>
+       <property name="text">
+        <string>CONFERENCELOCATION</string>
+       </property>
+      </widget>
+      <widget class="QTextBrowser" name="textBrowser_2">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>160</y>
+         <width>491</width>
+         <height>401</height>
+        </rect>
+       </property>
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="infoTabChair">
+      <attribute name="title">
+       <string>Information</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_3">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>233</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_3">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_3">
+          <item>
+           <widget class="QLabel" name="username_2">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid_2">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="name_2">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="email_2">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="organisation_2">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="phone_2">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="verticalSpacer_9">
+          <property name="orientation">
+           <enum>Qt::Vertical</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>20</width>
+            <height>40</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="apply_2">
+          <property name="text">
+           <string>Apply</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="logout_2">
+          <property name="text">
+           <string>Logout</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_4">
+       <property name="geometry">
+        <rect>
+         <x>280</x>
+         <y>10</y>
+         <width>481</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_4">
+        <item>
+         <widget class="QLineEdit" name="lineEdit">
+          <property name="text">
+           <string>CONFERENCE NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="lineEdit_2">
+          <property name="text">
+           <string>CONFERENCE TOPIC</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="lineEdit_3">
+          <property name="text">
+           <string>CONFERENCE LOCATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextEdit" name="textEdit_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="authorTab">
+      <attribute name="title">
+       <string>Author</string>
+      </attribute>
+      <widget class="QWidget" name="gridLayoutWidget_3">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>741</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_3">
+        <item row="2" column="0">
+         <widget class="QTextEdit" name="authors_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextEdit" name="keywords">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QTextEdit" name="paperAbstract">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLineEdit" name="paperName_2">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="3" column="0">
+         <widget class="QLineEdit" name="filename">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QSpinBox" name="mainKey_2"/>
+        </item>
+        <item row="3" column="1">
+         <layout class="QHBoxLayout" name="horizontalLayout_4">
+          <item>
+           <widget class="QPushButton" name="selectFile">
+            <property name="text">
+             <string>Select File</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="upload">
+            <property name="text">
+             <string>Upload</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="reviewerTab">
+      <attribute name="title">
+       <string>Reviewer</string>
+      </attribute>
+      <widget class="QWidget" name="gridLayoutWidget_4">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>200</y>
+         <width>741</width>
+         <height>351</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_4">
+        <item row="0" column="0">
+         <widget class="QLabel" name="discussionLabel_2">
+          <property name="text">
+           <string>Discussion</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="submitPosts">
+          <property name="text">
+           <string>Submit Post</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextEdit" name="postBody">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextBrowser" name="discussionBody_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="horizontalLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>160</y>
+         <width>741</width>
+         <height>31</height>
+        </rect>
+       </property>
+       <layout class="QHBoxLayout" name="horizontalLayout_5">
+        <item>
+         <spacer name="horizontalSpacer">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeType">
+           <enum>QSizePolicy::Ignored</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QLabel" name="bidlabel">
+          <property name="text">
+           <string>Bid:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QSpinBox" name="bid"/>
+        </item>
+        <item>
+         <widget class="QPushButton" name="submitBid">
+          <property name="text">
+           <string>Submit Bid</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_5">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>741</width>
+         <height>151</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_5">
+        <item row="0" column="1">
+         <widget class="QLabel" name="paperName_3">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="2">
+         <widget class="QPushButton" name="download_2">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect_2"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QLabel" name="mainKey_3">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName_2">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="pushButton">
+          <property name="text">
+           <string>Review Paper</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="papersTab">
+      <attribute name="title">
+       <string>Paper Management</string>
+      </attribute>
+      <widget class="QTableWidget" name="tableWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>20</y>
+         <width>211</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <column>
+        <property name="text">
+         <string>Title</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string notr="true">id</string>
+        </property>
+        <property name="toolTip">
+         <string notr="true"/>
+        </property>
+       </column>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_6">
+       <property name="geometry">
+        <rect>
+         <x>250</x>
+         <y>20</y>
+         <width>511</width>
+         <height>151</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_6">
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser_4">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextEdit" name="authors_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QLabel" name="paperName_4">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName_3">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="download_3">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLabel" name="mainKey_4">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_7">
+       <property name="geometry">
+        <rect>
+         <x>250</x>
+         <y>180</y>
+         <width>281</width>
+         <height>371</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_7">
+        <item row="0" column="0">
+         <widget class="QLabel" name="discussionLabel_3">
+          <property name="text">
+           <string>Discussion</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextBrowser" name="discussionBody_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_5">
+       <property name="geometry">
+        <rect>
+         <x>540</x>
+         <y>180</y>
+         <width>221</width>
+         <height>371</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_5">
+        <item>
+         <widget class="QLabel" name="label_6">
+          <property name="text">
+           <string>Reviewers</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="textBrowser_5"/>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_9">
+          <item>
+           <widget class="QLabel" name="label_5">
+            <property name="text">
+             <string>User:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="toReview_2"/>
+          </item>
+          <item>
+           <widget class="QPushButton" name="addAsReviewer_2">
+            <property name="text">
+             <string>Add as Reviewer</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="usersTab">
+      <attribute name="title">
+       <string>User Management</string>
+      </attribute>
+      <widget class="QTableWidget" name="tableWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>311</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <column>
+        <property name="text">
+         <string>Name</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string>User Name</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string>id</string>
+        </property>
+       </column>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_6">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>10</y>
+         <width>291</width>
+         <height>381</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_6">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_8">
+          <item>
+           <widget class="QLabel" name="username_5">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid_5">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLabel" name="name_5">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="email_5">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="organisation_5">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="phone_5">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label_10">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="keywords_2"/>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="horizontalLayoutWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>390</y>
+         <width>251</width>
+         <height>41</height>
+        </rect>
+       </property>
+       <layout class="QHBoxLayout" name="horizontalLayout_6">
+        <item>
+         <widget class="QLabel" name="label_4">
+          <property name="text">
+           <string>Paper:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="toReview"/>
+        </item>
+        <item>
+         <widget class="QPushButton" name="addAsReviewer">
+          <property name="text">
+           <string>Add to Review</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+    </widget>
+   </widget>
+  </widget>
+ </widget>
+ <layoutdefault spacing="6" margin="11"/>
+ <resources/>
+ <connections/>
+</ui>

commit acc86c73cff189c8546b411ff6336d032119cce4
Author: 7xe <evans.samuel7@gmail.com>
Date:   Wed Oct 22 14:29:13 2014 +1100

    Rename userclient.ui to mainclient.ui

diff --git a/UserClient/mainclient.ui b/UserClient/mainclient.ui
new file mode 100644
index 0000000..49dc25a
--- /dev/null
+++ b/UserClient/mainclient.ui
@@ -0,0 +1,1024 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>602</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralWidget">
+   <widget class="QWidget" name="centralwidget" native="true">
+    <property name="geometry">
+     <rect>
+      <x>0</x>
+      <y>0</y>
+      <width>801</width>
+      <height>601</height>
+     </rect>
+    </property>
+    <widget class="QTabWidget" name="tabWidget">
+     <property name="geometry">
+      <rect>
+       <x>0</x>
+       <y>0</y>
+       <width>801</width>
+       <height>601</height>
+      </rect>
+     </property>
+     <property name="currentIndex">
+      <number>0</number>
+     </property>
+     <widget class="QWidget" name="loginTab">
+      <attribute name="title">
+       <string>Login</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>210</x>
+         <y>150</y>
+         <width>353</width>
+         <height>211</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_2">
+        <item>
+         <widget class="QLabel" name="label_7">
+          <property name="font">
+           <font>
+            <pointsize>18</pointsize>
+           </font>
+          </property>
+          <property name="text">
+           <string>Conference Management System</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_7">
+          <item>
+           <spacer name="horizontalSpacer_4">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_9">
+            <property name="text">
+             <string>UserName</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="usernameLogin"/>
+          </item>
+          <item>
+           <spacer name="horizontalSpacer_5">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout">
+          <item>
+           <spacer name="horizontalSpacer_2">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_8">
+            <property name="text">
+             <string>Password</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="passwordLogin"/>
+          </item>
+          <item>
+           <spacer name="horizontalSpacer_3">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_10">
+          <item>
+           <widget class="QPushButton" name="login">
+            <property name="text">
+             <string>Login</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="quit">
+            <property name="text">
+             <string>Quit</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="infoTabAuthor">
+      <attribute name="title">
+       <string>Information</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>233</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_2">
+          <item>
+           <widget class="QLabel" name="username">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="name">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="email">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="organisation">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="phone">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextEdit" name="textEdit">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="verticalSpacer_8">
+          <property name="orientation">
+           <enum>Qt::Vertical</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>20</width>
+            <height>40</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="apply">
+          <property name="text">
+           <string>Apply</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="logout">
+          <property name="text">
+           <string>Logout</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QLabel" name="conferenceName">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>10</y>
+         <width>271</width>
+         <height>71</height>
+        </rect>
+       </property>
+       <property name="font">
+        <font>
+         <pointsize>16</pointsize>
+         <weight>75</weight>
+         <italic>true</italic>
+         <bold>true</bold>
+        </font>
+       </property>
+       <property name="text">
+        <string>CONFERENCENAME</string>
+       </property>
+       <property name="scaledContents">
+        <bool>false</bool>
+       </property>
+      </widget>
+      <widget class="QLabel" name="label_2">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>70</y>
+         <width>391</width>
+         <height>41</height>
+        </rect>
+       </property>
+       <property name="text">
+        <string>CONFERENCETOPIC</string>
+       </property>
+      </widget>
+      <widget class="QLabel" name="label_3">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>120</y>
+         <width>221</width>
+         <height>31</height>
+        </rect>
+       </property>
+       <property name="text">
+        <string>CONFERENCELOCATION</string>
+       </property>
+      </widget>
+      <widget class="QTextBrowser" name="textBrowser_2">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>160</y>
+         <width>491</width>
+         <height>401</height>
+        </rect>
+       </property>
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="infoTabChair">
+      <attribute name="title">
+       <string>Information</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_3">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>233</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_3">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_3">
+          <item>
+           <widget class="QLabel" name="username_2">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid_2">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="name_2">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="email_2">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="organisation_2">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="phone_2">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="verticalSpacer_9">
+          <property name="orientation">
+           <enum>Qt::Vertical</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>20</width>
+            <height>40</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="apply_2">
+          <property name="text">
+           <string>Apply</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="logout_2">
+          <property name="text">
+           <string>Logout</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_4">
+       <property name="geometry">
+        <rect>
+         <x>280</x>
+         <y>10</y>
+         <width>481</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_4">
+        <item>
+         <widget class="QLineEdit" name="lineEdit">
+          <property name="text">
+           <string>CONFERENCE NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="lineEdit_2">
+          <property name="text">
+           <string>CONFERENCE TOPIC</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="lineEdit_3">
+          <property name="text">
+           <string>CONFERENCE LOCATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextEdit" name="textEdit_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="authorTab">
+      <attribute name="title">
+       <string>Author</string>
+      </attribute>
+      <widget class="QWidget" name="gridLayoutWidget_3">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>741</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_3">
+        <item row="2" column="0">
+         <widget class="QTextEdit" name="authors_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextEdit" name="keywords">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QTextEdit" name="paperAbstract">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLineEdit" name="paperName_2">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="3" column="0">
+         <widget class="QLineEdit" name="filename">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QSpinBox" name="mainKey_2"/>
+        </item>
+        <item row="3" column="1">
+         <layout class="QHBoxLayout" name="horizontalLayout_4">
+          <item>
+           <widget class="QPushButton" name="selectFile">
+            <property name="text">
+             <string>Select File</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="upload">
+            <property name="text">
+             <string>Upload</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="reviewerTab">
+      <attribute name="title">
+       <string>Reviewer</string>
+      </attribute>
+      <widget class="QWidget" name="gridLayoutWidget_4">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>200</y>
+         <width>741</width>
+         <height>351</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_4">
+        <item row="0" column="0">
+         <widget class="QLabel" name="discussionLabel_2">
+          <property name="text">
+           <string>Discussion</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="submitPosts">
+          <property name="text">
+           <string>Submit Post</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextEdit" name="postBody">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextBrowser" name="discussionBody_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="horizontalLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>160</y>
+         <width>741</width>
+         <height>31</height>
+        </rect>
+       </property>
+       <layout class="QHBoxLayout" name="horizontalLayout_5">
+        <item>
+         <spacer name="horizontalSpacer">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeType">
+           <enum>QSizePolicy::Ignored</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QLabel" name="bidlabel">
+          <property name="text">
+           <string>Bid:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QSpinBox" name="bid"/>
+        </item>
+        <item>
+         <widget class="QPushButton" name="submitBid">
+          <property name="text">
+           <string>Submit Bid</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_5">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>741</width>
+         <height>151</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_5">
+        <item row="0" column="1">
+         <widget class="QLabel" name="paperName_3">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="2">
+         <widget class="QPushButton" name="download_2">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect_2"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QLabel" name="mainKey_3">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName_2">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="pushButton">
+          <property name="text">
+           <string>Review Paper</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="papersTab">
+      <attribute name="title">
+       <string>Paper Management</string>
+      </attribute>
+      <widget class="QTableWidget" name="tableWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>20</y>
+         <width>211</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <column>
+        <property name="text">
+         <string>Title</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string notr="true">id</string>
+        </property>
+        <property name="toolTip">
+         <string notr="true"/>
+        </property>
+       </column>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_6">
+       <property name="geometry">
+        <rect>
+         <x>250</x>
+         <y>20</y>
+         <width>511</width>
+         <height>151</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_6">
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser_4">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextEdit" name="authors_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QLabel" name="paperName_4">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName_3">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="download_3">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLabel" name="mainKey_4">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_7">
+       <property name="geometry">
+        <rect>
+         <x>250</x>
+         <y>180</y>
+         <width>281</width>
+         <height>371</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_7">
+        <item row="0" column="0">
+         <widget class="QLabel" name="discussionLabel_3">
+          <property name="text">
+           <string>Discussion</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextBrowser" name="discussionBody_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_5">
+       <property name="geometry">
+        <rect>
+         <x>540</x>
+         <y>180</y>
+         <width>221</width>
+         <height>371</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_5">
+        <item>
+         <widget class="QLabel" name="label_6">
+          <property name="text">
+           <string>Reviewers</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="textBrowser_5"/>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_9">
+          <item>
+           <widget class="QLabel" name="label_5">
+            <property name="text">
+             <string>User:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="toReview_2"/>
+          </item>
+          <item>
+           <widget class="QPushButton" name="addAsReviewer_2">
+            <property name="text">
+             <string>Add as Reviewer</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="usersTab">
+      <attribute name="title">
+       <string>User Management</string>
+      </attribute>
+      <widget class="QTableWidget" name="tableWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>311</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <column>
+        <property name="text">
+         <string>Name</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string>User Name</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string>id</string>
+        </property>
+       </column>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_6">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>10</y>
+         <width>291</width>
+         <height>381</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_6">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_8">
+          <item>
+           <widget class="QLabel" name="username_5">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid_5">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLabel" name="name_5">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="email_5">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="organisation_5">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="phone_5">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label_10">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="keywords_2"/>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="horizontalLayoutWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>390</y>
+         <width>251</width>
+         <height>41</height>
+        </rect>
+       </property>
+       <layout class="QHBoxLayout" name="horizontalLayout_6">
+        <item>
+         <widget class="QLabel" name="label_4">
+          <property name="text">
+           <string>Paper:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="toReview"/>
+        </item>
+        <item>
+         <widget class="QPushButton" name="addAsReviewer">
+          <property name="text">
+           <string>Add to Review</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+    </widget>
+   </widget>
+  </widget>
+ </widget>
+ <layoutdefault spacing="6" margin="11"/>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/UserClient/userclient.ui b/UserClient/userclient.ui
deleted file mode 100644
index 49dc25a..0000000
--- a/UserClient/userclient.ui
+++ /dev/null
@@ -1,1024 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>800</width>
-    <height>602</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>MainWindow</string>
-  </property>
-  <widget class="QWidget" name="centralWidget">
-   <widget class="QWidget" name="centralwidget" native="true">
-    <property name="geometry">
-     <rect>
-      <x>0</x>
-      <y>0</y>
-      <width>801</width>
-      <height>601</height>
-     </rect>
-    </property>
-    <widget class="QTabWidget" name="tabWidget">
-     <property name="geometry">
-      <rect>
-       <x>0</x>
-       <y>0</y>
-       <width>801</width>
-       <height>601</height>
-      </rect>
-     </property>
-     <property name="currentIndex">
-      <number>0</number>
-     </property>
-     <widget class="QWidget" name="loginTab">
-      <attribute name="title">
-       <string>Login</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>210</x>
-         <y>150</y>
-         <width>353</width>
-         <height>211</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_2">
-        <item>
-         <widget class="QLabel" name="label_7">
-          <property name="font">
-           <font>
-            <pointsize>18</pointsize>
-           </font>
-          </property>
-          <property name="text">
-           <string>Conference Management System</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_7">
-          <item>
-           <spacer name="horizontalSpacer_4">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_9">
-            <property name="text">
-             <string>UserName</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="usernameLogin"/>
-          </item>
-          <item>
-           <spacer name="horizontalSpacer_5">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout">
-          <item>
-           <spacer name="horizontalSpacer_2">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-          <item>
-           <widget class="QLabel" name="label_8">
-            <property name="text">
-             <string>Password</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="passwordLogin"/>
-          </item>
-          <item>
-           <spacer name="horizontalSpacer_3">
-            <property name="orientation">
-             <enum>Qt::Horizontal</enum>
-            </property>
-            <property name="sizeHint" stdset="0">
-             <size>
-              <width>40</width>
-              <height>20</height>
-             </size>
-            </property>
-           </spacer>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_10">
-          <item>
-           <widget class="QPushButton" name="login">
-            <property name="text">
-             <string>Login</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="quit">
-            <property name="text">
-             <string>Quit</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="infoTabAuthor">
-      <attribute name="title">
-       <string>Information</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>233</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_2">
-          <item>
-           <widget class="QLabel" name="username">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="name">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="email">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="organisation">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="phone">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextEdit" name="textEdit">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <spacer name="verticalSpacer_8">
-          <property name="orientation">
-           <enum>Qt::Vertical</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>20</width>
-            <height>40</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QPushButton" name="apply">
-          <property name="text">
-           <string>Apply</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="logout">
-          <property name="text">
-           <string>Logout</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QLabel" name="conferenceName">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>10</y>
-         <width>271</width>
-         <height>71</height>
-        </rect>
-       </property>
-       <property name="font">
-        <font>
-         <pointsize>16</pointsize>
-         <weight>75</weight>
-         <italic>true</italic>
-         <bold>true</bold>
-        </font>
-       </property>
-       <property name="text">
-        <string>CONFERENCENAME</string>
-       </property>
-       <property name="scaledContents">
-        <bool>false</bool>
-       </property>
-      </widget>
-      <widget class="QLabel" name="label_2">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>70</y>
-         <width>391</width>
-         <height>41</height>
-        </rect>
-       </property>
-       <property name="text">
-        <string>CONFERENCETOPIC</string>
-       </property>
-      </widget>
-      <widget class="QLabel" name="label_3">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>120</y>
-         <width>221</width>
-         <height>31</height>
-        </rect>
-       </property>
-       <property name="text">
-        <string>CONFERENCELOCATION</string>
-       </property>
-      </widget>
-      <widget class="QTextBrowser" name="textBrowser_2">
-       <property name="geometry">
-        <rect>
-         <x>270</x>
-         <y>160</y>
-         <width>491</width>
-         <height>401</height>
-        </rect>
-       </property>
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="infoTabChair">
-      <attribute name="title">
-       <string>Information</string>
-      </attribute>
-      <widget class="QWidget" name="verticalLayoutWidget_3">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>233</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_3">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_3">
-          <item>
-           <widget class="QLabel" name="username_2">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid_2">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="name_2">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="email_2">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="organisation_2">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="phone_2">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <spacer name="verticalSpacer_9">
-          <property name="orientation">
-           <enum>Qt::Vertical</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>20</width>
-            <height>40</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QPushButton" name="apply_2">
-          <property name="text">
-           <string>Apply</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QPushButton" name="logout_2">
-          <property name="text">
-           <string>Logout</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_4">
-       <property name="geometry">
-        <rect>
-         <x>280</x>
-         <y>10</y>
-         <width>481</width>
-         <height>551</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_4">
-        <item>
-         <widget class="QLineEdit" name="lineEdit">
-          <property name="text">
-           <string>CONFERENCE NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="lineEdit_2">
-          <property name="text">
-           <string>CONFERENCE TOPIC</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="lineEdit_3">
-          <property name="text">
-           <string>CONFERENCE LOCATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextEdit" name="textEdit_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="authorTab">
-      <attribute name="title">
-       <string>Author</string>
-      </attribute>
-      <widget class="QWidget" name="gridLayoutWidget_3">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>741</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_3">
-        <item row="2" column="0">
-         <widget class="QTextEdit" name="authors_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextEdit" name="keywords">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QTextEdit" name="paperAbstract">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="1">
-         <widget class="QLineEdit" name="paperName_2">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="3" column="0">
-         <widget class="QLineEdit" name="filename">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect"/>
-        </item>
-        <item row="1" column="0">
-         <widget class="QSpinBox" name="mainKey_2"/>
-        </item>
-        <item row="3" column="1">
-         <layout class="QHBoxLayout" name="horizontalLayout_4">
-          <item>
-           <widget class="QPushButton" name="selectFile">
-            <property name="text">
-             <string>Select File</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QPushButton" name="upload">
-            <property name="text">
-             <string>Upload</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="reviewerTab">
-      <attribute name="title">
-       <string>Reviewer</string>
-      </attribute>
-      <widget class="QWidget" name="gridLayoutWidget_4">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>200</y>
-         <width>741</width>
-         <height>351</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_4">
-        <item row="0" column="0">
-         <widget class="QLabel" name="discussionLabel_2">
-          <property name="text">
-           <string>Discussion</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="submitPosts">
-          <property name="text">
-           <string>Submit Post</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextEdit" name="postBody">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextBrowser" name="discussionBody_2">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="horizontalLayoutWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>160</y>
-         <width>741</width>
-         <height>31</height>
-        </rect>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout_5">
-        <item>
-         <spacer name="horizontalSpacer">
-          <property name="orientation">
-           <enum>Qt::Horizontal</enum>
-          </property>
-          <property name="sizeType">
-           <enum>QSizePolicy::Ignored</enum>
-          </property>
-          <property name="sizeHint" stdset="0">
-           <size>
-            <width>40</width>
-            <height>20</height>
-           </size>
-          </property>
-         </spacer>
-        </item>
-        <item>
-         <widget class="QLabel" name="bidlabel">
-          <property name="text">
-           <string>Bid:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QSpinBox" name="bid"/>
-        </item>
-        <item>
-         <widget class="QPushButton" name="submitBid">
-          <property name="text">
-           <string>Submit Bid</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_5">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>741</width>
-         <height>151</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_5">
-        <item row="0" column="1">
-         <widget class="QLabel" name="paperName_3">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="2">
-         <widget class="QPushButton" name="download_2">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QSpinBox" name="paperSelect_2"/>
-        </item>
-        <item row="1" column="0">
-         <widget class="QLabel" name="mainKey_3">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName_2">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="pushButton">
-          <property name="text">
-           <string>Review Paper</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="papersTab">
-      <attribute name="title">
-       <string>Paper Management</string>
-      </attribute>
-      <widget class="QTableWidget" name="tableWidget">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>20</y>
-         <width>211</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <column>
-        <property name="text">
-         <string>Title</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string notr="true">id</string>
-        </property>
-        <property name="toolTip">
-         <string notr="true"/>
-        </property>
-       </column>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_6">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>20</y>
-         <width>511</width>
-         <height>151</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_6">
-        <item row="1" column="1">
-         <widget class="QTextBrowser" name="textBrowser_4">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextEdit" name="authors_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="0">
-         <widget class="QLabel" name="paperName_4">
-          <property name="text">
-           <string>PAPERNAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="0">
-         <widget class="QLabel" name="fileName_3">
-          <property name="text">
-           <string>FILENAME</string>
-          </property>
-         </widget>
-        </item>
-        <item row="2" column="1">
-         <widget class="QPushButton" name="download_3">
-          <property name="text">
-           <string>Download</string>
-          </property>
-         </widget>
-        </item>
-        <item row="0" column="1">
-         <widget class="QLabel" name="mainKey_4">
-          <property name="text">
-           <string>MAINKEY</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="gridLayoutWidget_7">
-       <property name="geometry">
-        <rect>
-         <x>250</x>
-         <y>180</y>
-         <width>281</width>
-         <height>371</height>
-        </rect>
-       </property>
-       <layout class="QGridLayout" name="gridLayout_7">
-        <item row="0" column="0">
-         <widget class="QLabel" name="discussionLabel_3">
-          <property name="text">
-           <string>Discussion</string>
-          </property>
-         </widget>
-        </item>
-        <item row="1" column="0">
-         <widget class="QTextBrowser" name="discussionBody_3">
-          <property name="html">
-           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_5">
-       <property name="geometry">
-        <rect>
-         <x>540</x>
-         <y>180</y>
-         <width>221</width>
-         <height>371</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_5">
-        <item>
-         <widget class="QLabel" name="label_6">
-          <property name="text">
-           <string>Reviewers</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextBrowser" name="textBrowser_5"/>
-        </item>
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_9">
-          <item>
-           <widget class="QLabel" name="label_5">
-            <property name="text">
-             <string>User:</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLineEdit" name="toReview_2"/>
-          </item>
-          <item>
-           <widget class="QPushButton" name="addAsReviewer_2">
-            <property name="text">
-             <string>Add as Reviewer</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-     <widget class="QWidget" name="usersTab">
-      <attribute name="title">
-       <string>User Management</string>
-      </attribute>
-      <widget class="QTableWidget" name="tableWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>20</x>
-         <y>10</y>
-         <width>311</width>
-         <height>531</height>
-        </rect>
-       </property>
-       <column>
-        <property name="text">
-         <string>Name</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string>User Name</string>
-        </property>
-       </column>
-       <column>
-        <property name="text">
-         <string>id</string>
-        </property>
-       </column>
-      </widget>
-      <widget class="QWidget" name="verticalLayoutWidget_6">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>10</y>
-         <width>291</width>
-         <height>381</height>
-        </rect>
-       </property>
-       <layout class="QVBoxLayout" name="verticalLayout_6">
-        <item>
-         <layout class="QHBoxLayout" name="horizontalLayout_8">
-          <item>
-           <widget class="QLabel" name="username_5">
-            <property name="text">
-             <string>USERNAME</string>
-            </property>
-           </widget>
-          </item>
-          <item>
-           <widget class="QLabel" name="userid_5">
-            <property name="text">
-             <string>USERID</string>
-            </property>
-           </widget>
-          </item>
-         </layout>
-        </item>
-        <item>
-         <widget class="QLabel" name="name_5">
-          <property name="text">
-           <string>NAME</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="email_5">
-          <property name="text">
-           <string>EMAIL</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="organisation_5">
-          <property name="text">
-           <string>ORGANISATION</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="phone_5">
-          <property name="text">
-           <string>PHONE</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLabel" name="label_10">
-          <property name="text">
-           <string>Keywords</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QTextBrowser" name="keywords_2"/>
-        </item>
-       </layout>
-      </widget>
-      <widget class="QWidget" name="horizontalLayoutWidget_2">
-       <property name="geometry">
-        <rect>
-         <x>370</x>
-         <y>390</y>
-         <width>251</width>
-         <height>41</height>
-        </rect>
-       </property>
-       <layout class="QHBoxLayout" name="horizontalLayout_6">
-        <item>
-         <widget class="QLabel" name="label_4">
-          <property name="text">
-           <string>Paper:</string>
-          </property>
-         </widget>
-        </item>
-        <item>
-         <widget class="QLineEdit" name="toReview"/>
-        </item>
-        <item>
-         <widget class="QPushButton" name="addAsReviewer">
-          <property name="text">
-           <string>Add to Review</string>
-          </property>
-         </widget>
-        </item>
-       </layout>
-      </widget>
-     </widget>
-    </widget>
-   </widget>
-  </widget>
- </widget>
- <layoutdefault spacing="6" margin="11"/>
- <resources/>
- <connections/>
-</ui>

commit 5faa5aac471f48083f088aaa9c76c1112809ddea
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 21 23:49:39 2014 +1100

    Delete login.ui
    
    refactored into userclient.ui

diff --git a/UserClient/login.ui b/UserClient/login.ui
deleted file mode 100644
index b248898..0000000
--- a/UserClient/login.ui
+++ /dev/null
@@ -1,79 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>800</width>
-    <height>600</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>ConferenceManagementSystem</string>
-  </property>
-  <widget class="QWidget" name="centralwidget">
-   <widget class="QLabel" name="title">
-    <property name="geometry">
-     <rect>
-      <x>270</x>
-      <y>110</y>
-      <width>241</width>
-      <height>61</height>
-     </rect>
-    </property>
-    <property name="text">
-     <string>Conference Management System</string>
-    </property>
-   </widget>
-   <widget class="QPushButton" name="loginButton">
-    <property name="geometry">
-     <rect>
-      <x>330</x>
-      <y>330</y>
-      <width>98</width>
-      <height>27</height>
-     </rect>
-    </property>
-    <property name="text">
-     <string>Login</string>
-    </property>
-   </widget>
-   <widget class="QWidget" name="formLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>280</x>
-      <y>210</y>
-      <width>191</width>
-      <height>81</height>
-     </rect>
-    </property>
-    <layout class="QFormLayout" name="formLayout">
-     <item row="0" column="0">
-      <widget class="QLabel" name="pword">
-       <property name="text">
-        <string>User Name</string>
-       </property>
-      </widget>
-     </item>
-     <item row="0" column="1">
-      <widget class="QLineEdit" name="uname"/>
-     </item>
-     <item row="1" column="1">
-      <widget class="QLineEdit" name="lineEdit_2"/>
-     </item>
-     <item row="1" column="0">
-      <widget class="QLabel" name="pwordLabel">
-       <property name="text">
-        <string>Password</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-  </widget>
- </widget>
- <resources/>
- <connections/>
-</ui>

commit 3102485e88f28d0aed42c0c79e44cc17d044df49
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 21 23:48:49 2014 +1100

    Create mainwindow.cpp

diff --git a/UserClient/mainwindow.cpp b/UserClient/mainwindow.cpp
new file mode 100644
index 0000000..1ea181c
--- /dev/null
+++ b/UserClient/mainwindow.cpp
@@ -0,0 +1,83 @@
+#include "mainwindow.h"
+#include "ui_mainwindow.h"
+
+MainWindow::MainWindow(QWidget *parent) :
+    QMainWindow(parent),
+    ui(new Ui::MainWindow)
+{
+    ui->setupUi(this);
+    setUser(0);
+    ui->passwordLogin->setEchoMode(QLineEdit::Password);
+}
+
+MainWindow::~MainWindow()
+{
+    delete ui;
+}
+
+void MainWindow::setUser(int userType)
+{
+    switch(userType)
+    {
+    case 0://no user
+        ui->tabWidget->clear();
+        ui->tabWidget->addTab(ui->loginTab, "Login");
+        break;
+    case 1://pcchair
+        ui->tableWidget->clear();
+        ui->tabWidget->addTab(ui->infoTabChair, "Information");
+        ui->tabWidget->addTab(ui->usersTab, "User Management");
+        ui->tabWidget->addTab(ui->papersTab, "Paper Management");
+        ui->tabWidget->removeTab(0);
+        break;
+    case 2://reviewer
+        ui->tableWidget->clear();
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
+        ui->tabWidget->addTab(ui->authorTab, "Author");
+        ui->tabWidget->addTab(ui->reviewerTab, "Reviewer");
+        ui->tabWidget->removeTab(0);
+        break;
+    case 3://author
+        ui->tabWidget->clear();
+        ui->tabWidget->addTab(ui->infoTabAuthor, "Information");
+        ui->tabWidget->addTab(ui->authorTab, "Author");
+        //ui->tabWidget->removeTab(0);
+        break;
+    }
+
+}
+
+void MainWindow::on_login_clicked()
+{
+    if(username == "PCChair" && password == "admin")
+        setUser(1);
+    else if(username == "Reviewer" && password == "user")
+        setUser(2);
+    else if(username == "Author" && password == "user")
+        setUser(3);
+}
+
+void MainWindow::on_quit_clicked()
+{
+    qApp->quit();
+}
+
+void MainWindow::on_usernameLogin_editingFinished()
+{
+    username = ui->usernameLogin->text();
+}
+
+void MainWindow::on_passwordLogin_editingFinished()
+{
+    password = ui->passwordLogin->text();
+}
+
+void MainWindow::on_logout_clicked()
+{
+    setUser(0);
+}
+
+void MainWindow::on_logout_2_clicked()
+{
+    setUser(0);
+}

commit 97df45c6eafd8e5a66b04ff607a23446e3607af3
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 21 23:48:08 2014 +1100

    Create mainwindow.hpp

diff --git a/UserClient/mainwindow.hpp b/UserClient/mainwindow.hpp
new file mode 100644
index 0000000..90cf7d9
--- /dev/null
+++ b/UserClient/mainwindow.hpp
@@ -0,0 +1,38 @@
+#ifndef MAINWINDOW_HPP
+#define MAINWINDOW_HPP
+
+#include <QMainWindow>
+
+namespace Ui {
+class MainWindow;
+}
+
+class MainWindow : public QMainWindow
+{
+    Q_OBJECT
+
+public:
+    explicit MainWindow(QWidget *parent = 0);
+    ~MainWindow();
+
+private slots:
+    void on_login_clicked();
+
+    void on_quit_clicked();
+
+    void on_usernameLogin_editingFinished();
+
+    void on_passwordLogin_editingFinished();
+
+    void on_logout_clicked();
+
+    void on_logout_2_clicked();
+
+private:
+    Ui::MainWindow *ui;
+    void setUser(int userType);
+    QString username;
+    QString password;
+};
+
+#endif // MAINWINDOW_H

commit 1f42d1949da5d5e286277321fde0e3ada1f4f133
Author: 7xe <evans.samuel7@gmail.com>
Date:   Tue Oct 21 23:47:17 2014 +1100

    added login
    
    added proper login screen, minor changes

diff --git a/UserClient/userclient.ui b/UserClient/userclient.ui
index 5479bc9..49dc25a 100644
--- a/UserClient/userclient.ui
+++ b/UserClient/userclient.ui
@@ -6,15 +6,15 @@
    <rect>
     <x>0</x>
     <y>0</y>
-    <width>792</width>
-    <height>600</height>
+    <width>800</width>
+    <height>602</height>
    </rect>
   </property>
   <property name="windowTitle">
    <string>MainWindow</string>
   </property>
-  <widget class="QWidget" name="centralwidget">
-   <widget class="QTabWidget" name="tabWidget">
+  <widget class="QWidget" name="centralWidget">
+   <widget class="QWidget" name="centralwidget" native="true">
     <property name="geometry">
      <rect>
       <x>0</x>
@@ -23,864 +23,1002 @@
       <height>601</height>
      </rect>
     </property>
-    <property name="currentIndex">
-     <number>0</number>
-    </property>
-    <widget class="QWidget" name="infoAuthor">
-     <attribute name="title">
-      <string>Information</string>
-     </attribute>
-     <widget class="QWidget" name="verticalLayoutWidget">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>10</y>
-        <width>233</width>
-        <height>551</height>
-       </rect>
-      </property>
-      <layout class="QVBoxLayout" name="verticalLayout">
-       <item>
-        <layout class="QHBoxLayout" name="horizontalLayout_2">
-         <item>
-          <widget class="QLabel" name="username">
-           <property name="text">
-            <string>USERNAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="userid">
-           <property name="text">
-            <string>USERID</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="name">
-         <property name="text">
-          <string>NAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="email">
-         <property name="text">
-          <string>EMAIL</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="organisation">
-         <property name="text">
-          <string>ORGANISATION</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="phone">
-         <property name="text">
-          <string>PHONE</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="label">
-         <property name="text">
-          <string>Keywords</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QTextEdit" name="textEdit">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+    <widget class="QTabWidget" name="tabWidget">
+     <property name="geometry">
+      <rect>
+       <x>0</x>
+       <y>0</y>
+       <width>801</width>
+       <height>601</height>
+      </rect>
+     </property>
+     <property name="currentIndex">
+      <number>0</number>
+     </property>
+     <widget class="QWidget" name="loginTab">
+      <attribute name="title">
+       <string>Login</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>210</x>
+         <y>150</y>
+         <width>353</width>
+         <height>211</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_2">
+        <item>
+         <widget class="QLabel" name="label_7">
+          <property name="font">
+           <font>
+            <pointsize>18</pointsize>
+           </font>
+          </property>
+          <property name="text">
+           <string>Conference Management System</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_7">
+          <item>
+           <spacer name="horizontalSpacer_4">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_9">
+            <property name="text">
+             <string>UserName</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="usernameLogin"/>
+          </item>
+          <item>
+           <spacer name="horizontalSpacer_5">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout">
+          <item>
+           <spacer name="horizontalSpacer_2">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item>
+           <widget class="QLabel" name="label_8">
+            <property name="text">
+             <string>Password</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="passwordLogin"/>
+          </item>
+          <item>
+           <spacer name="horizontalSpacer_3">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_10">
+          <item>
+           <widget class="QPushButton" name="login">
+            <property name="text">
+             <string>Login</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="quit">
+            <property name="text">
+             <string>Quit</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </widget>
+     <widget class="QWidget" name="infoTabAuthor">
+      <attribute name="title">
+       <string>Information</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>233</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_2">
+          <item>
+           <widget class="QLabel" name="username">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="name">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="email">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="organisation">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="phone">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextEdit" name="textEdit">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <spacer name="verticalSpacer_8">
-         <property name="orientation">
-          <enum>Qt::Vertical</enum>
-         </property>
-         <property name="sizeHint" stdset="0">
-          <size>
-           <width>20</width>
-           <height>40</height>
-          </size>
-         </property>
-        </spacer>
-       </item>
-       <item>
-        <widget class="QPushButton" name="apply">
-         <property name="text">
-          <string>Apply</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QPushButton" name="logout">
-         <property name="text">
-          <string>Logout</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QLabel" name="conferenceName">
-      <property name="geometry">
-       <rect>
-        <x>270</x>
-        <y>10</y>
-        <width>271</width>
-        <height>71</height>
-       </rect>
-      </property>
-      <property name="font">
-       <font>
-        <pointsize>16</pointsize>
-        <weight>75</weight>
-        <italic>true</italic>
-        <bold>true</bold>
-       </font>
-      </property>
-      <property name="text">
-       <string>CONFERENCENAME</string>
-      </property>
-      <property name="scaledContents">
-       <bool>false</bool>
-      </property>
-     </widget>
-     <widget class="QLabel" name="label_2">
-      <property name="geometry">
-       <rect>
-        <x>270</x>
-        <y>70</y>
-        <width>391</width>
-        <height>41</height>
-       </rect>
-      </property>
-      <property name="text">
-       <string>CONFERENCETOPIC</string>
-      </property>
-     </widget>
-     <widget class="QLabel" name="label_3">
-      <property name="geometry">
-       <rect>
-        <x>270</x>
-        <y>120</y>
-        <width>221</width>
-        <height>31</height>
-       </rect>
-      </property>
-      <property name="text">
-       <string>CONFERENCELOCATION</string>
-      </property>
-     </widget>
-     <widget class="QTextBrowser" name="textBrowser_2">
-      <property name="geometry">
-       <rect>
-        <x>270</x>
-        <y>160</y>
-        <width>491</width>
-        <height>401</height>
-       </rect>
-      </property>
-      <property name="html">
-       <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="verticalSpacer_8">
+          <property name="orientation">
+           <enum>Qt::Vertical</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>20</width>
+            <height>40</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="apply">
+          <property name="text">
+           <string>Apply</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="logout">
+          <property name="text">
+           <string>Logout</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QLabel" name="conferenceName">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>10</y>
+         <width>271</width>
+         <height>71</height>
+        </rect>
+       </property>
+       <property name="font">
+        <font>
+         <pointsize>16</pointsize>
+         <weight>75</weight>
+         <italic>true</italic>
+         <bold>true</bold>
+        </font>
+       </property>
+       <property name="text">
+        <string>CONFERENCENAME</string>
+       </property>
+       <property name="scaledContents">
+        <bool>false</bool>
+       </property>
+      </widget>
+      <widget class="QLabel" name="label_2">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>70</y>
+         <width>391</width>
+         <height>41</height>
+        </rect>
+       </property>
+       <property name="text">
+        <string>CONFERENCETOPIC</string>
+       </property>
+      </widget>
+      <widget class="QLabel" name="label_3">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>120</y>
+         <width>221</width>
+         <height>31</height>
+        </rect>
+       </property>
+       <property name="text">
+        <string>CONFERENCELOCATION</string>
+       </property>
+      </widget>
+      <widget class="QTextBrowser" name="textBrowser_2">
+       <property name="geometry">
+        <rect>
+         <x>270</x>
+         <y>160</y>
+         <width>491</width>
+         <height>401</height>
+        </rect>
+       </property>
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;CONFERENCE DESCRIPTION&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-      </property>
-     </widget>
-    </widget>
-    <widget class="QWidget" name="infoChair">
-     <attribute name="title">
-      <string>Information</string>
-     </attribute>
-     <widget class="QWidget" name="verticalLayoutWidget_3">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>10</y>
-        <width>233</width>
-        <height>551</height>
-       </rect>
-      </property>
-      <layout class="QVBoxLayout" name="verticalLayout_3">
-       <item>
-        <layout class="QHBoxLayout" name="horizontalLayout_3">
-         <item>
-          <widget class="QLabel" name="username_2">
-           <property name="text">
-            <string>USERNAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="userid_2">
-           <property name="text">
-            <string>USERID</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="name_2">
-         <property name="text">
-          <string>NAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="email_2">
-         <property name="text">
-          <string>EMAIL</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="organisation_2">
-         <property name="text">
-          <string>ORGANISATION</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="phone_2">
-         <property name="text">
-          <string>PHONE</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <spacer name="verticalSpacer_9">
-         <property name="orientation">
-          <enum>Qt::Vertical</enum>
-         </property>
-         <property name="sizeHint" stdset="0">
-          <size>
-           <width>20</width>
-           <height>40</height>
-          </size>
-         </property>
-        </spacer>
-       </item>
-       <item>
-        <widget class="QPushButton" name="apply_2">
-         <property name="text">
-          <string>Apply</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QPushButton" name="logout_3">
-         <property name="text">
-          <string>Logout</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
      </widget>
-     <widget class="QWidget" name="verticalLayoutWidget_4">
-      <property name="geometry">
-       <rect>
-        <x>280</x>
-        <y>10</y>
-        <width>481</width>
-        <height>551</height>
-       </rect>
-      </property>
-      <layout class="QVBoxLayout" name="verticalLayout_4">
-       <item>
-        <widget class="QLineEdit" name="lineEdit">
-         <property name="text">
-          <string>CONFERENCE NAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="lineEdit_2">
-         <property name="text">
-          <string>CONFERENCE TOPIC</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="lineEdit_3">
-         <property name="text">
-          <string>CONFERENCE LOCATION</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QTextEdit" name="textEdit_2">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+     <widget class="QWidget" name="infoTabChair">
+      <attribute name="title">
+       <string>Information</string>
+      </attribute>
+      <widget class="QWidget" name="verticalLayoutWidget_3">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>233</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_3">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_3">
+          <item>
+           <widget class="QLabel" name="username_2">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid_2">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="name_2">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="email_2">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="organisation_2">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="phone_2">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <spacer name="verticalSpacer_9">
+          <property name="orientation">
+           <enum>Qt::Vertical</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>20</width>
+            <height>40</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QPushButton" name="apply_2">
+          <property name="text">
+           <string>Apply</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QPushButton" name="logout_2">
+          <property name="text">
+           <string>Logout</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_4">
+       <property name="geometry">
+        <rect>
+         <x>280</x>
+         <y>10</y>
+         <width>481</width>
+         <height>551</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_4">
+        <item>
+         <widget class="QLineEdit" name="lineEdit">
+          <property name="text">
+           <string>CONFERENCE NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="lineEdit_2">
+          <property name="text">
+           <string>CONFERENCE TOPIC</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="lineEdit_3">
+          <property name="text">
+           <string>CONFERENCE LOCATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextEdit" name="textEdit_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;CONFERENCE DESCRIPTION&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;CONFERENCE DESCRIPTION&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
      </widget>
-    </widget>
-    <widget class="QWidget" name="author">
-     <attribute name="title">
-      <string>Author</string>
-     </attribute>
-     <widget class="QWidget" name="gridLayoutWidget_3">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>10</y>
-        <width>741</width>
-        <height>531</height>
-       </rect>
-      </property>
-      <layout class="QGridLayout" name="gridLayout_3">
-       <item row="2" column="0">
-        <widget class="QTextEdit" name="authors_2">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+     <widget class="QWidget" name="authorTab">
+      <attribute name="title">
+       <string>Author</string>
+      </attribute>
+      <widget class="QWidget" name="gridLayoutWidget_3">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>741</width>
+         <height>531</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_3">
+        <item row="2" column="0">
+         <widget class="QTextEdit" name="authors_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;AUTHORS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="1">
-        <widget class="QTextEdit" name="keywords">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextEdit" name="keywords">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="1">
-        <widget class="QTextEdit" name="paperAbstract">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QTextEdit" name="paperAbstract">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;ABSTRACT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="0" column="1">
-        <widget class="QLineEdit" name="paperName_2">
-         <property name="text">
-          <string>PAPERNAME</string>
-         </property>
-        </widget>
-       </item>
-       <item row="3" column="0">
-        <widget class="QLineEdit" name="filename">
-         <property name="text">
-          <string>FILENAME</string>
-         </property>
-        </widget>
-       </item>
-       <item row="0" column="0">
-        <widget class="QSpinBox" name="paperSelect"/>
-       </item>
-       <item row="1" column="0">
-        <widget class="QSpinBox" name="mainKey_2"/>
-       </item>
-       <item row="3" column="1">
-        <layout class="QHBoxLayout" name="horizontalLayout_4">
-         <item>
-          <widget class="QPushButton" name="selectFile">
-           <property name="text">
-            <string>Select File</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QPushButton" name="upload">
-           <property name="text">
-            <string>Upload</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-      </layout>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;ABSTRACT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLineEdit" name="paperName_2">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="3" column="0">
+         <widget class="QLineEdit" name="filename">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QSpinBox" name="mainKey_2"/>
+        </item>
+        <item row="3" column="1">
+         <layout class="QHBoxLayout" name="horizontalLayout_4">
+          <item>
+           <widget class="QPushButton" name="selectFile">
+            <property name="text">
+             <string>Select File</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QPushButton" name="upload">
+            <property name="text">
+             <string>Upload</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
      </widget>
-    </widget>
-    <widget class="QWidget" name="reviewer">
-     <attribute name="title">
-      <string>Reviewer</string>
-     </attribute>
-     <widget class="QWidget" name="gridLayoutWidget_4">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>200</y>
-        <width>741</width>
-        <height>351</height>
-       </rect>
-      </property>
-      <layout class="QGridLayout" name="gridLayout_4">
-       <item row="0" column="0">
-        <widget class="QLabel" name="discussionLabel_2">
-         <property name="text">
-          <string>Discussion</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="1">
-        <widget class="QPushButton" name="submitPosts">
-         <property name="text">
-          <string>Submit Post</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="1">
-        <widget class="QTextEdit" name="postBody">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+     <widget class="QWidget" name="reviewerTab">
+      <attribute name="title">
+       <string>Reviewer</string>
+      </attribute>
+      <widget class="QWidget" name="gridLayoutWidget_4">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>200</y>
+         <width>741</width>
+         <height>351</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_4">
+        <item row="0" column="0">
+         <widget class="QLabel" name="discussionLabel_2">
+          <property name="text">
+           <string>Discussion</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="submitPosts">
+          <property name="text">
+           <string>Submit Post</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextEdit" name="postBody">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;POST INPUT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="0">
-        <widget class="QTextBrowser" name="discussionBody_2">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;POST INPUT&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextBrowser" name="discussionBody_2">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;DISCUSSION POSTS&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QWidget" name="horizontalLayoutWidget">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>160</y>
-        <width>741</width>
-        <height>31</height>
-       </rect>
-      </property>
-      <layout class="QHBoxLayout" name="horizontalLayout_5">
-       <item>
-        <spacer name="horizontalSpacer">
-         <property name="orientation">
-          <enum>Qt::Horizontal</enum>
-         </property>
-         <property name="sizeType">
-          <enum>QSizePolicy::Ignored</enum>
-         </property>
-         <property name="sizeHint" stdset="0">
-          <size>
-           <width>40</width>
-           <height>20</height>
-          </size>
-         </property>
-        </spacer>
-       </item>
-       <item>
-        <widget class="QLabel" name="bidlabel">
-         <property name="text">
-          <string>Bid:</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="bid"/>
-       </item>
-       <item>
-        <widget class="QPushButton" name="submitBid">
-         <property name="text">
-          <string>Submit Bid</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QWidget" name="gridLayoutWidget_5">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>10</y>
-        <width>741</width>
-        <height>151</height>
-       </rect>
-      </property>
-      <layout class="QGridLayout" name="gridLayout_5">
-       <item row="0" column="1">
-        <widget class="QLabel" name="paperName_3">
-         <property name="text">
-          <string>PAPERNAME</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="2">
-        <widget class="QPushButton" name="download_2">
-         <property name="text">
-          <string>Download</string>
-         </property>
-        </widget>
-       </item>
-       <item row="0" column="0">
-        <widget class="QSpinBox" name="paperSelect_2"/>
-       </item>
-       <item row="1" column="0">
-        <widget class="QLabel" name="mainKey_3">
-         <property name="text">
-          <string>MAINKEY</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="0">
-        <widget class="QLabel" name="fileName_2">
-         <property name="text">
-          <string>FILENAME</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="1">
-        <widget class="QTextBrowser" name="textBrowser_3">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="horizontalLayoutWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>160</y>
+         <width>741</width>
+         <height>31</height>
+        </rect>
+       </property>
+       <layout class="QHBoxLayout" name="horizontalLayout_5">
+        <item>
+         <spacer name="horizontalSpacer">
+          <property name="orientation">
+           <enum>Qt::Horizontal</enum>
+          </property>
+          <property name="sizeType">
+           <enum>QSizePolicy::Ignored</enum>
+          </property>
+          <property name="sizeHint" stdset="0">
+           <size>
+            <width>40</width>
+            <height>20</height>
+           </size>
+          </property>
+         </spacer>
+        </item>
+        <item>
+         <widget class="QLabel" name="bidlabel">
+          <property name="text">
+           <string>Bid:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QSpinBox" name="bid"/>
+        </item>
+        <item>
+         <widget class="QPushButton" name="submitBid">
+          <property name="text">
+           <string>Submit Bid</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_5">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>741</width>
+         <height>151</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_5">
+        <item row="0" column="1">
+         <widget class="QLabel" name="paperName_3">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="2">
+         <widget class="QPushButton" name="download_2">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QSpinBox" name="paperSelect_2"/>
+        </item>
+        <item row="1" column="0">
+         <widget class="QLabel" name="mainKey_3">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName_2">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="1">
-        <widget class="QPushButton" name="pushButton">
-         <property name="text">
-          <string>Review Paper</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="pushButton">
+          <property name="text">
+           <string>Review Paper</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
      </widget>
-    </widget>
-    <widget class="QWidget" name="papers">
-     <attribute name="title">
-      <string>Paper Management</string>
-     </attribute>
-     <widget class="QTableWidget" name="tableWidget">
-      <property name="geometry">
-       <rect>
-        <x>40</x>
-        <y>20</y>
-        <width>211</width>
-        <height>531</height>
-       </rect>
-      </property>
-      <column>
-       <property name="text">
-        <string>Title</string>
-       </property>
-      </column>
-      <column>
-       <property name="text">
-        <string notr="true">id</string>
+     <widget class="QWidget" name="papersTab">
+      <attribute name="title">
+       <string>Paper Management</string>
+      </attribute>
+      <widget class="QTableWidget" name="tableWidget">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>20</y>
+         <width>211</width>
+         <height>531</height>
+        </rect>
        </property>
-       <property name="toolTip">
-        <string notr="true"/>
+       <column>
+        <property name="text">
+         <string>Title</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string notr="true">id</string>
+        </property>
+        <property name="toolTip">
+         <string notr="true"/>
+        </property>
+       </column>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_6">
+       <property name="geometry">
+        <rect>
+         <x>250</x>
+         <y>20</y>
+         <width>511</width>
+         <height>151</height>
+        </rect>
        </property>
-      </column>
-     </widget>
-     <widget class="QWidget" name="gridLayoutWidget_6">
-      <property name="geometry">
-       <rect>
-        <x>250</x>
-        <y>20</y>
-        <width>511</width>
-        <height>151</height>
-       </rect>
-      </property>
-      <layout class="QGridLayout" name="gridLayout_6">
-       <item row="1" column="1">
-        <widget class="QTextBrowser" name="textBrowser_4">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+       <layout class="QGridLayout" name="gridLayout_6">
+        <item row="1" column="1">
+         <widget class="QTextBrowser" name="textBrowser_4">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="0">
-        <widget class="QTextEdit" name="authors_3">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;KEYWORDS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextEdit" name="authors_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;AUTHORS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-       <item row="0" column="0">
-        <widget class="QLabel" name="paperName_4">
-         <property name="text">
-          <string>PAPERNAME</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="0">
-        <widget class="QLabel" name="fileName_3">
-         <property name="text">
-          <string>FILENAME</string>
-         </property>
-        </widget>
-       </item>
-       <item row="2" column="1">
-        <widget class="QPushButton" name="download_3">
-         <property name="text">
-          <string>Download</string>
-         </property>
-        </widget>
-       </item>
-       <item row="0" column="1">
-        <widget class="QLabel" name="mainKey_4">
-         <property name="text">
-          <string>MAINKEY</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QWidget" name="gridLayoutWidget_7">
-      <property name="geometry">
-       <rect>
-        <x>250</x>
-        <y>180</y>
-        <width>281</width>
-        <height>371</height>
-       </rect>
-      </property>
-      <layout class="QGridLayout" name="gridLayout_7">
-       <item row="0" column="0">
-        <widget class="QLabel" name="discussionLabel_3">
-         <property name="text">
-          <string>Discussion</string>
-         </property>
-        </widget>
-       </item>
-       <item row="1" column="0">
-        <widget class="QTextBrowser" name="discussionBody_3">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;AUTHORS&lt;/span&gt;&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;SEMI COLON DELIMITED&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="0">
+         <widget class="QLabel" name="paperName_4">
+          <property name="text">
+           <string>PAPERNAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="0">
+         <widget class="QLabel" name="fileName_3">
+          <property name="text">
+           <string>FILENAME</string>
+          </property>
+         </widget>
+        </item>
+        <item row="2" column="1">
+         <widget class="QPushButton" name="download_3">
+          <property name="text">
+           <string>Download</string>
+          </property>
+         </widget>
+        </item>
+        <item row="0" column="1">
+         <widget class="QLabel" name="mainKey_4">
+          <property name="text">
+           <string>MAINKEY</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="gridLayoutWidget_7">
+       <property name="geometry">
+        <rect>
+         <x>250</x>
+         <y>180</y>
+         <width>281</width>
+         <height>371</height>
+        </rect>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_7">
+        <item row="0" column="0">
+         <widget class="QLabel" name="discussionLabel_3">
+          <property name="text">
+           <string>Discussion</string>
+          </property>
+         </widget>
+        </item>
+        <item row="1" column="0">
+         <widget class="QTextBrowser" name="discussionBody_3">
+          <property name="html">
+           <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
 &lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
 p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;DISCUSSION POSTS&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QWidget" name="verticalLayoutWidget_5">
-      <property name="geometry">
-       <rect>
-        <x>540</x>
-        <y>180</y>
-        <width>221</width>
-        <height>371</height>
-       </rect>
-      </property>
-      <layout class="QVBoxLayout" name="verticalLayout_5">
-       <item>
-        <widget class="QLabel" name="label_6">
-         <property name="text">
-          <string>Reviewers</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QTextBrowser" name="textBrowser_5"/>
-       </item>
-       <item>
-        <layout class="QHBoxLayout" name="horizontalLayout_9">
-         <item>
-          <widget class="QLabel" name="label_5">
-           <property name="text">
-            <string>User:</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLineEdit" name="toReview_2"/>
-         </item>
-         <item>
-          <widget class="QPushButton" name="addAsReviewer_2">
-           <property name="text">
-            <string>Add as Reviewer</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-      </layout>
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'MS Shell Dlg 2'; font-size:8.25pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'Ubuntu'; font-size:11pt;&quot;&gt;DISCUSSION POSTS&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_5">
+       <property name="geometry">
+        <rect>
+         <x>540</x>
+         <y>180</y>
+         <width>221</width>
+         <height>371</height>
+        </rect>
+       </property>
+       <layout class="QVBoxLayout" name="verticalLayout_5">
+        <item>
+         <widget class="QLabel" name="label_6">
+          <property name="text">
+           <string>Reviewers</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="textBrowser_5"/>
+        </item>
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_9">
+          <item>
+           <widget class="QLabel" name="label_5">
+            <property name="text">
+             <string>User:</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLineEdit" name="toReview_2"/>
+          </item>
+          <item>
+           <widget class="QPushButton" name="addAsReviewer_2">
+            <property name="text">
+             <string>Add as Reviewer</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
      </widget>
-    </widget>
-    <widget class="QWidget" name="users">
-     <attribute name="title">
-      <string>User Management</string>
-     </attribute>
-     <widget class="QTableWidget" name="tableWidget_2">
-      <property name="geometry">
-       <rect>
-        <x>20</x>
-        <y>10</y>
-        <width>311</width>
-        <height>531</height>
-       </rect>
-      </property>
-      <column>
-       <property name="text">
-        <string>Name</string>
+     <widget class="QWidget" name="usersTab">
+      <attribute name="title">
+       <string>User Management</string>
+      </attribute>
+      <widget class="QTableWidget" name="tableWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>20</x>
+         <y>10</y>
+         <width>311</width>
+         <height>531</height>
+        </rect>
        </property>
-      </column>
-      <column>
-       <property name="text">
-        <string>User Name</string>
+       <column>
+        <property name="text">
+         <string>Name</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string>User Name</string>
+        </property>
+       </column>
+       <column>
+        <property name="text">
+         <string>id</string>
+        </property>
+       </column>
+      </widget>
+      <widget class="QWidget" name="verticalLayoutWidget_6">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>10</y>
+         <width>291</width>
+         <height>381</height>
+        </rect>
        </property>
-      </column>
-      <column>
-       <property name="text">
-        <string>id</string>
+       <layout class="QVBoxLayout" name="verticalLayout_6">
+        <item>
+         <layout class="QHBoxLayout" name="horizontalLayout_8">
+          <item>
+           <widget class="QLabel" name="username_5">
+            <property name="text">
+             <string>USERNAME</string>
+            </property>
+           </widget>
+          </item>
+          <item>
+           <widget class="QLabel" name="userid_5">
+            <property name="text">
+             <string>USERID</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+        <item>
+         <widget class="QLabel" name="name_5">
+          <property name="text">
+           <string>NAME</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="email_5">
+          <property name="text">
+           <string>EMAIL</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="organisation_5">
+          <property name="text">
+           <string>ORGANISATION</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="phone_5">
+          <property name="text">
+           <string>PHONE</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLabel" name="label_10">
+          <property name="text">
+           <string>Keywords</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QTextBrowser" name="keywords_2"/>
+        </item>
+       </layout>
+      </widget>
+      <widget class="QWidget" name="horizontalLayoutWidget_2">
+       <property name="geometry">
+        <rect>
+         <x>370</x>
+         <y>390</y>
+         <width>251</width>
+         <height>41</height>
+        </rect>
        </property>
-      </column>
-     </widget>
-     <widget class="QWidget" name="verticalLayoutWidget_6">
-      <property name="geometry">
-       <rect>
-        <x>370</x>
-        <y>10</y>
-        <width>291</width>
-        <height>381</height>
-       </rect>
-      </property>
-      <layout class="QVBoxLayout" name="verticalLayout_6">
-       <item>
-        <layout class="QHBoxLayout" name="horizontalLayout_8">
-         <item>
-          <widget class="QLabel" name="username_5">
-           <property name="text">
-            <string>USERNAME</string>
-           </property>
-          </widget>
-         </item>
-         <item>
-          <widget class="QLabel" name="userid_5">
-           <property name="text">
-            <string>USERID</string>
-           </property>
-          </widget>
-         </item>
-        </layout>
-       </item>
-       <item>
-        <widget class="QLabel" name="name_5">
-         <property name="text">
-          <string>NAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="email_5">
-         <property name="text">
-          <string>EMAIL</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="organisation_5">
-         <property name="text">
-          <string>ORGANISATION</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="phone_5">
-         <property name="text">
-          <string>PHONE</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_10">
-         <property name="text">
-          <string>Keywords</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QTextBrowser" name="keywords_2"/>
-       </item>
-      </layout>
-     </widget>
-     <widget class="QWidget" name="horizontalLayoutWidget_2">
-      <property name="geometry">
-       <rect>
-        <x>370</x>
-        <y>390</y>
-        <width>251</width>
-        <height>41</height>
-       </rect>
-      </property>
-      <layout class="QHBoxLayout" name="horizontalLayout_6">
-       <item>
-        <widget class="QLabel" name="label_4">
-         <property name="text">
-          <string>Paper:</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLineEdit" name="toReview"/>
-       </item>
-       <item>
-        <widget class="QPushButton" name="addAsReviewer">
-         <property name="text">
-          <string>Add to Review</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
+       <layout class="QHBoxLayout" name="horizontalLayout_6">
+        <item>
+         <widget class="QLabel" name="label_4">
+          <property name="text">
+           <string>Paper:</string>
+          </property>
+         </widget>
+        </item>
+        <item>
+         <widget class="QLineEdit" name="toReview"/>
+        </item>
+        <item>
+         <widget class="QPushButton" name="addAsReviewer">
+          <property name="text">
+           <string>Add to Review</string>
+          </property>
+         </widget>
+        </item>
+       </layout>
+      </widget>
      </widget>
     </widget>
    </widget>
   </widget>
  </widget>
+ <layoutdefault spacing="6" margin="11"/>
  <resources/>
  <connections/>
 </ui>

commit 5c5b13a05056f8202a4696668172612647877c26
Author: torchcar <torchcar@yahoo.com.au>
Date:   Tue Oct 21 01:14:50 2014 +1100

    Initialized more members. Fixed up bugs and destructors.

diff --git a/AdminClient/AdminClientDriver.exe b/AdminClient/AdminClientDriver.exe
index 573c227..82236ad 100644
Binary files a/AdminClient/AdminClientDriver.exe and b/AdminClient/AdminClientDriver.exe differ
diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
index 78e91f7..239a1d6 100644
--- a/AdminClient/Conference.hpp
+++ b/AdminClient/Conference.hpp
@@ -43,11 +43,11 @@ struct Conference {
   { }
 
   bool isActive;
-  std::string title;
-  std::string confID;
-  std::string topic;
-  std::string description;
-  std::string location;
+  std::string title{""};
+  std::string confID{""};
+  std::string topic{""};
+  std::string description{""};
+  std::string location{""};
   std::vector<std::string> keywords;
   bool isBeforePaperDeadline;
   Date paperDeadline;
@@ -57,8 +57,8 @@ struct Conference {
   Date reviewDeadlineHard;
   bool isBeforeDiscussDeadline;
   Date discussDeadline;
-  int reviewersPerPaper;
-  int postWordLimit;
+  int reviewersPerPaper{0};
+  int postWordLimit{0};
 
 };
 #endif
diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index 2b8d4e9..d6a054c 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -3,9 +3,10 @@
 #include "Conference.hpp"
 
 struct ConferenceManager {
-  ConferenceManager() {temp = NULL;}
+  ConferenceManager() { }
   ConferenceManager(Conference* itemp) : temp(itemp) { }
-  ~ConferenceManager() {delete temp;}
+  ~ConferenceManager() { if(temp != nullptr)
+                     delete temp;}
 
   void createConference();
   void removeConference();
@@ -14,7 +15,7 @@ struct ConferenceManager {
   void editConference();
   void addKWords();
 
-  Conference* temp;
+  Conference* temp{nullptr};
 
 };
 #endif
diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
index 560e56e..a083450 100644
--- a/AdminClient/DiscussionPost.hpp
+++ b/AdminClient/DiscussionPost.hpp
@@ -10,8 +10,8 @@ struct DiscussionPost {
                  reviewerUName(ireviewerUName),
                  postID(ipostID)
                  { }
-  std::string comment;
-  std::string reviewerUName;
-  int postID;
+  std::string comment{""};
+  std::string reviewerUName{""};
+  int postID{0};
 };
 #endif
diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index b9bb58a..db108a2 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -31,12 +31,11 @@ struct Paper {
     // no assignment operator or copy constructor deemed necessary at this point
     void downloadPaper();
 
-    std::string title;
-    std::string abstract;
+    std::string title{""};
+    std::string abstract{""};
     std::vector<std::string> authorNames;
     std::vector<std::string> keywords;
-    std::string fname;
-    std::fstream paper;
+    std::string fname{""};
     Discussion discussion;
     std::vector<Review> reviews;
 };
diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 08fd800..6b9c41c 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -3,16 +3,17 @@
 #include "Paper.hpp"
 
 struct PaperManager {
-  PaperManager() {temp = NULL;}
+  PaperManager() { }
   PaperManager(Paper* itemp) : temp(itemp) { }
-  ~PaperManager() {delete temp;}
+  ~PaperManager() { if(temp != nullptr)
+                     delete temp;}
   void createPaper();
   void removePaper();
   void listPapers();
   void viewPaper();
   void editPaper();
 
-  Paper* temp;
+  Paper* temp{nullptr};
 private:
   void viewDiscussion();
   void addDiscPost();
diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
index 7dabff0..a7b1b10 100644
--- a/AdminClient/Review.hpp
+++ b/AdminClient/Review.hpp
@@ -34,20 +34,20 @@ struct Review {
   commentsBestAward(icommentsBestAward)
   { }
   std::string reviewerName;
-  int reviewId;
-  int overall;
-  int confidence;
-  int relevance;
-  int originality;
-  int significance;
-  int presentation;
-  int techQuality;
-  int evalution;
-  std::string commentsStrength;
-  std::string commentsWeakness;
-  std::string commentsSuggestions;
-  std::string commentsShortPaper;
-  std::string commentsBestAward;
+  int reviewId{0};
+  int overall{0};
+  int confidence{0};
+  int relevance{0};
+  int originality{0};
+  int significance{0};
+  int presentation{0};
+  int techQuality{0};
+  int evalution{0};
+  std::string commentsStrength{""};
+  std::string commentsWeakness{""};
+  std::string commentsSuggestions{""};
+  std::string commentsShortPaper{""};
+  std::string commentsBestAward{""};
 
 };
 #endif
diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index 5adff38..ea7b914 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -16,9 +16,9 @@ public:
   std::string getPassword() {return password;}
   void setPassword(const std::string& ipassword) {password = ipassword;}
 
-  std::string userName;
+  std::string userName{""};
 
 private:
-  std::string password;
+  std::string password{""};
 };
 #endif
diff --git a/AdminClient/User.hpp b/AdminClient/User.hpp
index c42c8d1..658e658 100644
--- a/AdminClient/User.hpp
+++ b/AdminClient/User.hpp
@@ -22,12 +22,12 @@ struct User {
          userID(iuserID),
          keywords(ikeywords)
          { }
-  std::string userName;
-  std::string password;
-  std::string name;
-  std::string email;
-  std::string organisation;
-  std::string phone;
+  std::string userName{""};
+  std::string password{""};
+  std::string name{""};
+  std::string email{""};
+  std::string organisation{""};
+  std::string phone{""};
   std::vector<std::string> keywords;
   int userID{0};
 
diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index f78d3f2..240d7b3 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -3,10 +3,11 @@
 #include "User.hpp"
 
 struct UserManager {
-  UserManager() {temp = NULL;}
+  UserManager() { }
   UserManager(User* itemp) : temp(itemp) { }
-  ~UserManager() { delete temp;}
-  User* temp;
+  ~UserManager() { if(temp != nullptr)
+                     delete temp;}
+  User* temp{nullptr};
   void createUser();
   void removeUser();
   void listUsers();
diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index 0f1564c..b9f8c75 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -6,7 +6,7 @@
 enum Request_t {ConferenceRequest, PaperRequest, UserRequest};
 
 struct ClientHandler {
-  ClientHandler(Request_t irequest) : Request_t(irequest)
+  ClientHandler(Request_t irequest) : request(irequest)
     { }
 
 Request_t request;
diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index a0bc445..2da23ea 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -47,11 +47,11 @@ struct Conference {
   void allocatePapers();
 
   bool isActive;
-  std::string title;
-  std::string confID;
-  std::string topic;
-  std::string description;
-  std::string location;
+  std::string title{""};
+  std::string confID{""};
+  std::string topic{""};
+  std::string description{""};
+  std::string location{""};
   std::vector<std::string> keywords;
   bool isBeforePaperDeadline;
   Date paperDeadline;
@@ -61,8 +61,8 @@ struct Conference {
   Date reviewDeadlineHard;
   bool isBeforeDiscussDeadline;
   Date discussDeadline;
-  int reviewersPerPaper;
-  int postWordLimit;
+  int reviewersPerPaper{0};
+  int postWordLimit{0};
 
 };
 #endif
diff --git a/Server/Date.hpp b/Server/Date.hpp
index 7431c8b..a94d1f0 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -13,7 +13,21 @@ struct Date {
   day = in.day;
   month = in.month;
   year = in.year;}
-bool compare(Date);
+bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+  {
+    if(idate.year != year) {
+      return idate.year < year;
+    } else {
+      if(idate.month != month) {
+        return idate.month < month;
+        } else {
+        if(idate.day != day) {
+      return idate.day < day;
+          }
+        }
+    }
+    return true;
+  }
 
 int day{0};
 int month{0};
diff --git a/Server/DiscussionPost.hpp b/Server/DiscussionPost.hpp
index 560e56e..a083450 100644
--- a/Server/DiscussionPost.hpp
+++ b/Server/DiscussionPost.hpp
@@ -10,8 +10,8 @@ struct DiscussionPost {
                  reviewerUName(ireviewerUName),
                  postID(ipostID)
                  { }
-  std::string comment;
-  std::string reviewerUName;
-  int postID;
+  std::string comment{""};
+  std::string reviewerUName{""};
+  int postID{0};
 };
 #endif
diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index 4171f7c..e2f0131 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -27,11 +27,11 @@ struct Paper {
       discussion(idiscussion)
       { }
     // no assignment operator or copy constructor deemed necessary at this point
-    std::string title;
-    std::string abstract;
+    std::string title{""};
+    std::string abstract{""};
     std::vector<std::string> authorNames;
     std::vector<std::string> keywords;
-    std::string fname;
+    std::string fname{""};
 
     Discussion discussion;
     std::vector<Review> reviews;
diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index a4783c9..9bb1b39 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -3,10 +3,11 @@
 #include "Paper.hpp"
 
 struct PaperManager {
-  PaperManager() {temp = NULL;}
+  PaperManager() {}
   PaperManager(Paper* itemp) : temp(itemp) { }
-  ~PaperManager() {delete temp;}
-  Paper* temp;
+  ~PaperManager() { if(temp != nullptr)
+                      delete temp;}
+  Paper* temp{nullptr};
 
   void addPaper();
   void modifyPaper(int);
diff --git a/Server/Review.hpp b/Server/Review.hpp
index 7dabff0..a7b1b10 100644
--- a/Server/Review.hpp
+++ b/Server/Review.hpp
@@ -34,20 +34,20 @@ struct Review {
   commentsBestAward(icommentsBestAward)
   { }
   std::string reviewerName;
-  int reviewId;
-  int overall;
-  int confidence;
-  int relevance;
-  int originality;
-  int significance;
-  int presentation;
-  int techQuality;
-  int evalution;
-  std::string commentsStrength;
-  std::string commentsWeakness;
-  std::string commentsSuggestions;
-  std::string commentsShortPaper;
-  std::string commentsBestAward;
+  int reviewId{0};
+  int overall{0};
+  int confidence{0};
+  int relevance{0};
+  int originality{0};
+  int significance{0};
+  int presentation{0};
+  int techQuality{0};
+  int evalution{0};
+  std::string commentsStrength{""};
+  std::string commentsWeakness{""};
+  std::string commentsSuggestions{""};
+  std::string commentsShortPaper{""};
+  std::string commentsBestAward{""};
 
 };
 #endif
diff --git a/Server/ServerDriver.exe b/Server/ServerDriver.exe
index 581df46..de2f928 100644
Binary files a/Server/ServerDriver.exe and b/Server/ServerDriver.exe differ
diff --git a/Server/User.hpp b/Server/User.hpp
index 57c5228..041c206 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -23,12 +23,12 @@ struct User {
          userID(iuserID),
          keywords(ikeywords)
          { }
-  std::string userName;
-  std::string password;
-  std::string name;
-  std::string email;
-  std::string organisation;
-  std::string phone;
+  std::string userName{""};
+  std::string password{""};
+  std::string name{""};
+  std::string email{""};
+  std::string organisation{""};
+  std::string phone{""};
   std::vector<std::string> keywords;
   int userID{0};
 
diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index dadf702..f7e3a54 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -6,8 +6,9 @@
 struct UserManager {
   UserManager() {temp = NULL;}
   UserManager(User* itemp) : temp(itemp) { }
-  ~UserManager() { delete temp;}
-  User* temp;
+  ~UserManager() { if(temp != nullptr)
+                     delete temp;}
+  User* temp{nullptr};
   void addUser();
   void modifyUser();
   bool deleteUser(int);
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 7e57d57..6d3ab0b 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -33,20 +33,22 @@ class Author : public User {
     void submitPaper();
     void modifyPaper();
     void submitRebuttal(); */
-    
+
     Author(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
+         const std::string& ipassword,
          int iuserID,
          const std::vector<std::string>& ikeywords,
          const std::vector<PaperSummary>& iownPapers):
-         User(iuserName, 
+         User(iuserName,
          iname,
          iemail,
          iorganisation,
          iphone,
+         ipassword,
          iuserID
          ),
          keywords(ikeywords),
@@ -56,7 +58,7 @@ class Author : public User {
     void getPapers();
     void submitPaper();
     void modifyPaper();
-    void submitRebuttal(); 
+    void submitRebuttal();
 
     std::vector<std::string> keywords;
 
diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index 767134d..6868cb3 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -48,11 +48,11 @@ struct Conference {
   std::vector<std::string> searchForKWords(std::string);
 
   bool isActive;
-  std::string title;
-  std::string confID;
-  std::string topic;
-  std::string description;
-  std::string location;
+  std::string title{""};
+  std::string confID{""};
+  std::string topic{""};
+  std::string description{""};
+  std::string location{""};
   std::vector<std::string> keywords;
   bool isBeforePaperDeadline;
   Date paperDeadline;
diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index 9984171..7b1aab4 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -14,7 +14,22 @@ struct Date {
   day = in.day;
   month = in.month;
   year = in.year;}
-  bool compare(Date);
+bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+  {
+    if(idate.year != year) {
+      return idate.year < year;
+    } else {
+      if(idate.month != month) {
+        return idate.month < month;
+        } else {
+        if(idate.day != day) {
+      return idate.day < day;
+          }
+        }
+    }
+    return true;
+  }
+
 
 int day{0};
 int month{0};
diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
index 4fcd752..2d90363 100644
--- a/UserClient/DiscussionPost.hpp
+++ b/UserClient/DiscussionPost.hpp
@@ -9,7 +9,7 @@ struct DiscussionPost {
                  comment(icomment),
                  reviewerUName(ireviewerUName)
                  { }
-  std::string comment;
-  std::string reviewerUName;
+  std::string comment{""};
+  std::string reviewerUName{""};
 };
 #endif
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 9de2931..4b2d552 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -7,7 +7,7 @@
 class LoginManager {
   public:
   LoginManager(bool iloggedIn,
-               const std::vector<Conference>& iconferences,
+               const std::vector<Conference*>& iconferences,
                Conference* iactiveConference) :
                loggedIn(iloggedIn),
                conferences(iconferences),
@@ -25,13 +25,13 @@ class LoginManager {
   void listConferences();
   void viewActiveConfDetails();
   Conference* getActiveConference() {return activeConference;}
-  std::vector<Conference> getConferences() {return conferences;}
+  std::vector<Conference*> getConferences() {return conferences;}
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
-  void setConferences(const std::vector<Conference>& iconferences) {conferences =  iconferences;}
+  void setConferences(const std::vector<Conference*>& iconferences) {conferences =  iconferences;}
 
   bool loggedIn;
   private:
-  std::vector<Conference> conferences;
-  Conference* activeConference;
+  std::vector<Conference*> conferences;
+  Conference* activeConference{nullptr};
 };
 #endif
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index a86998a..41d052e 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -28,6 +28,6 @@ class PCChair : public User {
   PaperSummary* getPaperByTitle(std::string);
   PaperSummary* getPaperById(int);
   std::vector<PaperSummary> allPapers;
-  Conference* activeConference;
+  Conference* activeConference{nullptr};
 };
 #endif
diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
index 3a3ec45..c2be89d 100644
--- a/UserClient/PaperSummary.hpp
+++ b/UserClient/PaperSummary.hpp
@@ -4,8 +4,8 @@
 #include <string>
 
 struct PaperSummary {
-  int paperId;
-  std::string paperName;
+  int paperId{0};
+  std::string paperName{""};
 };
 
 #endif
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index 4471ba2..a010bf3 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -4,7 +4,7 @@
 #include "Paper.hpp"
 
 struct Review {
-  Review() {paper = NULL;}
+  Review() { }
   Review(Paper* ipaper,
     int reviewId,
     int ioverall,
@@ -35,21 +35,21 @@ struct Review {
     commentsShortPaper(icommentsShortPaper),
     commentsBestAward(icommentsBestAward)
     { }
-  Paper* paper;
-  int reviewId;
-  int overall;
-  int confidence;
-  int relevance;
-  int originality;
-  int significance;
-  int presentation;
-  int techQuality;
-  int evalution;
-  std::string commentsStrength;
-  std::string commentsWeakness;
-  std::string commentsSuggestions;
-  std::string commentsShortPaper;
-  std::string commentsBestAward;
+  Paper* paper{nullptr};
+  int reviewId{0};
+  int overall{0};
+  int confidence{0};
+  int relevance{0};
+  int originality{0};
+  int significance{0};
+  int presentation{0};
+  int techQuality{0};
+  int evalution{0};
+  std::string commentsStrength{""};
+  std::string commentsWeakness{""};
+  std::string commentsSuggestions{""};
+  std::string commentsShortPaper{""};
+  std::string commentsBestAward{""};
 
 };
 #endif
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 662374c..c152dfa 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -36,6 +36,7 @@ class Reviewer : public Author {
       const std::string& iemail,
       const std::string& iorganisation,
       const std::string& iphone,
+      const std::string& ipassword,
       int iuserID,
       const std::vector<std::string>& ikeywords,
       const std::vector<PaperSummary>& iownPapers,
@@ -48,6 +49,7 @@ class Reviewer : public Author {
       iemail,
       iorganisation,
       iphone,
+      ipassword,
       iuserID,
       ikeywords,
       iownPapers
@@ -55,7 +57,7 @@ class Reviewer : public Author {
       allocatedPapers(iallocatedPapers),
       papersToBid(ipapersToBid),
       reviews(ireviews)
-      { }      
+      { }
     void view();
     void getPapersToReview();
     void submitReview();
@@ -65,11 +67,11 @@ class Reviewer : public Author {
     void viewDiscussion();
     void addDiscussion();
 
-    std::vector<Paper> getAllocatedPapers() {return allocatedPapers;}
-    std::vector<Paper> getPapersToBid() {return papersToBid;}
+    std::vector<PaperSummary> getAllocatedPapers() {return allocatedPapers;}
+    std::vector<PaperSummary> getPapersToBid() {return papersToBid;}
     std::vector<Review> getReviews() {return reviews;}
-    void setAllocatedPapers(const std::vector<Paper>& iallocatedPapers) {allocatedPapers = iallocatedPapers;}
-    void setPapersToBid(const std::vector<Paper>& ipapersToBid) {papersToBid = ipapersToBid;}
+    void setAllocatedPapers(const std::vector<PaperSummary>& iallocatedPapers) {allocatedPapers = iallocatedPapers;}
+    void setPapersToBid(const std::vector<PaperSummary>& ipapersToBid) {papersToBid = ipapersToBid;}
     void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
 
   private:
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index c0b0e80..c1b37e0 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -43,11 +43,11 @@ class User {
 
   protected:
 
-std::string password;
-std::string name;
-std::string email;
-std::string organisation;
-std::string phone;
+std::string password{""};
+std::string name{""};
+std::string email{""};
+std::string organisation{""};
+std::string phone{""};
 int userID{0};
 Paper currentPaper;
 
diff --git a/UserClient/UserClientDriver.exe b/UserClient/UserClientDriver.exe
new file mode 100644
index 0000000..ff22fcf
Binary files /dev/null and b/UserClient/UserClientDriver.exe differ
diff --git a/UserClient/UserClientDriver.o b/UserClient/UserClientDriver.o
new file mode 100644
index 0000000..7a9e899
Binary files /dev/null and b/UserClient/UserClientDriver.o differ

commit bde1f469b2e3bc9fae9e491fc665ae41ca2faf60
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Mon Oct 20 18:40:54 2014 +1100

    Cleaned up the file structure

diff --git a/Algo b/Algo
deleted file mode 100644
index 4acf67f..0000000
--- a/Algo
+++ /dev/null
@@ -1,156 +0,0 @@
-Algo:
-
-
-struct ReviewerBid
-{
-	int score;
-	int reviewerID;
-};
-
-class PaperForReview
-{
-	private:
-		int paperID;
-
-
-		ReviewerBid[numOfReqReviewrs] reviewerBids;
-
-		std::vector<int> authors;
-		std::vector<int> involvedOrganisation;
-		std::vector<int> conflictingReviewersVec;
-	public:
-		PapersForReview(int);
-		~PapersForReview();
-		int getMinScore();
-		void setNewReviewer(int, int);
-		void checkNewReviewer(int, int);
-		void addAuthor(int);
-		void conflictingReviewers();
-};
-
-void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
-{
-	if(getMinScore() < newscore)
-	{
-		//Set New Reviewer
-		setNewReviewer(newScore, newReviewerID);
-		
-	}
-}
-
-int PaperForReview::getMinScore()
-{
-	int minScore = -1;
-	for(int i=0; i<NumOfReqReviewers; i++)
-	{
-		if(reviewerBids[i].score < minScore)
-			minScore = reviewerBids[i].score;
-	}
-	return minScore;
-}
-
-void setNewReviewer(int newScore, int newReviewer)
-{
-
-	minScore = getMinScore();
-	for(int i=0; i< NumOfReqReviewers; i++)
-	{
-		if(reviewerBids[i].score < minScore)
-		{
-			reviewerBids[i].score = newScore;
-			reviewerBids[i].reviewerID =  newReviewer;
-			i=  NumOfReqReviewrs;
-		}
-	}
-
-}
-
-PaperForReview::~PaperForReview()
-{
-
-}
-
-PaperForReview::PaperForReview(int newPaperID)
-{
-	paperID = newPaperID
-	
-	for(int i=0; i< NumOfReqReviewrs; i++)
-	{
-		reviewerBids[i].score = -1;
-	}
-}
-
-
-void PaperForReview::addAuthor(int newAuthor)
-{
-	authors.push_back(newAuthor);
-}
-
-//TODO
-void  PaperForReview::conflictingReviewers()
-{
-	//authors
-		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());
-
-
-	//usersFromSameOrganisation
-		//ForEachAuthor:   SelectOrganisation
-			//SelectAllUsersFromEachOrganisation
-				//PushBack^
-
-	//pastCoAuthors
-		//ForEachAuthor:   selectAllPapers in temp
-			//Select All authors for each paper in temp
-				//pushBack^
-}
-
-
-
-std::map<PaperForReview*, int> allPapers; //Key is paper ID *** NEEDS TO BE DELETED***
-void readInAllPapers();
-
-//TODO
-
-void readInAllPapers()
-{
-	// for all papers
-		//create new paers object
-
-		// select all Authors where paper==paperID
-			//addAuthors to paper
-
-		// select organisation for each author
-			//add involved organisation
-
-		// push new PaperForReview objects into the map
-
-}
-
-
-
-
-
-int calculateScore(int userID, int paperID)
-{
-	int score = 1;
-
-	//for each keyword match
-		// ++ score
-
-	return score;
-
-}
-
-
-//TODO
-//for each paper
-	//IfUserID not in  conflictingReviewers
-		//if(isYES())
-			//calculate score * (isYES()*1000)
-				//checkNewReviewer
-			//elseif(isMAYBE)
-				//calculate score * (isMAYBE()*100)
-				//checkNewReviewer
-			//else
-				//calculate score
-				//checkNewReviewer
diff --git a/Algorithm/Algo b/Algorithm/Algo
new file mode 100644
index 0000000..4acf67f
--- /dev/null
+++ b/Algorithm/Algo
@@ -0,0 +1,156 @@
+Algo:
+
+
+struct ReviewerBid
+{
+	int score;
+	int reviewerID;
+};
+
+class PaperForReview
+{
+	private:
+		int paperID;
+
+
+		ReviewerBid[numOfReqReviewrs] reviewerBids;
+
+		std::vector<int> authors;
+		std::vector<int> involvedOrganisation;
+		std::vector<int> conflictingReviewersVec;
+	public:
+		PapersForReview(int);
+		~PapersForReview();
+		int getMinScore();
+		void setNewReviewer(int, int);
+		void checkNewReviewer(int, int);
+		void addAuthor(int);
+		void conflictingReviewers();
+};
+
+void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
+{
+	if(getMinScore() < newscore)
+	{
+		//Set New Reviewer
+		setNewReviewer(newScore, newReviewerID);
+		
+	}
+}
+
+int PaperForReview::getMinScore()
+{
+	int minScore = -1;
+	for(int i=0; i<NumOfReqReviewers; i++)
+	{
+		if(reviewerBids[i].score < minScore)
+			minScore = reviewerBids[i].score;
+	}
+	return minScore;
+}
+
+void setNewReviewer(int newScore, int newReviewer)
+{
+
+	minScore = getMinScore();
+	for(int i=0; i< NumOfReqReviewers; i++)
+	{
+		if(reviewerBids[i].score < minScore)
+		{
+			reviewerBids[i].score = newScore;
+			reviewerBids[i].reviewerID =  newReviewer;
+			i=  NumOfReqReviewrs;
+		}
+	}
+
+}
+
+PaperForReview::~PaperForReview()
+{
+
+}
+
+PaperForReview::PaperForReview(int newPaperID)
+{
+	paperID = newPaperID
+	
+	for(int i=0; i< NumOfReqReviewrs; i++)
+	{
+		reviewerBids[i].score = -1;
+	}
+}
+
+
+void PaperForReview::addAuthor(int newAuthor)
+{
+	authors.push_back(newAuthor);
+}
+
+//TODO
+void  PaperForReview::conflictingReviewers()
+{
+	//authors
+		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());
+
+
+	//usersFromSameOrganisation
+		//ForEachAuthor:   SelectOrganisation
+			//SelectAllUsersFromEachOrganisation
+				//PushBack^
+
+	//pastCoAuthors
+		//ForEachAuthor:   selectAllPapers in temp
+			//Select All authors for each paper in temp
+				//pushBack^
+}
+
+
+
+std::map<PaperForReview*, int> allPapers; //Key is paper ID *** NEEDS TO BE DELETED***
+void readInAllPapers();
+
+//TODO
+
+void readInAllPapers()
+{
+	// for all papers
+		//create new paers object
+
+		// select all Authors where paper==paperID
+			//addAuthors to paper
+
+		// select organisation for each author
+			//add involved organisation
+
+		// push new PaperForReview objects into the map
+
+}
+
+
+
+
+
+int calculateScore(int userID, int paperID)
+{
+	int score = 1;
+
+	//for each keyword match
+		// ++ score
+
+	return score;
+
+}
+
+
+//TODO
+//for each paper
+	//IfUserID not in  conflictingReviewers
+		//if(isYES())
+			//calculate score * (isYES()*1000)
+				//checkNewReviewer
+			//elseif(isMAYBE)
+				//calculate score * (isMAYBE()*100)
+				//checkNewReviewer
+			//else
+				//calculate score
+				//checkNewReviewer
diff --git a/Exception.h b/Exception.h
deleted file mode 100644
index 216cca4..0000000
--- a/Exception.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * File:        MyException.h
- * Author:      nabg
- *
- * Created on 27 November 2012, 11:20 AM
- */
-
-#ifndef MYEXCEPTION_H
-#define MYEXCEPTION_H
-
-#include <string>
-#include <exception>
-using namespace std;
-
-class MyException : public exception {
-public:
-    MyException(string& whatsup) : message(whatsup) {  }
-    ~MyException() throw() {}
-    const char* what(){return message.c_str();}
-private:
-    string message;
-};
-
-#endif  /* MYEXCEPTION_H */
-
diff --git a/PDF/PDF_read_write_example.cpp b/PDF/PDF_read_write_example.cpp
new file mode 100644
index 0000000..4e3b973
--- /dev/null
+++ b/PDF/PDF_read_write_example.cpp
@@ -0,0 +1,53 @@
+/*
+
+Simple read in of PDF EXAMPLE
+
+
+Reads in pdf, saves as a char*, prints as new pdf
+
+
+Note: pdf is just stored as a c_string
+
+
+Alex Cremona Oct 2014
+
+*/
+
+#include <fstream>
+
+
+int main()
+{
+	char inName[256] = "Simple.pdf";
+	char outName[256] = "testOut.pdf";
+	//std::string content;
+	std::ifstream fin;
+	std::ofstream fout;
+
+
+	//open pdf in binary
+	fin.open(inName, std::ios::in | std::ios::binary);
+	
+	//find length
+	fin.seekg (0, fin.end);
+	int length = fin.tellg();
+	fin.seekg (0, fin.beg);
+
+	// define buffer
+	char * buffer = new char [length];
+
+	//READ IN ALL INTO BUFFER
+	fin.read(buffer, length);
+
+	fin.close();
+
+	//open output in Binary and output content elsewhere
+	fout.open(outName, std::ios::out | std::ios::binary);
+	fout.write(buffer, length);
+	fout.close();
+
+	return 0;
+
+
+
+}
diff --git a/PDF_read_write_example.cpp b/PDF_read_write_example.cpp
deleted file mode 100644
index 4e3b973..0000000
--- a/PDF_read_write_example.cpp
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
-
-Simple read in of PDF EXAMPLE
-
-
-Reads in pdf, saves as a char*, prints as new pdf
-
-
-Note: pdf is just stored as a c_string
-
-
-Alex Cremona Oct 2014
-
-*/
-
-#include <fstream>
-
-
-int main()
-{
-	char inName[256] = "Simple.pdf";
-	char outName[256] = "testOut.pdf";
-	//std::string content;
-	std::ifstream fin;
-	std::ofstream fout;
-
-
-	//open pdf in binary
-	fin.open(inName, std::ios::in | std::ios::binary);
-	
-	//find length
-	fin.seekg (0, fin.end);
-	int length = fin.tellg();
-	fin.seekg (0, fin.beg);
-
-	// define buffer
-	char * buffer = new char [length];
-
-	//READ IN ALL INTO BUFFER
-	fin.read(buffer, length);
-
-	fin.close();
-
-	//open output in Binary and output content elsewhere
-	fout.open(outName, std::ios::out | std::ios::binary);
-	fout.write(buffer, length);
-	fout.close();
-
-	return 0;
-
-
-
-}
diff --git a/Record.cpp b/Record.cpp
deleted file mode 100644
index 73124b8..0000000
--- a/Record.cpp
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * File:        MyRecord.cpp
- * Author:      nabg
- * 
- * Created on 23 November 2012, 1:25 PM
- * 
- * See MyRecord.h for some explanation!
- * 
- * class MyRecord {
-public:
-    explicit MyRecord(string& id); 
-    void setName(string& aname) throw (MyException);
-    void setEmail(string& amail) throw (MyException);
-    void setInfo(string& info) throw (MyException);
-    void setImage(string& imagestr) throw (MyException);
-    void addRole(string& anotherrole) throw (MyException);
-    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
-
-    string getID() const { return this->id; }
-    string getName() const { return this->name; }
-    string getEmail() const { return this->email; }
-    string getInfo() const { return this->info; }
-    string getImage() const { return this->image; }
-    string getAttribute(string& collectionname, string& key) const throw(MyException);
-    vector<string> getRoles() const { return this->roles; }
-    map<string,string> getPhones() const { return this->phones; }
-    map<string,string> getAddresses() const { return this->addresses; }
-    map<string,string> getOtherKV() const { return this->other; }
-    
-    bool hasRole(string& queryrole) const;
-    
-private:
-    string id; 
-    string name; 
-    string email; 
-    string image;
-    string info;
-    vector<string> roles;
-    map<string,string> phones;
-    map<string,string> addresses;
-    map<string,string> other;
-
-
-
- * 
- * 
- */
-
-#include <vector>
-#include <algorithm>
-#include "MyRecord.h"
-#include "stringtrimmer.h"
-
-//#include <boost/regex.hpp>
-
-MyRecord::MyRecord(string& id) {
-    this->id = id;
-}
-
-void MyRecord::setName(string& aname) throw (MyException) {
-    this->name = aname;
-}
-
-void MyRecord::setEmail(string& amail) throw (MyException) {
- //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
- //   amail = trim(amail);
- //   boost::match_results<std::string::const_iterator> results;
- //   if (boost::regex_match(amail, results, validationExpression))
- //   {
-        this->email = amail;
- //   }
- //   else
- //   {
- //       string msg = "Email of wrong format";
- //       throw MyException(msg);
- //   }
-}
-
-void MyRecord::setInfo(string& info) throw (MyException) {
-    this->info = info;
-}
-
-void MyRecord::setImage(string& imagestr) throw (MyException) {
-    this->image = imagestr;
-}
-
-void MyRecord::addRole(string& anotherrole)  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-    if (it != this->roles.end()) return; // Found it, so don't duplicate
-    roles.push_back(anotherrole);
-}
-
-void MyRecord::removeRole(std::string& oldrole)
-{
-    this->roles.erase(remove(this->roles.begin(),
-        this->roles.end(), oldrole),
-        this->roles.end());
-}
-
-void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
-    if (key.empty() || value.empty()) {
-        string msg = "Empty key or value";
-        throw MyException(msg);
-    }
-    // If same collection/key combination specified more than once, later value
-    // overwrites earlier value for that key.
-
-// Change to allow of rSTL's insert() not allowing for replacement
-    if (collectionname == "Phones") {
-        this->phones[key]=value;
-    } else
-        if (collectionname == "Addresses") {
-        this->addresses[key]=value;
-    } else
-        if (collectionname == "Other") {
-         this->other[key]=value;
-    } else {
-        string errmsg = "There is no collection called " + collectionname;
-        throw MyException(errmsg);
-    }
-}
-
-string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
-
-
-    if (collectionname == "Phones") {
-        return phones.find(key)->second;
-    } else
-        if (collectionname == "Addresses") {
-        return addresses.find(key)->second;
-    } else
-        if (collectionname == "Other") {
-        return other.find(key)->second;
-    }
-
-    string errmsg = "There is no collection called " + collectionname;
-    throw MyException(errmsg);
-
-}
-
-
-bool MyRecord::hasRole(string&  anotherrole) const  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::const_iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-   return(it != this->roles.end()) ;
-}
diff --git a/Record.h b/Record.h
deleted file mode 100644
index 076ae54..0000000
--- a/Record.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * File:        MyRecord.h
- * Author:      nabg
- *
- * Created on 27 November 2012, 11:18 AM
- */
-
-#ifndef MYRECORD_H
-#define MYRECORD_H
-#include "MyException.h"
-#include <map>
-#include <string>
-#include <vector>
-using namespace std;
-
-class MyRecord {
-public:
-    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
-    // Mutator functions - setting of other fields
-    // In this version, hardly any of the implementations will actually throw exceptions
-    // later validation functions will be added
-    void setName(std::string& aname) throw (MyException);
-    void setEmail(std::string& amail) throw (MyException);
-    void setInfo(std::string& info) throw (MyException);
-    void setImage(std::string& imagestr) throw (MyException);
-    void addRole(std::string& anotherrole) ;
-    void removeRole(std::string& oldrole);
-    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
-    // Accessor functions
-
-    std::string getID() const { return this->id; }
-    std::string getName() const { return this->name; }
-    std::string getEmail() const { return this->email; }
-    std::string getInfo() const { return this->info; }
-    std::string getImage() const { return this->image; }
-    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
-    const std::vector<std::string>& getRoles() const { return this->roles; }
-    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
-    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
-    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
-
-    bool hasRole(std::string& queryrole) const;
-
-private:
-    std::string id; // Also known as "nickname", or even "primary key"
-    std::string name; // full name
-    std::string email;
-    std::string image;
-    std::string info;
-    std::vector<std::string> roles;
-    std::map<std::string,std::string> phones;
-    std::map<std::string,std::string> addresses;
-    std::map<std::string,std::string> other;
-     // Finally, note that copy constructor and assignment operator are
-    // private (and no implementations will be defined).  I choose to 
-    // disallow such operations.
-    MyRecord(const MyRecord& orig);
-    MyRecord& operator=(const MyRecord&);
-    // Further there is no virtual destructor, I do not intend MyRecord
-    // to be the base class in some hierarchy.
-};
-
-#endif  /* MYRECORD_H */
diff --git a/RecordStore.cpp b/RecordStore.cpp
deleted file mode 100644
index 8000f30..0000000
--- a/RecordStore.cpp
+++ /dev/null
@@ -1,375 +0,0 @@
-#include "MyRecordStore.h"
-
-#include "cppconn/driver.h"
-#include "cppconn/exception.h"
-#include "cppconn/resultset.h"
-#include "cppconn/statement.h"
-#include "cppconn/prepared_statement.h"
-
-#include <cstring>
-#include <stdlib.h>
-#include <iostream>
-
-#include <vector>
-#include <map>
-#include <string>
-
-using namespace sql;
-
-const char* databaseStr = "tcp://127.0.0.1:3306";
-const char* databaseUserName = "nabg";
-const char* databaseUserPassword = "NotReallyMyPassword";
-const char* databaseSchema = "nabg";
-
-const char* noDB = "Sorry, but was unable to open database so operation failed";
-
-const char* prepareFailed = "Failure when preparing statement";
-const char* bindFailed = "Failure when binding arguments";
-const char* writeFailed = "Failure when writing to database";
-
-MyRecordStore::MyRecordStore()
-{
-        // Constructors should always succeed. But suppose it failed and
-        // the database couldn't be created?
-        invalid = true;
-        driver = get_driver_instance();
-        try {
-                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
-        } catch (sql::SQLException &e) {
-                // Failed
-                return;
-        }
-        dbcon->setSchema(databaseSchema);
-        // It's ok
-        invalid = false;
-}
-
-MyRecordStore::~MyRecordStore()
-{
-        if (!invalid) {
-                this->close();
-        }
-}
-
-void MyRecordStore::close()
-{
-        if (!invalid) {
-                dbcon->close();
-                delete dbcon;
-        }
-        invalid = true;
-}
-
-bool MyRecordStore::exists(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        const char* countrecord = "select count(*) from MyRecord where _id=?";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(countrecord);
-
-        int count = 0;
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        if (rs->next()) {
-                count = rs->getInt(1);
-        }
-        delete rs;
-        delete pstmt;
-
-        return count = 1;
-}
-
-std::vector<std::string> *MyRecordStore::allKeys()
-{
-        if (invalid)
-                throw (noDB);
-        std::vector<std::string> *vptr = new std::vector<std::string>();
-
-        const char* selectall = "select _id from MyRecord";
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(selectall);
-
-        rs = pstmt->executeQuery();
-        while (rs->next()) {
-                std::string anid = rs->getString(1);
-                vptr->push_back(anid);
-        }
-
-        return vptr;
-}
-std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Laboured
-        // First get a list of the ids with the role, then one by one get the
-        // complete records.
-        const char* getrolepersons = "selects personid from roles where _role=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet * rs = NULL;
-
-        pstmt = dbcon->prepareStatement(getrolepersons);
-        pstmt->setString(1, role);
-        rs = pstmt->executeQuery();
-
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
-
-        std::vector<std::string> people;
-
-        // rc = sqlite3_step(stmt);
-
-        while (rs->next()) {
-                std::string apersonid = std::string(rs->getString(1));
-//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
-                people.push_back(apersonid);
-        }
-
-        // Maybe there weren't any
-        if (people.size() == 0)
-                return NULL;
-
-        // Build collection by getting each record
-        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-
-        std::vector<std::string>::const_iterator it;
-        for (it = people.begin(); it != people.end(); it++) {
-                std::string aperson = *it;
-                MyRecord* rec = this->get(aperson.c_str());
-                roleholders->push_back(rec);
-        }
-
-        return roleholders;
-}
-//
-//      sqlite3_stmt* stmt;
-//      int rc;
-//      rc = sqlite3_prepare_v2(db,
-//              getrolepersons, strlen(getrolepersons),
-//              &stmt, &unused);
-//      if (rc != SQLITE_OK) {
-//              std::cerr << prepareFailed << std::endl;
-//              exit(1);
-//      }
-//
-//      rc = sqlite3_bind_text(stmt, 1, role, -1 , SQLITE_STATIC);
-//      if (rc != SQLITE_OK) {
-//              std::cerr << bindFailed << std::endl;
-//              exit(1);
-//      }
-//      std::vector<std::string> people;
-//
-//      // rc = sqlite3_step(stmt);
-//
-//      while (sqlite3_step(stmt) == SQLITE_ROW) {
-//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
-//              people.push_back(apersonid);
-//      }
-//      sqlite3_finalize(stmt);
-//
-//
-//      // Maybe there weren't any
-//      if (people.size() == 0)
-//              return NULL;
-//
-//      // Build collection by getting each record
-//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
-//
-//      std::vector<std::string>::const_iterator it;
-//      for (it = people.begin(); it != people.end(); it++) {
-//              std::string aperson = *it;
-//              MyRecord* rec = this->get(aperson.c_str());
-//              roleholders->push_back(rec);
-//      }
-//      
-//      return roleholders;
-//}     
-
-void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
-{
-
-        if (invalid)
-                throw (noDB);
-
-        // Tiresome
-        // If it exists - delete it
-        if (this->exists(key)) {
-                bool done = this->deleteRecord(key);
-        }
-        // Insert it
-        this->recordToTables(data);
-}
-
-bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // explicitly delete subordinate records in Phones, Address, others and Roles
-        // then delete the myrecord entry
-        // recreating the prepared statements for each operation - costly
-        const char* deletephones = "delete from Phones where idPerson=?";
-        const char* deleteaddress = "delete from Addresses where idPerson=?";
-        const char* deleteother = "delete from Other where idPerson=?";
-        const char* deleteroles = "delete from Roles where idPerson=?";
-        const char* deletemyrecord = "delete from MyRecord where _id=?";
-        const char* unused; // Pointer to unused part of sql string (?)
-        sql::PreparedStatement *pstmt = NULL;
-        // Phones
-        pstmt = dbcon->prepareStatement(deletephones);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Addresses
-        pstmt = dbcon->prepareStatement(deleteaddress);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        //Other
-        pstmt = dbcon->prepareStatement(deleteother);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Roles
-        pstmt = dbcon->prepareStatement(deleteroles);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        // Finally
-        pstmt = dbcon->prepareStatement(deletemyrecord);
-        pstmt->setString(1, key);
-        pstmt->executeUpdate();
-        delete pstmt;
-
-        return true;
-}
-
-MyRecord *MyRecordStore::get(const char* key) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Again laborious
-        // Load the MyRecord from its table, then add data from Other tables.
-        const char* getrecord = "select * from MyRecord where _id=?";
-        const char* getroles = "select role from Roles where idperson=?";
-        const char* getphones = "select type, number from Phones where idPerson=?";
-        const char* getaddress = "select type, address from Addresses where idPerson=?";
-        const char* getother = "select key, valyue from Other where idPerson=?";
-
-        sql::PreparedStatement *pstmt = NULL;
-        sql::ResultSet *rs = NULL;
-
-        pstmt = dbcon->prepareStatement(getrecord);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        bool haveRecord = rs->next();
-        if (!haveRecord)
-        {
-                delete rs;
-                delete pstmt;
-                return NULL;
-        }
-
-        std::string id = rs->getString(1);
-        std::string name = rs->getString(2);
-        std::string email = rs->getString(3);
-        std::string info = rs->getString(4);
-        std::string image = rs->getString(5);
-
-        MyRecord *arec = new MyRecord(id);
-        arec->setName(name);
-        arec->setEmail(email);
-        arec->setInfo(info);
-        arec->setImage(image);
-
-        delete rs;
-        delete pstmt;
-        // =======================================
-        // Now ask about roles
-        pstmt = dbcon->prepareStatement(getroles);
-        pstmt->setString(1, key);
-        rs = pstmt->executeQuery();
-        while (rs->next())
-        {
-                std::string arole = rs->getString(1);
-                arec->addRole(arole);
-        }
-        delete rs;
-        delete pstmt;
-}
-
-void MyRecordStore::recordToTables(const MyRecord* data)
-{
-        if (invalid)
-                throw (noDB);
-
-        // Insert the myrecord data first, then deal with Other data tables
-
-        const char* putmyrecord = "insert into MyRecord values( ?, ?, ?, ?, ?)";
-        const char* putrole = "insert into Roles values(?, ?)";
-        const char* putphone = "insert into Phones values (?, ?, ?)";
-        const char* putaddress = "insert into Addresses values (?, ?, ?)";
-        const char* putother = "insert into Other values (?, ?, ?)";
-
-        sql::PreparedStatement *pstmt = NULL;
-        pstmt = dbcon->prepareStatement(putmyrecord);
-        pstmt->setString(1, data->getID());
-        pstmt->setString(2, data->getName());
-        pstmt->setString(3, data->getEmail());
-        pstmt->setString(4, data->getInfo());
-        pstmt->setString(5, data->getImage());
-
-        pstmt->executeUpdate();
-
-        delete pstmt;
-
-        // Role 
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-
-//      // Other
-//      if (data->getOtherKV().size() > 0)
-//      {
-//              pstmt = dbcon->prepareStatement(putother);
-//              std::map<std::string, std::string>::const_iterator it;
-//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-//              {
-//                      std::string akey = it->first;
-//                      std::string avalue = it->second;
-//                      pstmt->setString(1, data->getID());
-//                      pstmt->setString(2, akey);
-//                      pstmt->setString(3, avalue);
-//                      pstmt->executeUpdate();
-//              }
-//              delete pstmt;
-//
-//      }
-}
diff --git a/RecordStore.h b/RecordStore.h
deleted file mode 100644
index 261bd0e..0000000
--- a/RecordStore.h
+++ /dev/null
@@ -1,43 +0,0 @@
-#include <string>
-#include <vector>
-#include "mysql_connection.h"
-#include "mysql_driver.h"
-#include "MyRecord.h"
-
-class MyRecordStore {
-public:
-        MyRecordStore();
-
-        ~MyRecordStore();
-        // Delete - returns false if there wasn't a record with that key
-        bool deleteRecord(const char* key) throw (const char*);
-        // Exists - is there a record with a given key
-        bool exists(const char* key) throw (const char*);
-        // Put - insert/replace a record; returns false if failed
-        // (In this example, key is actually the same as name field in data record)
-        void put(const char* key, const MyRecord *data) throw (const char*);
-        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
-        MyRecord *get(const char*key) throw (const char*);
-
-        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
-
-        void close();
-
-        std::vector<std::string> *allKeys();
-
-        bool isOK()
-        {
-                return !(this->invalid);
-        }
-
-private:
-        bool invalid;
-        const char* dbname;
-        sql::Connection *dbcon;
-        sql::Driver *driver;
-        MyRecordStore(const MyRecordStore& orig);
-        MyRecordStore& operator=(const MyRecordStore);
-
-        void recordToTables(const MyRecord *data);
-
-};
diff --git a/database/Exception.h b/database/Exception.h
new file mode 100644
index 0000000..216cca4
--- /dev/null
+++ b/database/Exception.h
@@ -0,0 +1,25 @@
+/*
+ * File:        MyException.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:20 AM
+ */
+
+#ifndef MYEXCEPTION_H
+#define MYEXCEPTION_H
+
+#include <string>
+#include <exception>
+using namespace std;
+
+class MyException : public exception {
+public:
+    MyException(string& whatsup) : message(whatsup) {  }
+    ~MyException() throw() {}
+    const char* what(){return message.c_str();}
+private:
+    string message;
+};
+
+#endif  /* MYEXCEPTION_H */
+
diff --git a/database/Record.cpp b/database/Record.cpp
new file mode 100644
index 0000000..73124b8
--- /dev/null
+++ b/database/Record.cpp
@@ -0,0 +1,151 @@
+/*
+ * File:        MyRecord.cpp
+ * Author:      nabg
+ * 
+ * Created on 23 November 2012, 1:25 PM
+ * 
+ * See MyRecord.h for some explanation!
+ * 
+ * class MyRecord {
+public:
+    explicit MyRecord(string& id); 
+    void setName(string& aname) throw (MyException);
+    void setEmail(string& amail) throw (MyException);
+    void setInfo(string& info) throw (MyException);
+    void setImage(string& imagestr) throw (MyException);
+    void addRole(string& anotherrole) throw (MyException);
+    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
+
+    string getID() const { return this->id; }
+    string getName() const { return this->name; }
+    string getEmail() const { return this->email; }
+    string getInfo() const { return this->info; }
+    string getImage() const { return this->image; }
+    string getAttribute(string& collectionname, string& key) const throw(MyException);
+    vector<string> getRoles() const { return this->roles; }
+    map<string,string> getPhones() const { return this->phones; }
+    map<string,string> getAddresses() const { return this->addresses; }
+    map<string,string> getOtherKV() const { return this->other; }
+    
+    bool hasRole(string& queryrole) const;
+    
+private:
+    string id; 
+    string name; 
+    string email; 
+    string image;
+    string info;
+    vector<string> roles;
+    map<string,string> phones;
+    map<string,string> addresses;
+    map<string,string> other;
+
+
+
+ * 
+ * 
+ */
+
+#include <vector>
+#include <algorithm>
+#include "MyRecord.h"
+#include "stringtrimmer.h"
+
+//#include <boost/regex.hpp>
+
+MyRecord::MyRecord(string& id) {
+    this->id = id;
+}
+
+void MyRecord::setName(string& aname) throw (MyException) {
+    this->name = aname;
+}
+
+void MyRecord::setEmail(string& amail) throw (MyException) {
+ //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
+ //   amail = trim(amail);
+ //   boost::match_results<std::string::const_iterator> results;
+ //   if (boost::regex_match(amail, results, validationExpression))
+ //   {
+        this->email = amail;
+ //   }
+ //   else
+ //   {
+ //       string msg = "Email of wrong format";
+ //       throw MyException(msg);
+ //   }
+}
+
+void MyRecord::setInfo(string& info) throw (MyException) {
+    this->info = info;
+}
+
+void MyRecord::setImage(string& imagestr) throw (MyException) {
+    this->image = imagestr;
+}
+
+void MyRecord::addRole(string& anotherrole)  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+    if (it != this->roles.end()) return; // Found it, so don't duplicate
+    roles.push_back(anotherrole);
+}
+
+void MyRecord::removeRole(std::string& oldrole)
+{
+    this->roles.erase(remove(this->roles.begin(),
+        this->roles.end(), oldrole),
+        this->roles.end());
+}
+
+void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
+    if (key.empty() || value.empty()) {
+        string msg = "Empty key or value";
+        throw MyException(msg);
+    }
+    // If same collection/key combination specified more than once, later value
+    // overwrites earlier value for that key.
+
+// Change to allow of rSTL's insert() not allowing for replacement
+    if (collectionname == "Phones") {
+        this->phones[key]=value;
+    } else
+        if (collectionname == "Addresses") {
+        this->addresses[key]=value;
+    } else
+        if (collectionname == "Other") {
+         this->other[key]=value;
+    } else {
+        string errmsg = "There is no collection called " + collectionname;
+        throw MyException(errmsg);
+    }
+}
+
+string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
+
+
+    if (collectionname == "Phones") {
+        return phones.find(key)->second;
+    } else
+        if (collectionname == "Addresses") {
+        return addresses.find(key)->second;
+    } else
+        if (collectionname == "Other") {
+        return other.find(key)->second;
+    }
+
+    string errmsg = "There is no collection called " + collectionname;
+    throw MyException(errmsg);
+
+}
+
+
+bool MyRecord::hasRole(string&  anotherrole) const  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::const_iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+   return(it != this->roles.end()) ;
+}
diff --git a/database/Record.h b/database/Record.h
new file mode 100644
index 0000000..076ae54
--- /dev/null
+++ b/database/Record.h
@@ -0,0 +1,63 @@
+/*
+ * File:        MyRecord.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:18 AM
+ */
+
+#ifndef MYRECORD_H
+#define MYRECORD_H
+#include "MyException.h"
+#include <map>
+#include <string>
+#include <vector>
+using namespace std;
+
+class MyRecord {
+public:
+    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
+    // Mutator functions - setting of other fields
+    // In this version, hardly any of the implementations will actually throw exceptions
+    // later validation functions will be added
+    void setName(std::string& aname) throw (MyException);
+    void setEmail(std::string& amail) throw (MyException);
+    void setInfo(std::string& info) throw (MyException);
+    void setImage(std::string& imagestr) throw (MyException);
+    void addRole(std::string& anotherrole) ;
+    void removeRole(std::string& oldrole);
+    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
+    // Accessor functions
+
+    std::string getID() const { return this->id; }
+    std::string getName() const { return this->name; }
+    std::string getEmail() const { return this->email; }
+    std::string getInfo() const { return this->info; }
+    std::string getImage() const { return this->image; }
+    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
+    const std::vector<std::string>& getRoles() const { return this->roles; }
+    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
+    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
+    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
+
+    bool hasRole(std::string& queryrole) const;
+
+private:
+    std::string id; // Also known as "nickname", or even "primary key"
+    std::string name; // full name
+    std::string email;
+    std::string image;
+    std::string info;
+    std::vector<std::string> roles;
+    std::map<std::string,std::string> phones;
+    std::map<std::string,std::string> addresses;
+    std::map<std::string,std::string> other;
+     // Finally, note that copy constructor and assignment operator are
+    // private (and no implementations will be defined).  I choose to 
+    // disallow such operations.
+    MyRecord(const MyRecord& orig);
+    MyRecord& operator=(const MyRecord&);
+    // Further there is no virtual destructor, I do not intend MyRecord
+    // to be the base class in some hierarchy.
+};
+
+#endif  /* MYRECORD_H */
diff --git a/database/RecordStore.cpp b/database/RecordStore.cpp
new file mode 100644
index 0000000..8000f30
--- /dev/null
+++ b/database/RecordStore.cpp
@@ -0,0 +1,375 @@
+#include "MyRecordStore.h"
+
+#include "cppconn/driver.h"
+#include "cppconn/exception.h"
+#include "cppconn/resultset.h"
+#include "cppconn/statement.h"
+#include "cppconn/prepared_statement.h"
+
+#include <cstring>
+#include <stdlib.h>
+#include <iostream>
+
+#include <vector>
+#include <map>
+#include <string>
+
+using namespace sql;
+
+const char* databaseStr = "tcp://127.0.0.1:3306";
+const char* databaseUserName = "nabg";
+const char* databaseUserPassword = "NotReallyMyPassword";
+const char* databaseSchema = "nabg";
+
+const char* noDB = "Sorry, but was unable to open database so operation failed";
+
+const char* prepareFailed = "Failure when preparing statement";
+const char* bindFailed = "Failure when binding arguments";
+const char* writeFailed = "Failure when writing to database";
+
+MyRecordStore::MyRecordStore()
+{
+        // Constructors should always succeed. But suppose it failed and
+        // the database couldn't be created?
+        invalid = true;
+        driver = get_driver_instance();
+        try {
+                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
+        } catch (sql::SQLException &e) {
+                // Failed
+                return;
+        }
+        dbcon->setSchema(databaseSchema);
+        // It's ok
+        invalid = false;
+}
+
+MyRecordStore::~MyRecordStore()
+{
+        if (!invalid) {
+                this->close();
+        }
+}
+
+void MyRecordStore::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+bool MyRecordStore::exists(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        const char* countrecord = "select count(*) from MyRecord where _id=?";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countrecord);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count = 1;
+}
+
+std::vector<std::string> *MyRecordStore::allKeys()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<std::string> *vptr = new std::vector<std::string>();
+
+        const char* selectall = "select _id from MyRecord";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                std::string anid = rs->getString(1);
+                vptr->push_back(anid);
+        }
+
+        return vptr;
+}
+std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Laboured
+        // First get a list of the ids with the role, then one by one get the
+        // complete records.
+        const char* getrolepersons = "selects personid from roles where _role=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrolepersons);
+        pstmt->setString(1, role);
+        rs = pstmt->executeQuery();
+
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::vector<std::string> people;
+
+        // rc = sqlite3_step(stmt);
+
+        while (rs->next()) {
+                std::string apersonid = std::string(rs->getString(1));
+//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
+                people.push_back(apersonid);
+        }
+
+        // Maybe there weren't any
+        if (people.size() == 0)
+                return NULL;
+
+        // Build collection by getting each record
+        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+
+        std::vector<std::string>::const_iterator it;
+        for (it = people.begin(); it != people.end(); it++) {
+                std::string aperson = *it;
+                MyRecord* rec = this->get(aperson.c_str());
+                roleholders->push_back(rec);
+        }
+
+        return roleholders;
+}
+//
+//      sqlite3_stmt* stmt;
+//      int rc;
+//      rc = sqlite3_prepare_v2(db,
+//              getrolepersons, strlen(getrolepersons),
+//              &stmt, &unused);
+//      if (rc != SQLITE_OK) {
+//              std::cerr << prepareFailed << std::endl;
+//              exit(1);
+//      }
+//
+//      rc = sqlite3_bind_text(stmt, 1, role, -1 , SQLITE_STATIC);
+//      if (rc != SQLITE_OK) {
+//              std::cerr << bindFailed << std::endl;
+//              exit(1);
+//      }
+//      std::vector<std::string> people;
+//
+//      // rc = sqlite3_step(stmt);
+//
+//      while (sqlite3_step(stmt) == SQLITE_ROW) {
+//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
+//              people.push_back(apersonid);
+//      }
+//      sqlite3_finalize(stmt);
+//
+//
+//      // Maybe there weren't any
+//      if (people.size() == 0)
+//              return NULL;
+//
+//      // Build collection by getting each record
+//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+//
+//      std::vector<std::string>::const_iterator it;
+//      for (it = people.begin(); it != people.end(); it++) {
+//              std::string aperson = *it;
+//              MyRecord* rec = this->get(aperson.c_str());
+//              roleholders->push_back(rec);
+//      }
+//      
+//      return roleholders;
+//}     
+
+void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
+{
+
+        if (invalid)
+                throw (noDB);
+
+        // Tiresome
+        // If it exists - delete it
+        if (this->exists(key)) {
+                bool done = this->deleteRecord(key);
+        }
+        // Insert it
+        this->recordToTables(data);
+}
+
+bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // explicitly delete subordinate records in Phones, Address, others and Roles
+        // then delete the myrecord entry
+        // recreating the prepared statements for each operation - costly
+        const char* deletephones = "delete from Phones where idPerson=?";
+        const char* deleteaddress = "delete from Addresses where idPerson=?";
+        const char* deleteother = "delete from Other where idPerson=?";
+        const char* deleteroles = "delete from Roles where idPerson=?";
+        const char* deletemyrecord = "delete from MyRecord where _id=?";
+        const char* unused; // Pointer to unused part of sql string (?)
+        sql::PreparedStatement *pstmt = NULL;
+        // Phones
+        pstmt = dbcon->prepareStatement(deletephones);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Addresses
+        pstmt = dbcon->prepareStatement(deleteaddress);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        //Other
+        pstmt = dbcon->prepareStatement(deleteother);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Roles
+        pstmt = dbcon->prepareStatement(deleteroles);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Finally
+        pstmt = dbcon->prepareStatement(deletemyrecord);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        return true;
+}
+
+MyRecord *MyRecordStore::get(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Again laborious
+        // Load the MyRecord from its table, then add data from Other tables.
+        const char* getrecord = "select * from MyRecord where _id=?";
+        const char* getroles = "select role from Roles where idperson=?";
+        const char* getphones = "select type, number from Phones where idPerson=?";
+        const char* getaddress = "select type, address from Addresses where idPerson=?";
+        const char* getother = "select key, valyue from Other where idPerson=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet *rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrecord);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::string id = rs->getString(1);
+        std::string name = rs->getString(2);
+        std::string email = rs->getString(3);
+        std::string info = rs->getString(4);
+        std::string image = rs->getString(5);
+
+        MyRecord *arec = new MyRecord(id);
+        arec->setName(name);
+        arec->setEmail(email);
+        arec->setInfo(info);
+        arec->setImage(image);
+
+        delete rs;
+        delete pstmt;
+        // =======================================
+        // Now ask about roles
+        pstmt = dbcon->prepareStatement(getroles);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        while (rs->next())
+        {
+                std::string arole = rs->getString(1);
+                arec->addRole(arole);
+        }
+        delete rs;
+        delete pstmt;
+}
+
+void MyRecordStore::recordToTables(const MyRecord* data)
+{
+        if (invalid)
+                throw (noDB);
+
+        // Insert the myrecord data first, then deal with Other data tables
+
+        const char* putmyrecord = "insert into MyRecord values( ?, ?, ?, ?, ?)";
+        const char* putrole = "insert into Roles values(?, ?)";
+        const char* putphone = "insert into Phones values (?, ?, ?)";
+        const char* putaddress = "insert into Addresses values (?, ?, ?)";
+        const char* putother = "insert into Other values (?, ?, ?)";
+
+        sql::PreparedStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(putmyrecord);
+        pstmt->setString(1, data->getID());
+        pstmt->setString(2, data->getName());
+        pstmt->setString(3, data->getEmail());
+        pstmt->setString(4, data->getInfo());
+        pstmt->setString(5, data->getImage());
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // Role 
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+
+//      // Other
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+}
diff --git a/database/RecordStore.h b/database/RecordStore.h
new file mode 100644
index 0000000..261bd0e
--- /dev/null
+++ b/database/RecordStore.h
@@ -0,0 +1,43 @@
+#include <string>
+#include <vector>
+#include "mysql_connection.h"
+#include "mysql_driver.h"
+#include "MyRecord.h"
+
+class MyRecordStore {
+public:
+        MyRecordStore();
+
+        ~MyRecordStore();
+        // Delete - returns false if there wasn't a record with that key
+        bool deleteRecord(const char* key) throw (const char*);
+        // Exists - is there a record with a given key
+        bool exists(const char* key) throw (const char*);
+        // Put - insert/replace a record; returns false if failed
+        // (In this example, key is actually the same as name field in data record)
+        void put(const char* key, const MyRecord *data) throw (const char*);
+        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
+        MyRecord *get(const char*key) throw (const char*);
+
+        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+
+        void close();
+
+        std::vector<std::string> *allKeys();
+
+        bool isOK()
+        {
+                return !(this->invalid);
+        }
+
+private:
+        bool invalid;
+        const char* dbname;
+        sql::Connection *dbcon;
+        sql::Driver *driver;
+        MyRecordStore(const MyRecordStore& orig);
+        MyRecordStore& operator=(const MyRecordStore);
+
+        void recordToTables(const MyRecord *data);
+
+};
diff --git a/database/main.cpp b/database/main.cpp
new file mode 100644
index 0000000..73e16d2
--- /dev/null
+++ b/database/main.cpp
@@ -0,0 +1,122 @@
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "MyRecord.h"
+#include "MyRecordStore.h"
+
+#include <vector>
+
+typedef MyRecord* RecordPtr;
+std::vector<RecordPtr> g_theRecords;
+
+//std::string getImage(std::string filename);
+
+static void createData();
+
+int main(int arc, char *argv[])
+{
+        createData();
+        MyRecordStore astore;
+        if (!astore.isOK())
+        {
+                std::cout << "Failed to open database file" << std::endl;
+                exit(1);
+        }
+
+        vector<RecordPtr>::const_iterator it;
+        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
+        {
+                RecordPtr ptr = (*it);
+                const char* key = ptr->getID().c_str();
+                astore.put(key, ptr);
+                std::cout << "Wrote record " << key << std::endl;
+        }
+        return EXIT_SUCCESS;
+}
+
+//static std::string getImage(std::string filename)
+//{
+//      // Qt library has its own string class, convert STL string
+//      QString qtfilename(filename.c_str());
+//      QImage animage;
+//      bool readimage = animage.load(qtfilename);
+//      if (!readimage)
+//      {
+//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl;
+//              exit(1);
+//      }
+//
+//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);
+//
+//      QByteArray ba;
+//      QBuffer buf(&ba);
+//      resized.save(&buf, "JPG");
+//      
+//      QByteArray coded = ba.toBase64();
+//      std::string result(coded); // relying on QByteArray operator char*
+//      return result;
+//}
+
+static void createData()
+{
+        // Hard code procedural creation of a few records so that can
+        // have some data to show in the Qt based GUI
+        RecordPtr next;
+        std::string id;
+        std::string name;
+        std::string aRole;
+        std::string imagestr;
+        std::string file;
+
+        // You will need to adjust filenames etc to match the image files
+        // that you provide
+        {
+                id = "tom";
+                name = "Thomas";
+                file = "./images/om.jpg";
+//              imagestr = getImage(file);
+                next = new MyRecord(id);
+                next->setName(name);
+//              next->setImage(imagestr);
+                aRole = "Boss";
+                next->addRole(aRole);
+                aRole="Manager";
+                next->addRole(aRole);
+                std::string email = "boos_tom@ourcompany.com.au";
+                next->setEmail(email);
+                std::string phones = "Phones";
+                std::string mbl = "Mobile";
+                std::string phnnum = "04666666666";
+                next->addKeyValue(phones, mbl, phnnum);
+                std::string others = "Other";
+                std::string key = "Height";
+                std::string value = "1.89m";
+                next->addKeyValue(others, key, value);
+                key = "Golf Handicap";
+                value = "6";
+                next->addKeyValue(others, key, value);
+                g_theRecords.push_back(next);
+        }
+        {
+                id = "dick";
+                name = "Dick";
+                file = "./images/dick.jpg";
+//              imagestr = getImage(file);
+                next = new MyRecord(id);
+                next->setName(name);
+//              next->setImage(imagestr);
+                aRole="Accountant";
+                next->addRole(aRole);
+                std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
+                next->setInfo(info);
+                std::string email = "clever_dick@ourcompany.com.au";
+                next->setEmail(email);
+                std::string phones = "Phones";
+                std::string mbl = "Mobile";
+                std::string phnnum = "04666667666";
+                next->addKeyValue(phones, mbl, phnnum);
+                g_theRecords.push_back(next);
+        }
+}
diff --git a/database/stringtrimmer.h b/database/stringtrimmer.h
new file mode 100644
index 0000000..a2d38a1
--- /dev/null
+++ b/database/stringtrimmer.h
@@ -0,0 +1,31 @@
+#ifndef STRINGTRIMMER_H
+#define STRINGTRIMMER_H
+
+#include <algorithm>
+#include <functional>
+#include <cctype>
+#include <locale>
+
+// trim from start
+static inline std::string &ltrim(std::string &s)
+{
+        s.erase(s.begin(), std::find_if(s.begin(), s.end(),
+                std::not1(std::ptr_fun<int, int>(std::isspace))));
+        return s;
+}
+
+//trim from end
+static inline std::string &rtrim(std::string &s)
+{
+        s.erase(std::find_if(s.begin(), s.end(),
+                std::not1(std::ptr_fun<int, int>(std::isspace))), s.end());
+        return s;
+}
+
+//trim from both ends
+static inline std::string &trim(std::string &s)
+{
+        return ltrim(rtrim(s));
+}
+
+#endif
diff --git a/main.cpp b/main.cpp
deleted file mode 100644
index 73e16d2..0000000
--- a/main.cpp
+++ /dev/null
@@ -1,122 +0,0 @@
-#include <cstdlib>
-#include <iostream>
-#include <fstream>
-#include <string>
-
-#include "MyRecord.h"
-#include "MyRecordStore.h"
-
-#include <vector>
-
-typedef MyRecord* RecordPtr;
-std::vector<RecordPtr> g_theRecords;
-
-//std::string getImage(std::string filename);
-
-static void createData();
-
-int main(int arc, char *argv[])
-{
-        createData();
-        MyRecordStore astore;
-        if (!astore.isOK())
-        {
-                std::cout << "Failed to open database file" << std::endl;
-                exit(1);
-        }
-
-        vector<RecordPtr>::const_iterator it;
-        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
-        {
-                RecordPtr ptr = (*it);
-                const char* key = ptr->getID().c_str();
-                astore.put(key, ptr);
-                std::cout << "Wrote record " << key << std::endl;
-        }
-        return EXIT_SUCCESS;
-}
-
-//static std::string getImage(std::string filename)
-//{
-//      // Qt library has its own string class, convert STL string
-//      QString qtfilename(filename.c_str());
-//      QImage animage;
-//      bool readimage = animage.load(qtfilename);
-//      if (!readimage)
-//      {
-//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl;
-//              exit(1);
-//      }
-//
-//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);
-//
-//      QByteArray ba;
-//      QBuffer buf(&ba);
-//      resized.save(&buf, "JPG");
-//      
-//      QByteArray coded = ba.toBase64();
-//      std::string result(coded); // relying on QByteArray operator char*
-//      return result;
-//}
-
-static void createData()
-{
-        // Hard code procedural creation of a few records so that can
-        // have some data to show in the Qt based GUI
-        RecordPtr next;
-        std::string id;
-        std::string name;
-        std::string aRole;
-        std::string imagestr;
-        std::string file;
-
-        // You will need to adjust filenames etc to match the image files
-        // that you provide
-        {
-                id = "tom";
-                name = "Thomas";
-                file = "./images/om.jpg";
-//              imagestr = getImage(file);
-                next = new MyRecord(id);
-                next->setName(name);
-//              next->setImage(imagestr);
-                aRole = "Boss";
-                next->addRole(aRole);
-                aRole="Manager";
-                next->addRole(aRole);
-                std::string email = "boos_tom@ourcompany.com.au";
-                next->setEmail(email);
-                std::string phones = "Phones";
-                std::string mbl = "Mobile";
-                std::string phnnum = "04666666666";
-                next->addKeyValue(phones, mbl, phnnum);
-                std::string others = "Other";
-                std::string key = "Height";
-                std::string value = "1.89m";
-                next->addKeyValue(others, key, value);
-                key = "Golf Handicap";
-                value = "6";
-                next->addKeyValue(others, key, value);
-                g_theRecords.push_back(next);
-        }
-        {
-                id = "dick";
-                name = "Dick";
-                file = "./images/dick.jpg";
-//              imagestr = getImage(file);
-                next = new MyRecord(id);
-                next->setName(name);
-//              next->setImage(imagestr);
-                aRole="Accountant";
-                next->addRole(aRole);
-                std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
-                next->setInfo(info);
-                std::string email = "clever_dick@ourcompany.com.au";
-                next->setEmail(email);
-                std::string phones = "Phones";
-                std::string mbl = "Mobile";
-                std::string phnnum = "04666667666";
-                next->addKeyValue(phones, mbl, phnnum);
-                g_theRecords.push_back(next);
-        }
-}
diff --git a/stringtrimmer.h b/stringtrimmer.h
deleted file mode 100644
index a2d38a1..0000000
--- a/stringtrimmer.h
+++ /dev/null
@@ -1,31 +0,0 @@
-#ifndef STRINGTRIMMER_H
-#define STRINGTRIMMER_H
-
-#include <algorithm>
-#include <functional>
-#include <cctype>
-#include <locale>
-
-// trim from start
-static inline std::string &ltrim(std::string &s)
-{
-        s.erase(s.begin(), std::find_if(s.begin(), s.end(),
-                std::not1(std::ptr_fun<int, int>(std::isspace))));
-        return s;
-}
-
-//trim from end
-static inline std::string &rtrim(std::string &s)
-{
-        s.erase(std::find_if(s.begin(), s.end(),
-                std::not1(std::ptr_fun<int, int>(std::isspace))), s.end());
-        return s;
-}
-
-//trim from both ends
-static inline std::string &trim(std::string &s)
-{
-        return ltrim(rtrim(s));
-}
-
-#endif

commit c828e6ea43cb4ec1948046aba1cd6eb546a1266d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 15:49:42 2014 +1100

    added test cases for date compare

diff --git a/AdminClient/DateTest.cpp b/AdminClient/DateTest.cpp
new file mode 100644
index 0000000..68b8b12
--- /dev/null
+++ b/AdminClient/DateTest.cpp
@@ -0,0 +1,36 @@
+#define BOOST_TEST_DYN_LINK
+#define BOOST_TEST_MODULE CompareTest
+#include <boost/test/unit_test.hpp>
+#include "Date.hpp"
+
+//BOOST_AUTO_TEST_SUITE(CompareTest)
+BOOST_AUTO_TEST_CASE(EqualDates) {
+  Date a;
+  Date b;
+  BOOST_CHECK(a.compare(b));
+  BOOST_CHECK(!b.compare(a));
+}
+
+BOOST_AUTO_TEST_CASE(MonthAheadDayBehind) {
+  Date a;
+  a.day = 1;
+  Date b(0,1,0);
+  BOOST_CHECK(!a.compare(b));
+  BOOST_CHECK(b.compare(a));
+}
+
+BOOST_AUTO_TEST_CASE(YearAheadMonthBehind) {
+  Date a;
+  a.month = 1;
+  Date b(0,0,1);
+  BOOST_CHECK(!a.compare(b));
+  BOOST_CHECK(b.compare(a));
+}
+
+BOOST_AUTO_TEST_CASE(YearBehindDayAhead {
+  Date a;
+  a.year = 1;
+  Date b(1,0,0);
+  BOOST_CHECK(a.compare(b));
+  BOOST_CHECK(!b.compare(a));
+}

commit d2bc98dce474baa3fb1dd369d791b732921affc5
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:31:16 2014 +1100

    Update RecordStore.cpp

diff --git a/RecordStore.cpp b/RecordStore.cpp
index 81533cc..8000f30 100644
--- a/RecordStore.cpp
+++ b/RecordStore.cpp
@@ -82,11 +82,11 @@ bool MyRecordStore::exists(const char* key) throw (const char*)
         return count = 1;
 }
 
-std::vector<string> *MyRecordStore::allKeys()
+std::vector<std::string> *MyRecordStore::allKeys()
 {
         if (invalid)
                 throw (noDB);
-        std::vector<string> *vptr = new std::vector<string>();
+        std::vector<std::string> *vptr = new std::vector<std::string>();
 
         const char* selectall = "select _id from MyRecord";
         sql::PreparedStatement *pstmt = NULL;
@@ -96,13 +96,12 @@ std::vector<string> *MyRecordStore::allKeys()
 
         rs = pstmt->executeQuery();
         while (rs->next()) {
-                string anid = rs->getString(1);
-                vprt->push_back(anid);
+                std::string anid = rs->getString(1);
+                vptr->push_back(anid);
         }
 
-        return vprt;
+        return vptr;
 }
-
 std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
 {
         if (invalid)
@@ -153,63 +152,55 @@ std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const
 
         return roleholders;
 }
-
-vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
-{
-        if (invalid)
-                throw (noDB);
-        // Laboured
-        // First get a list of the ids with the role, then one by one get the
-        // complete records.
-        const char* getrolepersons = "selects personid from roles where _role=?";
-        sqlite3_stmt* stmt;
-        int rc;
-        rc = sqlite3_prepare_v2(db,
-                getrolepersons, strlen(getrolepersons),
-                &stmt, &unused);
-        if (rc != SQLITE_OK) {
-                std::cerr << prepareFailed << std::endl;
-                exit(1);
-        }
-
-        rc = sqlite3_bind_text{stmt, 1, role, -1 , SQLITE_STATIC);
-        if (rc ~= SQLITE_OK) {
-                std::cerr << bindFailed << std::endl;
-                exit(1);
-        }
-        vector<string> people;
-
-        // rc = sqlite3_step(stmt);
-
-        while (sqlite3_step(stmt) == SQLITE_ROW) {
-                const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
-                people.push_back(apersonid);
-        }
-        sqlite3_finalize(stmt);
-
-
-        // Maybe there weren't any
-        if (people.size() == 0)
-                return NULL;
-
-        // Build collection by getting each record
-        vector<MyRecord*> *roleholders = new vector<MyRecord*>();
-
-        vector<string>::const_iterator it;
-        for (it = people.begin(); it != people.end(); it++) {
-                string aperson = *it;
-                MyRecord* rec = this->get(aperson.c_str());
-                roleholders->push_back(rec);
-        }
-
-        return roleholders;
-}
+//
+//      sqlite3_stmt* stmt;
+//      int rc;
+//      rc = sqlite3_prepare_v2(db,
+//              getrolepersons, strlen(getrolepersons),
+//              &stmt, &unused);
+//      if (rc != SQLITE_OK) {
+//              std::cerr << prepareFailed << std::endl;
+//              exit(1);
+//      }
+//
+//      rc = sqlite3_bind_text(stmt, 1, role, -1 , SQLITE_STATIC);
+//      if (rc != SQLITE_OK) {
+//              std::cerr << bindFailed << std::endl;
+//              exit(1);
+//      }
+//      std::vector<std::string> people;
+//
+//      // rc = sqlite3_step(stmt);
+//
+//      while (sqlite3_step(stmt) == SQLITE_ROW) {
+//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
+//              people.push_back(apersonid);
+//      }
+//      sqlite3_finalize(stmt);
+//
+//
+//      // Maybe there weren't any
+//      if (people.size() == 0)
+//              return NULL;
+//
+//      // Build collection by getting each record
+//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+//
+//      std::vector<std::string>::const_iterator it;
+//      for (it = people.begin(); it != people.end(); it++) {
+//              std::string aperson = *it;
+//              MyRecord* rec = this->get(aperson.c_str());
+//              roleholders->push_back(rec);
+//      }
+//      
+//      return roleholders;
+//}     
 
 void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
 {
 
         if (invalid)
-                throw (noDb);
+                throw (noDB);
 
         // Tiresome
         // If it exists - delete it
@@ -231,6 +222,7 @@ bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
         const char* deleteaddress = "delete from Addresses where idPerson=?";
         const char* deleteother = "delete from Other where idPerson=?";
         const char* deleteroles = "delete from Roles where idPerson=?";
+        const char* deletemyrecord = "delete from MyRecord where _id=?";
         const char* unused; // Pointer to unused part of sql string (?)
         sql::PreparedStatement *pstmt = NULL;
         // Phones
@@ -243,7 +235,7 @@ bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
         pstmt = dbcon->prepareStatement(deleteaddress);
         pstmt->setString(1, key);
         pstmt->executeUpdate();
-        delete ptmst;
+        delete pstmt;
 
         //Other
         pstmt = dbcon->prepareStatement(deleteother);
@@ -292,11 +284,11 @@ MyRecord *MyRecordStore::get(const char* key) throw (const char*)
                 return NULL;
         }
 
-        string id = rs->getString(1);
-        string name = rs->getString(2);
-        string email = rs->getString(3);
-        string info = rs->getString(4);
-        string image = rs->getString(5);
+        std::string id = rs->getString(1);
+        std::string name = rs->getString(2);
+        std::string email = rs->getString(3);
+        std::string info = rs->getString(4);
+        std::string image = rs->getString(5);
 
         MyRecord *arec = new MyRecord(id);
         arec->setName(name);
@@ -313,7 +305,7 @@ MyRecord *MyRecordStore::get(const char* key) throw (const char*)
         rs = pstmt->executeQuery();
         while (rs->next())
         {
-                string arole = rs->getString(1);
+                std::string arole = rs->getString(1);
                 arec->addRole(arole);
         }
         delete rs;
@@ -333,7 +325,7 @@ void MyRecordStore::recordToTables(const MyRecord* data)
         const char* putaddress = "insert into Addresses values (?, ?, ?)";
         const char* putother = "insert into Other values (?, ?, ?)";
 
-        sql::PrepareStatement *pstmt = NULL;
+        sql::PreparedStatement *pstmt = NULL;
         pstmt = dbcon->prepareStatement(putmyrecord);
         pstmt->setString(1, data->getID());
         pstmt->setString(2, data->getName());
@@ -380,6 +372,4 @@ void MyRecordStore::recordToTables(const MyRecord* data)
 //              delete pstmt;
 //
 //      }
-
 }
-

commit 4058e2912626447ff16951ef8106e0decee67938
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 15:29:53 2014 +1100

    fixed up spelling mistakes and syntax

diff --git a/Algo b/Algo
index b43c4ca..4acf67f 100644
--- a/Algo
+++ b/Algo
@@ -1,19 +1,19 @@
 Algo:
 
 
-struct Reviewer
+struct ReviewerBid
 {
 	int score;
 	int reviewerID;
 };
 
-Class PaperForReview
+class PaperForReview
 {
 	private:
 		int paperID;
 
 
-		Reviewer[numOfReqReviewrs];
+		ReviewerBid[numOfReqReviewrs] reviewerBids;
 
 		std::vector<int> authors;
 		std::vector<int> involvedOrganisation;
@@ -41,24 +41,24 @@ void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
 int PaperForReview::getMinScore()
 {
 	int minScore = -1;
-	for(int i=0; i< NumOfReqReviewrs; i++)
+	for(int i=0; i<NumOfReqReviewers; i++)
 	{
-		if(Reviewer[i].score < minScore)
-			minScore = Reviewer[i].score;
+		if(reviewerBids[i].score < minScore)
+			minScore = reviewerBids[i].score;
 	}
-	return i
+	return minScore;
 }
 
 void setNewReviewer(int newScore, int newReviewer)
 {
 
 	minScore = getMinScore();
-	for(int i=0; i< NumOfReqReviewrs; i++)
+	for(int i=0; i< NumOfReqReviewers; i++)
 	{
-		if(Reviewer[i].score < minScore)
+		if(reviewerBids[i].score < minScore)
 		{
-			Reviewer[i].score = newScore;
-			Reviewer[i].reviewerID =  newReviewer;
+			reviewerBids[i].score = newScore;
+			reviewerBids[i].reviewerID =  newReviewer;
 			i=  NumOfReqReviewrs;
 		}
 	}
@@ -76,18 +76,18 @@ PaperForReview::PaperForReview(int newPaperID)
 	
 	for(int i=0; i< NumOfReqReviewrs; i++)
 	{
-		Reviewer[i].score = -1;
+		reviewerBids[i].score = -1;
 	}
 }
 
 
 void PaperForReview::addAuthor(int newAuthor)
 {
-	authors.pushBack(newAuthor);
+	authors.push_back(newAuthor);
 }
 
 //TODO
-void  PaperForReview::conflictingReviewers
+void  PaperForReview::conflictingReviewers()
 {
 	//authors
 		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());
@@ -130,7 +130,7 @@ void readInAllPapers()
 
 
 
-int caclculateScore(int userID, int paperID)
+int calculateScore(int userID, int paperID)
 {
 	int score = 1;
 

commit 3dd2be0dd3b73d5ca26b2fc9060608c8f61b211c
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:28:44 2014 +1100

    Update RecordStore.h

diff --git a/RecordStore.h b/RecordStore.h
index 732af5a..261bd0e 100644
--- a/RecordStore.h
+++ b/RecordStore.h
@@ -19,7 +19,7 @@ public:
         // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
         MyRecord *get(const char*key) throw (const char*);
 
-        vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+        std::vector<MyRecord*> *getInRole(const char* role) throw (const char*);
 
         void close();
 
@@ -32,9 +32,9 @@ public:
 
 private:
         bool invalid;
-        const char* *dbcon;
+        const char* dbname;
         sql::Connection *dbcon;
-        sql::Drive *driver;
+        sql::Driver *driver;
         MyRecordStore(const MyRecordStore& orig);
         MyRecordStore& operator=(const MyRecordStore);
 

commit e933baf8992ec2f188b04ea745416eaad685819e
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:28:19 2014 +1100

    Update Record.cpp

diff --git a/Record.cpp b/Record.cpp
index 47020db..73124b8 100644
--- a/Record.cpp
+++ b/Record.cpp
@@ -53,7 +53,6 @@ private:
 
 //#include <boost/regex.hpp>
 
-
 MyRecord::MyRecord(string& id) {
     this->id = id;
 }
@@ -77,7 +76,6 @@ void MyRecord::setEmail(string& amail) throw (MyException) {
  //   }
 }
 
-
 void MyRecord::setInfo(string& info) throw (MyException) {
     this->info = info;
 }
@@ -110,14 +108,15 @@ void MyRecord::addKeyValue(string& collectionname, string& key, string& value) t
     // If same collection/key combination specified more than once, later value
     // overwrites earlier value for that key.
 
+// Change to allow of rSTL's insert() not allowing for replacement
     if (collectionname == "Phones") {
-        this->phones.insert(pair<string,string> (key, value));
+        this->phones[key]=value;
     } else
         if (collectionname == "Addresses") {
-        this->addresses.insert(pair<string,string> (key, value));
+        this->addresses[key]=value;
     } else
         if (collectionname == "Other") {
-         this->other.insert(pair<string,string> (key, value));
+         this->other[key]=value;
     } else {
         string errmsg = "There is no collection called " + collectionname;
         throw MyException(errmsg);
@@ -136,6 +135,7 @@ string MyRecord::getAttribute(string& collectionname, string& key) const throw (
         if (collectionname == "Other") {
         return other.find(key)->second;
     }
+
     string errmsg = "There is no collection called " + collectionname;
     throw MyException(errmsg);
 
@@ -149,4 +149,3 @@ bool MyRecord::hasRole(string&  anotherrole) const  {
     it = find(this->roles.begin(), this->roles.end(), anotherrole);
    return(it != this->roles.end()) ;
 }
-                                                     

commit c2b0495b0f928228dbdd37894f0e186f61e21256
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:27:29 2014 +1100

    Update Record.h

diff --git a/Record.h b/Record.h
index 0b1405a..076ae54 100644
--- a/Record.h
+++ b/Record.h
@@ -1,151 +1,63 @@
-*
- * File:        MyRecord.cpp
+/*
+ * File:        MyRecord.h
  * Author:      nabg
- * 
- * Created on 23 November 2012, 1:25 PM
- * 
- * See MyRecord.h for some explanation!
- * 
- * class MyRecord {
-public:
-    explicit MyRecord(string& id); 
-    void setName(string& aname) throw (MyException);
-    void setEmail(string& amail) throw (MyException);
-    void setInfo(string& info) throw (MyException);
-    void setImage(string& imagestr) throw (MyException);
-    void addRole(string& anotherrole) throw (MyException);
-    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
-
-    string getID() const { return this->id; }
-    string getName() const { return this->name; }
-    string getEmail() const { return this->email; }
-    string getInfo() const { return this->info; }
-    string getImage() const { return this->image; }
-    string getAttribute(string& collectionname, string& key) const throw(MyException);
-    vector<string> getRoles() const { return this->roles; }
-    map<string,string> getPhones() const { return this->phones; }
-    map<string,string> getAddresses() const { return this->addresses; }
-    map<string,string> getOtherKV() const { return this->other; }
-    
-    bool hasRole(string& queryrole) const;
-    
-private:
-    string id; 
-    string name; 
-    string email; 
-    string image;
-    string info;
-    vector<string> roles;
-    map<string,string> phones;
-    map<string,string> addresses;
-    map<string,string> other;
-
-
-
- * 
- * 
+ *
+ * Created on 27 November 2012, 11:18 AM
  */
 
+#ifndef MYRECORD_H
+#define MYRECORD_H
+#include "MyException.h"
+#include <map>
+#include <string>
 #include <vector>
-#include <algorithm>
-#include "MyRecord.h"
-#include "stringtrimmer.h"
-
-//#include <boost/regex.hpp>
-
-MyRecord::MyRecord(string& id) {
-    this->id = id;
-}
-
-void MyRecord::setName(string& aname) throw (MyException) {
-    this->name = aname;
-}
-
-void MyRecord::setEmail(string& amail) throw (MyException) {
- //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
- //   amail = trim(amail);
- //   boost::match_results<std::string::const_iterator> results;
- //   if (boost::regex_match(amail, results, validationExpression))
- //   {
-        this->email = amail;
- //   }
- //   else
- //   {
- //       string msg = "Email of wrong format";
- //       throw MyException(msg);
- //   }
-}
-
-void MyRecord::setInfo(string& info) throw (MyException) {
-    this->info = info;
-}
-
-void MyRecord::setImage(string& imagestr) throw (MyException) {
-    this->image = imagestr;
-}
-
-void MyRecord::addRole(string& anotherrole)  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-    if (it != this->roles.end()) return; // Found it, so don't duplicate
-    roles.push_back(anotherrole);
-}
-
-void MyRecord::removeRole(std::string& oldrole)
-{
-    this->roles.erase(remove(this->roles.begin(),
-        this->roles.end(), oldrole),
-        this->roles.end());
-}
-
-void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
-    if (key.empty() || value.empty()) {
-        string msg = "Empty key or value";
-        throw MyException(msg);
-    }
-    // If same collection/key combination specified more than once, later value
-    // overwrites earlier value for that key.
-
-// Change to allow of rSTL's insert() not allowing for replacement
-    if (collectionname == "Phones") {
-        this->phones[key]=value;
-    } else
-        if (collectionname == "Addresses") {
-        this->addresses[key]=value;
-    } else
-        if (collectionname == "Other") {
-         this->other[key]=value;
-    } else {
-        string errmsg = "There is no collection called " + collectionname;
-        throw MyException(errmsg);
-    }
-}
-
-string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
-
-
-    if (collectionname == "Phones") {
-        return phones.find(key)->second;
-    } else
-        if (collectionname == "Addresses") {
-        return addresses.find(key)->second;
-    } else
-        if (collectionname == "Other") {
-        return other.find(key)->second;
-    }
-
-    string errmsg = "There is no collection called " + collectionname;
-    throw MyException(errmsg);
-
-}
+using namespace std;
 
+class MyRecord {
+public:
+    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
+    // Mutator functions - setting of other fields
+    // In this version, hardly any of the implementations will actually throw exceptions
+    // later validation functions will be added
+    void setName(std::string& aname) throw (MyException);
+    void setEmail(std::string& amail) throw (MyException);
+    void setInfo(std::string& info) throw (MyException);
+    void setImage(std::string& imagestr) throw (MyException);
+    void addRole(std::string& anotherrole) ;
+    void removeRole(std::string& oldrole);
+    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
+    // Accessor functions
+
+    std::string getID() const { return this->id; }
+    std::string getName() const { return this->name; }
+    std::string getEmail() const { return this->email; }
+    std::string getInfo() const { return this->info; }
+    std::string getImage() const { return this->image; }
+    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
+    const std::vector<std::string>& getRoles() const { return this->roles; }
+    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
+    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
+    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
+
+    bool hasRole(std::string& queryrole) const;
 
-bool MyRecord::hasRole(string&  anotherrole) const  {
-    // Should it be an error to specify the same role more than once? No, it
-    // will not really matter - so don't throw exception, just don't duplicate.
-    vector<string>::const_iterator it;
-    it = find(this->roles.begin(), this->roles.end(), anotherrole);
-   return(it != this->roles.end()) ;
-}
+private:
+    std::string id; // Also known as "nickname", or even "primary key"
+    std::string name; // full name
+    std::string email;
+    std::string image;
+    std::string info;
+    std::vector<std::string> roles;
+    std::map<std::string,std::string> phones;
+    std::map<std::string,std::string> addresses;
+    std::map<std::string,std::string> other;
+     // Finally, note that copy constructor and assignment operator are
+    // private (and no implementations will be defined).  I choose to 
+    // disallow such operations.
+    MyRecord(const MyRecord& orig);
+    MyRecord& operator=(const MyRecord&);
+    // Further there is no virtual destructor, I do not intend MyRecord
+    // to be the base class in some hierarchy.
+};
+
+#endif  /* MYRECORD_H */

commit 708c88119252f2568d8f33509bc470108af1fb4a
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:25:57 2014 +1100

    Update Record.h

diff --git a/Record.h b/Record.h
index 105d419..0b1405a 100644
--- a/Record.h
+++ b/Record.h
@@ -1,63 +1,151 @@
 *
- * File:        MyRecord.h
+ * File:        MyRecord.cpp
  * Author:      nabg
- *
- * Created on 27 November 2012, 11:18 AM
+ * 
+ * Created on 23 November 2012, 1:25 PM
+ * 
+ * See MyRecord.h for some explanation!
+ * 
+ * class MyRecord {
+public:
+    explicit MyRecord(string& id); 
+    void setName(string& aname) throw (MyException);
+    void setEmail(string& amail) throw (MyException);
+    void setInfo(string& info) throw (MyException);
+    void setImage(string& imagestr) throw (MyException);
+    void addRole(string& anotherrole) throw (MyException);
+    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
+
+    string getID() const { return this->id; }
+    string getName() const { return this->name; }
+    string getEmail() const { return this->email; }
+    string getInfo() const { return this->info; }
+    string getImage() const { return this->image; }
+    string getAttribute(string& collectionname, string& key) const throw(MyException);
+    vector<string> getRoles() const { return this->roles; }
+    map<string,string> getPhones() const { return this->phones; }
+    map<string,string> getAddresses() const { return this->addresses; }
+    map<string,string> getOtherKV() const { return this->other; }
+    
+    bool hasRole(string& queryrole) const;
+    
+private:
+    string id; 
+    string name; 
+    string email; 
+    string image;
+    string info;
+    vector<string> roles;
+    map<string,string> phones;
+    map<string,string> addresses;
+    map<string,string> other;
+
+
+
+ * 
+ * 
  */
 
-#ifndef MYRECORD_H
-#define MYRECORD_H
-#include "MyException.h"
-#include <map>
-#include <string>
 #include <vector>
-using namespace std;
+#include <algorithm>
+#include "MyRecord.h"
+#include "stringtrimmer.h"
 
-class MyRecord {
-public:
-    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
-    // Mutator functions - setting of other fields
-    // In this version, hardly any of the implementations will actually throw exceptions
-    // later validation functions will be added
-    void setName(std::string& aname) throw (MyException);
-    void setEmail(std::string& amail) throw (MyException);
-    void setInfo(std::string& info) throw (MyException);
-    void setImage(std::string& imagestr) throw (MyException);
-    void addRole(std::string& anotherrole) ;
-    void removeRole(std::string& oldrole);
-    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
-    // Accessor functions
-
-    std::string getID() const { return this->id; }
-    std::string getName() const { return this->name; }
-    std::string getEmail() const { return this->email; }
-    std::string getInfo() const { return this->info; }
-    std::string getImage() const { return this->image; }
-    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
-    const std::vector<std::string>& getRoles() const { return this->roles; }
-    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
-    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
-    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
-
-    bool hasRole(std::string& queryrole) const;
+//#include <boost/regex.hpp>
 
-private:
-    std::string id; // Also known as "nickname", or even "primary key"
-    std::string name; // full name
-    std::string email;
-    std::string image;
-    std::string info;
-    std::vector<std::string> roles;
-    std::map<std::string,std::string> phones;
-    std::map<std::string,std::string> addresses;
-    std::map<std::string,std::string> other;
-     // Finally, note that copy constructor and assignment operator are
-    // private (and no implementations will be defined).  I choose to 
-    // disallow such operations.
-    MyRecord(const MyRecord& orig);
-    MyRecord& operator=(const MyRecord&);
-    // Further there is no virtual destructor, I do not intend MyRecord
-    // to be the base class in some hierarchy.
-};
-
-#endif  /* MYRECORD_H */
+MyRecord::MyRecord(string& id) {
+    this->id = id;
+}
+
+void MyRecord::setName(string& aname) throw (MyException) {
+    this->name = aname;
+}
+
+void MyRecord::setEmail(string& amail) throw (MyException) {
+ //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
+ //   amail = trim(amail);
+ //   boost::match_results<std::string::const_iterator> results;
+ //   if (boost::regex_match(amail, results, validationExpression))
+ //   {
+        this->email = amail;
+ //   }
+ //   else
+ //   {
+ //       string msg = "Email of wrong format";
+ //       throw MyException(msg);
+ //   }
+}
+
+void MyRecord::setInfo(string& info) throw (MyException) {
+    this->info = info;
+}
+
+void MyRecord::setImage(string& imagestr) throw (MyException) {
+    this->image = imagestr;
+}
+
+void MyRecord::addRole(string& anotherrole)  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+    if (it != this->roles.end()) return; // Found it, so don't duplicate
+    roles.push_back(anotherrole);
+}
+
+void MyRecord::removeRole(std::string& oldrole)
+{
+    this->roles.erase(remove(this->roles.begin(),
+        this->roles.end(), oldrole),
+        this->roles.end());
+}
+
+void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
+    if (key.empty() || value.empty()) {
+        string msg = "Empty key or value";
+        throw MyException(msg);
+    }
+    // If same collection/key combination specified more than once, later value
+    // overwrites earlier value for that key.
+
+// Change to allow of rSTL's insert() not allowing for replacement
+    if (collectionname == "Phones") {
+        this->phones[key]=value;
+    } else
+        if (collectionname == "Addresses") {
+        this->addresses[key]=value;
+    } else
+        if (collectionname == "Other") {
+         this->other[key]=value;
+    } else {
+        string errmsg = "There is no collection called " + collectionname;
+        throw MyException(errmsg);
+    }
+}
+
+string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
+
+
+    if (collectionname == "Phones") {
+        return phones.find(key)->second;
+    } else
+        if (collectionname == "Addresses") {
+        return addresses.find(key)->second;
+    } else
+        if (collectionname == "Other") {
+        return other.find(key)->second;
+    }
+
+    string errmsg = "There is no collection called " + collectionname;
+    throw MyException(errmsg);
+
+}
+
+
+bool MyRecord::hasRole(string&  anotherrole) const  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::const_iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+   return(it != this->roles.end()) ;
+}

commit ffb92b4d8f7267cb3235eb84b33ba339a674f5e2
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:25:02 2014 +1100

    Update Record.h

diff --git a/Record.h b/Record.h
index 3940935..105d419 100644
--- a/Record.h
+++ b/Record.h
@@ -1,4 +1,4 @@
-/*
+*
  * File:        MyRecord.h
  * Author:      nabg
  *
@@ -9,45 +9,48 @@
 #define MYRECORD_H
 #include "MyException.h"
 #include <map>
+#include <string>
+#include <vector>
 using namespace std;
 
 class MyRecord {
 public:
-    explicit MyRecord(string& id); // I don't want implicit conversion from std::string to MyRecord!
+    explicit MyRecord(std::string& id); // I don't want implicit conversion from std::std::string to MyRecord!
     // Mutator functions - setting of other fields
     // In this version, hardly any of the implementations will actually throw exceptions
     // later validation functions will be added
-    void setName(string& aname) throw (MyException);
-    void setEmail(string& amail) throw (MyException);
-    void setInfo(string& info) throw (MyException);
-    void setImage(string& imagestr) throw (MyException);
-    void addRole(string& anotherrole) ;
-    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
+    void setName(std::string& aname) throw (MyException);
+    void setEmail(std::string& amail) throw (MyException);
+    void setInfo(std::string& info) throw (MyException);
+    void setImage(std::string& imagestr) throw (MyException);
+    void addRole(std::string& anotherrole) ;
+    void removeRole(std::string& oldrole);
+    void addKeyValue(std::string& collectionname, std::string& key, std::string& value) throw(MyException);
     // Accessor functions
 
-    string getID() const { return this->id; }
-    string getName() const { return this->name; }
-    string getEmail() const { return this->email; }
-    string getInfo() const { return this->info; }
-    string getImage() const { return this->image; }
-    string getAttribute(string& collectionname, string& key) const throw(MyException);
-    const vector<string>& getRoles() const { return this->roles; }
-    const map<string,string>& getPhones() const { return this->phones; }
-    const map<string,string>& getAddresses() const { return this->addresses; }
-    const map<string,string>& getOtherKV() const { return this->other; }
-    
-    bool hasRole(string& queryrole) const;
-    
+    std::string getID() const { return this->id; }
+    std::string getName() const { return this->name; }
+    std::string getEmail() const { return this->email; }
+    std::string getInfo() const { return this->info; }
+    std::string getImage() const { return this->image; }
+    std::string getAttribute(std::string& collectionname, std::string& key) const throw(MyException);
+    const std::vector<std::string>& getRoles() const { return this->roles; }
+    const std::map<std::string,std::string>& getPhones() const { return this->phones; }
+    const std::map<std::string,std::string>& getAddresses() const { return this->addresses; }
+    const std::map<std::string,std::string>& getOtherKV() const { return this->other; }
+
+    bool hasRole(std::string& queryrole) const;
+
 private:
-    string id; // Also known as "nickname", or even "primary key"
-    string name; // full name
-    string email; 
-    string image;
-    string info;
-    vector<string> roles;
-    map<string,string> phones;
-    map<string,string> addresses;
-    map<string,string> other;
+    std::string id; // Also known as "nickname", or even "primary key"
+    std::string name; // full name
+    std::string email;
+    std::string image;
+    std::string info;
+    std::vector<std::string> roles;
+    std::map<std::string,std::string> phones;
+    std::map<std::string,std::string> addresses;
+    std::map<std::string,std::string> other;
      // Finally, note that copy constructor and assignment operator are
     // private (and no implementations will be defined).  I choose to 
     // disallow such operations.

commit 6a3eb6fe355d1d9d4c03f40b0257495af6eb9595
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:19:15 2014 +1100

    Create stringtrimmer.h

diff --git a/stringtrimmer.h b/stringtrimmer.h
new file mode 100644
index 0000000..a2d38a1
--- /dev/null
+++ b/stringtrimmer.h
@@ -0,0 +1,31 @@
+#ifndef STRINGTRIMMER_H
+#define STRINGTRIMMER_H
+
+#include <algorithm>
+#include <functional>
+#include <cctype>
+#include <locale>
+
+// trim from start
+static inline std::string &ltrim(std::string &s)
+{
+        s.erase(s.begin(), std::find_if(s.begin(), s.end(),
+                std::not1(std::ptr_fun<int, int>(std::isspace))));
+        return s;
+}
+
+//trim from end
+static inline std::string &rtrim(std::string &s)
+{
+        s.erase(std::find_if(s.begin(), s.end(),
+                std::not1(std::ptr_fun<int, int>(std::isspace))), s.end());
+        return s;
+}
+
+//trim from both ends
+static inline std::string &trim(std::string &s)
+{
+        return ltrim(rtrim(s));
+}
+
+#endif

commit 6b3fdd79289e6b1b8c7a26dd965744ef4c76ee29
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:18:28 2014 +1100

    Create main.cpp

diff --git a/main.cpp b/main.cpp
new file mode 100644
index 0000000..73e16d2
--- /dev/null
+++ b/main.cpp
@@ -0,0 +1,122 @@
+#include <cstdlib>
+#include <iostream>
+#include <fstream>
+#include <string>
+
+#include "MyRecord.h"
+#include "MyRecordStore.h"
+
+#include <vector>
+
+typedef MyRecord* RecordPtr;
+std::vector<RecordPtr> g_theRecords;
+
+//std::string getImage(std::string filename);
+
+static void createData();
+
+int main(int arc, char *argv[])
+{
+        createData();
+        MyRecordStore astore;
+        if (!astore.isOK())
+        {
+                std::cout << "Failed to open database file" << std::endl;
+                exit(1);
+        }
+
+        vector<RecordPtr>::const_iterator it;
+        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)
+        {
+                RecordPtr ptr = (*it);
+                const char* key = ptr->getID().c_str();
+                astore.put(key, ptr);
+                std::cout << "Wrote record " << key << std::endl;
+        }
+        return EXIT_SUCCESS;
+}
+
+//static std::string getImage(std::string filename)
+//{
+//      // Qt library has its own string class, convert STL string
+//      QString qtfilename(filename.c_str());
+//      QImage animage;
+//      bool readimage = animage.load(qtfilename);
+//      if (!readimage)
+//      {
+//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl;
+//              exit(1);
+//      }
+//
+//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);
+//
+//      QByteArray ba;
+//      QBuffer buf(&ba);
+//      resized.save(&buf, "JPG");
+//      
+//      QByteArray coded = ba.toBase64();
+//      std::string result(coded); // relying on QByteArray operator char*
+//      return result;
+//}
+
+static void createData()
+{
+        // Hard code procedural creation of a few records so that can
+        // have some data to show in the Qt based GUI
+        RecordPtr next;
+        std::string id;
+        std::string name;
+        std::string aRole;
+        std::string imagestr;
+        std::string file;
+
+        // You will need to adjust filenames etc to match the image files
+        // that you provide
+        {
+                id = "tom";
+                name = "Thomas";
+                file = "./images/om.jpg";
+//              imagestr = getImage(file);
+                next = new MyRecord(id);
+                next->setName(name);
+//              next->setImage(imagestr);
+                aRole = "Boss";
+                next->addRole(aRole);
+                aRole="Manager";
+                next->addRole(aRole);
+                std::string email = "boos_tom@ourcompany.com.au";
+                next->setEmail(email);
+                std::string phones = "Phones";
+                std::string mbl = "Mobile";
+                std::string phnnum = "04666666666";
+                next->addKeyValue(phones, mbl, phnnum);
+                std::string others = "Other";
+                std::string key = "Height";
+                std::string value = "1.89m";
+                next->addKeyValue(others, key, value);
+                key = "Golf Handicap";
+                value = "6";
+                next->addKeyValue(others, key, value);
+                g_theRecords.push_back(next);
+        }
+        {
+                id = "dick";
+                name = "Dick";
+                file = "./images/dick.jpg";
+//              imagestr = getImage(file);
+                next = new MyRecord(id);
+                next->setName(name);
+//              next->setImage(imagestr);
+                aRole="Accountant";
+                next->addRole(aRole);
+                std::string info = "Dick was recruited from starbucks and so knows how to set up \na company so that pays no tax";
+                next->setInfo(info);
+                std::string email = "clever_dick@ourcompany.com.au";
+                next->setEmail(email);
+                std::string phones = "Phones";
+                std::string mbl = "Mobile";
+                std::string phnnum = "04666667666";
+                next->addKeyValue(phones, mbl, phnnum);
+                g_theRecords.push_back(next);
+        }
+}

commit 8b9a6b8f3353de5132aec08cc65a1beec8126bfe
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:16:53 2014 +1100

    Update RecordStore.cpp

diff --git a/RecordStore.cpp b/RecordStore.cpp
index a5c7f34..81533cc 100644
--- a/RecordStore.cpp
+++ b/RecordStore.cpp
@@ -1,12 +1,21 @@
 #include "MyRecordStore.h"
+
 #include "cppconn/driver.h"
 #include "cppconn/exception.h"
+#include "cppconn/resultset.h"
+#include "cppconn/statement.h"
 #include "cppconn/prepared_statement.h"
 
 #include <cstring>
 #include <stdlib.h>
 #include <iostream>
 
+#include <vector>
+#include <map>
+#include <string>
+
+using namespace sql;
+
 const char* databaseStr = "tcp://127.0.0.1:3306";
 const char* databaseUserName = "nabg";
 const char* databaseUserPassword = "NotReallyMyPassword";
@@ -94,6 +103,57 @@ std::vector<string> *MyRecordStore::allKeys()
         return vprt;
 }
 
+std::vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Laboured
+        // First get a list of the ids with the role, then one by one get the
+        // complete records.
+        const char* getrolepersons = "selects personid from roles where _role=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrolepersons);
+        pstmt->setString(1, role);
+        rs = pstmt->executeQuery();
+
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        std::vector<std::string> people;
+
+        // rc = sqlite3_step(stmt);
+
+        while (rs->next()) {
+                std::string apersonid = std::string(rs->getString(1));
+//              const char* apersonid = reinterpret_cast<const char*> (rs->getString(2));
+                people.push_back(apersonid);
+        }
+
+        // Maybe there weren't any
+        if (people.size() == 0)
+                return NULL;
+
+        // Build collection by getting each record
+        std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
+
+        std::vector<std::string>::const_iterator it;
+        for (it = people.begin(); it != people.end(); it++) {
+                std::string aperson = *it;
+                MyRecord* rec = this->get(aperson.c_str());
+                roleholders->push_back(rec);
+        }
+
+        return roleholders;
+}
+
 vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
 {
         if (invalid)
@@ -286,39 +346,40 @@ void MyRecordStore::recordToTables(const MyRecord* data)
         delete pstmt;
 
         // Role 
-        if (data->getOtherKV().size() > 0)
-        {
-                pstmt = dbcon->prepareStatement(putother);
-                map<string, string>:const_iterator it;
-                for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-                {
-                        string akey = it->first;
-                        string avalue = it->second;
-                        pstmt->setString(1, data->getID());
-                        pstmt->setString(2, akey);
-                        pstmt->setString(3, avalue);
-                        pstmt->excuteUpdate();
-                }
-                delete pstmt;
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getRoles().begin(); it != data->getRoles().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
+
+//      // Other
+//      if (data->getOtherKV().size() > 0)
+//      {
+//              pstmt = dbcon->prepareStatement(putother);
+//              std::map<std::string, std::string>::const_iterator it;
+//              for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+//              {
+//                      std::string akey = it->first;
+//                      std::string avalue = it->second;
+//                      pstmt->setString(1, data->getID());
+//                      pstmt->setString(2, akey);
+//                      pstmt->setString(3, avalue);
+//                      pstmt->executeUpdate();
+//              }
+//              delete pstmt;
+//
+//      }
 
-        }
-
-        // Other
-        if (data->getOtherKV().size() > 0)
-        {
-                pstmt = dbcon->prepareStatement(putother);
-                map<string, string>:const_iterator it;
-                for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
-                {
-                        string akey = it->first;
-                        string avalue = it->second;
-                        pstmt->setString(1, data->getID());
-                        pstmt->setString(2, akey);
-                        pstmt->setString(3, avalue);
-                        pstmt->excuteUpdate();
-                }
-                delete pstmt;
-
-        }
 }
 

commit b5deabdedface8e65ee760b9f648b9ca7fce116e
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:13:26 2014 +1100

    Update RecordStore.h

diff --git a/RecordStore.h b/RecordStore.h
index 8c9f03d..732af5a 100644
--- a/RecordStore.h
+++ b/RecordStore.h
@@ -23,7 +23,7 @@ public:
 
         void close();
 
-        std::vector,string> *allKeys();
+        std::vector<std::string> *allKeys();
 
         bool isOK()
         {
@@ -32,6 +32,7 @@ public:
 
 private:
         bool invalid;
+        const char* *dbcon;
         sql::Connection *dbcon;
         sql::Drive *driver;
         MyRecordStore(const MyRecordStore& orig);

commit 8b94c33bcf43266f4340e75b649ee9149082091f
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Oct 19 15:11:37 2014 +1100

    Update Record.cpp

diff --git a/Record.cpp b/Record.cpp
index 23e956c..47020db 100644
--- a/Record.cpp
+++ b/Record.cpp
@@ -49,6 +49,10 @@ private:
 #include <vector>
 #include <algorithm>
 #include "MyRecord.h"
+#include "stringtrimmer.h"
+
+//#include <boost/regex.hpp>
+
 
 MyRecord::MyRecord(string& id) {
     this->id = id;
@@ -59,9 +63,21 @@ void MyRecord::setName(string& aname) throw (MyException) {
 }
 
 void MyRecord::setEmail(string& amail) throw (MyException) {
-    this->email = amail;
+ //   boost::regex validationExpression("^[a-z0-9_\\+-]+(\\.[a-z0-9_\\+-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*\\.([a-z]{2,4})$");
+ //   amail = trim(amail);
+ //   boost::match_results<std::string::const_iterator> results;
+ //   if (boost::regex_match(amail, results, validationExpression))
+ //   {
+        this->email = amail;
+ //   }
+ //   else
+ //   {
+ //       string msg = "Email of wrong format";
+ //       throw MyException(msg);
+ //   }
 }
 
+
 void MyRecord::setInfo(string& info) throw (MyException) {
     this->info = info;
 }
@@ -79,6 +95,13 @@ void MyRecord::addRole(string& anotherrole)  {
     roles.push_back(anotherrole);
 }
 
+void MyRecord::removeRole(std::string& oldrole)
+{
+    this->roles.erase(remove(this->roles.begin(),
+        this->roles.end(), oldrole),
+        this->roles.end());
+}
+
 void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
     if (key.empty() || value.empty()) {
         string msg = "Empty key or value";

commit be66fd41b4576339daf323774f6d1b582efd7098
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 15:06:28 2014 +1100

    Delete author.ui
    
    refactored into tab based userclient.ui

diff --git a/UserClient/author.ui b/UserClient/author.ui
deleted file mode 100644
index 928be98..0000000
--- a/UserClient/author.ui
+++ /dev/null
@@ -1,258 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>800</width>
-    <height>600</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>ConferenceManagementSystem</string>
-  </property>
-  <widget class="QWidget" name="centralwidget">
-   <widget class="QWidget" name="gridLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>260</x>
-      <y>10</y>
-      <width>511</width>
-      <height>441</height>
-     </rect>
-    </property>
-    <layout class="QGridLayout" name="gridLayout">
-     <item row="2" column="0">
-      <widget class="QTextEdit" name="authors">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;AUTHORS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="1">
-      <widget class="QTextEdit" name="keywords">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="1">
-      <widget class="QTextEdit" name="paperAbstract">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;ABSTRACT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item row="0" column="1">
-      <widget class="QLineEdit" name="paperName">
-       <property name="text">
-        <string>PAPERNAME</string>
-       </property>
-      </widget>
-     </item>
-     <item row="3" column="0">
-      <widget class="QLineEdit" name="filename">
-       <property name="text">
-        <string>FILENAME</string>
-       </property>
-      </widget>
-     </item>
-     <item row="0" column="0">
-      <widget class="QSpinBox" name="paperSelect"/>
-     </item>
-     <item row="1" column="0">
-      <widget class="QSpinBox" name="mainKey"/>
-     </item>
-     <item row="3" column="1">
-      <layout class="QHBoxLayout" name="horizontalLayout_2">
-       <item>
-        <widget class="QPushButton" name="selectFile">
-         <property name="text">
-          <string>Select File</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QPushButton" name="upload">
-         <property name="text">
-          <string>Upload</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="horizontalLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>260</x>
-      <y>460</y>
-      <width>511</width>
-      <height>121</height>
-     </rect>
-    </property>
-    <layout class="QHBoxLayout" name="horizontalLayout">
-     <item>
-      <widget class="QTextEdit" name="rebuttal">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;REBUTTAL&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <layout class="QVBoxLayout" name="verticalLayout">
-       <item>
-        <widget class="QLabel" name="rebuttalLabel">
-         <property name="text">
-          <string>Rebuttal</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QPushButton" name="submitRebuttal">
-         <property name="text">
-          <string>Submit</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="verticalLayoutWidget_2">
-    <property name="geometry">
-     <rect>
-      <x>20</x>
-      <y>10</y>
-      <width>201</width>
-      <height>571</height>
-     </rect>
-    </property>
-    <layout class="QVBoxLayout" name="verticalLayout_2">
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_3">
-       <item>
-        <widget class="QLabel" name="username">
-         <property name="text">
-          <string>USERNAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="userid">
-         <property name="text">
-          <string>USERID</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="name">
-       <property name="text">
-        <string>NAME</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="email">
-       <property name="text">
-        <string>EMAIL</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="organisation">
-       <property name="text">
-        <string>ORGANISATION</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="phone">
-       <property name="text">
-        <string>PHONE</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLabel" name="label">
-       <property name="text">
-        <string>Keywords</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QTextEdit" name="textEdit">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <spacer name="verticalSpacer_8">
-       <property name="orientation">
-        <enum>Qt::Vertical</enum>
-       </property>
-       <property name="sizeHint" stdset="0">
-        <size>
-         <width>20</width>
-         <height>40</height>
-        </size>
-       </property>
-      </spacer>
-     </item>
-     <item>
-      <widget class="QPushButton" name="contextChange">
-       <property name="text">
-        <string>CHANGECONTEXT</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QPushButton" name="apply">
-       <property name="text">
-        <string>Apply</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QPushButton" name="logout">
-       <property name="text">
-        <string>Logout</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-  </widget>
- </widget>
- <resources/>
- <connections/>
-</ui>

commit 1f3bf010b7a00cc22045027748d7052267dede98
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 15:06:04 2014 +1100

    Delete review.ui
    
    refactored into tab based userclient.ui

diff --git a/UserClient/review.ui b/UserClient/review.ui
deleted file mode 100644
index 0cfbebd..0000000
--- a/UserClient/review.ui
+++ /dev/null
@@ -1,328 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>800</width>
-    <height>600</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>ConferenceManagementSystem</string>
-  </property>
-  <widget class="QWidget" name="centralwidget">
-   <widget class="QWidget" name="verticalLayoutWidget_2">
-    <property name="geometry">
-     <rect>
-      <x>20</x>
-      <y>20</y>
-      <width>171</width>
-      <height>141</height>
-     </rect>
-    </property>
-    <layout class="QVBoxLayout" name="verticalLayout_2">
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_3">
-       <item>
-        <widget class="QLabel" name="username">
-         <property name="text">
-          <string>USERNAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="userid">
-         <property name="text">
-          <string>USERID</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <widget class="QLabel" name="name">
-       <property name="text">
-        <string>NAME</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLabel" name="email">
-       <property name="text">
-        <string>EMAIL</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLabel" name="organisation">
-       <property name="text">
-        <string>ORGANISATION</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLabel" name="phone">
-       <property name="text">
-        <string>PHONE</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QPushButton" name="logout">
-       <property name="text">
-        <string>Logout</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="gridLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>210</x>
-      <y>20</y>
-      <width>571</width>
-      <height>141</height>
-     </rect>
-    </property>
-    <layout class="QGridLayout" name="gridLayout">
-     <item row="0" column="1">
-      <widget class="QLabel" name="paperName">
-       <property name="text">
-        <string>PAPERNAME</string>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="0">
-      <widget class="QLabel" name="mainKey">
-       <property name="text">
-        <string>MAINKEY</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="0">
-      <widget class="QLabel" name="fileName">
-       <property name="text">
-        <string>FILENAME</string>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="1">
-      <widget class="QTextBrowser" name="textBrowser">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="1">
-      <widget class="QPushButton" name="download">
-       <property name="text">
-        <string>Download</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="verticalLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>20</x>
-      <y>170</y>
-      <width>761</width>
-      <height>421</height>
-     </rect>
-    </property>
-    <layout class="QVBoxLayout" name="verticalLayout">
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout">
-       <item>
-        <widget class="QLabel" name="label_5">
-         <property name="text">
-          <string>Overall</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="overall"/>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_6">
-         <property name="text">
-          <string>Confidence</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="confidence"/>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_4">
-       <item>
-        <widget class="QLabel" name="label_9">
-         <property name="text">
-          <string>Relevance</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="relevance"/>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_10">
-         <property name="text">
-          <string>Originality</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="originality"/>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_5">
-       <item>
-        <widget class="QLabel" name="label_11">
-         <property name="text">
-          <string>Significance</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="significance"/>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_12">
-         <property name="text">
-          <string>Presentation</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="spinBox_8"/>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_2">
-       <item>
-        <widget class="QLabel" name="label_7">
-         <property name="text">
-          <string>Technical Quality</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="techQuality"/>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_8">
-         <property name="text">
-          <string>Evaluation</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QSpinBox" name="evaluation"/>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_11">
-       <item>
-        <widget class="QLabel" name="label_17">
-         <property name="text">
-          <string>Strengths of the paper</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_18">
-         <property name="text">
-          <string>Weaknesses of the paper</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_10">
-       <item>
-        <widget class="QTextEdit" name="commentsStrengths"/>
-       </item>
-       <item>
-        <widget class="QTextEdit" name="commentsWeaknesses"/>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_8">
-       <item>
-        <widget class="QLabel" name="label_13">
-         <property name="text">
-          <string>Would this paper be suitable as a short paper?</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="label_14">
-         <property name="text">
-          <string>Should this paper be considered for a best paper award?</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_12">
-       <item>
-        <widget class="QTextEdit" name="commentsShortPaper"/>
-       </item>
-       <item>
-        <widget class="QTextEdit" name="commentsBestAward"/>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_6">
-       <item>
-        <widget class="QLabel" name="label_19">
-         <property name="text">
-          <string>Detailed comments and suggestions</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QTextEdit" name="commentsSuggestions">
-         <property name="html">
-          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-    </layout>
-   </widget>
-   <zorder>verticalLayoutWidget_2</zorder>
-   <zorder>gridLayoutWidget</zorder>
-   <zorder>verticalLayoutWidget</zorder>
-   <zorder>label_5</zorder>
-  </widget>
- </widget>
- <resources/>
- <connections/>
-</ui>

commit f564f497a3e84a0c6d3ccc13a7a856111aae5327
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 15:05:42 2014 +1100

    Delete reviewer.ui
    
    refactored into tab based userclient.ui

diff --git a/UserClient/reviewer.ui b/UserClient/reviewer.ui
deleted file mode 100644
index f3ee5c0..0000000
--- a/UserClient/reviewer.ui
+++ /dev/null
@@ -1,271 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<ui version="4.0">
- <class>MainWindow</class>
- <widget class="QMainWindow" name="MainWindow">
-  <property name="geometry">
-   <rect>
-    <x>0</x>
-    <y>0</y>
-    <width>800</width>
-    <height>600</height>
-   </rect>
-  </property>
-  <property name="windowTitle">
-   <string>ConferenceManagementSystem</string>
-  </property>
-  <widget class="QWidget" name="centralwidget">
-   <widget class="QWidget" name="gridLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>220</x>
-      <y>20</y>
-      <width>551</width>
-      <height>151</height>
-     </rect>
-    </property>
-    <layout class="QGridLayout" name="gridLayout">
-     <item row="0" column="1">
-      <widget class="QLabel" name="paperName">
-       <property name="text">
-        <string>PAPERNAME</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="2">
-      <widget class="QPushButton" name="download">
-       <property name="text">
-        <string>Download</string>
-       </property>
-      </widget>
-     </item>
-     <item row="0" column="0">
-      <widget class="QSpinBox" name="paperSelect"/>
-     </item>
-     <item row="1" column="0">
-      <widget class="QLabel" name="mainKey">
-       <property name="text">
-        <string>MAINKEY</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="0">
-      <widget class="QLabel" name="fileName">
-       <property name="text">
-        <string>FILENAME</string>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="1">
-      <widget class="QTextBrowser" name="textBrowser">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="1">
-      <widget class="QPushButton" name="pushButton">
-       <property name="text">
-        <string>Review Paper</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="horizontalLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>220</x>
-      <y>170</y>
-      <width>551</width>
-      <height>31</height>
-     </rect>
-    </property>
-    <layout class="QHBoxLayout" name="horizontalLayout">
-     <item>
-      <widget class="QLabel" name="bidlabel">
-       <property name="text">
-        <string>Bid:</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QSpinBox" name="bid"/>
-     </item>
-     <item>
-      <widget class="QPushButton" name="submitBid">
-       <property name="text">
-        <string>Submit Bid</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="gridLayoutWidget_2">
-    <property name="geometry">
-     <rect>
-      <x>220</x>
-      <y>210</y>
-      <width>551</width>
-      <height>381</height>
-     </rect>
-    </property>
-    <layout class="QGridLayout" name="gridLayout_2">
-     <item row="0" column="0">
-      <widget class="QLabel" name="discussionLabel">
-       <property name="text">
-        <string>Discussion</string>
-       </property>
-      </widget>
-     </item>
-     <item row="2" column="1">
-      <widget class="QPushButton" name="submitPosts">
-       <property name="text">
-        <string>Submit Post</string>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="1">
-      <widget class="QTextEdit" name="postBody">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;POST INPUT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item row="1" column="0">
-      <widget class="QTextBrowser" name="discussionBody">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;DISCUSSION POSTS&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-   <widget class="QWidget" name="verticalLayoutWidget">
-    <property name="geometry">
-     <rect>
-      <x>10</x>
-      <y>20</y>
-      <width>201</width>
-      <height>571</height>
-     </rect>
-    </property>
-    <layout class="QVBoxLayout" name="verticalLayout">
-     <item>
-      <layout class="QHBoxLayout" name="horizontalLayout_2">
-       <item>
-        <widget class="QLabel" name="username">
-         <property name="text">
-          <string>USERNAME</string>
-         </property>
-        </widget>
-       </item>
-       <item>
-        <widget class="QLabel" name="userid">
-         <property name="text">
-          <string>USERID</string>
-         </property>
-        </widget>
-       </item>
-      </layout>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="name">
-       <property name="text">
-        <string>NAME</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="email">
-       <property name="text">
-        <string>EMAIL</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="organisation">
-       <property name="text">
-        <string>ORGANISATION</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLineEdit" name="phone">
-       <property name="text">
-        <string>PHONE</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QLabel" name="label">
-       <property name="text">
-        <string>Keywords</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QTextEdit" name="textEdit">
-       <property name="html">
-        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
-&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
-p, li { white-space: pre-wrap; }
-&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
-&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <spacer name="verticalSpacer_8">
-       <property name="orientation">
-        <enum>Qt::Vertical</enum>
-       </property>
-       <property name="sizeHint" stdset="0">
-        <size>
-         <width>20</width>
-         <height>40</height>
-        </size>
-       </property>
-      </spacer>
-     </item>
-     <item>
-      <widget class="QPushButton" name="contextChange">
-       <property name="text">
-        <string>CHANGECONTEXT</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QPushButton" name="apply">
-       <property name="text">
-        <string>Apply</string>
-       </property>
-      </widget>
-     </item>
-     <item>
-      <widget class="QPushButton" name="logout">
-       <property name="text">
-        <string>Logout</string>
-       </property>
-      </widget>
-     </item>
-    </layout>
-   </widget>
-  </widget>
- </widget>
- <resources/>
- <connections/>
-</ui>

commit 78e22db086cd5d77b12de9743465d1a33cfe4395
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 15:04:37 2014 +1100

    Create userclient.ui

diff --git a/UserClient/userclient.ui b/UserClient/userclient.ui
new file mode 100644
index 0000000..5479bc9
--- /dev/null
+++ b/UserClient/userclient.ui
@@ -0,0 +1,886 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>792</width>
+    <height>600</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>MainWindow</string>
+  </property>
+  <widget class="QWidget" name="centralwidget">
+   <widget class="QTabWidget" name="tabWidget">
+    <property name="geometry">
+     <rect>
+      <x>0</x>
+      <y>0</y>
+      <width>801</width>
+      <height>601</height>
+     </rect>
+    </property>
+    <property name="currentIndex">
+     <number>0</number>
+    </property>
+    <widget class="QWidget" name="infoAuthor">
+     <attribute name="title">
+      <string>Information</string>
+     </attribute>
+     <widget class="QWidget" name="verticalLayoutWidget">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>10</y>
+        <width>233</width>
+        <height>551</height>
+       </rect>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout">
+       <item>
+        <layout class="QHBoxLayout" name="horizontalLayout_2">
+         <item>
+          <widget class="QLabel" name="username">
+           <property name="text">
+            <string>USERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="userid">
+           <property name="text">
+            <string>USERID</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="name">
+         <property name="text">
+          <string>NAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="email">
+         <property name="text">
+          <string>EMAIL</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="organisation">
+         <property name="text">
+          <string>ORGANISATION</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="phone">
+         <property name="text">
+          <string>PHONE</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="label">
+         <property name="text">
+          <string>Keywords</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QTextEdit" name="textEdit">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <spacer name="verticalSpacer_8">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>40</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item>
+        <widget class="QPushButton" name="apply">
+         <property name="text">
+          <string>Apply</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QPushButton" name="logout">
+         <property name="text">
+          <string>Logout</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QLabel" name="conferenceName">
+      <property name="geometry">
+       <rect>
+        <x>270</x>
+        <y>10</y>
+        <width>271</width>
+        <height>71</height>
+       </rect>
+      </property>
+      <property name="font">
+       <font>
+        <pointsize>16</pointsize>
+        <weight>75</weight>
+        <italic>true</italic>
+        <bold>true</bold>
+       </font>
+      </property>
+      <property name="text">
+       <string>CONFERENCENAME</string>
+      </property>
+      <property name="scaledContents">
+       <bool>false</bool>
+      </property>
+     </widget>
+     <widget class="QLabel" name="label_2">
+      <property name="geometry">
+       <rect>
+        <x>270</x>
+        <y>70</y>
+        <width>391</width>
+        <height>41</height>
+       </rect>
+      </property>
+      <property name="text">
+       <string>CONFERENCETOPIC</string>
+      </property>
+     </widget>
+     <widget class="QLabel" name="label_3">
+      <property name="geometry">
+       <rect>
+        <x>270</x>
+        <y>120</y>
+        <width>221</width>
+        <height>31</height>
+       </rect>
+      </property>
+      <property name="text">
+       <string>CONFERENCELOCATION</string>
+      </property>
+     </widget>
+     <widget class="QTextBrowser" name="textBrowser_2">
+      <property name="geometry">
+       <rect>
+        <x>270</x>
+        <y>160</y>
+        <width>491</width>
+        <height>401</height>
+       </rect>
+      </property>
+      <property name="html">
+       <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;CONFERENCE DESCRIPTION&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+      </property>
+     </widget>
+    </widget>
+    <widget class="QWidget" name="infoChair">
+     <attribute name="title">
+      <string>Information</string>
+     </attribute>
+     <widget class="QWidget" name="verticalLayoutWidget_3">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>10</y>
+        <width>233</width>
+        <height>551</height>
+       </rect>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout_3">
+       <item>
+        <layout class="QHBoxLayout" name="horizontalLayout_3">
+         <item>
+          <widget class="QLabel" name="username_2">
+           <property name="text">
+            <string>USERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="userid_2">
+           <property name="text">
+            <string>USERID</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="name_2">
+         <property name="text">
+          <string>NAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="email_2">
+         <property name="text">
+          <string>EMAIL</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="organisation_2">
+         <property name="text">
+          <string>ORGANISATION</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="phone_2">
+         <property name="text">
+          <string>PHONE</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <spacer name="verticalSpacer_9">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>40</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item>
+        <widget class="QPushButton" name="apply_2">
+         <property name="text">
+          <string>Apply</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QPushButton" name="logout_3">
+         <property name="text">
+          <string>Logout</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="verticalLayoutWidget_4">
+      <property name="geometry">
+       <rect>
+        <x>280</x>
+        <y>10</y>
+        <width>481</width>
+        <height>551</height>
+       </rect>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout_4">
+       <item>
+        <widget class="QLineEdit" name="lineEdit">
+         <property name="text">
+          <string>CONFERENCE NAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="lineEdit_2">
+         <property name="text">
+          <string>CONFERENCE TOPIC</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="lineEdit_3">
+         <property name="text">
+          <string>CONFERENCE LOCATION</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QTextEdit" name="textEdit_2">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;CONFERENCE DESCRIPTION&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+    <widget class="QWidget" name="author">
+     <attribute name="title">
+      <string>Author</string>
+     </attribute>
+     <widget class="QWidget" name="gridLayoutWidget_3">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>10</y>
+        <width>741</width>
+        <height>531</height>
+       </rect>
+      </property>
+      <layout class="QGridLayout" name="gridLayout_3">
+       <item row="2" column="0">
+        <widget class="QTextEdit" name="authors_2">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;AUTHORS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="1">
+        <widget class="QTextEdit" name="keywords">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="1">
+        <widget class="QTextEdit" name="paperAbstract">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;ABSTRACT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="1">
+        <widget class="QLineEdit" name="paperName_2">
+         <property name="text">
+          <string>PAPERNAME</string>
+         </property>
+        </widget>
+       </item>
+       <item row="3" column="0">
+        <widget class="QLineEdit" name="filename">
+         <property name="text">
+          <string>FILENAME</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="0">
+        <widget class="QSpinBox" name="paperSelect"/>
+       </item>
+       <item row="1" column="0">
+        <widget class="QSpinBox" name="mainKey_2"/>
+       </item>
+       <item row="3" column="1">
+        <layout class="QHBoxLayout" name="horizontalLayout_4">
+         <item>
+          <widget class="QPushButton" name="selectFile">
+           <property name="text">
+            <string>Select File</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QPushButton" name="upload">
+           <property name="text">
+            <string>Upload</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+    <widget class="QWidget" name="reviewer">
+     <attribute name="title">
+      <string>Reviewer</string>
+     </attribute>
+     <widget class="QWidget" name="gridLayoutWidget_4">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>200</y>
+        <width>741</width>
+        <height>351</height>
+       </rect>
+      </property>
+      <layout class="QGridLayout" name="gridLayout_4">
+       <item row="0" column="0">
+        <widget class="QLabel" name="discussionLabel_2">
+         <property name="text">
+          <string>Discussion</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="1">
+        <widget class="QPushButton" name="submitPosts">
+         <property name="text">
+          <string>Submit Post</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="1">
+        <widget class="QTextEdit" name="postBody">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;POST INPUT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="0">
+        <widget class="QTextBrowser" name="discussionBody_2">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;DISCUSSION POSTS&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="horizontalLayoutWidget">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>160</y>
+        <width>741</width>
+        <height>31</height>
+       </rect>
+      </property>
+      <layout class="QHBoxLayout" name="horizontalLayout_5">
+       <item>
+        <spacer name="horizontalSpacer">
+         <property name="orientation">
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeType">
+          <enum>QSizePolicy::Ignored</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>40</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item>
+        <widget class="QLabel" name="bidlabel">
+         <property name="text">
+          <string>Bid:</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="bid"/>
+       </item>
+       <item>
+        <widget class="QPushButton" name="submitBid">
+         <property name="text">
+          <string>Submit Bid</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="gridLayoutWidget_5">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>10</y>
+        <width>741</width>
+        <height>151</height>
+       </rect>
+      </property>
+      <layout class="QGridLayout" name="gridLayout_5">
+       <item row="0" column="1">
+        <widget class="QLabel" name="paperName_3">
+         <property name="text">
+          <string>PAPERNAME</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="2">
+        <widget class="QPushButton" name="download_2">
+         <property name="text">
+          <string>Download</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="0">
+        <widget class="QSpinBox" name="paperSelect_2"/>
+       </item>
+       <item row="1" column="0">
+        <widget class="QLabel" name="mainKey_3">
+         <property name="text">
+          <string>MAINKEY</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="0">
+        <widget class="QLabel" name="fileName_2">
+         <property name="text">
+          <string>FILENAME</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="1">
+        <widget class="QTextBrowser" name="textBrowser_3">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="1">
+        <widget class="QPushButton" name="pushButton">
+         <property name="text">
+          <string>Review Paper</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+    <widget class="QWidget" name="papers">
+     <attribute name="title">
+      <string>Paper Management</string>
+     </attribute>
+     <widget class="QTableWidget" name="tableWidget">
+      <property name="geometry">
+       <rect>
+        <x>40</x>
+        <y>20</y>
+        <width>211</width>
+        <height>531</height>
+       </rect>
+      </property>
+      <column>
+       <property name="text">
+        <string>Title</string>
+       </property>
+      </column>
+      <column>
+       <property name="text">
+        <string notr="true">id</string>
+       </property>
+       <property name="toolTip">
+        <string notr="true"/>
+       </property>
+      </column>
+     </widget>
+     <widget class="QWidget" name="gridLayoutWidget_6">
+      <property name="geometry">
+       <rect>
+        <x>250</x>
+        <y>20</y>
+        <width>511</width>
+        <height>151</height>
+       </rect>
+      </property>
+      <layout class="QGridLayout" name="gridLayout_6">
+       <item row="1" column="1">
+        <widget class="QTextBrowser" name="textBrowser_4">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="0">
+        <widget class="QTextEdit" name="authors_3">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;AUTHORS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="0">
+        <widget class="QLabel" name="paperName_4">
+         <property name="text">
+          <string>PAPERNAME</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="0">
+        <widget class="QLabel" name="fileName_3">
+         <property name="text">
+          <string>FILENAME</string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="1">
+        <widget class="QPushButton" name="download_3">
+         <property name="text">
+          <string>Download</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="1">
+        <widget class="QLabel" name="mainKey_4">
+         <property name="text">
+          <string>MAINKEY</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="gridLayoutWidget_7">
+      <property name="geometry">
+       <rect>
+        <x>250</x>
+        <y>180</y>
+        <width>281</width>
+        <height>371</height>
+       </rect>
+      </property>
+      <layout class="QGridLayout" name="gridLayout_7">
+       <item row="0" column="0">
+        <widget class="QLabel" name="discussionLabel_3">
+         <property name="text">
+          <string>Discussion</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="0">
+        <widget class="QTextBrowser" name="discussionBody_3">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;DISCUSSION POSTS&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="verticalLayoutWidget_5">
+      <property name="geometry">
+       <rect>
+        <x>540</x>
+        <y>180</y>
+        <width>221</width>
+        <height>371</height>
+       </rect>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout_5">
+       <item>
+        <widget class="QLabel" name="label_6">
+         <property name="text">
+          <string>Reviewers</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QTextBrowser" name="textBrowser_5"/>
+       </item>
+       <item>
+        <layout class="QHBoxLayout" name="horizontalLayout_9">
+         <item>
+          <widget class="QLabel" name="label_5">
+           <property name="text">
+            <string>User:</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLineEdit" name="toReview_2"/>
+         </item>
+         <item>
+          <widget class="QPushButton" name="addAsReviewer_2">
+           <property name="text">
+            <string>Add as Reviewer</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+    <widget class="QWidget" name="users">
+     <attribute name="title">
+      <string>User Management</string>
+     </attribute>
+     <widget class="QTableWidget" name="tableWidget_2">
+      <property name="geometry">
+       <rect>
+        <x>20</x>
+        <y>10</y>
+        <width>311</width>
+        <height>531</height>
+       </rect>
+      </property>
+      <column>
+       <property name="text">
+        <string>Name</string>
+       </property>
+      </column>
+      <column>
+       <property name="text">
+        <string>User Name</string>
+       </property>
+      </column>
+      <column>
+       <property name="text">
+        <string>id</string>
+       </property>
+      </column>
+     </widget>
+     <widget class="QWidget" name="verticalLayoutWidget_6">
+      <property name="geometry">
+       <rect>
+        <x>370</x>
+        <y>10</y>
+        <width>291</width>
+        <height>381</height>
+       </rect>
+      </property>
+      <layout class="QVBoxLayout" name="verticalLayout_6">
+       <item>
+        <layout class="QHBoxLayout" name="horizontalLayout_8">
+         <item>
+          <widget class="QLabel" name="username_5">
+           <property name="text">
+            <string>USERNAME</string>
+           </property>
+          </widget>
+         </item>
+         <item>
+          <widget class="QLabel" name="userid_5">
+           <property name="text">
+            <string>USERID</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item>
+        <widget class="QLabel" name="name_5">
+         <property name="text">
+          <string>NAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="email_5">
+         <property name="text">
+          <string>EMAIL</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="organisation_5">
+         <property name="text">
+          <string>ORGANISATION</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="phone_5">
+         <property name="text">
+          <string>PHONE</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_10">
+         <property name="text">
+          <string>Keywords</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QTextBrowser" name="keywords_2"/>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="horizontalLayoutWidget_2">
+      <property name="geometry">
+       <rect>
+        <x>370</x>
+        <y>390</y>
+        <width>251</width>
+        <height>41</height>
+       </rect>
+      </property>
+      <layout class="QHBoxLayout" name="horizontalLayout_6">
+       <item>
+        <widget class="QLabel" name="label_4">
+         <property name="text">
+          <string>Paper:</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLineEdit" name="toReview"/>
+       </item>
+       <item>
+        <widget class="QPushButton" name="addAsReviewer">
+         <property name="text">
+          <string>Add to Review</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+   </widget>
+  </widget>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>

commit 4fb3bb3506c4dfd5d3e2903d797bff82334b661d
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 19 15:04:07 2014 +1100

    Update PDF_read_write_example.cpp
    
    remove a #include

diff --git a/PDF_read_write_example.cpp b/PDF_read_write_example.cpp
index 3e4b1d5..4e3b973 100644
--- a/PDF_read_write_example.cpp
+++ b/PDF_read_write_example.cpp
@@ -13,7 +13,6 @@ Alex Cremona Oct 2014
 
 */
 
-#include <iostream>
 #include <fstream>
 
 

commit 8b1f8acdf24c2ce94c05a760b73e7838451a037d
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 19 14:59:18 2014 +1100

    create PDF_read_write_example.cpp
    
    simple example of reading, storing and outputting a pdf

diff --git a/PDF_read_write_example.cpp b/PDF_read_write_example.cpp
new file mode 100644
index 0000000..3e4b1d5
--- /dev/null
+++ b/PDF_read_write_example.cpp
@@ -0,0 +1,54 @@
+/*
+
+Simple read in of PDF EXAMPLE
+
+
+Reads in pdf, saves as a char*, prints as new pdf
+
+
+Note: pdf is just stored as a c_string
+
+
+Alex Cremona Oct 2014
+
+*/
+
+#include <iostream>
+#include <fstream>
+
+
+int main()
+{
+	char inName[256] = "Simple.pdf";
+	char outName[256] = "testOut.pdf";
+	//std::string content;
+	std::ifstream fin;
+	std::ofstream fout;
+
+
+	//open pdf in binary
+	fin.open(inName, std::ios::in | std::ios::binary);
+	
+	//find length
+	fin.seekg (0, fin.end);
+	int length = fin.tellg();
+	fin.seekg (0, fin.beg);
+
+	// define buffer
+	char * buffer = new char [length];
+
+	//READ IN ALL INTO BUFFER
+	fin.read(buffer, length);
+
+	fin.close();
+
+	//open output in Binary and output content elsewhere
+	fout.open(outName, std::ios::out | std::ios::binary);
+	fout.write(buffer, length);
+	fout.close();
+
+	return 0;
+
+
+
+}

commit 8b48e6c1fdfc4770966af9a266667f847c8bb4dd
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:56:48 2014 +1100

    filled in compare

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index 9d6d9f5..d4933aa 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -14,7 +14,21 @@ struct Date {
   day = in.day;
   month = in.month;
   year = in.year;}
-  bool compare(Date);
+  bool compare(const Date& idate) //returns true if idate is before or on the same day as this
+  {
+    if(idate.year != year) {
+      return idate.year < year;
+    } else {
+      if(idate.month != month) {
+        return idate.month < month;
+        } else {
+        if(idate.day != day) {
+      return idate.day < day;
+          }
+        }  
+    }
+    return true;
+  }
 
 int day{0};
 int month{0};

commit 71a3a8fb70e79344e90d2abdc7b8ce3ee36c60ad
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:38:13 2014 +1100

    Update Paper.hpp

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index f265a3b..4171f7c 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -5,38 +5,35 @@
 #include "Discussion.hpp"
 #include "Review.hpp"
 
-#include <fstream>
-#include <memory>
 #include <vector>
 
 struct Paper {
 
-    Paper() { discussion = new Discussion;}
+    Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
       const std::vector<std::string>& iauthorNames,
       const std::vector<std::string>& ikeywords,
-//      const std::string& ifname,
-//      char* ipaper,
-      const std::vector<Review>& ireviews)
+      const std::string& ifname,
+      const std::vector<Review>& ireviews,
+      const Discussion& idiscussion)
       :
       title(ititle),
       abstract(iabstract),
       authorNames(iauthorNames),
       keywords(ikeywords),
-//      fname(ifname),
-//      paper(ipaper), // constructs from cstring
-      reviews(ireviews)
-      {discussion = new Discussion;}
-    ~Paper() {delete discussion;}
+      fname(ifname),
+      reviews(ireviews),
+      discussion(idiscussion)
+      { }
     // no assignment operator or copy constructor deemed necessary at this point
     std::string title;
     std::string abstract;
     std::vector<std::string> authorNames;
     std::vector<std::string> keywords;
-//    std::string fname;
-//    std::fstream paper;
-    Discussion* discussion;
+    std::string fname;
+
+    Discussion discussion;
     std::vector<Review> reviews;
 };
 #endif

commit d8b7e69f6fa9b05d0a4fdb36d790f80225e18095
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:36:02 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index a1f85df..2aac716 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -49,14 +49,14 @@ class Paper {
     std::vector<std::string> getAuthorNames() {return authorNames;}
     std::vector<std::string> getKeywords() {return keywords;}
     std::string getFname() {return fname;}
-    //std::fstream getPaper() {return paper;}
-    Discussion* getDiscussion() {return discussion;}
+    Discussion getDiscussion() {return discussion;}
+    
     void setTitle(const std::string& ititle) {title = ititle;}
     void setAbstract(const std::string& iabstract) {abstract = iabstract;}
     void setAuthorNames(const std::vector<std::string>& iauthorNames) {authorNames = iauthorNames;}
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
     void setFname(const std::string& ifname) {fname = ifname;}
-    void setDiscussion(Discussion* idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
+    void setDiscussion(Discussion idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
     void downloadPaper();
 
   private:

commit cbc9d5e9c29eb73e2a2aac9f4290ad35d775f83a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:32:30 2014 +1100

    Update Discussion.hpp

diff --git a/AdminClient/Discussion.hpp b/AdminClient/Discussion.hpp
index f85cef4..10a765e 100644
--- a/AdminClient/Discussion.hpp
+++ b/AdminClient/Discussion.hpp
@@ -10,6 +10,9 @@ struct Discussion {
   Discussion(const std::list<DiscussionPost>& idiscussion):
                discussion(idiscussion)
                { }
+    Discussion(const Discussion& in) {
+    discussion = in.discussion;
+  }
   std::list<DiscussionPost> discussion;
 };
 #endif

commit d55f87b95ec4cecef190f2420bbb9f3f7afee782
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:32:19 2014 +1100

    Update Discussion.hpp

diff --git a/UserClient/Discussion.hpp b/UserClient/Discussion.hpp
index fadaf5e..541d728 100644
--- a/UserClient/Discussion.hpp
+++ b/UserClient/Discussion.hpp
@@ -10,6 +10,9 @@ struct Discussion {
   Discussion(const std::list<DiscussionPost>& idiscussion):
                discussion(idiscussion)
                { }
+  Discussion(const Discussion& in) {
+    discussion = in.discussion;
+  }
   std::list<DiscussionPost> discussion;
 };
 #endif

commit b301c74a93c124c2a307afaf7a572252bf0f5c03
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:30:47 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 2bb3a11..b9bb58a 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -5,30 +5,29 @@
 #include "Discussion.hpp"
 #include "Review.hpp"
 
-#include <fstream>
 #include <memory>
 #include <vector>
 
 struct Paper {
 
-    Paper() {discussion = new Discussion;}
+    Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
       const std::vector<std::string>& iauthorNames,
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
-      char* ipaper,
-      const std::vector<Review>& ireviews)
+      const std::vector<Review>& ireviews,
+      const Discussion& idiscussion)
       :
       title(ititle),
       abstract(iabstract),
       authorNames(iauthorNames),
       keywords(ikeywords),
       fname(ifname),
-      paper(ipaper), // constructs from cstring
-      reviews(ireviews)
-      {discussion = new Discussion;}
-    ~Paper() {delete discussion;}
+      reviews(ireviews),
+      discussion(idiscussion)
+      { }
+
     // no assignment operator or copy constructor deemed necessary at this point
     void downloadPaper();
 
@@ -38,7 +37,7 @@ struct Paper {
     std::vector<std::string> keywords;
     std::string fname;
     std::fstream paper;
-    Discussion* discussion;
+    Discussion discussion;
     std::vector<Review> reviews;
 };
 #endif

commit acf5aae272622e88409d3bcac677af46f39a8b59
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:29:35 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 496254e..a1f85df 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -13,7 +13,7 @@ class Paper {
       const std::vector<std::string>& iauthorNames,
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
-      const std::string& idiscussion)
+      const Discussion& idiscussion)
       :
       title(ititle),
       abstract(iabstract),

commit f374c517169256ebc88ae0b98a5cb227124e2de1
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:28:10 2014 +1100

    Update User.hpp

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index 828eb26..c0b0e80 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -1,6 +1,8 @@
 #ifndef USER_H
 #define USER_H
 
+#include "Paper.hpp"
+
 #include <string>
 
 class User {
@@ -47,6 +49,7 @@ std::string email;
 std::string organisation;
 std::string phone;
 int userID{0};
+Paper currentPaper;
 
 };
 #endif

commit f559254f86a5c9e449108e42fa7a8377e6d09ac9
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:27:58 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 84fcb24..a86998a 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -28,7 +28,6 @@ class PCChair : public User {
   PaperSummary* getPaperByTitle(std::string);
   PaperSummary* getPaperById(int);
   std::vector<PaperSummary> allPapers;
-  Paper currentPaper;
   Conference* activeConference;
 };
 #endif

commit 85787d8561aef33f330ddeddb964af2e2f95b414
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:27:37 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 18ee05f..7e57d57 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -62,6 +62,6 @@ class Author : public User {
 
   protected:
     std::vector<PaperSummary> ownPapers;
-    Paper currentPaper;
+
 };
 #endif

commit 2df686f2ef3615d073eed0699a0832910a726eec
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:25:52 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 968334e..662374c 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -78,7 +78,6 @@ class Reviewer : public Author {
 
     std::vector<PaperSummary> allocatedPapers;
     std::vector<PaperSummary> papersToBid;
-    Paper currentPaper;
     std::vector<Review> reviews;
 };
 #endif

commit 73e7987b7970fefbccfb5380ddc86f6644515268
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:25:14 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 794937d..18ee05f 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -62,5 +62,6 @@ class Author : public User {
 
   protected:
     std::vector<PaperSummary> ownPapers;
+    Paper currentPaper;
 };
 #endif

commit 67d372bf650e71f81d1f906898eb097226ff706c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:24:26 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 27c6bab..968334e 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -38,7 +38,7 @@ class Reviewer : public Author {
       const std::string& iphone,
       int iuserID,
       const std::vector<std::string>& ikeywords,
-      const std::vector<Paper>& iownPapers,
+      const std::vector<PaperSummary>& iownPapers,
       const std::vector<PaperSummary>& iallocatedPapers,
       const std::vector<PaperSummary>& ipapersToBid,
       const std::vector<Review>& ireviews)

commit 0cf0f4d93991e45ad5c22cae199c1f1824dbd6cb
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:24:08 2014 +1100

    changed to paper summary

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 11ec48f..794937d 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -2,6 +2,7 @@
 #define AUTHOR_H
 
 #include "Paper.hpp"
+#include "PaperSummary.hpp"
 #include "User.hpp"
 
 #include <vector>
@@ -40,7 +41,7 @@ class Author : public User {
          const std::string& iphone,
          int iuserID,
          const std::vector<std::string>& ikeywords,
-         const std::vector<Paper>& iownPapers):
+         const std::vector<PaperSummary>& iownPapers):
          User(iuserName, 
          iname,
          iemail,
@@ -60,6 +61,6 @@ class Author : public User {
     std::vector<std::string> keywords;
 
   protected:
-    std::vector<Paper> ownPapers;
+    std::vector<PaperSummary> ownPapers;
 };
 #endif

commit c2cd407c084af75b4205dac253261c65004303cd
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:23:07 2014 +1100

    changed to paper summary

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index ac81079..27c6bab 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -39,8 +39,8 @@ class Reviewer : public Author {
       int iuserID,
       const std::vector<std::string>& ikeywords,
       const std::vector<Paper>& iownPapers,
-      const std::vector<Paper>& iallocatedPapers,
-      const std::vector<Paper>& ipapersToBid,
+      const std::vector<PaperSummary>& iallocatedPapers,
+      const std::vector<PaperSummary>& ipapersToBid,
       const std::vector<Review>& ireviews)
       :
       Author(iuserName,
@@ -76,8 +76,9 @@ class Reviewer : public Author {
     Paper* getPaperByTitle(std::string); // helper
     Paper* getPaperByIndex(int); // helper
 
-    std::vector<Paper> allocatedPapers;
-    std::vector<Paper> papersToBid;
+    std::vector<PaperSummary> allocatedPapers;
+    std::vector<PaperSummary> papersToBid;
+    Paper currentPaper;
     std::vector<Review> reviews;
 };
 #endif

commit 86ab0b04670fc61332ac87eeb371ec0696c79d59
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:20:24 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index e045923..ac81079 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -2,6 +2,7 @@
 #define REVIEWER_H
 
 #include "Author.hpp"
+#include "PaperSummary.hpp"
 #include "Review.hpp"
 
 class Reviewer : public Author {

commit 623cebf99025da64f79facdc3f2ef59780f538b6
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:19:40 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 61d9199..84fcb24 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -2,18 +2,14 @@
 #define P_C_CHAIR_H
 
 #include "Paper.hpp"
+#include "PaperSummary.hpp"
 #include "User.hpp"
 
 #include <vector>
 
-Struct PaperSummary {
-  int paperId;
-  std::string paperName;
-};
-
 class PCChair : public User {
   public:
-  PCChair(const std::vector<PaperSummmary>& iallPapers)
+  PCChair(const std::vector<PaperSummary>& iallPapers)
   : allPapers(iallPapers)
   { }
   std::vector<PaperSummary> getAllPapers() {return allPapers;}
@@ -30,7 +26,7 @@ class PCChair : public User {
 
   private:
   PaperSummary* getPaperByTitle(std::string);
-  PaperSummary* getPaperById(int)
+  PaperSummary* getPaperById(int);
   std::vector<PaperSummary> allPapers;
   Paper currentPaper;
   Conference* activeConference;

commit cf67b483699c1cbab92673d78a232e5338d55f50
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:18:35 2014 +1100

    Rename PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H to PaperSummary.hpp

diff --git a/UserClient/PaperSummary.hpp b/UserClient/PaperSummary.hpp
new file mode 100644
index 0000000..3a3ec45
--- /dev/null
+++ b/UserClient/PaperSummary.hpp
@@ -0,0 +1,11 @@
+#ifndef PAPER_SUMMARY_H
+#define PAPER_SUMMARY_H
+
+#include <string>
+
+struct PaperSummary {
+  int paperId;
+  std::string paperName;
+};
+
+#endif
diff --git a/UserClient/PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H b/UserClient/PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H
deleted file mode 100644
index 3a3ec45..0000000
--- a/UserClient/PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H	
+++ /dev/null
@@ -1,11 +0,0 @@
-#ifndef PAPER_SUMMARY_H
-#define PAPER_SUMMARY_H
-
-#include <string>
-
-struct PaperSummary {
-  int paperId;
-  std::string paperName;
-};
-
-#endif

commit c97637467316cd973dbc5111e0d018a86cb15330
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:17:14 2014 +1100

    Create PaperSummary.hpp

diff --git a/UserClient/PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H b/UserClient/PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H
new file mode 100644
index 0000000..3a3ec45
--- /dev/null
+++ b/UserClient/PaperSummary.hpp#ifndef P_C_CHAIR_H #define P_C_CHAIR_H	
@@ -0,0 +1,11 @@
+#ifndef PAPER_SUMMARY_H
+#define PAPER_SUMMARY_H
+
+#include <string>
+
+struct PaperSummary {
+  int paperId;
+  std::string paperName;
+};
+
+#endif

commit dc316ef9b44093f6269394a1057945bd5140a980
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 14:14:38 2014 +1100

    remove fstream placeholder and discussion is no longer a pointer

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 60abc60..496254e 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -3,28 +3,27 @@
 
 #include "Discussion.hpp"
 
-#include <fstream>
 #include <vector>
 
 class Paper {
   public:
-    Paper() {discussion = new Discussion;}
+    Paper() { }
     Paper(const std::string& ititle,
       const std::string& iabstract,
       const std::vector<std::string>& iauthorNames,
       const std::vector<std::string>& ikeywords,
       const std::string& ifname,
-      char* ipaper)
+      const std::string& idiscussion)
       :
       title(ititle),
       abstract(iabstract),
       authorNames(iauthorNames),
       keywords(ikeywords),
       fname(ifname),
-      paper(ipaper) // constructs from cstring
-      {discussion = new Discussion;} // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
+      discussion(idiscussion)
+      { } // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
       // In those edge cases one could still initialize then set or use copy constructor
-    ~Paper() {delete discussion;}
+
 /*    Paper(const Paper& ipaper) {
       title = ipaper.title;
       abstract = ipaper.abstract;
@@ -61,12 +60,11 @@ class Paper {
     void downloadPaper();
 
   private:
-    std::string title;
-    std::string abstract;
+    std::string title{""};
+    std::string abstract{""};
     std::vector<std::string> authorNames;
     std::vector<std::string> keywords;
-    std::string fname;
-    std::fstream paper;
-    Discussion* discussion;
+    std::string fname{""};
+    Discussion discussion;
 };
 #endif

commit 9e703e91b1acfc5bb7d4a2d62150212a8e03bc94
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 13:13:59 2014 +1100

    defined enum

diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index 175377d..0f1564c 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -3,11 +3,13 @@
 
 #include <string>
 
+enum Request_t {ConferenceRequest, PaperRequest, UserRequest};
+
 struct ClientHandler {
-  ClientHandler(enum irequest) : request(irequest)
+  ClientHandler(Request_t irequest) : Request_t(irequest)
     { }
 
-enum request;
+Request_t request;
 
 void handleClient();
 bool authenticate(std::string, std::string);

commit 80ebe3f11f23b5e695915dc22fd02c534b66632c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 12:42:33 2014 +1100

    fixed up init list

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index a3b8b8f..e045923 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -6,7 +6,7 @@
 
 class Reviewer : public Author {
   public:
-    Reviewer(const std::string& iuserName,
+/*    Reviewer(const std::string& iuserName,
       const std::string& iname,
       const std::string& iemail,
       const std::string& iorganisation,
@@ -29,7 +29,32 @@ class Reviewer : public Author {
       allocatedPapers(iallocatedPapers),
       papersToBid(ipapersToBid),
       reviews(ireviews)
-      { }
+      { } */
+    Reviewer(const std::string& iuserName,
+      const std::string& iname,
+      const std::string& iemail,
+      const std::string& iorganisation,
+      const std::string& iphone,
+      int iuserID,
+      const std::vector<std::string>& ikeywords,
+      const std::vector<Paper>& iownPapers,
+      const std::vector<Paper>& iallocatedPapers,
+      const std::vector<Paper>& ipapersToBid,
+      const std::vector<Review>& ireviews)
+      :
+      Author(iuserName,
+      iname,
+      iemail,
+      iorganisation,
+      iphone,
+      iuserID,
+      ikeywords,
+      iownPapers
+      ),
+      allocatedPapers(iallocatedPapers),
+      papersToBid(ipapersToBid),
+      reviews(ireviews)
+      { }      
     void view();
     void getPapersToReview();
     void submitReview();

commit 1ddb0d82267d1af046eeed90f8210d54921737d1
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 12:39:14 2014 +1100

    fixed up init list

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 9802845..11ec48f 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -9,6 +9,7 @@
 class Author : public User {
   public:
     Author() { }
+    /*
     Author(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
@@ -30,8 +31,31 @@ class Author : public User {
     void getPapers();
     void submitPaper();
     void modifyPaper();
-    void submitRebuttal();
-
+    void submitRebuttal(); */
+    
+    Author(const std::string& iuserName,
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         int iuserID,
+         const std::vector<std::string>& ikeywords,
+         const std::vector<Paper>& iownPapers):
+         User(iuserName, 
+         iname,
+         iemail,
+         iorganisation,
+         iphone,
+         iuserID
+         ),
+         keywords(ikeywords),
+         ownPapers(iownPapers)
+         { }
+    virtual void view();
+    void getPapers();
+    void submitPaper();
+    void modifyPaper();
+    void submitRebuttal(); 
 
     std::vector<std::string> keywords;
 

commit 1aaccadfa34bb0cdcaa9b9c6450db65430c17455
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 19 10:51:00 2014 +1100

    Update Algo
    
    Small change

diff --git a/Algo b/Algo
index ec72ef5..b43c4ca 100644
--- a/Algo
+++ b/Algo
@@ -1,6 +1,5 @@
 Algo:
 
-Algo:
 
 struct Reviewer
 {

commit 24f63253e1f4d4f2a5b71fcb1490eb70a7434c17
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 10:45:14 2014 +1100

    Update PCChair.hpp
    
    fixed formatting mistakes i made

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index debac80..61d9199 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -7,8 +7,8 @@
 #include <vector>
 
 Struct PaperSummary {
-    int paperId;
-    std::string paperName;
+  int paperId;
+  std::string paperName;
 };
 
 class PCChair : public User {

commit 2e1b22059e266867a87ef901fa09b7568ee24adf
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 10:44:11 2014 +1100

    Update PCChair.hpp
    
    added pointer to the active conference as a member variable

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 9b8a730..debac80 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -33,5 +33,6 @@ class PCChair : public User {
   PaperSummary* getPaperById(int)
   std::vector<PaperSummary> allPapers;
   Paper currentPaper;
+  Conference* activeConference;
 };
 #endif

commit f1f8f2127d62105ee84ba571e125f9524167ddf7
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sun Oct 19 10:30:56 2014 +1100

    Update Algo
    
    Updated some sudo code, added inserting all authors into conflicts vector

diff --git a/Algo b/Algo
index c8cd0d6..ec72ef5 100644
--- a/Algo
+++ b/Algo
@@ -1,5 +1,7 @@
 Algo:
 
+Algo:
+
 struct Reviewer
 {
 	int score;
@@ -16,7 +18,7 @@ Class PaperForReview
 
 		std::vector<int> authors;
 		std::vector<int> involvedOrganisation;
-		std::vector<int> conflictingReviewers;
+		std::vector<int> conflictingReviewersVec;
 	public:
 		PapersForReview(int);
 		~PapersForReview();
@@ -89,7 +91,8 @@ void PaperForReview::addAuthor(int newAuthor)
 void  PaperForReview::conflictingReviewers
 {
 	//authors
-		//pushBackAllAuthors
+		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());
+
 
 	//usersFromSameOrganisation
 		//ForEachAuthor:   SelectOrganisation
@@ -111,14 +114,16 @@ void readInAllPapers();
 
 void readInAllPapers()
 {
-	// select all papers
-	// push new PaperForReview objects into the map
+	// for all papers
+		//create new paers object
+
+		// select all Authors where paper==paperID
+			//addAuthors to paper
 
-	// select all Authors where paper==paperID
-		//addAuthors to paper
+		// select organisation for each author
+			//add involved organisation
 
-	// select organisation for each author
-		//add involved organisation
+		// push new PaperForReview objects into the map
 
 }
 

commit c8c74e3b4dab5a50de36e15ac45675a6a6e985ea
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 10:30:04 2014 +1100

    Update PCChair.hpp
    
    added getPaperById function

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 1f96608..9b8a730 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -30,6 +30,7 @@ class PCChair : public User {
 
   private:
   PaperSummary* getPaperByTitle(std::string);
+  PaperSummary* getPaperById(int)
   std::vector<PaperSummary> allPapers;
   Paper currentPaper;
 };

commit 684e5fddd9c6888b3c0b66344e8b89f3ace34aa6
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sun Oct 19 10:29:11 2014 +1100

    Update PCChair.hpp
    
    added PaperSummary struct to avoid loading all the papers into memory

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 5acc95e..1f96608 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -6,13 +6,18 @@
 
 #include <vector>
 
+Struct PaperSummary {
+    int paperId;
+    std::string paperName;
+};
+
 class PCChair : public User {
   public:
-  PCChair(const std::vector<Paper>& iallPapers)
+  PCChair(const std::vector<PaperSummmary>& iallPapers)
   : allPapers(iallPapers)
   { }
-  std::vector<Paper> getAllPapers() {return allPapers;}
-  void setAllPapers(const std::vector<Paper>& iallPapers) {allPapers = iallPapers;}
+  std::vector<PaperSummary> getAllPapers() {return allPapers;}
+  void setAllPapers(const std::vector<PaperSummary>& iallPapers) {allPapers = iallPapers;}
   void view();
   void removeReviewer();
   bool removeReviewerByName(std::string);
@@ -24,8 +29,8 @@ class PCChair : public User {
   void addReviewerToConf();
 
   private:
-  Paper* getPaperByTitle(std::string);
-  std::vector<Paper> allPapers;
-
+  PaperSummary* getPaperByTitle(std::string);
+  std::vector<PaperSummary> allPapers;
+  Paper currentPaper;
 };
 #endif

commit bcbc0859d21203db3cfbd37bfe834927347d6897
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sun Oct 19 03:22:08 2014 +1100

    added drivers, fixed a stack of bugs - some remain
    
    enum bugs in server
    fstream issues - reconsider
    paper needs a copy constructor - look into this
    perhaps something incorrect with inheritance syntax

diff --git a/AdminClient/AdminClientDriver.cpp b/AdminClient/AdminClientDriver.cpp
new file mode 100644
index 0000000..26e2b92
--- /dev/null
+++ b/AdminClient/AdminClientDriver.cpp
@@ -0,0 +1,24 @@
+#include <iostream>
+
+#include "Conference.hpp"
+#include "ConferenceManager.hpp"
+#include "Date.hpp"
+#include "Discussion.hpp"
+#include "DiscussionPost.hpp"
+#include "LoginManager.hpp"
+#include "Paper.hpp"
+#include "PaperManager.hpp"
+#include "Review.hpp"
+#include "SuperUser.hpp"
+#include "User.hpp"
+#include "UserManager.hpp"
+
+
+int main()
+{
+std::cout << "hello world" << std::endl;
+int foo = 6;
+auto bar = foo;
+std::cout << bar << "bar" << std::endl;
+return 0;
+}
diff --git a/AdminClient/AdminClientDriver.exe b/AdminClient/AdminClientDriver.exe
new file mode 100644
index 0000000..573c227
Binary files /dev/null and b/AdminClient/AdminClientDriver.exe differ
diff --git a/AdminClient/AdminClientDriver.o b/AdminClient/AdminClientDriver.o
new file mode 100644
index 0000000..4e7a548
Binary files /dev/null and b/AdminClient/AdminClientDriver.o differ
diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
index ed4f202..78e91f7 100644
--- a/AdminClient/Conference.hpp
+++ b/AdminClient/Conference.hpp
@@ -5,7 +5,7 @@
 #include <string>
 #include <vector>
 
-Struct Conference {
+struct Conference {
   Conference(bool iisActive,
   const std::string& ititle,
   const std::string& iconfID,
@@ -26,7 +26,6 @@ Struct Conference {
   isActive(iisActive),
   title(ititle),
   confID(iconfID),
-  originality(ioriginality),
   topic(itopic),
   description(idescription),
   location(ilocation),
@@ -35,11 +34,11 @@ Struct Conference {
   paperDeadline(ipaperDeadline),
   isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
   reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline))
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
   reviewDeadlineHard(ireviewDeadlineHard),
   isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
   discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper)
+  reviewersPerPaper(ireviewersPerPaper),
   postWordLimit(ipostWordLimit)
   { }
 
diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index 058e9e9..2b8d4e9 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -2,17 +2,17 @@
 #define CONFERENCE_MANAGER_H
 #include "Conference.hpp"
 
-Struct ConferenceManager {
+struct ConferenceManager {
   ConferenceManager() {temp = NULL;}
   ConferenceManager(Conference* itemp) : temp(itemp) { }
   ~ConferenceManager() {delete temp;}
 
-  void createConference()
-  void removeConference()
-  void listConferences()
-  void viewConference()
-  void editConference()
-  void addKWords()
+  void createConference();
+  void removeConference();
+  void listConferences();
+  void viewConference();
+  void editConference();
+  void addKWords();
 
   Conference* temp;
 
diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index bacb000..9d6d9f5 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -1,6 +1,7 @@
 #ifndef DATE_H
 #define DATE_H
-Struct Date {
+struct Date {
+  Date() { }
   Date(int iday,
     int imonth,
     int iyear):
@@ -9,7 +10,11 @@ Struct Date {
     year(iyear)
     { }
 
-  bool compare(Data)
+  Date(const Date& in) {
+  day = in.day;
+  month = in.month;
+  year = in.year;}
+  bool compare(Date);
 
 int day{0};
 int month{0};
diff --git a/AdminClient/Discussion.hpp b/AdminClient/Discussion.hpp
index a84aad5..f85cef4 100644
--- a/AdminClient/Discussion.hpp
+++ b/AdminClient/Discussion.hpp
@@ -5,7 +5,8 @@
 
 #include <list>
 
-Struct Discussion {
+struct Discussion {
+  Discussion() { }
   Discussion(const std::list<DiscussionPost>& idiscussion):
                discussion(idiscussion)
                { }
diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
index 079c02b..560e56e 100644
--- a/AdminClient/DiscussionPost.hpp
+++ b/AdminClient/DiscussionPost.hpp
@@ -2,7 +2,7 @@
 #define DISCUSSION_POST_H
 #include <string>
 
-Struct DiscussionPost {
+struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
                  const std::string& ireviewerUName,
                  int ipostID):
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index 4b52eaf..ffb9511 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -1,11 +1,11 @@
 #ifndef LOGIN_MANAGER_H
 #define LOGIN_MANAGER_H
-Struct LoginManager {
+struct LoginManager {
   LoginManager(bool iloggedIn) :
     loggedIn(iloggedIn)
     { }
   bool loggedIn;
-  bool login(std::string, std::string)
-  void logout()
+  bool login(std::string, std::string);
+  void logout();
 };
 #endif
diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 482ec20..2bb3a11 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -9,16 +9,16 @@
 #include <memory>
 #include <vector>
 
-Struct Paper {
+struct Paper {
 
-    Paper() { *discussion = new Discussion;}
+    Paper() {discussion = new Discussion;}
     Paper(const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<string>& iauthorNames,
-      const std::vector<string>& ikeywords,
+      const std::vector<std::string>& iauthorNames,
+      const std::vector<std::string>& ikeywords,
       const std::string& ifname,
       char* ipaper,
-      const std::vector<review>& ireviews)
+      const std::vector<Review>& ireviews)
       :
       title(ititle),
       abstract(iabstract),
@@ -27,10 +27,10 @@ Struct Paper {
       fname(ifname),
       paper(ipaper), // constructs from cstring
       reviews(ireviews)
-      {*discussion = new Discussion;}
+      {discussion = new Discussion;}
     ~Paper() {delete discussion;}
     // no assignment operator or copy constructor deemed necessary at this point
-    void downloadPaper()
+    void downloadPaper();
 
     std::string title;
     std::string abstract;
diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index b982c6d..08fd800 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -2,25 +2,25 @@
 #define PAPER_MANAGER_H
 #include "Paper.hpp"
 
-Struct PaperManager {
+struct PaperManager {
   PaperManager() {temp = NULL;}
   PaperManager(Paper* itemp) : temp(itemp) { }
   ~PaperManager() {delete temp;}
-  void createPaper()
-  void removePaper()
-  void listPapers()
-  void viewPaper()
-  void editPaper()
+  void createPaper();
+  void removePaper();
+  void listPapers();
+  void viewPaper();
+  void editPaper();
 
   Paper* temp;
 private:
-  void viewDiscussion()
-  void addDiscPost()
-  void removeDiscPost()
-  void editDiscPost()
-  void addReview()
-  void listReviews()
-  void editReview()
-  void removeReview()
+  void viewDiscussion();
+  void addDiscPost();
+  void removeDiscPost();
+  void editDiscPost();
+  void addReview();
+  void listReviews();
+  void editReview();
+  void removeReview();
 };
 #endif
diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
index ab2c571..7dabff0 100644
--- a/AdminClient/Review.hpp
+++ b/AdminClient/Review.hpp
@@ -2,9 +2,9 @@
 #define REVIEW_H
 #include <string>
 
-Struct Review {
-  Review(const std::string& ireviewerName
-  int reviewId;
+struct Review {
+  Review(const std::string& ireviewerName,
+  int reviewId,
   int ioverall,
   int iconfidence,
   int irelevance,
@@ -31,7 +31,7 @@ Struct Review {
   commentsWeakness(icommentsWeakness),
   commentsSuggestions(icommentsSuggestions),
   commentsShortPaper(icommentsShortPaper),
-  commentsBestAward(icommentsBestAward))
+  commentsBestAward(icommentsBestAward)
   { }
   std::string reviewerName;
   int reviewId;
diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index c8b4dc7..5adff38 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -2,7 +2,7 @@
 #define SUPER_USER_H
 #include <string>
 
-Class SuperUser {
+class SuperUser {
 public:
   SuperUser(const std::string& iuserName,
     const std::string& ipassword) :
@@ -11,9 +11,9 @@ public:
     { }
 
 
-  void view()
-  void changeDetails()
-  void getPassword(return password;)
+  void view();
+  void changeDetails();
+  std::string getPassword() {return password;}
   void setPassword(const std::string& ipassword) {password = ipassword;}
 
   std::string userName;
diff --git a/AdminClient/User.hpp b/AdminClient/User.hpp
index cf89810..c42c8d1 100644
--- a/AdminClient/User.hpp
+++ b/AdminClient/User.hpp
@@ -4,16 +4,16 @@
 #include <vector>
 
 
-Struct User {
-  User(const std::string& iusername,
+struct User {
+  User(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
          const std::string& ipassword,
          int iuserID,
-         const std::vector<std::string>& keywords:
-         username(iusername),
+         const std::vector<std::string>& ikeywords):
+         userName(iuserName),
          name(iname),
          email(iemail),
          organisation(iorganisation),
diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index 797aed4..f78d3f2 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -2,16 +2,16 @@
 #define USER_MANAGER_H
 #include "User.hpp"
 
-Struct UserManager {
+struct UserManager {
   UserManager() {temp = NULL;}
   UserManager(User* itemp) : temp(itemp) { }
   ~UserManager() { delete temp;}
   User* temp;
-  void createUser()
-  void removeUser()
-  void listUsers()
-  void viewUser()
-  void editUser()
+  void createUser();
+  void removeUser();
+  void listUsers();
+  void viewUser();
+  void editUser();
 
 };
 #endif
diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index 6ef832d..175377d 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -3,15 +3,15 @@
 
 #include <string>
 
-Struct ClientHandler {
+struct ClientHandler {
   ClientHandler(enum irequest) : request(irequest)
     { }
 
 enum request;
 
-void handleClient()
-bool authenticate(std::string, std::string)
-bool connectToDB()
+void handleClient();
+bool authenticate(std::string, std::string);
+bool connectToDB();
 
 };
 #endif
diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 3d7171a..a0bc445 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -6,7 +6,7 @@
 #include <string>
 #include <vector>
 
-Struct Conference {
+struct Conference {
   Conference(bool iisActive,
   const std::string& ititle,
   const std::string& iconfID,
@@ -27,7 +27,6 @@ Struct Conference {
   isActive(iisActive),
   title(ititle),
   confID(iconfID),
-  originality(ioriginality),
   topic(itopic),
   description(idescription),
   location(ilocation),
@@ -36,16 +35,16 @@ Struct Conference {
   paperDeadline(ipaperDeadline),
   isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
   reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline))
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
   reviewDeadlineHard(ireviewDeadlineHard),
   isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
   discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper)
+  reviewersPerPaper(ireviewersPerPaper),
   postWordLimit(ipostWordLimit)
   { }
 
-  void checkDeadlines()
-  void allocatePapers()
+  void checkDeadlines();
+  void allocatePapers();
 
   bool isActive;
   std::string title;
diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index e96a23f..06e569e 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -3,7 +3,7 @@
 
 #include "Conference.hpp"
 
-Struct ConferenceManager {
+struct ConferenceManager {
   ConferenceManager(std::vector<Conference*> iconferences) : conferences(iconferences) { }
   ~ConferenceManager() {
   for (unsigned i=0; i < conferences.size(); i++) {
@@ -11,17 +11,17 @@ Struct ConferenceManager {
   }
 }
 
-  void addConference()
-  void modifyConference(int)
-  bool deleteConference(int)
-  void sendConference()
-  void sendConferenceBatch()
-  void checkAllDeadlines()
+  void addConference();
+  void modifyConference(int);
+  bool deleteConference(int);
+  void sendConference();
+  void sendConferenceBatch();
+  void checkAllDeadlines();
 
   std::vector<Conference*> conferences;
 
 private:
-  fetchConference(int)
+  void fetchConference(int);
 
 };
 #endif
diff --git a/Server/Date.hpp b/Server/Date.hpp
index ca00504..7431c8b 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -1,7 +1,7 @@
 #ifndef DATE_H
 #define DATE_H
 
-Struct Date {
+struct Date {
   Date(int iday,
     int imonth,
     int iyear):
@@ -9,8 +9,11 @@ Struct Date {
     month(imonth),
     year(iyear)
     { }
-
-bool compare(Data)
+  Date(const Date& in) {
+  day = in.day;
+  month = in.month;
+  year = in.year;}
+bool compare(Date);
 
 int day{0};
 int month{0};
diff --git a/Server/Discussion.hpp b/Server/Discussion.hpp
index 4ade59b..8940c6a 100644
--- a/Server/Discussion.hpp
+++ b/Server/Discussion.hpp
@@ -4,10 +4,13 @@
 
 #include <list>
 
-Struct Discussion {
+struct Discussion {
+  Discussion() { }
   Discussion(const std::list<DiscussionPost>& idiscussion):
                discussion(idiscussion)
                { }
+  Discussion(const Discussion& in) {
+  discussion = in.discussion;}
   std::list<DiscussionPost> discussion;
 };
 #endif
diff --git a/Server/DiscussionPost.hpp b/Server/DiscussionPost.hpp
index 079c02b..560e56e 100644
--- a/Server/DiscussionPost.hpp
+++ b/Server/DiscussionPost.hpp
@@ -2,7 +2,7 @@
 #define DISCUSSION_POST_H
 #include <string>
 
-Struct DiscussionPost {
+struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
                  const std::string& ireviewerUName,
                  int ipostID):
diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index b3704b4..f265a3b 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -9,16 +9,16 @@
 #include <memory>
 #include <vector>
 
-Struct Paper {
+struct Paper {
 
-    Paper() { *discussion = new Discussion;}
+    Paper() { discussion = new Discussion;}
     Paper(const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<string>& iauthorNames,
-      const std::vector<string>& ikeywords,
+      const std::vector<std::string>& iauthorNames,
+      const std::vector<std::string>& ikeywords,
 //      const std::string& ifname,
 //      char* ipaper,
-      const std::vector<review>& ireviews)
+      const std::vector<Review>& ireviews)
       :
       title(ititle),
       abstract(iabstract),
@@ -27,7 +27,7 @@ Struct Paper {
 //      fname(ifname),
 //      paper(ipaper), // constructs from cstring
       reviews(ireviews)
-      {*discussion = new Discussion;}
+      {discussion = new Discussion;}
     ~Paper() {delete discussion;}
     // no assignment operator or copy constructor deemed necessary at this point
     std::string title;
diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 605a5aa..a4783c9 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -2,26 +2,26 @@
 #define PAPER_MANAGER_H
 #include "Paper.hpp"
 
-Struct PaperManager {
+struct PaperManager {
   PaperManager() {temp = NULL;}
   PaperManager(Paper* itemp) : temp(itemp) { }
   ~PaperManager() {delete temp;}
   Paper* temp;
 
-  void addPaper()
-  void modifyPaper(int)
-  bool deleteDiscPost(int)
-  void modifyDiscPost(int)
-  bool deleteReview(int)
-  void modifyReview(int)
-  bool deletePaper(int)
-  void sendPaper()
-  void sendPaperBatch(int)
-  void sendAuthoredPaper(int)
-  void sendPapersToReview(int)
+  void addPaper();
+  void modifyPaper(int);
+  bool deleteDiscPost(int);
+  void modifyDiscPost(int);
+  bool deleteReview(int);
+  void modifyReview(int);
+  bool deletePaper(int);
+  void sendPaper();
+  void sendPaperBatch(int);
+  void sendAuthoredPaper(int);
+  void sendPapersToReview(int);
 
 private:
-  fetchPaper(int)
+void fetchPaper(int);
 
 };
 #endif
diff --git a/Server/Review.hpp b/Server/Review.hpp
index ab2c571..7dabff0 100644
--- a/Server/Review.hpp
+++ b/Server/Review.hpp
@@ -2,9 +2,9 @@
 #define REVIEW_H
 #include <string>
 
-Struct Review {
-  Review(const std::string& ireviewerName
-  int reviewId;
+struct Review {
+  Review(const std::string& ireviewerName,
+  int reviewId,
   int ioverall,
   int iconfidence,
   int irelevance,
@@ -31,7 +31,7 @@ Struct Review {
   commentsWeakness(icommentsWeakness),
   commentsSuggestions(icommentsSuggestions),
   commentsShortPaper(icommentsShortPaper),
-  commentsBestAward(icommentsBestAward))
+  commentsBestAward(icommentsBestAward)
   { }
   std::string reviewerName;
   int reviewId;
diff --git a/Server/ServerDriver.cpp b/Server/ServerDriver.cpp
new file mode 100644
index 0000000..7213998
--- /dev/null
+++ b/Server/ServerDriver.cpp
@@ -0,0 +1,23 @@
+#include <iostream>
+
+#include "ClientHandler.hpp"
+#include "Conference.hpp"
+#include "ConferenceManager.hpp"
+#include "Date.hpp"
+#include "Discussion.hpp"
+#include "DiscussionPost.hpp"
+#include "Paper.hpp"
+#include "PaperManager.hpp"
+#include "Review.hpp"
+#include "User.hpp"
+#include "UserManager.hpp"
+
+
+int main()
+{
+std::cout << "hello world" << std::endl;
+int foo = 6;
+auto bar = foo;
+std::cout << bar << "bar" << std::endl;
+return 0;
+}
diff --git a/Server/ServerDriver.exe b/Server/ServerDriver.exe
new file mode 100644
index 0000000..581df46
Binary files /dev/null and b/Server/ServerDriver.exe differ
diff --git a/Server/ServerDriver.o b/Server/ServerDriver.o
new file mode 100644
index 0000000..d51dec9
Binary files /dev/null and b/Server/ServerDriver.o differ
diff --git a/Server/User.hpp b/Server/User.hpp
index 66b7c7d..57c5228 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -5,16 +5,16 @@
 #include <vector>
 
 
-Struct User {
-  User(const std::string& iusername,
+struct User {
+  User(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
          const std::string& ipassword,
          int iuserID,
-         const std::vector<std::string>& keywords:
-         username(iusername),
+         const std::vector<std::string>& ikeywords):
+         userName(iuserName),
          name(iname),
          email(iemail),
          organisation(iorganisation),
diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 4f20ee4..dadf702 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -3,20 +3,20 @@
 
 #include <string>
 
-Struct UserManager {
+struct UserManager {
   UserManager() {temp = NULL;}
   UserManager(User* itemp) : temp(itemp) { }
   ~UserManager() { delete temp;}
   User* temp;
-  void addUser()
-  void modifyUser()
-  bool deleteUser(int)
-  void sendUser()
-  void sendUserBatch()
-  bool fetchUser(std::string, std::string)
+  void addUser();
+  void modifyUser();
+  bool deleteUser(int);
+  void sendUser();
+  void sendUserBatch();
+  bool fetchUser(std::string, std::string);
 
 
 private:
-  fetchUser(int)
+ void fetchUser(int);
 };
 #endif
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index b406e57..9802845 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -6,17 +6,18 @@
 
 #include <vector>
 
-Class Author : public User {
+class Author : public User {
   public:
-    Author(const std::string& iusername,
+    Author() { }
+    Author(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
          int iuserID,
-         const std::vector<string>& ikeywords,
+         const std::vector<std::string>& ikeywords,
          const std::vector<Paper>& iownPapers):
-         username(iusername),
+         userName(iuserName),
          name(iname),
          email(iemail),
          organisation(iorganisation),
@@ -26,10 +27,10 @@ Class Author : public User {
          ownPapers(iownPapers)
          { }
     virtual void view();
-    void getPapers()
-    void submitPaper()
-    void modifyPaper()
-    void submitRebuttal()
+    void getPapers();
+    void submitPaper();
+    void modifyPaper();
+    void submitRebuttal();
 
 
     std::vector<std::string> keywords;
diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index 988a62a..767134d 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -8,7 +8,7 @@
 #include <string>
 #include <vector>
 
-Struct Conference {
+struct Conference {
   Conference(bool iisActive,
   const std::string& ititle,
   const std::string& iconfID,
@@ -29,7 +29,6 @@ Struct Conference {
   isActive(iisActive),
   title(ititle),
   confID(iconfID),
-  originality(ioriginality),
   topic(itopic),
   description(idescription),
   location(ilocation),
@@ -38,15 +37,15 @@ Struct Conference {
   paperDeadline(ipaperDeadline),
   isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
   reviewDeadlineSoft(ireviewDeadlineSoft),
-  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline))
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline),
   reviewDeadlineHard(ireviewDeadlineHard),
   isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
   discussDeadline(idiscussDeadline),
-  reviewersPerPaper(ireviewersPerPaper)
+  reviewersPerPaper(ireviewersPerPaper),
   postWordLimit(ipostWordLimit)
   { }
 
-  std::vector<std::string> searchForKWords(std::string)
+  std::vector<std::string> searchForKWords(std::string);
 
   bool isActive;
   std::string title;
diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
index 8732a4f..9984171 100644
--- a/UserClient/Date.hpp
+++ b/UserClient/Date.hpp
@@ -1,7 +1,7 @@
 #ifndef DATE_H
 #define DATE_H
 
-Struct Date {
+struct Date {
   Date(int iday,
     int imonth,
     int iyear):
@@ -10,7 +10,11 @@ Struct Date {
     year(iyear)
     { }
 
-  bool compare(Data)
+  Date(const Date& in) {
+  day = in.day;
+  month = in.month;
+  year = in.year;}
+  bool compare(Date);
 
 int day{0};
 int month{0};
diff --git a/UserClient/Discussion.hpp b/UserClient/Discussion.hpp
index 456dfca..fadaf5e 100644
--- a/UserClient/Discussion.hpp
+++ b/UserClient/Discussion.hpp
@@ -5,7 +5,8 @@
 
 #include <list>
 
-Struct Discussion {
+struct Discussion {
+  Discussion() { }
   Discussion(const std::list<DiscussionPost>& idiscussion):
                discussion(idiscussion)
                { }
diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
index 49c9a19..4fcd752 100644
--- a/UserClient/DiscussionPost.hpp
+++ b/UserClient/DiscussionPost.hpp
@@ -3,7 +3,7 @@
 
 #include <string>
 
-Struct DiscussionPost {
+struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
                  const std::string& ireviewerUName):
                  comment(icomment),
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index b25156c..9de2931 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -4,7 +4,7 @@
 
 #include "Conference.hpp"
 
-Class LoginManager {
+class LoginManager {
   public:
   LoginManager(bool iloggedIn,
                const std::vector<Conference>& iconferences,
@@ -19,11 +19,11 @@ Class LoginManager {
   }
 }
 // no other constructors deemed necessary at this point
-  bool login(std::string, std::string)
-  void logout()
-  void createAccount()
-  void listConferences()
-  void viewActiveConfDetails()
+  bool login(std::string, std::string);
+  void logout();
+  void createAccount();
+  void listConferences();
+  void viewActiveConfDetails();
   Conference* getActiveConference() {return activeConference;}
   std::vector<Conference> getConferences() {return conferences;}
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 03e6203..5acc95e 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -6,25 +6,25 @@
 
 #include <vector>
 
-Class PCChair : public User {
+class PCChair : public User {
   public:
-  PCChair(const std::vector<std::string>& iallPapers)
+  PCChair(const std::vector<Paper>& iallPapers)
   : allPapers(iallPapers)
   { }
   std::vector<Paper> getAllPapers() {return allPapers;}
   void setAllPapers(const std::vector<Paper>& iallPapers) {allPapers = iallPapers;}
   void view();
-  void removeReviewer()
-  bool removeReviewerByName(std::string)
-  void editConfDetails()
-  void setConfDeadlines()
-  void setConfKWords()
-  int getAvgScoreForPaper()
-  void acceptOrRejectPaper()
-  void addReviewerToConf()
+  void removeReviewer();
+  bool removeReviewerByName(std::string);
+  void editConfDetails();
+  void setConfDeadlines();
+  void setConfKWords();
+  int getAvgScoreForPaper();
+  void acceptOrRejectPaper();
+  void addReviewerToConf();
 
   private:
-  Paper* getPaperByTitle(std::string)
+  Paper* getPaperByTitle(std::string);
   std::vector<Paper> allPapers;
 
 };
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 66634b9..60abc60 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -6,13 +6,13 @@
 #include <fstream>
 #include <vector>
 
-Class Paper {
+class Paper {
   public:
-    Paper() { *discussion = new Discussion;}
+    Paper() {discussion = new Discussion;}
     Paper(const std::string& ititle,
       const std::string& iabstract,
-      const std::vector<string>& iauthorNames,
-      const std::vector<string>& ikeywords,
+      const std::vector<std::string>& iauthorNames,
+      const std::vector<std::string>& ikeywords,
       const std::string& ifname,
       char* ipaper)
       :
@@ -22,7 +22,7 @@ Class Paper {
       keywords(ikeywords),
       fname(ifname),
       paper(ipaper) // constructs from cstring
-      {*discussion = new Discussion;} // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
+      {discussion = new Discussion;} // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
       // In those edge cases one could still initialize then set or use copy constructor
     ~Paper() {delete discussion;}
 /*    Paper(const Paper& ipaper) {
@@ -50,15 +50,15 @@ Class Paper {
     std::vector<std::string> getAuthorNames() {return authorNames;}
     std::vector<std::string> getKeywords() {return keywords;}
     std::string getFname() {return fname;}
-    std::fstream getPaper() {return paper;}
+    //std::fstream getPaper() {return paper;}
     Discussion* getDiscussion() {return discussion;}
     void setTitle(const std::string& ititle) {title = ititle;}
     void setAbstract(const std::string& iabstract) {abstract = iabstract;}
     void setAuthorNames(const std::vector<std::string>& iauthorNames) {authorNames = iauthorNames;}
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
-    void setFname(const std::fstream& ipaper) {paper = ipaper;}
+    void setFname(const std::string& ifname) {fname = ifname;}
     void setDiscussion(Discussion* idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
-    void downloadPaper()
+    void downloadPaper();
 
   private:
     std::string title;
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index 750bd63..4471ba2 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -3,10 +3,10 @@
 
 #include "Paper.hpp"
 
-Struct Review {
-  Review(paper = NULL)
+struct Review {
+  Review() {paper = NULL;}
   Review(Paper* ipaper,
-    int reviewId;
+    int reviewId,
     int ioverall,
     int iconfidence,
     int irelevance,
@@ -20,7 +20,7 @@ Struct Review {
     const std::string& icommentsSuggestions,
     const std::string& icommentsShortPaper,
     const std::string& icommentsBestAward):
-    paper(ipaper)
+    paper(ipaper),
     overall(ioverall),
     confidence(iconfidence),
     relevance(irelevance),
@@ -33,9 +33,9 @@ Struct Review {
     commentsWeakness(icommentsWeakness),
     commentsSuggestions(icommentsSuggestions),
     commentsShortPaper(icommentsShortPaper),
-    commentsBestAward(icommentsBestAward))
+    commentsBestAward(icommentsBestAward)
     { }
-  Paper paper*;
+  Paper* paper;
   int reviewId;
   int overall;
   int confidence;
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 46193e1..a3b8b8f 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -4,21 +4,21 @@
 #include "Author.hpp"
 #include "Review.hpp"
 
-Class Reviewer : public Author {
+class Reviewer : public Author {
   public:
-    Reviewer(const std::string& iusername,
+    Reviewer(const std::string& iuserName,
       const std::string& iname,
       const std::string& iemail,
       const std::string& iorganisation,
       const std::string& iphone,
       int iuserID,
-      const std::vector<string>& ikeywords,
+      const std::vector<std::string>& ikeywords,
       const std::vector<Paper>& iownPapers,
       const std::vector<Paper>& iallocatedPapers,
       const std::vector<Paper>& ipapersToBid,
       const std::vector<Review>& ireviews)
       :
-      username(iusername),
+      userName(iuserName),
       name(iname),
       email(iemail),
       organisation(iorganisation),
@@ -31,13 +31,13 @@ Class Reviewer : public Author {
       reviews(ireviews)
       { }
     void view();
-    void getPapersToReview()
-    void submitReview()
-    void editReview()
-    void bidOnPaper()
-    void modifyPaper()
-    void viewDiscussion()
-    void addDiscussion()
+    void getPapersToReview();
+    void submitReview();
+    void editReview();
+    void bidOnPaper();
+    void modifyPaper();
+    void viewDiscussion();
+    void addDiscussion();
 
     std::vector<Paper> getAllocatedPapers() {return allocatedPapers;}
     std::vector<Paper> getPapersToBid() {return papersToBid;}
@@ -47,8 +47,8 @@ Class Reviewer : public Author {
     void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
 
   private:
-    Paper* getPaperByTitle(std::string) // helper
-    Paper* getPaperByIndex(int) // helper
+    Paper* getPaperByTitle(std::string); // helper
+    Paper* getPaperByIndex(int); // helper
 
     std::vector<Paper> allocatedPapers;
     std::vector<Paper> papersToBid;
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index 9747cc7..828eb26 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -3,16 +3,17 @@
 
 #include <string>
 
-Class User {
+class User {
   public:
-    User(const std::string& iusername,
+    User() { }
+    User(const std::string& iuserName,
          const std::string& iname,
          const std::string& iemail,
          const std::string& iorganisation,
          const std::string& iphone,
          const std::string& ipassword,
          int iuserID):
-         username(iusername),
+         userName(iuserName),
          name(iname),
          email(iemail),
          organisation(iorganisation),
@@ -21,9 +22,9 @@ Class User {
          userID(iuserID)
          { }
     virtual void view() = 0;
-    void modifyDetails()
-    void viewConferenceDetails()
-    std::string getUserID() {return userID;}
+    void modifyDetails();
+    void viewConferenceDetails();
+    int getUserID() {return userID;}
     std::string getPassword() {return password;}
     std::string getName() {return name;}
     std::string getEmail() {return email;}
@@ -36,7 +37,7 @@ Class User {
     void setOrganisation(const std::string& iorganisation) {organisation = iorganisation;}
     void setPhone(const std::string& iphone) {phone = iphone;}
 
-    std::string username;
+    std::string userName;
 
   protected:
 
diff --git a/UserClient/UserClientDriver.cpp b/UserClient/UserClientDriver.cpp
new file mode 100644
index 0000000..3d84db4
--- /dev/null
+++ b/UserClient/UserClientDriver.cpp
@@ -0,0 +1,24 @@
+#include <iostream>
+
+#include "Author.hpp"
+#include "Conference.hpp"
+#include "Date.hpp"
+#include "Discussion.hpp"
+#include "DiscussionPost.hpp"
+#include "LoginManager.hpp"
+#include "Paper.hpp"
+#include "PCChair.hpp"
+#include "Review.hpp"
+#include "Reviewer.hpp"
+#include "User.hpp"
+
+
+
+int main()
+{
+std::cout << "hello world" << std::endl;
+int foo = 6;
+auto bar = foo;
+std::cout << bar << "bar" << std::endl;
+return 0;
+}

commit 52b7a4d6a25b4102c117dcf281015349199be8a2
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 18 15:56:08 2014 +1100

    Create RecordStore.h

diff --git a/RecordStore.h b/RecordStore.h
new file mode 100644
index 0000000..8c9f03d
--- /dev/null
+++ b/RecordStore.h
@@ -0,0 +1,42 @@
+#include <string>
+#include <vector>
+#include "mysql_connection.h"
+#include "mysql_driver.h"
+#include "MyRecord.h"
+
+class MyRecordStore {
+public:
+        MyRecordStore();
+
+        ~MyRecordStore();
+        // Delete - returns false if there wasn't a record with that key
+        bool deleteRecord(const char* key) throw (const char*);
+        // Exists - is there a record with a given key
+        bool exists(const char* key) throw (const char*);
+        // Put - insert/replace a record; returns false if failed
+        // (In this example, key is actually the same as name field in data record)
+        void put(const char* key, const MyRecord *data) throw (const char*);
+        // Get - get record with keyerror: Failed connect to github.com:443; Connection refused while accessing
+        MyRecord *get(const char*key) throw (const char*);
+
+        vector<MyRecord*> *getInRole(const char* role) throw (const char*);
+
+        void close();
+
+        std::vector,string> *allKeys();
+
+        bool isOK()
+        {
+                return !(this->invalid);
+        }
+
+private:
+        bool invalid;
+        sql::Connection *dbcon;
+        sql::Drive *driver;
+        MyRecordStore(const MyRecordStore& orig);
+        MyRecordStore& operator=(const MyRecordStore);
+
+        void recordToTables(const MyRecord *data);
+
+};

commit 82c0575c2428fe37a1e4f8cb2690f7aea3926335
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 18 15:55:40 2014 +1100

    Create RecordStore.cpp

diff --git a/RecordStore.cpp b/RecordStore.cpp
new file mode 100644
index 0000000..a5c7f34
--- /dev/null
+++ b/RecordStore.cpp
@@ -0,0 +1,324 @@
+#include "MyRecordStore.h"
+#include "cppconn/driver.h"
+#include "cppconn/exception.h"
+#include "cppconn/prepared_statement.h"
+
+#include <cstring>
+#include <stdlib.h>
+#include <iostream>
+
+const char* databaseStr = "tcp://127.0.0.1:3306";
+const char* databaseUserName = "nabg";
+const char* databaseUserPassword = "NotReallyMyPassword";
+const char* databaseSchema = "nabg";
+
+const char* noDB = "Sorry, but was unable to open database so operation failed";
+
+const char* prepareFailed = "Failure when preparing statement";
+const char* bindFailed = "Failure when binding arguments";
+const char* writeFailed = "Failure when writing to database";
+
+MyRecordStore::MyRecordStore()
+{
+        // Constructors should always succeed. But suppose it failed and
+        // the database couldn't be created?
+        invalid = true;
+        driver = get_driver_instance();
+        try {
+                dbcon = driver->connect(databaseStr, databaseUserName, databaseUserPassword);
+        } catch (sql::SQLException &e) {
+                // Failed
+                return;
+        }
+        dbcon->setSchema(databaseSchema);
+        // It's ok
+        invalid = false;
+}
+
+MyRecordStore::~MyRecordStore()
+{
+        if (!invalid) {
+                this->close();
+        }
+}
+
+void MyRecordStore::close()
+{
+        if (!invalid) {
+                dbcon->close();
+                delete dbcon;
+        }
+        invalid = true;
+}
+
+bool MyRecordStore::exists(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        const char* countrecord = "select count(*) from MyRecord where _id=?";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(countrecord);
+
+        int count = 0;
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        if (rs->next()) {
+                count = rs->getInt(1);
+        }
+        delete rs;
+        delete pstmt;
+
+        return count = 1;
+}
+
+std::vector<string> *MyRecordStore::allKeys()
+{
+        if (invalid)
+                throw (noDB);
+        std::vector<string> *vptr = new std::vector<string>();
+
+        const char* selectall = "select _id from MyRecord";
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet * rs = NULL;
+
+        pstmt = dbcon->prepareStatement(selectall);
+
+        rs = pstmt->executeQuery();
+        while (rs->next()) {
+                string anid = rs->getString(1);
+                vprt->push_back(anid);
+        }
+
+        return vprt;
+}
+
+vector<MyRecord*> *MyRecordStore::getInRole(const char* role) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Laboured
+        // First get a list of the ids with the role, then one by one get the
+        // complete records.
+        const char* getrolepersons = "selects personid from roles where _role=?";
+        sqlite3_stmt* stmt;
+        int rc;
+        rc = sqlite3_prepare_v2(db,
+                getrolepersons, strlen(getrolepersons),
+                &stmt, &unused);
+        if (rc != SQLITE_OK) {
+                std::cerr << prepareFailed << std::endl;
+                exit(1);
+        }
+
+        rc = sqlite3_bind_text{stmt, 1, role, -1 , SQLITE_STATIC);
+        if (rc ~= SQLITE_OK) {
+                std::cerr << bindFailed << std::endl;
+                exit(1);
+        }
+        vector<string> people;
+
+        // rc = sqlite3_step(stmt);
+
+        while (sqlite3_step(stmt) == SQLITE_ROW) {
+                const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
+                people.push_back(apersonid);
+        }
+        sqlite3_finalize(stmt);
+
+
+        // Maybe there weren't any
+        if (people.size() == 0)
+                return NULL;
+
+        // Build collection by getting each record
+        vector<MyRecord*> *roleholders = new vector<MyRecord*>();
+
+        vector<string>::const_iterator it;
+        for (it = people.begin(); it != people.end(); it++) {
+                string aperson = *it;
+                MyRecord* rec = this->get(aperson.c_str());
+                roleholders->push_back(rec);
+        }
+
+        return roleholders;
+}
+
+void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
+{
+
+        if (invalid)
+                throw (noDb);
+
+        // Tiresome
+        // If it exists - delete it
+        if (this->exists(key)) {
+                bool done = this->deleteRecord(key);
+        }
+        // Insert it
+        this->recordToTables(data);
+}
+
+bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // explicitly delete subordinate records in Phones, Address, others and Roles
+        // then delete the myrecord entry
+        // recreating the prepared statements for each operation - costly
+        const char* deletephones = "delete from Phones where idPerson=?";
+        const char* deleteaddress = "delete from Addresses where idPerson=?";
+        const char* deleteother = "delete from Other where idPerson=?";
+        const char* deleteroles = "delete from Roles where idPerson=?";
+        const char* unused; // Pointer to unused part of sql string (?)
+        sql::PreparedStatement *pstmt = NULL;
+        // Phones
+        pstmt = dbcon->prepareStatement(deletephones);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Addresses
+        pstmt = dbcon->prepareStatement(deleteaddress);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete ptmst;
+
+        //Other
+        pstmt = dbcon->prepareStatement(deleteother);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Roles
+        pstmt = dbcon->prepareStatement(deleteroles);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        // Finally
+        pstmt = dbcon->prepareStatement(deletemyrecord);
+        pstmt->setString(1, key);
+        pstmt->executeUpdate();
+        delete pstmt;
+
+        return true;
+}
+
+MyRecord *MyRecordStore::get(const char* key) throw (const char*)
+{
+        if (invalid)
+                throw (noDB);
+        // Again laborious
+        // Load the MyRecord from its table, then add data from Other tables.
+        const char* getrecord = "select * from MyRecord where _id=?";
+        const char* getroles = "select role from Roles where idperson=?";
+        const char* getphones = "select type, number from Phones where idPerson=?";
+        const char* getaddress = "select type, address from Addresses where idPerson=?";
+        const char* getother = "select key, valyue from Other where idPerson=?";
+
+        sql::PreparedStatement *pstmt = NULL;
+        sql::ResultSet *rs = NULL;
+
+        pstmt = dbcon->prepareStatement(getrecord);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        bool haveRecord = rs->next();
+        if (!haveRecord)
+        {
+                delete rs;
+                delete pstmt;
+                return NULL;
+        }
+
+        string id = rs->getString(1);
+        string name = rs->getString(2);
+        string email = rs->getString(3);
+        string info = rs->getString(4);
+        string image = rs->getString(5);
+
+        MyRecord *arec = new MyRecord(id);
+        arec->setName(name);
+        arec->setEmail(email);
+        arec->setInfo(info);
+        arec->setImage(image);
+
+        delete rs;
+        delete pstmt;
+        // =======================================
+        // Now ask about roles
+        pstmt = dbcon->prepareStatement(getroles);
+        pstmt->setString(1, key);
+        rs = pstmt->executeQuery();
+        while (rs->next())
+        {
+                string arole = rs->getString(1);
+                arec->addRole(arole);
+        }
+        delete rs;
+        delete pstmt;
+}
+
+void MyRecordStore::recordToTables(const MyRecord* data)
+{
+        if (invalid)
+                throw (noDB);
+
+        // Insert the myrecord data first, then deal with Other data tables
+
+        const char* putmyrecord = "insert into MyRecord values( ?, ?, ?, ?, ?)";
+        const char* putrole = "insert into Roles values(?, ?)";
+        const char* putphone = "insert into Phones values (?, ?, ?)";
+        const char* putaddress = "insert into Addresses values (?, ?, ?)";
+        const char* putother = "insert into Other values (?, ?, ?)";
+
+        sql::PrepareStatement *pstmt = NULL;
+        pstmt = dbcon->prepareStatement(putmyrecord);
+        pstmt->setString(1, data->getID());
+        pstmt->setString(2, data->getName());
+        pstmt->setString(3, data->getEmail());
+        pstmt->setString(4, data->getInfo());
+        pstmt->setString(5, data->getImage());
+
+        pstmt->executeUpdate();
+
+        delete pstmt;
+
+        // Role 
+        if (data->getOtherKV().size() > 0)
+        {
+                pstmt = dbcon->prepareStatement(putother);
+                map<string, string>:const_iterator it;
+                for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+                {
+                        string akey = it->first;
+                        string avalue = it->second;
+                        pstmt->setString(1, data->getID());
+                        pstmt->setString(2, akey);
+                        pstmt->setString(3, avalue);
+                        pstmt->excuteUpdate();
+                }
+                delete pstmt;
+
+        }
+
+        // Other
+        if (data->getOtherKV().size() > 0)
+        {
+                pstmt = dbcon->prepareStatement(putother);
+                map<string, string>:const_iterator it;
+                for (it = data->getOtherKV.begin(); it != data->getOtherKV().end(); it ++)
+                {
+                        string akey = it->first;
+                        string avalue = it->second;
+                        pstmt->setString(1, data->getID());
+                        pstmt->setString(2, akey);
+                        pstmt->setString(3, avalue);
+                        pstmt->excuteUpdate();
+                }
+                delete pstmt;
+
+        }
+}
+

commit 991686f98b531a83f3ecbee9fbf34ed841575084
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 18 15:53:40 2014 +1100

    Create Exception.h

diff --git a/Exception.h b/Exception.h
new file mode 100644
index 0000000..216cca4
--- /dev/null
+++ b/Exception.h
@@ -0,0 +1,25 @@
+/*
+ * File:        MyException.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:20 AM
+ */
+
+#ifndef MYEXCEPTION_H
+#define MYEXCEPTION_H
+
+#include <string>
+#include <exception>
+using namespace std;
+
+class MyException : public exception {
+public:
+    MyException(string& whatsup) : message(whatsup) {  }
+    ~MyException() throw() {}
+    const char* what(){return message.c_str();}
+private:
+    string message;
+};
+
+#endif  /* MYEXCEPTION_H */
+

commit 3010412139275629e655557ef994949456c67123
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 18 15:53:16 2014 +1100

    Create Record.cpp

diff --git a/Record.cpp b/Record.cpp
new file mode 100644
index 0000000..23e956c
--- /dev/null
+++ b/Record.cpp
@@ -0,0 +1,129 @@
+/*
+ * File:        MyRecord.cpp
+ * Author:      nabg
+ * 
+ * Created on 23 November 2012, 1:25 PM
+ * 
+ * See MyRecord.h for some explanation!
+ * 
+ * class MyRecord {
+public:
+    explicit MyRecord(string& id); 
+    void setName(string& aname) throw (MyException);
+    void setEmail(string& amail) throw (MyException);
+    void setInfo(string& info) throw (MyException);
+    void setImage(string& imagestr) throw (MyException);
+    void addRole(string& anotherrole) throw (MyException);
+    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
+
+    string getID() const { return this->id; }
+    string getName() const { return this->name; }
+    string getEmail() const { return this->email; }
+    string getInfo() const { return this->info; }
+    string getImage() const { return this->image; }
+    string getAttribute(string& collectionname, string& key) const throw(MyException);
+    vector<string> getRoles() const { return this->roles; }
+    map<string,string> getPhones() const { return this->phones; }
+    map<string,string> getAddresses() const { return this->addresses; }
+    map<string,string> getOtherKV() const { return this->other; }
+    
+    bool hasRole(string& queryrole) const;
+    
+private:
+    string id; 
+    string name; 
+    string email; 
+    string image;
+    string info;
+    vector<string> roles;
+    map<string,string> phones;
+    map<string,string> addresses;
+    map<string,string> other;
+
+
+
+ * 
+ * 
+ */
+
+#include <vector>
+#include <algorithm>
+#include "MyRecord.h"
+
+MyRecord::MyRecord(string& id) {
+    this->id = id;
+}
+
+void MyRecord::setName(string& aname) throw (MyException) {
+    this->name = aname;
+}
+
+void MyRecord::setEmail(string& amail) throw (MyException) {
+    this->email = amail;
+}
+
+void MyRecord::setInfo(string& info) throw (MyException) {
+    this->info = info;
+}
+
+void MyRecord::setImage(string& imagestr) throw (MyException) {
+    this->image = imagestr;
+}
+
+void MyRecord::addRole(string& anotherrole)  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+    if (it != this->roles.end()) return; // Found it, so don't duplicate
+    roles.push_back(anotherrole);
+}
+
+void MyRecord::addKeyValue(string& collectionname, string& key, string& value) throw (MyException) {
+    if (key.empty() || value.empty()) {
+        string msg = "Empty key or value";
+        throw MyException(msg);
+    }
+    // If same collection/key combination specified more than once, later value
+    // overwrites earlier value for that key.
+
+    if (collectionname == "Phones") {
+        this->phones.insert(pair<string,string> (key, value));
+    } else
+        if (collectionname == "Addresses") {
+        this->addresses.insert(pair<string,string> (key, value));
+    } else
+        if (collectionname == "Other") {
+         this->other.insert(pair<string,string> (key, value));
+    } else {
+        string errmsg = "There is no collection called " + collectionname;
+        throw MyException(errmsg);
+    }
+}
+
+string MyRecord::getAttribute(string& collectionname, string& key) const throw (MyException) {
+
+
+    if (collectionname == "Phones") {
+        return phones.find(key)->second;
+    } else
+        if (collectionname == "Addresses") {
+        return addresses.find(key)->second;
+    } else
+        if (collectionname == "Other") {
+        return other.find(key)->second;
+    }
+    string errmsg = "There is no collection called " + collectionname;
+    throw MyException(errmsg);
+
+}
+
+
+bool MyRecord::hasRole(string&  anotherrole) const  {
+    // Should it be an error to specify the same role more than once? No, it
+    // will not really matter - so don't throw exception, just don't duplicate.
+    vector<string>::const_iterator it;
+    it = find(this->roles.begin(), this->roles.end(), anotherrole);
+   return(it != this->roles.end()) ;
+}
+                                                     

commit dfcf0c7e0d1160e0b7169f4c2a7a35b65cfc8789
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sat Oct 18 15:51:52 2014 +1100

    Create Record.h

diff --git a/Record.h b/Record.h
new file mode 100644
index 0000000..3940935
--- /dev/null
+++ b/Record.h
@@ -0,0 +1,60 @@
+/*
+ * File:        MyRecord.h
+ * Author:      nabg
+ *
+ * Created on 27 November 2012, 11:18 AM
+ */
+
+#ifndef MYRECORD_H
+#define MYRECORD_H
+#include "MyException.h"
+#include <map>
+using namespace std;
+
+class MyRecord {
+public:
+    explicit MyRecord(string& id); // I don't want implicit conversion from std::string to MyRecord!
+    // Mutator functions - setting of other fields
+    // In this version, hardly any of the implementations will actually throw exceptions
+    // later validation functions will be added
+    void setName(string& aname) throw (MyException);
+    void setEmail(string& amail) throw (MyException);
+    void setInfo(string& info) throw (MyException);
+    void setImage(string& imagestr) throw (MyException);
+    void addRole(string& anotherrole) ;
+    void addKeyValue(string& collectionname, string& key, string& value) throw(MyException);
+    // Accessor functions
+
+    string getID() const { return this->id; }
+    string getName() const { return this->name; }
+    string getEmail() const { return this->email; }
+    string getInfo() const { return this->info; }
+    string getImage() const { return this->image; }
+    string getAttribute(string& collectionname, string& key) const throw(MyException);
+    const vector<string>& getRoles() const { return this->roles; }
+    const map<string,string>& getPhones() const { return this->phones; }
+    const map<string,string>& getAddresses() const { return this->addresses; }
+    const map<string,string>& getOtherKV() const { return this->other; }
+    
+    bool hasRole(string& queryrole) const;
+    
+private:
+    string id; // Also known as "nickname", or even "primary key"
+    string name; // full name
+    string email; 
+    string image;
+    string info;
+    vector<string> roles;
+    map<string,string> phones;
+    map<string,string> addresses;
+    map<string,string> other;
+     // Finally, note that copy constructor and assignment operator are
+    // private (and no implementations will be defined).  I choose to 
+    // disallow such operations.
+    MyRecord(const MyRecord& orig);
+    MyRecord& operator=(const MyRecord&);
+    // Further there is no virtual destructor, I do not intend MyRecord
+    // to be the base class in some hierarchy.
+};
+
+#endif  /* MYRECORD_H */

commit d7fd30b15be6fcf05c52e5e136873861267a6d62
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 15:05:22 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 51a7012..03e6203 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -1,6 +1,7 @@
 #ifndef P_C_CHAIR_H
 #define P_C_CHAIR_H
 
+#include "Paper.hpp"
 #include "User.hpp"
 
 #include <vector>

commit 7d638c9f782c8fd9f517931531439eee26b7887b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 15:03:37 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 749a5e0..51a7012 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -24,7 +24,7 @@ Class PCChair : public User {
 
   private:
   Paper* getPaperByTitle(std::string)
-  std::vector<std::string> allPapers;
+  std::vector<Paper> allPapers;
 
 };
 #endif

commit bd6eac9d878befaad360500306615f11ce794491
Author: ajcremona <alex.cremona@gmail.com>
Date:   Sat Oct 18 14:49:12 2014 +1100

    Create Algo
    
    Begin algo code: See TODOs
    
    Has PaperForReview class

diff --git a/Algo b/Algo
new file mode 100644
index 0000000..c8cd0d6
--- /dev/null
+++ b/Algo
@@ -0,0 +1,152 @@
+Algo:
+
+struct Reviewer
+{
+	int score;
+	int reviewerID;
+};
+
+Class PaperForReview
+{
+	private:
+		int paperID;
+
+
+		Reviewer[numOfReqReviewrs];
+
+		std::vector<int> authors;
+		std::vector<int> involvedOrganisation;
+		std::vector<int> conflictingReviewers;
+	public:
+		PapersForReview(int);
+		~PapersForReview();
+		int getMinScore();
+		void setNewReviewer(int, int);
+		void checkNewReviewer(int, int);
+		void addAuthor(int);
+		void conflictingReviewers();
+};
+
+void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
+{
+	if(getMinScore() < newscore)
+	{
+		//Set New Reviewer
+		setNewReviewer(newScore, newReviewerID);
+		
+	}
+}
+
+int PaperForReview::getMinScore()
+{
+	int minScore = -1;
+	for(int i=0; i< NumOfReqReviewrs; i++)
+	{
+		if(Reviewer[i].score < minScore)
+			minScore = Reviewer[i].score;
+	}
+	return i
+}
+
+void setNewReviewer(int newScore, int newReviewer)
+{
+
+	minScore = getMinScore();
+	for(int i=0; i< NumOfReqReviewrs; i++)
+	{
+		if(Reviewer[i].score < minScore)
+		{
+			Reviewer[i].score = newScore;
+			Reviewer[i].reviewerID =  newReviewer;
+			i=  NumOfReqReviewrs;
+		}
+	}
+
+}
+
+PaperForReview::~PaperForReview()
+{
+
+}
+
+PaperForReview::PaperForReview(int newPaperID)
+{
+	paperID = newPaperID
+	
+	for(int i=0; i< NumOfReqReviewrs; i++)
+	{
+		Reviewer[i].score = -1;
+	}
+}
+
+
+void PaperForReview::addAuthor(int newAuthor)
+{
+	authors.pushBack(newAuthor);
+}
+
+//TODO
+void  PaperForReview::conflictingReviewers
+{
+	//authors
+		//pushBackAllAuthors
+
+	//usersFromSameOrganisation
+		//ForEachAuthor:   SelectOrganisation
+			//SelectAllUsersFromEachOrganisation
+				//PushBack^
+
+	//pastCoAuthors
+		//ForEachAuthor:   selectAllPapers in temp
+			//Select All authors for each paper in temp
+				//pushBack^
+}
+
+
+
+std::map<PaperForReview*, int> allPapers; //Key is paper ID *** NEEDS TO BE DELETED***
+void readInAllPapers();
+
+//TODO
+
+void readInAllPapers()
+{
+	// select all papers
+	// push new PaperForReview objects into the map
+
+	// select all Authors where paper==paperID
+		//addAuthors to paper
+
+	// select organisation for each author
+		//add involved organisation
+
+}
+
+
+
+
+
+int caclculateScore(int userID, int paperID)
+{
+	int score = 1;
+
+	//for each keyword match
+		// ++ score
+
+	return score;
+
+}
+
+
+//TODO
+//for each paper
+	//IfUserID not in  conflictingReviewers
+		//if(isYES())
+			//calculate score * (isYES()*1000)
+				//checkNewReviewer
+			//elseif(isMAYBE)
+				//calculate score * (isMAYBE()*100)
+				//checkNewReviewer
+			//else
+				//calculate score
+				//checkNewReviewer

commit b21042c50e2f6fd091468a957668e1579302cc08
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 18 14:45:58 2014 +1100

    Create reviewer.ui

diff --git a/UserClient/reviewer.ui b/UserClient/reviewer.ui
new file mode 100644
index 0000000..f3ee5c0
--- /dev/null
+++ b/UserClient/reviewer.ui
@@ -0,0 +1,271 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>600</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>ConferenceManagementSystem</string>
+  </property>
+  <widget class="QWidget" name="centralwidget">
+   <widget class="QWidget" name="gridLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>220</x>
+      <y>20</y>
+      <width>551</width>
+      <height>151</height>
+     </rect>
+    </property>
+    <layout class="QGridLayout" name="gridLayout">
+     <item row="0" column="1">
+      <widget class="QLabel" name="paperName">
+       <property name="text">
+        <string>PAPERNAME</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="2">
+      <widget class="QPushButton" name="download">
+       <property name="text">
+        <string>Download</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="0">
+      <widget class="QSpinBox" name="paperSelect"/>
+     </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="mainKey">
+       <property name="text">
+        <string>MAINKEY</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="fileName">
+       <property name="text">
+        <string>FILENAME</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QTextBrowser" name="textBrowser">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QPushButton" name="pushButton">
+       <property name="text">
+        <string>Review Paper</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="horizontalLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>220</x>
+      <y>170</y>
+      <width>551</width>
+      <height>31</height>
+     </rect>
+    </property>
+    <layout class="QHBoxLayout" name="horizontalLayout">
+     <item>
+      <widget class="QLabel" name="bidlabel">
+       <property name="text">
+        <string>Bid:</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QSpinBox" name="bid"/>
+     </item>
+     <item>
+      <widget class="QPushButton" name="submitBid">
+       <property name="text">
+        <string>Submit Bid</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="gridLayoutWidget_2">
+    <property name="geometry">
+     <rect>
+      <x>220</x>
+      <y>210</y>
+      <width>551</width>
+      <height>381</height>
+     </rect>
+    </property>
+    <layout class="QGridLayout" name="gridLayout_2">
+     <item row="0" column="0">
+      <widget class="QLabel" name="discussionLabel">
+       <property name="text">
+        <string>Discussion</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QPushButton" name="submitPosts">
+       <property name="text">
+        <string>Submit Post</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QTextEdit" name="postBody">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;POST INPUT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="0">
+      <widget class="QTextBrowser" name="discussionBody">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;DISCUSSION POSTS&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="verticalLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>10</x>
+      <y>20</y>
+      <width>201</width>
+      <height>571</height>
+     </rect>
+    </property>
+    <layout class="QVBoxLayout" name="verticalLayout">
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_2">
+       <item>
+        <widget class="QLabel" name="username">
+         <property name="text">
+          <string>USERNAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="userid">
+         <property name="text">
+          <string>USERID</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="name">
+       <property name="text">
+        <string>NAME</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="email">
+       <property name="text">
+        <string>EMAIL</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="organisation">
+       <property name="text">
+        <string>ORGANISATION</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="phone">
+       <property name="text">
+        <string>PHONE</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="label">
+       <property name="text">
+        <string>Keywords</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QTextEdit" name="textEdit">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer name="verticalSpacer_8">
+       <property name="orientation">
+        <enum>Qt::Vertical</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>20</width>
+         <height>40</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="contextChange">
+       <property name="text">
+        <string>CHANGECONTEXT</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="apply">
+       <property name="text">
+        <string>Apply</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="logout">
+       <property name="text">
+        <string>Logout</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+  </widget>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>

commit 73494336fbb2be03681c4fef713f2951bed50d9c
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 18 14:45:02 2014 +1100

    Create review.ui

diff --git a/UserClient/review.ui b/UserClient/review.ui
new file mode 100644
index 0000000..0cfbebd
--- /dev/null
+++ b/UserClient/review.ui
@@ -0,0 +1,328 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>600</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>ConferenceManagementSystem</string>
+  </property>
+  <widget class="QWidget" name="centralwidget">
+   <widget class="QWidget" name="verticalLayoutWidget_2">
+    <property name="geometry">
+     <rect>
+      <x>20</x>
+      <y>20</y>
+      <width>171</width>
+      <height>141</height>
+     </rect>
+    </property>
+    <layout class="QVBoxLayout" name="verticalLayout_2">
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_3">
+       <item>
+        <widget class="QLabel" name="username">
+         <property name="text">
+          <string>USERNAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="userid">
+         <property name="text">
+          <string>USERID</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <widget class="QLabel" name="name">
+       <property name="text">
+        <string>NAME</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="email">
+       <property name="text">
+        <string>EMAIL</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="organisation">
+       <property name="text">
+        <string>ORGANISATION</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="phone">
+       <property name="text">
+        <string>PHONE</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="logout">
+       <property name="text">
+        <string>Logout</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="gridLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>210</x>
+      <y>20</y>
+      <width>571</width>
+      <height>141</height>
+     </rect>
+    </property>
+    <layout class="QGridLayout" name="gridLayout">
+     <item row="0" column="1">
+      <widget class="QLabel" name="paperName">
+       <property name="text">
+        <string>PAPERNAME</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="mainKey">
+       <property name="text">
+        <string>MAINKEY</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="fileName">
+       <property name="text">
+        <string>FILENAME</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QTextBrowser" name="textBrowser">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QPushButton" name="download">
+       <property name="text">
+        <string>Download</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="verticalLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>20</x>
+      <y>170</y>
+      <width>761</width>
+      <height>421</height>
+     </rect>
+    </property>
+    <layout class="QVBoxLayout" name="verticalLayout">
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout">
+       <item>
+        <widget class="QLabel" name="label_5">
+         <property name="text">
+          <string>Overall</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="overall"/>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_6">
+         <property name="text">
+          <string>Confidence</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="confidence"/>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_4">
+       <item>
+        <widget class="QLabel" name="label_9">
+         <property name="text">
+          <string>Relevance</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="relevance"/>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_10">
+         <property name="text">
+          <string>Originality</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="originality"/>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_5">
+       <item>
+        <widget class="QLabel" name="label_11">
+         <property name="text">
+          <string>Significance</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="significance"/>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_12">
+         <property name="text">
+          <string>Presentation</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="spinBox_8"/>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_2">
+       <item>
+        <widget class="QLabel" name="label_7">
+         <property name="text">
+          <string>Technical Quality</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="techQuality"/>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_8">
+         <property name="text">
+          <string>Evaluation</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QSpinBox" name="evaluation"/>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_11">
+       <item>
+        <widget class="QLabel" name="label_17">
+         <property name="text">
+          <string>Strengths of the paper</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_18">
+         <property name="text">
+          <string>Weaknesses of the paper</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_10">
+       <item>
+        <widget class="QTextEdit" name="commentsStrengths"/>
+       </item>
+       <item>
+        <widget class="QTextEdit" name="commentsWeaknesses"/>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_8">
+       <item>
+        <widget class="QLabel" name="label_13">
+         <property name="text">
+          <string>Would this paper be suitable as a short paper?</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="label_14">
+         <property name="text">
+          <string>Should this paper be considered for a best paper award?</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_12">
+       <item>
+        <widget class="QTextEdit" name="commentsShortPaper"/>
+       </item>
+       <item>
+        <widget class="QTextEdit" name="commentsBestAward"/>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_6">
+       <item>
+        <widget class="QLabel" name="label_19">
+         <property name="text">
+          <string>Detailed comments and suggestions</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QTextEdit" name="commentsSuggestions">
+         <property name="html">
+          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+    </layout>
+   </widget>
+   <zorder>verticalLayoutWidget_2</zorder>
+   <zorder>gridLayoutWidget</zorder>
+   <zorder>verticalLayoutWidget</zorder>
+   <zorder>label_5</zorder>
+  </widget>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>

commit e53b38c592d31ef54d8331f60ec9732f0be35822
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 18 14:44:15 2014 +1100

    Create login.ui

diff --git a/UserClient/login.ui b/UserClient/login.ui
new file mode 100644
index 0000000..b248898
--- /dev/null
+++ b/UserClient/login.ui
@@ -0,0 +1,79 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>600</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>ConferenceManagementSystem</string>
+  </property>
+  <widget class="QWidget" name="centralwidget">
+   <widget class="QLabel" name="title">
+    <property name="geometry">
+     <rect>
+      <x>270</x>
+      <y>110</y>
+      <width>241</width>
+      <height>61</height>
+     </rect>
+    </property>
+    <property name="text">
+     <string>Conference Management System</string>
+    </property>
+   </widget>
+   <widget class="QPushButton" name="loginButton">
+    <property name="geometry">
+     <rect>
+      <x>330</x>
+      <y>330</y>
+      <width>98</width>
+      <height>27</height>
+     </rect>
+    </property>
+    <property name="text">
+     <string>Login</string>
+    </property>
+   </widget>
+   <widget class="QWidget" name="formLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>280</x>
+      <y>210</y>
+      <width>191</width>
+      <height>81</height>
+     </rect>
+    </property>
+    <layout class="QFormLayout" name="formLayout">
+     <item row="0" column="0">
+      <widget class="QLabel" name="pword">
+       <property name="text">
+        <string>User Name</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="uname"/>
+     </item>
+     <item row="1" column="1">
+      <widget class="QLineEdit" name="lineEdit_2"/>
+     </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="pwordLabel">
+       <property name="text">
+        <string>Password</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+  </widget>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>

commit 56f9e0ac8b9b94d48e61072cb5efa9601f7e7826
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 18 14:43:26 2014 +1100

    Create author.ui

diff --git a/UserClient/author.ui b/UserClient/author.ui
new file mode 100644
index 0000000..928be98
--- /dev/null
+++ b/UserClient/author.ui
@@ -0,0 +1,258 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>MainWindow</class>
+ <widget class="QMainWindow" name="MainWindow">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>800</width>
+    <height>600</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>ConferenceManagementSystem</string>
+  </property>
+  <widget class="QWidget" name="centralwidget">
+   <widget class="QWidget" name="gridLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>260</x>
+      <y>10</y>
+      <width>511</width>
+      <height>441</height>
+     </rect>
+    </property>
+    <layout class="QGridLayout" name="gridLayout">
+     <item row="2" column="0">
+      <widget class="QTextEdit" name="authors">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;AUTHORS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QTextEdit" name="keywords">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QTextEdit" name="paperAbstract">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;ABSTRACT&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="paperName">
+       <property name="text">
+        <string>PAPERNAME</string>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="0">
+      <widget class="QLineEdit" name="filename">
+       <property name="text">
+        <string>FILENAME</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="0">
+      <widget class="QSpinBox" name="paperSelect"/>
+     </item>
+     <item row="1" column="0">
+      <widget class="QSpinBox" name="mainKey"/>
+     </item>
+     <item row="3" column="1">
+      <layout class="QHBoxLayout" name="horizontalLayout_2">
+       <item>
+        <widget class="QPushButton" name="selectFile">
+         <property name="text">
+          <string>Select File</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QPushButton" name="upload">
+         <property name="text">
+          <string>Upload</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="horizontalLayoutWidget">
+    <property name="geometry">
+     <rect>
+      <x>260</x>
+      <y>460</y>
+      <width>511</width>
+      <height>121</height>
+     </rect>
+    </property>
+    <layout class="QHBoxLayout" name="horizontalLayout">
+     <item>
+      <widget class="QTextEdit" name="rebuttal">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;REBUTTAL&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <layout class="QVBoxLayout" name="verticalLayout">
+       <item>
+        <widget class="QLabel" name="rebuttalLabel">
+         <property name="text">
+          <string>Rebuttal</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QPushButton" name="submitRebuttal">
+         <property name="text">
+          <string>Submit</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+    </layout>
+   </widget>
+   <widget class="QWidget" name="verticalLayoutWidget_2">
+    <property name="geometry">
+     <rect>
+      <x>20</x>
+      <y>10</y>
+      <width>201</width>
+      <height>571</height>
+     </rect>
+    </property>
+    <layout class="QVBoxLayout" name="verticalLayout_2">
+     <item>
+      <layout class="QHBoxLayout" name="horizontalLayout_3">
+       <item>
+        <widget class="QLabel" name="username">
+         <property name="text">
+          <string>USERNAME</string>
+         </property>
+        </widget>
+       </item>
+       <item>
+        <widget class="QLabel" name="userid">
+         <property name="text">
+          <string>USERID</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="name">
+       <property name="text">
+        <string>NAME</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="email">
+       <property name="text">
+        <string>EMAIL</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="organisation">
+       <property name="text">
+        <string>ORGANISATION</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLineEdit" name="phone">
+       <property name="text">
+        <string>PHONE</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="label">
+       <property name="text">
+        <string>Keywords</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QTextEdit" name="textEdit">
+       <property name="html">
+        <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
+&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
+p, li { white-space: pre-wrap; }
+&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;KEYWORDS&lt;/p&gt;
+&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;SEMI COLON DELIMITED&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <spacer name="verticalSpacer_8">
+       <property name="orientation">
+        <enum>Qt::Vertical</enum>
+       </property>
+       <property name="sizeHint" stdset="0">
+        <size>
+         <width>20</width>
+         <height>40</height>
+        </size>
+       </property>
+      </spacer>
+     </item>
+     <item>
+      <widget class="QPushButton" name="contextChange">
+       <property name="text">
+        <string>CHANGECONTEXT</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="apply">
+       <property name="text">
+        <string>Apply</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QPushButton" name="logout">
+       <property name="text">
+        <string>Logout</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </widget>
+  </widget>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>

commit 413f3cdc981cc4d1f030062a93963ebfa763e45b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:56:26 2014 +1100

    Update PaperManager.hpp

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index f79e811..b982c6d 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -6,11 +6,11 @@ Struct PaperManager {
   PaperManager() {temp = NULL;}
   PaperManager(Paper* itemp) : temp(itemp) { }
   ~PaperManager() {delete temp;}
-  createPaper()
-  removePaper()
-  listPapers()
-  viewPaper()
-  editPaper()
+  void createPaper()
+  void removePaper()
+  void listPapers()
+  void viewPaper()
+  void editPaper()
 
   Paper* temp;
 private:

commit 04d2d13c273aed44c8f3586bd8fb12bc730fc8aa
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:55:13 2014 +1100

    Update UserManager.hpp

diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index 0d2a348..797aed4 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -7,11 +7,11 @@ Struct UserManager {
   UserManager(User* itemp) : temp(itemp) { }
   ~UserManager() { delete temp;}
   User* temp;
-  createUser()
-  removeUser()
-  listUsers()
-  viewUser()
-  editUser()
+  void createUser()
+  void removeUser()
+  void listUsers()
+  void viewUser()
+  void editUser()
 
 };
 #endif

commit 1d0d3df1776a5c69ba40f4e0a610cacce819f7aa
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:54:09 2014 +1100

    Update SuperUser.hpp

diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index b447eb6..c8b4dc7 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -12,9 +12,9 @@ public:
 
 
   void view()
-  changeDetails()
+  void changeDetails()
   void getPassword(return password;)
-  setPassword(const std::string& ipassword) {password = ipassword;}
+  void setPassword(const std::string& ipassword) {password = ipassword;}
 
   std::string userName;
 

commit 87ff9a92099e7418653d1e59916fbb30dab17c7c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:53:18 2014 +1100

    Update PaperManager.hpp

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 574f09c..f79e811 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -14,13 +14,13 @@ Struct PaperManager {
 
   Paper* temp;
 private:
-  viewDiscussion()
-  addDiscPost()
-  removeDiscPost()
-  editDiscPost()
-  addReview()
-  listReviews()
-  editReview()
-  removeReview()
+  void viewDiscussion()
+  void addDiscPost()
+  void removeDiscPost()
+  void editDiscPost()
+  void addReview()
+  void listReviews()
+  void editReview()
+  void removeReview()
 };
 #endif

commit 1c17422ad00250ddf0bcbe8007929f817d0ae7f2
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:50:52 2014 +1100

    Update Paper.hpp

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index b6b34da..482ec20 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -30,7 +30,7 @@ Struct Paper {
       {*discussion = new Discussion;}
     ~Paper() {delete discussion;}
     // no assignment operator or copy constructor deemed necessary at this point
-    downloadPaper()
+    void downloadPaper()
 
     std::string title;
     std::string abstract;

commit 80b6270fa79862abb06dd6ee8a4f45dde7a7b16b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:49:57 2014 +1100

    Update ConferenceManager.hpp

diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index 1fdd1fb..058e9e9 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -7,12 +7,12 @@ Struct ConferenceManager {
   ConferenceManager(Conference* itemp) : temp(itemp) { }
   ~ConferenceManager() {delete temp;}
 
-  createConference()
-  removeConference()
-  listConferences()
-  viewConference()
-  editConference()
-  addKWords()
+  void createConference()
+  void removeConference()
+  void listConferences()
+  void viewConference()
+  void editConference()
+  void addKWords()
 
   Conference* temp;
 

commit a2e1c27842a70f405c83c4f103305675c6b5ce6d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:48:07 2014 +1100

    Update UserManager.hpp

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 5af0346..4f20ee4 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -8,11 +8,11 @@ Struct UserManager {
   UserManager(User* itemp) : temp(itemp) { }
   ~UserManager() { delete temp;}
   User* temp;
-  addUser()
-  modifyUser()
+  void addUser()
+  void modifyUser()
   bool deleteUser(int)
-  sendUser()
-  sendUserBatch()
+  void sendUser()
+  void sendUserBatch()
   bool fetchUser(std::string, std::string)
 
 

commit 4e8093b05a8f725fc268f8023b9bb845cdb33da6
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:47:25 2014 +1100

    Update PaperManager.hpp

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index db4966a..605a5aa 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -8,17 +8,17 @@ Struct PaperManager {
   ~PaperManager() {delete temp;}
   Paper* temp;
 
-  addPaper()
-  modifyPaper(int)
+  void addPaper()
+  void modifyPaper(int)
   bool deleteDiscPost(int)
-  modifyDiscPost(int)
+  void modifyDiscPost(int)
   bool deleteReview(int)
-  modifyReview(int)
+  void modifyReview(int)
   bool deletePaper(int)
-  sendPaper()
-  sendPaperBatch(int)
-  sendAuthoredPaper(int)
-  sendPapersToReview(int)
+  void sendPaper()
+  void sendPaperBatch(int)
+  void sendAuthoredPaper(int)
+  void sendPapersToReview(int)
 
 private:
   fetchPaper(int)

commit 4f1be6e5b93b0e5276d53961a68c00a221e4ec29
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:45:35 2014 +1100

    Update ConferenceManager.hpp

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index 7513126..e96a23f 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -11,12 +11,12 @@ Struct ConferenceManager {
   }
 }
 
-  addConference()
-  modifyConference(int)
+  void addConference()
+  void modifyConference(int)
   bool deleteConference(int)
-  sendConference()
-  sendConferenceBatch()
-  checkAllDeadlines()
+  void sendConference()
+  void sendConferenceBatch()
+  void checkAllDeadlines()
 
   std::vector<Conference*> conferences;
 

commit 96ab1995135d86284dd66b2f1efa8b37fcf0ab38
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:44:52 2014 +1100

    Update Conference.hpp

diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index 6b490c8..3d7171a 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -44,8 +44,8 @@ Struct Conference {
   postWordLimit(ipostWordLimit)
   { }
 
-  checkDeadlines()
-  allocatePapers()
+  void checkDeadlines()
+  void allocatePapers()
 
   bool isActive;
   std::string title;

commit a98032ddece77502d1d3ff691cb749f158748967
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:42:30 2014 +1100

    Update ClientHandler.hpp

diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index a1a9b81..6ef832d 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -1,5 +1,6 @@
 #ifndef CLIENT_HANDLER_H
 #define CLIENT_HANDLER_H
+
 #include <string>
 
 Struct ClientHandler {

commit 750d793b608d3bad91798fe7055e1c3583b5f1c2
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:41:44 2014 +1100

    Update User.hpp

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index dc85c86..9747cc7 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -21,8 +21,8 @@ Class User {
          userID(iuserID)
          { }
     virtual void view() = 0;
-    modifyDetails()
-    viewConferenceDetails()
+    void modifyDetails()
+    void viewConferenceDetails()
     std::string getUserID() {return userID;}
     std::string getPassword() {return password;}
     std::string getName() {return name;}

commit 2153f3b20aef8fe1a7b5ff5ffa87ff14e8a0f010
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:40:49 2014 +1100

    Update Paper.hpp

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 9f8e3ec..66634b9 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -58,7 +58,7 @@ Class Paper {
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
     void setFname(const std::fstream& ipaper) {paper = ipaper;}
     void setDiscussion(Discussion* idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
-    downloadPaper()
+    void downloadPaper()
 
   private:
     std::string title;

commit 43e2c292a9aeb30760d1bbf37170a098f7871eeb
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:39:23 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 7fed423..749a5e0 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -18,7 +18,7 @@ Class PCChair : public User {
   void editConfDetails()
   void setConfDeadlines()
   void setConfKWords()
-  getAvgScoreForPaper()
+  int getAvgScoreForPaper()
   void acceptOrRejectPaper()
   void addReviewerToConf()
 

commit 902d61bec59e1216407b1635ec340a3255485ad7
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:38:27 2014 +1100

    Update Reviewer.hpp

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 4f346c6..46193e1 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -31,13 +31,13 @@ Class Reviewer : public Author {
       reviews(ireviews)
       { }
     void view();
-    getPapersToReview()
-    submitReview()
-    editReview()
-    bidOnPaper()
-    modifyPaper()
-    viewDiscussion()
-    addDiscussion()
+    void getPapersToReview()
+    void submitReview()
+    void editReview()
+    void bidOnPaper()
+    void modifyPaper()
+    void viewDiscussion()
+    void addDiscussion()
 
     std::vector<Paper> getAllocatedPapers() {return allocatedPapers;}
     std::vector<Paper> getPapersToBid() {return papersToBid;}

commit 0c7df60d692ed65034ad105ca5e440230a0f3c6e
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:36:37 2014 +1100

    Update PCChair.hpp

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index b6a2b46..7fed423 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -13,14 +13,14 @@ Class PCChair : public User {
   std::vector<Paper> getAllPapers() {return allPapers;}
   void setAllPapers(const std::vector<Paper>& iallPapers) {allPapers = iallPapers;}
   void view();
-  removeReviewer()
+  void removeReviewer()
   bool removeReviewerByName(std::string)
-  editConfDetails()
-  setConfDeadlines()
-  setConfKWords()
+  void editConfDetails()
+  void setConfDeadlines()
+  void setConfKWords()
   getAvgScoreForPaper()
-  acceptOrRejectPaper()
-  addReviewerToConf()
+  void acceptOrRejectPaper()
+  void addReviewerToConf()
 
   private:
   Paper* getPaperByTitle(std::string)

commit a3d828c7ed4581e9dd2e84a93954ad6e859f298d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:26:12 2014 +1100

    Update LoginManager.hpp

diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 6c19ddb..b25156c 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -20,10 +20,10 @@ Class LoginManager {
 }
 // no other constructors deemed necessary at this point
   bool login(std::string, std::string)
-  logout()
-  createAccount()
-  listConferences()
-  viewActiveConfDetails()
+  void logout()
+  void createAccount()
+  void listConferences()
+  void viewActiveConfDetails()
   Conference* getActiveConference() {return activeConference;}
   std::vector<Conference> getConferences() {return conferences;}
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}

commit 367eac2bc3f034d5809312600835a2ea07c952f4
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:25:14 2014 +1100

    Create Date.hpp

diff --git a/UserClient/Date.hpp b/UserClient/Date.hpp
new file mode 100644
index 0000000..8732a4f
--- /dev/null
+++ b/UserClient/Date.hpp
@@ -0,0 +1,19 @@
+#ifndef DATE_H
+#define DATE_H
+
+Struct Date {
+  Date(int iday,
+    int imonth,
+    int iyear):
+    day(iday),
+    month(imonth),
+    year(iyear)
+    { }
+
+  bool compare(Data)
+
+int day{0};
+int month{0};
+int year{0};
+};
+#endif

commit 32695ef105fdc7dfd4168d26caf83a242a0f22ed
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:24:26 2014 +1100

    removed dependency on admin client

diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index 8eaffec..988a62a 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -2,7 +2,7 @@
 #ifndef CONFERENCE_H
 #define CONFERENCE_H
 
-#include "AdminClient/Date.hpp"
+#include "Date.hpp"
 
 
 #include <string>

commit 696b90e7aa4e2ad688e0c080d8982d82a0a3d27f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:21:03 2014 +1100

    Update Author.hpp

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index a4eabef..b406e57 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -26,10 +26,10 @@ Class Author : public User {
          ownPapers(iownPapers)
          { }
     virtual void view();
-    getPapers()
-    submitPaper()
-    modifyPaper()
-    submitRebuttal()
+    void getPapers()
+    void submitPaper()
+    void modifyPaper()
+    void submitRebuttal()
 
 
     std::vector<std::string> keywords;

commit 1fe28985ec6281a868c79e003313745ed809977d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:04:09 2014 +1100

    header guard

diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index 907883d..dc85c86 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -1,4 +1,8 @@
+#ifndef USER_H
+#define USER_H
+
 #include <string>
+
 Class User {
   public:
     User(const std::string& iusername,
@@ -44,3 +48,4 @@ std::string phone;
 int userID{0};
 
 };
+#endif

commit e753f7f9576959b4850b240b67a76fca4d498444
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:03:32 2014 +1100

    header guard

diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 74dcb98..4f346c6 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -1,3 +1,6 @@
+#ifndef REVIEWER_H
+#define REVIEWER_H
+
 #include "Author.hpp"
 #include "Review.hpp"
 
@@ -51,4 +54,4 @@ Class Reviewer : public Author {
     std::vector<Paper> papersToBid;
     std::vector<Review> reviews;
 };
-
+#endif

commit e58fc29c07ff622146fafa3296322b38045adcf3
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:02:58 2014 +1100

    header guard

diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
index acc4ade..750bd63 100644
--- a/UserClient/Review.hpp
+++ b/UserClient/Review.hpp
@@ -1,3 +1,6 @@
+#ifndef REVIEW_H
+#define REVIEW_H
+
 #include "Paper.hpp"
 
 Struct Review {
@@ -49,3 +52,4 @@ Struct Review {
   std::string commentsBestAward;
 
 };
+#endif

commit a23097f04e788ef4c97f32b19eacc2e1593aa064
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 13:00:35 2014 +1100

    header guard

diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 647ef5c..9f8e3ec 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -1,3 +1,6 @@
+#ifndef PAPER_H
+#define PAPER_H
+
 #include "Discussion.hpp"
 
 #include <fstream>
@@ -66,3 +69,4 @@ Class Paper {
     std::fstream paper;
     Discussion* discussion;
 };
+#endif

commit b7cfce5b01d675d649e2ae55d1e598cd62d54006
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:59:06 2014 +1100

    header guard

diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 061ed5e..b6a2b46 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -1,3 +1,6 @@
+#ifndef P_C_CHAIR_H
+#define P_C_CHAIR_H
+
 #include "User.hpp"
 
 #include <vector>
@@ -24,3 +27,4 @@ Class PCChair : public User {
   std::vector<std::string> allPapers;
 
 };
+#endif

commit cf019000d255b7135f9b78052056b1ff77b37fac
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:57:45 2014 +1100

    header guard

diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index dbb9ac1..6c19ddb 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -1,4 +1,7 @@
 //incomplete
+#ifndef LOGIN_MANAGER_H
+#define LOGIN_MANAGER_H
+
 #include "Conference.hpp"
 
 Class LoginManager {
@@ -31,3 +34,4 @@ Class LoginManager {
   std::vector<Conference> conferences;
   Conference* activeConference;
 };
+#endif

commit 92eb85b43fc238c08357637dd7d5c3d79665e745
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:57:01 2014 +1100

    header guard

diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
index 9488218..49c9a19 100644
--- a/UserClient/DiscussionPost.hpp
+++ b/UserClient/DiscussionPost.hpp
@@ -1,4 +1,8 @@
+#ifndef DISCUSSION_POST_H
+#define DISCUSSION_POST_H
+
 #include <string>
+
 Struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
                  const std::string& ireviewerUName):
@@ -8,3 +12,4 @@ Struct DiscussionPost {
   std::string comment;
   std::string reviewerUName;
 };
+#endif

commit 60bf2a183ccf0edbbab9599206114212ccc95139
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:56:21 2014 +1100

    header guard

diff --git a/UserClient/Discussion.hpp b/UserClient/Discussion.hpp
index 5931415..456dfca 100644
--- a/UserClient/Discussion.hpp
+++ b/UserClient/Discussion.hpp
@@ -1,3 +1,6 @@
+#ifndef DISCUSSION_H
+#define DISCUSSION_H
+
 #include "DiscussionPost.hpp"
 
 #include <list>
@@ -8,3 +11,4 @@ Struct Discussion {
                { }
   std::list<DiscussionPost> discussion;
 };
+#endif

commit c548cbca3aa40d9d7f9fac021c074d51f16b70ba
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:55:41 2014 +1100

    header guard

diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index 3155b4a..8eaffec 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -1,4 +1,7 @@
 //incomplete
+#ifndef CONFERENCE_H
+#define CONFERENCE_H
+
 #include "AdminClient/Date.hpp"
 
 
@@ -64,3 +67,4 @@ Struct Conference {
   int postWordLimit;
 
 };
+#endif

commit adf82f8d9bee6b334e5db023b0b56bb7fe0ca776
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:54:52 2014 +1100

    header guard

diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 35d17c3..a4eabef 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -1,3 +1,6 @@
+#ifndef AUTHOR_H
+#define AUTHOR_H
+
 #include "Paper.hpp"
 #include "User.hpp"
 
@@ -34,3 +37,4 @@ Class Author : public User {
   protected:
     std::vector<Paper> ownPapers;
 };
+#endif

commit af719862d309ab4f200cbb0650e299c06c496a4d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:54:07 2014 +1100

    header guard

diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
index 98bd15f..5af0346 100644
--- a/Server/UserManager.hpp
+++ b/Server/UserManager.hpp
@@ -1,3 +1,6 @@
+#ifndef USER_MANAGER_H
+#define USER_MANAGER_H
+
 #include <string>
 
 Struct UserManager {
@@ -16,3 +19,4 @@ Struct UserManager {
 private:
   fetchUser(int)
 };
+#endif

commit 6377d40a84710155b0757253e85a921d644dd12f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:53:38 2014 +1100

    header guard

diff --git a/Server/User.hpp b/Server/User.hpp
index a42495c..66b7c7d 100644
--- a/Server/User.hpp
+++ b/Server/User.hpp
@@ -1,3 +1,6 @@
+#ifndef USER_H
+#define USER_H
+
 #include <string>
 #include <vector>
 
@@ -30,3 +33,4 @@ Struct User {
   int userID{0};
 
 };
+#endif

commit 5d3b056d7bb3252548a9bfb97b7b2f37be761f01
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:53:12 2014 +1100

    header guard

diff --git a/Server/Review.hpp b/Server/Review.hpp
index bd2748f..ab2c571 100644
--- a/Server/Review.hpp
+++ b/Server/Review.hpp
@@ -1,3 +1,5 @@
+#ifndef REVIEW_H
+#define REVIEW_H
 #include <string>
 
 Struct Review {
@@ -48,3 +50,4 @@ Struct Review {
   std::string commentsBestAward;
 
 };
+#endif

commit 993e6d8c9d704faae791a26aaee4a01b958f9573
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:51:23 2014 +1100

    header guard

diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
index 54ab89e..db4966a 100644
--- a/Server/PaperManager.hpp
+++ b/Server/PaperManager.hpp
@@ -1,3 +1,5 @@
+#ifndef PAPER_MANAGER_H
+#define PAPER_MANAGER_H
 #include "Paper.hpp"
 
 Struct PaperManager {
@@ -22,3 +24,4 @@ private:
   fetchPaper(int)
 
 };
+#endif

commit b04ba7ded59810999bae821ab55c333f60930efc
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:49:32 2014 +1100

    header guard

diff --git a/Server/Paper.hpp b/Server/Paper.hpp
index 72831de..b3704b4 100644
--- a/Server/Paper.hpp
+++ b/Server/Paper.hpp
@@ -1,4 +1,7 @@
 //incomplete
+#ifndef PAPER_H
+#define PAPER_H
+
 #include "Discussion.hpp"
 #include "Review.hpp"
 
@@ -36,3 +39,4 @@ Struct Paper {
     Discussion* discussion;
     std::vector<Review> reviews;
 };
+#endif

commit 4407963674c521574f86a93af66700b88764000f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:48:23 2014 +1100

    header guard

diff --git a/Server/DiscussionPost.hpp b/Server/DiscussionPost.hpp
index 0afebbf..079c02b 100644
--- a/Server/DiscussionPost.hpp
+++ b/Server/DiscussionPost.hpp
@@ -1,3 +1,5 @@
+#ifndef DISCUSSION_POST_H
+#define DISCUSSION_POST_H
 #include <string>
 
 Struct DiscussionPost {
@@ -12,3 +14,4 @@ Struct DiscussionPost {
   std::string reviewerUName;
   int postID;
 };
+#endif

commit 04c5dfe0dc554937cd93bb6c7e8295c9edc44ab4
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:47:43 2014 +1100

    header guard

diff --git a/Server/Discussion.hpp b/Server/Discussion.hpp
index 5931415..4ade59b 100644
--- a/Server/Discussion.hpp
+++ b/Server/Discussion.hpp
@@ -1,3 +1,5 @@
+#ifndef DISCUSSION_H
+#define DISCUSSION_H
 #include "DiscussionPost.hpp"
 
 #include <list>
@@ -8,3 +10,4 @@ Struct Discussion {
                { }
   std::list<DiscussionPost> discussion;
 };
+#endif

commit 9b29b086c3cc78ea9c49f89b65d33bd41672b1c2
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:46:43 2014 +1100

    header guard

diff --git a/Server/Date.hpp b/Server/Date.hpp
index 05ae518..ca00504 100644
--- a/Server/Date.hpp
+++ b/Server/Date.hpp
@@ -1,3 +1,6 @@
+#ifndef DATE_H
+#define DATE_H
+
 Struct Date {
   Date(int iday,
     int imonth,
@@ -13,3 +16,4 @@ int day{0};
 int month{0};
 int year{0};
 };
+#endif

commit aa0dc2e5dac061b871ea4f4c207ca9cbc1a8fa9a
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:45:18 2014 +1100

    header guard

diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
index e8253e1..7513126 100644
--- a/Server/ConferenceManager.hpp
+++ b/Server/ConferenceManager.hpp
@@ -1,3 +1,6 @@
+#ifndef CONFERENCE_MANAGER_H
+#define CONFERENCE_MANAGER_H
+
 #include "Conference.hpp"
 
 Struct ConferenceManager {
@@ -21,4 +24,4 @@ private:
   fetchConference(int)
 
 };
-
+#endif

commit 6a8aca202b4fc23dc2ce9dfe3559164fc9a45add
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:44:48 2014 +1100

    header guard

diff --git a/Server/Conference.hpp b/Server/Conference.hpp
index e168d8d..6b490c8 100644
--- a/Server/Conference.hpp
+++ b/Server/Conference.hpp
@@ -1,3 +1,6 @@
+#ifndef CONFERENCE_H
+#define CONFERENCE_H
+
 #include "Date.hpp"
 
 #include <string>
@@ -63,3 +66,4 @@ Struct Conference {
   int postWordLimit;
 
 };
+#endif

commit fc3d1a07581329c2612881dc514fc4abd24589c5
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:44:11 2014 +1100

    header guard

diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
index e17859f..a1a9b81 100644
--- a/Server/ClientHandler.hpp
+++ b/Server/ClientHandler.hpp
@@ -1,3 +1,5 @@
+#ifndef CLIENT_HANDLER_H
+#define CLIENT_HANDLER_H
 #include <string>
 
 Struct ClientHandler {
@@ -6,9 +8,9 @@ Struct ClientHandler {
 
 enum request;
 
-handleClient()
+void handleClient()
 bool authenticate(std::string, std::string)
 bool connectToDB()
 
 };
-
+#endif

commit f0ff7504445e817b1e02b67b5787b3767d5cfdff
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:42:34 2014 +1100

    header guard

diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index 308f0f8..0d2a348 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -1,3 +1,5 @@
+#ifndef USER_MANAGER_H
+#define USER_MANAGER_H
 #include "User.hpp"
 
 Struct UserManager {
@@ -12,3 +14,4 @@ Struct UserManager {
   editUser()
 
 };
+#endif

commit ca659c48cbabf499e2b016f952a41855429c933b
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:41:18 2014 +1100

    header guard

diff --git a/AdminClient/User.hpp b/AdminClient/User.hpp
index a42495c..cf89810 100644
--- a/AdminClient/User.hpp
+++ b/AdminClient/User.hpp
@@ -1,3 +1,5 @@
+#ifndef USER_H
+#define USER_H
 #include <string>
 #include <vector>
 
@@ -30,3 +32,4 @@ Struct User {
   int userID{0};
 
 };
+#endif

commit 015e69e97d089d76dd6a2b3ab616d3426288e555
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:40:41 2014 +1100

    header guard

diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index 8c6a40a..b447eb6 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -1,3 +1,5 @@
+#ifndef SUPER_USER_H
+#define SUPER_USER_H
 #include <string>
 
 Class SuperUser {
@@ -19,3 +21,4 @@ public:
 private:
   std::string password;
 };
+#endif

commit 0dd31c21980a37546d0ccfe0d4ded1b1af923c42
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:39:52 2014 +1100

    header guard

diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
index bd2748f..ab2c571 100644
--- a/AdminClient/Review.hpp
+++ b/AdminClient/Review.hpp
@@ -1,3 +1,5 @@
+#ifndef REVIEW_H
+#define REVIEW_H
 #include <string>
 
 Struct Review {
@@ -48,3 +50,4 @@ Struct Review {
   std::string commentsBestAward;
 
 };
+#endif

commit e4640164ad86abe081ee35cb2ce4e677c95e0101
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:38:21 2014 +1100

    header guard

diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index be3f28f..574f09c 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -1,3 +1,5 @@
+#ifndef PAPER_MANAGER_H
+#define PAPER_MANAGER_H
 #include "Paper.hpp"
 
 Struct PaperManager {
@@ -21,3 +23,4 @@ private:
   editReview()
   removeReview()
 };
+#endif

commit b8fb4d5c888ef84cd225eee25d41744aa7dca710
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:37:00 2014 +1100

    header guard

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index ea1e25d..b6b34da 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -1,4 +1,7 @@
 //incomplete
+#ifndef PAPER_H
+#define PAPER_H
+
 #include "Discussion.hpp"
 #include "Review.hpp"
 
@@ -38,3 +41,4 @@ Struct Paper {
     Discussion* discussion;
     std::vector<Review> reviews;
 };
+#endif

commit d8d2ac7e86c601666172ba2aa877af735d3a8916
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:35:48 2014 +1100

    header guard

diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index f8b8fe0..4b52eaf 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -1,8 +1,11 @@
+#ifndef LOGIN_MANAGER_H
+#define LOGIN_MANAGER_H
 Struct LoginManager {
   LoginManager(bool iloggedIn) :
     loggedIn(iloggedIn)
     { }
   bool loggedIn;
   bool login(std::string, std::string)
-  logout()
+  void logout()
 };
+#endif

commit 86f0d1eaa6410a595dfcda93293b62f3009097ae
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:34:06 2014 +1100

    header guard

diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
index 0afebbf..079c02b 100644
--- a/AdminClient/DiscussionPost.hpp
+++ b/AdminClient/DiscussionPost.hpp
@@ -1,3 +1,5 @@
+#ifndef DISCUSSION_POST_H
+#define DISCUSSION_POST_H
 #include <string>
 
 Struct DiscussionPost {
@@ -12,3 +14,4 @@ Struct DiscussionPost {
   std::string reviewerUName;
   int postID;
 };
+#endif

commit 68ccc0856d08894e5c7070d909e8922719ded859
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:33:27 2014 +1100

    header guard

diff --git a/AdminClient/Discussion.hpp b/AdminClient/Discussion.hpp
index 5931415..a84aad5 100644
--- a/AdminClient/Discussion.hpp
+++ b/AdminClient/Discussion.hpp
@@ -1,3 +1,6 @@
+
+#ifndef DISCUSSION_H
+#define DISCUSSION_H
 #include "DiscussionPost.hpp"
 
 #include <list>
@@ -8,3 +11,4 @@ Struct Discussion {
                { }
   std::list<DiscussionPost> discussion;
 };
+#endif

commit 3cbfa1eecc2154635766757673291682c0ab8bf8
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:32:20 2014 +1100

    header guard

diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index db168c5..bacb000 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -1,3 +1,5 @@
+#ifndef DATE_H
+#define DATE_H
 Struct Date {
   Date(int iday,
     int imonth,
@@ -13,3 +15,4 @@ int day{0};
 int month{0};
 int year{0};
 };
+#endif

commit 3d4aa6749a887bbe7029ce116b842a1f91fb571d
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:31:21 2014 +1100

    header guard

diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index 9c97c0c..1fdd1fb 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -1,3 +1,5 @@
+#ifndef CONFERENCE_MANAGER_H
+#define CONFERENCE_MANAGER_H
 #include "Conference.hpp"
 
 Struct ConferenceManager {
@@ -15,3 +17,4 @@ Struct ConferenceManager {
   Conference* temp;
 
 };
+#endif

commit 9c5ffc53f48231235b42cb106a40629fe265f84f
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 18 12:29:55 2014 +1100

    header guard

diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
index e11236d..ed4f202 100644
--- a/AdminClient/Conference.hpp
+++ b/AdminClient/Conference.hpp
@@ -1,3 +1,5 @@
+#ifndef CONFERENCE_H
+#define CONFERENCE_H
 #include "Date.hpp"
 
 #include <string>
@@ -60,3 +62,4 @@ Struct Conference {
   int postWordLimit;
 
 };
+#endif

commit 1d2bb74e96de1a9028dc744b213d81c57ee03ce8
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 18 10:59:12 2014 +1100

    Delete test

diff --git a/test b/test
deleted file mode 100644
index 13e7564..0000000
--- a/test
+++ /dev/null
@@ -1 +0,0 @@
-o

commit 8c78c53470db9d6d75d9af9262ccc21eb547dc36
Author: 7xe <evans.samuel7@gmail.com>
Date:   Sat Oct 18 10:58:04 2014 +1100

    Create test

diff --git a/test b/test
new file mode 100644
index 0000000..13e7564
--- /dev/null
+++ b/test
@@ -0,0 +1 @@
+o

commit 64c2e1362c9147c368cf1dad2db0d23ff91962e1
Author: torchcar <torchcar@yahoo.com.au>
Date:   Tue Oct 7 00:44:23 2014 +1100

    Added server side and empty function names

diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
index 7830d5e..e11236d 100644
--- a/AdminClient/Conference.hpp
+++ b/AdminClient/Conference.hpp
@@ -1,11 +1,10 @@
 #include "Date.hpp"
 
-
 #include <string>
 #include <vector>
 
 Struct Conference {
-  Review(bool iisActive,
+  Conference(bool iisActive,
   const std::string& ititle,
   const std::string& iconfID,
   const std::string& itopic,
diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
index b76b7d7..9c97c0c 100644
--- a/AdminClient/ConferenceManager.hpp
+++ b/AdminClient/ConferenceManager.hpp
@@ -3,5 +3,15 @@
 Struct ConferenceManager {
   ConferenceManager() {temp = NULL;}
   ConferenceManager(Conference* itemp) : temp(itemp) { }
+  ~ConferenceManager() {delete temp;}
+
+  createConference()
+  removeConference()
+  listConferences()
+  viewConference()
+  editConference()
+  addKWords()
+
   Conference* temp;
+
 };
diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
index 81f9be6..db168c5 100644
--- a/AdminClient/Date.hpp
+++ b/AdminClient/Date.hpp
@@ -7,6 +7,8 @@ Struct Date {
     year(iyear)
     { }
 
+  bool compare(Data)
+
 int day{0};
 int month{0};
 int year{0};
diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
index 9305761..0afebbf 100644
--- a/AdminClient/DiscussionPost.hpp
+++ b/AdminClient/DiscussionPost.hpp
@@ -1,4 +1,5 @@
 #include <string>
+
 Struct DiscussionPost {
   DiscussionPost(const std::string& icomment,
                  const std::string& ireviewerUName,
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
index 1b10225..f8b8fe0 100644
--- a/AdminClient/LoginManager.hpp
+++ b/AdminClient/LoginManager.hpp
@@ -3,4 +3,6 @@ Struct LoginManager {
     loggedIn(iloggedIn)
     { }
   bool loggedIn;
+  bool login(std::string, std::string)
+  logout()
 };
diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 7b74221..ea1e25d 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -27,6 +27,8 @@ Struct Paper {
       {*discussion = new Discussion;}
     ~Paper() {delete discussion;}
     // no assignment operator or copy constructor deemed necessary at this point
+    downloadPaper()
+
     std::string title;
     std::string abstract;
     std::vector<std::string> authorNames;
@@ -34,5 +36,5 @@ Struct Paper {
     std::string fname;
     std::fstream paper;
     Discussion* discussion;
-    std::vector<review> reviews;
+    std::vector<Review> reviews;
 };
diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
index 6980e7f..be3f28f 100644
--- a/AdminClient/PaperManager.hpp
+++ b/AdminClient/PaperManager.hpp
@@ -3,5 +3,21 @@
 Struct PaperManager {
   PaperManager() {temp = NULL;}
   PaperManager(Paper* itemp) : temp(itemp) { }
+  ~PaperManager() {delete temp;}
+  createPaper()
+  removePaper()
+  listPapers()
+  viewPaper()
+  editPaper()
+
   Paper* temp;
+private:
+  viewDiscussion()
+  addDiscPost()
+  removeDiscPost()
+  editDiscPost()
+  addReview()
+  listReviews()
+  editReview()
+  removeReview()
 };
diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
index 9684e8a..bd2748f 100644
--- a/AdminClient/Review.hpp
+++ b/AdminClient/Review.hpp
@@ -1,3 +1,5 @@
+#include <string>
+
 Struct Review {
   Review(const std::string& ireviewerName
   int reviewId;
diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
index fd713c9..8c6a40a 100644
--- a/AdminClient/SuperUser.hpp
+++ b/AdminClient/SuperUser.hpp
@@ -1,15 +1,21 @@
 #include <string>
 
 Class SuperUser {
-  public:
+public:
   SuperUser(const std::string& iuserName,
     const std::string& ipassword) :
     userName(iuserName),
     password(ipassword)
     { }
-  std::string userName;
+
+
+  void view()
+  changeDetails()
   void getPassword(return password;)
   setPassword(const std::string& ipassword) {password = ipassword;}
-  private:
+
+  std::string userName;
+
+private:
   std::string password;
 };
diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
index 840900d..308f0f8 100644
--- a/AdminClient/UserManager.hpp
+++ b/AdminClient/UserManager.hpp
@@ -3,5 +3,12 @@
 Struct UserManager {
   UserManager() {temp = NULL;}
   UserManager(User* itemp) : temp(itemp) { }
+  ~UserManager() { delete temp;}
   User* temp;
+  createUser()
+  removeUser()
+  listUsers()
+  viewUser()
+  editUser()
+
 };
diff --git a/Server/ClientHandler.hpp b/Server/ClientHandler.hpp
new file mode 100644
index 0000000..e17859f
--- /dev/null
+++ b/Server/ClientHandler.hpp
@@ -0,0 +1,14 @@
+#include <string>
+
+Struct ClientHandler {
+  ClientHandler(enum irequest) : request(irequest)
+    { }
+
+enum request;
+
+handleClient()
+bool authenticate(std::string, std::string)
+bool connectToDB()
+
+};
+
diff --git a/Server/Conference.hpp b/Server/Conference.hpp
new file mode 100644
index 0000000..e168d8d
--- /dev/null
+++ b/Server/Conference.hpp
@@ -0,0 +1,65 @@
+#include "Date.hpp"
+
+#include <string>
+#include <vector>
+
+Struct Conference {
+  Conference(bool iisActive,
+  const std::string& ititle,
+  const std::string& iconfID,
+  const std::string& itopic,
+  const std::string& idescription,
+  const std::string& ilocation,
+  const std::vector<std::string>& ikeywords,
+  bool iisBeforePaperDeadline,
+  const Date& ipaperDeadline,
+  bool iisBeforeSoftReviewDeadline,
+  const Date& ireviewDeadlineSoft,
+  bool iisBeforeHardReviewDeadline,
+  const Date& ireviewDeadlineHard,
+  bool iisBeforeDiscussDeadline,
+  const Date& idiscussDeadline,
+  int ireviewersPerPaper,
+  int ipostWordLimit):
+  isActive(iisActive),
+  title(ititle),
+  confID(iconfID),
+  originality(ioriginality),
+  topic(itopic),
+  description(idescription),
+  location(ilocation),
+  keywords(ikeywords),
+  isBeforePaperDeadline(iisBeforePaperDeadline),
+  paperDeadline(ipaperDeadline),
+  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
+  reviewDeadlineSoft(ireviewDeadlineSoft),
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline))
+  reviewDeadlineHard(ireviewDeadlineHard),
+  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
+  discussDeadline(idiscussDeadline),
+  reviewersPerPaper(ireviewersPerPaper)
+  postWordLimit(ipostWordLimit)
+  { }
+
+  checkDeadlines()
+  allocatePapers()
+
+  bool isActive;
+  std::string title;
+  std::string confID;
+  std::string topic;
+  std::string description;
+  std::string location;
+  std::vector<std::string> keywords;
+  bool isBeforePaperDeadline;
+  Date paperDeadline;
+  bool isBeforeSoftReviewDeadline;
+  Date reviewDeadlineSoft;
+  bool isBeforeHardReviewDeadline;
+  Date reviewDeadlineHard;
+  bool isBeforeDiscussDeadline;
+  Date discussDeadline;
+  int reviewersPerPaper;
+  int postWordLimit;
+
+};
diff --git a/Server/ConferenceManager.hpp b/Server/ConferenceManager.hpp
new file mode 100644
index 0000000..e8253e1
--- /dev/null
+++ b/Server/ConferenceManager.hpp
@@ -0,0 +1,24 @@
+#include "Conference.hpp"
+
+Struct ConferenceManager {
+  ConferenceManager(std::vector<Conference*> iconferences) : conferences(iconferences) { }
+  ~ConferenceManager() {
+  for (unsigned i=0; i < conferences.size(); i++) {
+    delete conferences[i];
+  }
+}
+
+  addConference()
+  modifyConference(int)
+  bool deleteConference(int)
+  sendConference()
+  sendConferenceBatch()
+  checkAllDeadlines()
+
+  std::vector<Conference*> conferences;
+
+private:
+  fetchConference(int)
+
+};
+
diff --git a/Server/Date.hpp b/Server/Date.hpp
new file mode 100644
index 0000000..05ae518
--- /dev/null
+++ b/Server/Date.hpp
@@ -0,0 +1,15 @@
+Struct Date {
+  Date(int iday,
+    int imonth,
+    int iyear):
+    day(iday),
+    month(imonth),
+    year(iyear)
+    { }
+
+bool compare(Data)
+
+int day{0};
+int month{0};
+int year{0};
+};
diff --git a/Server/Discussion.hpp b/Server/Discussion.hpp
new file mode 100644
index 0000000..5931415
--- /dev/null
+++ b/Server/Discussion.hpp
@@ -0,0 +1,10 @@
+#include "DiscussionPost.hpp"
+
+#include <list>
+
+Struct Discussion {
+  Discussion(const std::list<DiscussionPost>& idiscussion):
+               discussion(idiscussion)
+               { }
+  std::list<DiscussionPost> discussion;
+};
diff --git a/Server/DiscussionPost.hpp b/Server/DiscussionPost.hpp
new file mode 100644
index 0000000..0afebbf
--- /dev/null
+++ b/Server/DiscussionPost.hpp
@@ -0,0 +1,14 @@
+#include <string>
+
+Struct DiscussionPost {
+  DiscussionPost(const std::string& icomment,
+                 const std::string& ireviewerUName,
+                 int ipostID):
+                 comment(icomment),
+                 reviewerUName(ireviewerUName),
+                 postID(ipostID)
+                 { }
+  std::string comment;
+  std::string reviewerUName;
+  int postID;
+};
diff --git a/Server/Paper.hpp b/Server/Paper.hpp
new file mode 100644
index 0000000..72831de
--- /dev/null
+++ b/Server/Paper.hpp
@@ -0,0 +1,38 @@
+//incomplete
+#include "Discussion.hpp"
+#include "Review.hpp"
+
+#include <fstream>
+#include <memory>
+#include <vector>
+
+Struct Paper {
+
+    Paper() { *discussion = new Discussion;}
+    Paper(const std::string& ititle,
+      const std::string& iabstract,
+      const std::vector<string>& iauthorNames,
+      const std::vector<string>& ikeywords,
+//      const std::string& ifname,
+//      char* ipaper,
+      const std::vector<review>& ireviews)
+      :
+      title(ititle),
+      abstract(iabstract),
+      authorNames(iauthorNames),
+      keywords(ikeywords),
+//      fname(ifname),
+//      paper(ipaper), // constructs from cstring
+      reviews(ireviews)
+      {*discussion = new Discussion;}
+    ~Paper() {delete discussion;}
+    // no assignment operator or copy constructor deemed necessary at this point
+    std::string title;
+    std::string abstract;
+    std::vector<std::string> authorNames;
+    std::vector<std::string> keywords;
+//    std::string fname;
+//    std::fstream paper;
+    Discussion* discussion;
+    std::vector<Review> reviews;
+};
diff --git a/Server/PaperManager.hpp b/Server/PaperManager.hpp
new file mode 100644
index 0000000..54ab89e
--- /dev/null
+++ b/Server/PaperManager.hpp
@@ -0,0 +1,24 @@
+#include "Paper.hpp"
+
+Struct PaperManager {
+  PaperManager() {temp = NULL;}
+  PaperManager(Paper* itemp) : temp(itemp) { }
+  ~PaperManager() {delete temp;}
+  Paper* temp;
+
+  addPaper()
+  modifyPaper(int)
+  bool deleteDiscPost(int)
+  modifyDiscPost(int)
+  bool deleteReview(int)
+  modifyReview(int)
+  bool deletePaper(int)
+  sendPaper()
+  sendPaperBatch(int)
+  sendAuthoredPaper(int)
+  sendPapersToReview(int)
+
+private:
+  fetchPaper(int)
+
+};
diff --git a/Server/Review.hpp b/Server/Review.hpp
new file mode 100644
index 0000000..bd2748f
--- /dev/null
+++ b/Server/Review.hpp
@@ -0,0 +1,50 @@
+#include <string>
+
+Struct Review {
+  Review(const std::string& ireviewerName
+  int reviewId;
+  int ioverall,
+  int iconfidence,
+  int irelevance,
+  int ioriginality,
+  int isignificance,
+  int ipresentation,
+  int itechQuality,
+  int ievalution,
+  const std::string& icommentsStrength,
+  const std::string& icommentsWeakness,
+  const std::string& icommentsSuggestions,
+  const std::string& icommentsShortPaper,
+  const std::string& icommentsBestAward):
+  reviewerName(ireviewerName),
+  overall(ioverall),
+  confidence(iconfidence),
+  relevance(irelevance),
+  originality(ioriginality),
+  significance(isignificance),
+  presentation(ipresentation),
+  techQuality(itechQuality),
+  evalution(ievalution),
+  commentsStrength(icommentsStrength),
+  commentsWeakness(icommentsWeakness),
+  commentsSuggestions(icommentsSuggestions),
+  commentsShortPaper(icommentsShortPaper),
+  commentsBestAward(icommentsBestAward))
+  { }
+  std::string reviewerName;
+  int reviewId;
+  int overall;
+  int confidence;
+  int relevance;
+  int originality;
+  int significance;
+  int presentation;
+  int techQuality;
+  int evalution;
+  std::string commentsStrength;
+  std::string commentsWeakness;
+  std::string commentsSuggestions;
+  std::string commentsShortPaper;
+  std::string commentsBestAward;
+
+};
diff --git a/Server/User.hpp b/Server/User.hpp
new file mode 100644
index 0000000..a42495c
--- /dev/null
+++ b/Server/User.hpp
@@ -0,0 +1,32 @@
+#include <string>
+#include <vector>
+
+
+Struct User {
+  User(const std::string& iusername,
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         const std::string& ipassword,
+         int iuserID,
+         const std::vector<std::string>& keywords:
+         username(iusername),
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         userID(iuserID),
+         keywords(ikeywords)
+         { }
+  std::string userName;
+  std::string password;
+  std::string name;
+  std::string email;
+  std::string organisation;
+  std::string phone;
+  std::vector<std::string> keywords;
+  int userID{0};
+
+};
diff --git a/Server/UserManager.hpp b/Server/UserManager.hpp
new file mode 100644
index 0000000..98bd15f
--- /dev/null
+++ b/Server/UserManager.hpp
@@ -0,0 +1,18 @@
+#include <string>
+
+Struct UserManager {
+  UserManager() {temp = NULL;}
+  UserManager(User* itemp) : temp(itemp) { }
+  ~UserManager() { delete temp;}
+  User* temp;
+  addUser()
+  modifyUser()
+  bool deleteUser(int)
+  sendUser()
+  sendUserBatch()
+  bool fetchUser(std::string, std::string)
+
+
+private:
+  fetchUser(int)
+};
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
index 8568f58..35d17c3 100644
--- a/UserClient/Author.hpp
+++ b/UserClient/Author.hpp
@@ -23,6 +23,12 @@ Class Author : public User {
          ownPapers(iownPapers)
          { }
     virtual void view();
+    getPapers()
+    submitPaper()
+    modifyPaper()
+    submitRebuttal()
+
+
     std::vector<std::string> keywords;
 
   protected:
diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
index bfa0aad..3155b4a 100644
--- a/UserClient/Conference.hpp
+++ b/UserClient/Conference.hpp
@@ -6,7 +6,7 @@
 #include <vector>
 
 Struct Conference {
-  Review(bool iisActive,
+  Conference(bool iisActive,
   const std::string& ititle,
   const std::string& iconfID,
   const std::string& itopic,
@@ -43,6 +43,8 @@ Struct Conference {
   postWordLimit(ipostWordLimit)
   { }
 
+  std::vector<std::string> searchForKWords(std::string)
+
   bool isActive;
   std::string title;
   std::string confID;
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 2e356ba..dbb9ac1 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -1,5 +1,6 @@
 //incomplete
 #include "Conference.hpp"
+
 Class LoginManager {
   public:
   LoginManager(bool iloggedIn,
@@ -15,6 +16,11 @@ Class LoginManager {
   }
 }
 // no other constructors deemed necessary at this point
+  bool login(std::string, std::string)
+  logout()
+  createAccount()
+  listConferences()
+  viewActiveConfDetails()
   Conference* getActiveConference() {return activeConference;}
   std::vector<Conference> getConferences() {return conferences;}
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
index 39d487c..061ed5e 100644
--- a/UserClient/PCChair.hpp
+++ b/UserClient/PCChair.hpp
@@ -10,7 +10,17 @@ Class PCChair : public User {
   std::vector<Paper> getAllPapers() {return allPapers;}
   void setAllPapers(const std::vector<Paper>& iallPapers) {allPapers = iallPapers;}
   void view();
+  removeReviewer()
+  bool removeReviewerByName(std::string)
+  editConfDetails()
+  setConfDeadlines()
+  setConfKWords()
+  getAvgScoreForPaper()
+  acceptOrRejectPaper()
+  addReviewerToConf()
+
   private:
+  Paper* getPaperByTitle(std::string)
   std::vector<std::string> allPapers;
 
 };
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index 255d630..647ef5c 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -55,6 +55,7 @@ Class Paper {
     void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
     void setFname(const std::fstream& ipaper) {paper = ipaper;}
     void setDiscussion(Discussion* idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
+    downloadPaper()
 
   private:
     std::string title;
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
index 14aadcf..74dcb98 100644
--- a/UserClient/Reviewer.hpp
+++ b/UserClient/Reviewer.hpp
@@ -28,6 +28,14 @@ Class Reviewer : public Author {
       reviews(ireviews)
       { }
     void view();
+    getPapersToReview()
+    submitReview()
+    editReview()
+    bidOnPaper()
+    modifyPaper()
+    viewDiscussion()
+    addDiscussion()
+
     std::vector<Paper> getAllocatedPapers() {return allocatedPapers;}
     std::vector<Paper> getPapersToBid() {return papersToBid;}
     std::vector<Review> getReviews() {return reviews;}
@@ -36,6 +44,9 @@ Class Reviewer : public Author {
     void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
 
   private:
+    Paper* getPaperByTitle(std::string) // helper
+    Paper* getPaperByIndex(int) // helper
+
     std::vector<Paper> allocatedPapers;
     std::vector<Paper> papersToBid;
     std::vector<Review> reviews;
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
index a3f1757..907883d 100644
--- a/UserClient/User.hpp
+++ b/UserClient/User.hpp
@@ -17,6 +17,8 @@ Class User {
          userID(iuserID)
          { }
     virtual void view() = 0;
+    modifyDetails()
+    viewConferenceDetails()
     std::string getUserID() {return userID;}
     std::string getPassword() {return password;}
     std::string getName() {return name;}

commit e81e1dc42f6d136b917fe9ff077781fb656376c4
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 4 16:20:19 2014 +1000

    Added destructors and comments
    
    As per group meeting decision and previous commit stated.

diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
index 728126a..7b74221 100644
--- a/AdminClient/Paper.hpp
+++ b/AdminClient/Paper.hpp
@@ -8,7 +8,7 @@
 
 Struct Paper {
 
-    Paper() { discussion = std::unique_ptr<Discussion>(new Discussion);}
+    Paper() { *discussion = new Discussion;}
     Paper(const std::string& ititle,
       const std::string& iabstract,
       const std::vector<string>& iauthorNames,
@@ -24,14 +24,15 @@ Struct Paper {
       fname(ifname),
       paper(ipaper), // constructs from cstring
       reviews(ireviews)
-      {discussion = std::unique_ptr<Discussion>(new Discussion);}
-
+      {*discussion = new Discussion;}
+    ~Paper() {delete discussion;}
+    // no assignment operator or copy constructor deemed necessary at this point
     std::string title;
     std::string abstract;
     std::vector<std::string> authorNames;
     std::vector<std::string> keywords;
     std::string fname;
     std::fstream paper;
-    std::unique_ptr<Discussion> discussion;
+    Discussion* discussion;
     std::vector<review> reviews;
 };
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
index 371fe59..2e356ba 100644
--- a/UserClient/LoginManager.hpp
+++ b/UserClient/LoginManager.hpp
@@ -9,7 +9,12 @@ Class LoginManager {
                conferences(iconferences),
                activeConference(iactiveConference) // potentially useful for logging back into the conference they were last in
                { }
-
+  ~LoginManager() {
+  for (unsigned i=0; i < conferences.size(); i++) {
+    delete conferences[i];
+  }
+}
+// no other constructors deemed necessary at this point
   Conference* getActiveConference() {return activeConference;}
   std::vector<Conference> getConferences() {return conferences;}
   void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
index fca65e4..255d630 100644
--- a/UserClient/Paper.hpp
+++ b/UserClient/Paper.hpp
@@ -1,4 +1,3 @@
-//incomplete
 #include "Discussion.hpp"
 
 #include <fstream>
@@ -7,7 +6,6 @@
 Class Paper {
   public:
     Paper() { *discussion = new Discussion;}
-    ~Paper() {delete discussion;}
     Paper(const std::string& ititle,
       const std::string& iabstract,
       const std::vector<string>& iauthorNames,
@@ -23,6 +21,7 @@ Class Paper {
       paper(ipaper) // constructs from cstring
       {*discussion = new Discussion;} // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
       // In those edge cases one could still initialize then set or use copy constructor
+    ~Paper() {delete discussion;}
 /*    Paper(const Paper& ipaper) {
       title = ipaper.title;
       abstract = ipaper.abstract;
@@ -41,6 +40,7 @@ Class Paper {
       paper = ipaper.paper;
     }  */
 
+// assignment operator or copy constructor deemed not needed at this time
 
     std::string getTitle() {return title;}
     std::string getAbstract() {return abstract;}

commit 598c1c683614b5f0594311eac9f34f74de44146c
Author: torchcar <torchcar@yahoo.com.au>
Date:   Sat Oct 4 15:50:54 2014 +1000

    Added Client Skeleton
    
    Destructors and certain comments still need to be added, will be done in
    next commit.

diff --git a/AdminClient/Conference.hpp b/AdminClient/Conference.hpp
new file mode 100644
index 0000000..7830d5e
--- /dev/null
+++ b/AdminClient/Conference.hpp
@@ -0,0 +1,63 @@
+#include "Date.hpp"
+
+
+#include <string>
+#include <vector>
+
+Struct Conference {
+  Review(bool iisActive,
+  const std::string& ititle,
+  const std::string& iconfID,
+  const std::string& itopic,
+  const std::string& idescription,
+  const std::string& ilocation,
+  const std::vector<std::string>& ikeywords,
+  bool iisBeforePaperDeadline,
+  const Date& ipaperDeadline,
+  bool iisBeforeSoftReviewDeadline,
+  const Date& ireviewDeadlineSoft,
+  bool iisBeforeHardReviewDeadline,
+  const Date& ireviewDeadlineHard,
+  bool iisBeforeDiscussDeadline,
+  const Date& idiscussDeadline,
+  int ireviewersPerPaper,
+  int ipostWordLimit):
+  isActive(iisActive),
+  title(ititle),
+  confID(iconfID),
+  originality(ioriginality),
+  topic(itopic),
+  description(idescription),
+  location(ilocation),
+  keywords(ikeywords),
+  isBeforePaperDeadline(iisBeforePaperDeadline),
+  paperDeadline(ipaperDeadline),
+  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
+  reviewDeadlineSoft(ireviewDeadlineSoft),
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline))
+  reviewDeadlineHard(ireviewDeadlineHard),
+  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
+  discussDeadline(idiscussDeadline),
+  reviewersPerPaper(ireviewersPerPaper)
+  postWordLimit(ipostWordLimit)
+  { }
+
+  bool isActive;
+  std::string title;
+  std::string confID;
+  std::string topic;
+  std::string description;
+  std::string location;
+  std::vector<std::string> keywords;
+  bool isBeforePaperDeadline;
+  Date paperDeadline;
+  bool isBeforeSoftReviewDeadline;
+  Date reviewDeadlineSoft;
+  bool isBeforeHardReviewDeadline;
+  Date reviewDeadlineHard;
+  bool isBeforeDiscussDeadline;
+  Date discussDeadline;
+  int reviewersPerPaper;
+  int postWordLimit;
+
+};
diff --git a/AdminClient/ConferenceManager.hpp b/AdminClient/ConferenceManager.hpp
new file mode 100644
index 0000000..b76b7d7
--- /dev/null
+++ b/AdminClient/ConferenceManager.hpp
@@ -0,0 +1,7 @@
+#include "Conference.hpp"
+
+Struct ConferenceManager {
+  ConferenceManager() {temp = NULL;}
+  ConferenceManager(Conference* itemp) : temp(itemp) { }
+  Conference* temp;
+};
diff --git a/AdminClient/Date.hpp b/AdminClient/Date.hpp
new file mode 100644
index 0000000..81f9be6
--- /dev/null
+++ b/AdminClient/Date.hpp
@@ -0,0 +1,13 @@
+Struct Date {
+  Date(int iday,
+    int imonth,
+    int iyear):
+    day(iday),
+    month(imonth),
+    year(iyear)
+    { }
+
+int day{0};
+int month{0};
+int year{0};
+};
diff --git a/AdminClient/Discussion.hpp b/AdminClient/Discussion.hpp
new file mode 100644
index 0000000..5931415
--- /dev/null
+++ b/AdminClient/Discussion.hpp
@@ -0,0 +1,10 @@
+#include "DiscussionPost.hpp"
+
+#include <list>
+
+Struct Discussion {
+  Discussion(const std::list<DiscussionPost>& idiscussion):
+               discussion(idiscussion)
+               { }
+  std::list<DiscussionPost> discussion;
+};
diff --git a/AdminClient/DiscussionPost.hpp b/AdminClient/DiscussionPost.hpp
new file mode 100644
index 0000000..9305761
--- /dev/null
+++ b/AdminClient/DiscussionPost.hpp
@@ -0,0 +1,13 @@
+#include <string>
+Struct DiscussionPost {
+  DiscussionPost(const std::string& icomment,
+                 const std::string& ireviewerUName,
+                 int ipostID):
+                 comment(icomment),
+                 reviewerUName(ireviewerUName),
+                 postID(ipostID)
+                 { }
+  std::string comment;
+  std::string reviewerUName;
+  int postID;
+};
diff --git a/AdminClient/LoginManager.hpp b/AdminClient/LoginManager.hpp
new file mode 100644
index 0000000..1b10225
--- /dev/null
+++ b/AdminClient/LoginManager.hpp
@@ -0,0 +1,6 @@
+Struct LoginManager {
+  LoginManager(bool iloggedIn) :
+    loggedIn(iloggedIn)
+    { }
+  bool loggedIn;
+};
diff --git a/AdminClient/Paper.hpp b/AdminClient/Paper.hpp
new file mode 100644
index 0000000..728126a
--- /dev/null
+++ b/AdminClient/Paper.hpp
@@ -0,0 +1,37 @@
+//incomplete
+#include "Discussion.hpp"
+#include "Review.hpp"
+
+#include <fstream>
+#include <memory>
+#include <vector>
+
+Struct Paper {
+
+    Paper() { discussion = std::unique_ptr<Discussion>(new Discussion);}
+    Paper(const std::string& ititle,
+      const std::string& iabstract,
+      const std::vector<string>& iauthorNames,
+      const std::vector<string>& ikeywords,
+      const std::string& ifname,
+      char* ipaper,
+      const std::vector<review>& ireviews)
+      :
+      title(ititle),
+      abstract(iabstract),
+      authorNames(iauthorNames),
+      keywords(ikeywords),
+      fname(ifname),
+      paper(ipaper), // constructs from cstring
+      reviews(ireviews)
+      {discussion = std::unique_ptr<Discussion>(new Discussion);}
+
+    std::string title;
+    std::string abstract;
+    std::vector<std::string> authorNames;
+    std::vector<std::string> keywords;
+    std::string fname;
+    std::fstream paper;
+    std::unique_ptr<Discussion> discussion;
+    std::vector<review> reviews;
+};
diff --git a/AdminClient/PaperManager.hpp b/AdminClient/PaperManager.hpp
new file mode 100644
index 0000000..6980e7f
--- /dev/null
+++ b/AdminClient/PaperManager.hpp
@@ -0,0 +1,7 @@
+#include "Paper.hpp"
+
+Struct PaperManager {
+  PaperManager() {temp = NULL;}
+  PaperManager(Paper* itemp) : temp(itemp) { }
+  Paper* temp;
+};
diff --git a/AdminClient/Review.hpp b/AdminClient/Review.hpp
new file mode 100644
index 0000000..9684e8a
--- /dev/null
+++ b/AdminClient/Review.hpp
@@ -0,0 +1,48 @@
+Struct Review {
+  Review(const std::string& ireviewerName
+  int reviewId;
+  int ioverall,
+  int iconfidence,
+  int irelevance,
+  int ioriginality,
+  int isignificance,
+  int ipresentation,
+  int itechQuality,
+  int ievalution,
+  const std::string& icommentsStrength,
+  const std::string& icommentsWeakness,
+  const std::string& icommentsSuggestions,
+  const std::string& icommentsShortPaper,
+  const std::string& icommentsBestAward):
+  reviewerName(ireviewerName),
+  overall(ioverall),
+  confidence(iconfidence),
+  relevance(irelevance),
+  originality(ioriginality),
+  significance(isignificance),
+  presentation(ipresentation),
+  techQuality(itechQuality),
+  evalution(ievalution),
+  commentsStrength(icommentsStrength),
+  commentsWeakness(icommentsWeakness),
+  commentsSuggestions(icommentsSuggestions),
+  commentsShortPaper(icommentsShortPaper),
+  commentsBestAward(icommentsBestAward))
+  { }
+  std::string reviewerName;
+  int reviewId;
+  int overall;
+  int confidence;
+  int relevance;
+  int originality;
+  int significance;
+  int presentation;
+  int techQuality;
+  int evalution;
+  std::string commentsStrength;
+  std::string commentsWeakness;
+  std::string commentsSuggestions;
+  std::string commentsShortPaper;
+  std::string commentsBestAward;
+
+};
diff --git a/AdminClient/SuperUser.hpp b/AdminClient/SuperUser.hpp
new file mode 100644
index 0000000..fd713c9
--- /dev/null
+++ b/AdminClient/SuperUser.hpp
@@ -0,0 +1,15 @@
+#include <string>
+
+Class SuperUser {
+  public:
+  SuperUser(const std::string& iuserName,
+    const std::string& ipassword) :
+    userName(iuserName),
+    password(ipassword)
+    { }
+  std::string userName;
+  void getPassword(return password;)
+  setPassword(const std::string& ipassword) {password = ipassword;}
+  private:
+  std::string password;
+};
diff --git a/AdminClient/User.hpp b/AdminClient/User.hpp
new file mode 100644
index 0000000..a42495c
--- /dev/null
+++ b/AdminClient/User.hpp
@@ -0,0 +1,32 @@
+#include <string>
+#include <vector>
+
+
+Struct User {
+  User(const std::string& iusername,
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         const std::string& ipassword,
+         int iuserID,
+         const std::vector<std::string>& keywords:
+         username(iusername),
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         userID(iuserID),
+         keywords(ikeywords)
+         { }
+  std::string userName;
+  std::string password;
+  std::string name;
+  std::string email;
+  std::string organisation;
+  std::string phone;
+  std::vector<std::string> keywords;
+  int userID{0};
+
+};
diff --git a/AdminClient/UserManager.hpp b/AdminClient/UserManager.hpp
new file mode 100644
index 0000000..840900d
--- /dev/null
+++ b/AdminClient/UserManager.hpp
@@ -0,0 +1,7 @@
+#include "User.hpp"
+
+Struct UserManager {
+  UserManager() {temp = NULL;}
+  UserManager(User* itemp) : temp(itemp) { }
+  User* temp;
+};
diff --git a/UserClient/Author.hpp b/UserClient/Author.hpp
new file mode 100644
index 0000000..8568f58
--- /dev/null
+++ b/UserClient/Author.hpp
@@ -0,0 +1,30 @@
+#include "Paper.hpp"
+#include "User.hpp"
+
+#include <vector>
+
+Class Author : public User {
+  public:
+    Author(const std::string& iusername,
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         int iuserID,
+         const std::vector<string>& ikeywords,
+         const std::vector<Paper>& iownPapers):
+         username(iusername),
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         userID(iuserID),
+         keywords(ikeywords),
+         ownPapers(iownPapers)
+         { }
+    virtual void view();
+    std::vector<std::string> keywords;
+
+  protected:
+    std::vector<Paper> ownPapers;
+};
diff --git a/UserClient/Conference.hpp b/UserClient/Conference.hpp
new file mode 100644
index 0000000..bfa0aad
--- /dev/null
+++ b/UserClient/Conference.hpp
@@ -0,0 +1,64 @@
+//incomplete
+#include "AdminClient/Date.hpp"
+
+
+#include <string>
+#include <vector>
+
+Struct Conference {
+  Review(bool iisActive,
+  const std::string& ititle,
+  const std::string& iconfID,
+  const std::string& itopic,
+  const std::string& idescription,
+  const std::string& ilocation,
+  const std::vector<std::string>& ikeywords,
+  bool iisBeforePaperDeadline,
+  const Date& ipaperDeadline,
+  bool iisBeforeSoftReviewDeadline,
+  const Date& ireviewDeadlineSoft,
+  bool iisBeforeHardReviewDeadline,
+  const Date& ireviewDeadlineHard,
+  bool iisBeforeDiscussDeadline,
+  const Date& idiscussDeadline,
+  int ireviewersPerPaper,
+  int ipostWordLimit):
+  isActive(iisActive),
+  title(ititle),
+  confID(iconfID),
+  originality(ioriginality),
+  topic(itopic),
+  description(idescription),
+  location(ilocation),
+  keywords(ikeywords),
+  isBeforePaperDeadline(iisBeforePaperDeadline),
+  paperDeadline(ipaperDeadline),
+  isBeforeSoftReviewDeadline(iisBeforeSoftReviewDeadline),
+  reviewDeadlineSoft(ireviewDeadlineSoft),
+  isBeforeHardReviewDeadline(iisBeforeHardReviewDeadline))
+  reviewDeadlineHard(ireviewDeadlineHard),
+  isBeforeDiscussDeadline(iisBeforeDiscussDeadline),
+  discussDeadline(idiscussDeadline),
+  reviewersPerPaper(ireviewersPerPaper)
+  postWordLimit(ipostWordLimit)
+  { }
+
+  bool isActive;
+  std::string title;
+  std::string confID;
+  std::string topic;
+  std::string description;
+  std::string location;
+  std::vector<std::string> keywords;
+  bool isBeforePaperDeadline;
+  Date paperDeadline;
+  bool isBeforeSoftReviewDeadline;
+  Date reviewDeadlineSoft;
+  bool isBeforeHardReviewDeadline;
+  Date reviewDeadlineHard;
+  bool isBeforeDiscussDeadline;
+  Date discussDeadline;
+  int reviewersPerPaper;
+  int postWordLimit;
+
+};
diff --git a/UserClient/Discussion.hpp b/UserClient/Discussion.hpp
new file mode 100644
index 0000000..5931415
--- /dev/null
+++ b/UserClient/Discussion.hpp
@@ -0,0 +1,10 @@
+#include "DiscussionPost.hpp"
+
+#include <list>
+
+Struct Discussion {
+  Discussion(const std::list<DiscussionPost>& idiscussion):
+               discussion(idiscussion)
+               { }
+  std::list<DiscussionPost> discussion;
+};
diff --git a/UserClient/DiscussionPost.hpp b/UserClient/DiscussionPost.hpp
new file mode 100644
index 0000000..9488218
--- /dev/null
+++ b/UserClient/DiscussionPost.hpp
@@ -0,0 +1,10 @@
+#include <string>
+Struct DiscussionPost {
+  DiscussionPost(const std::string& icomment,
+                 const std::string& ireviewerUName):
+                 comment(icomment),
+                 reviewerUName(ireviewerUName)
+                 { }
+  std::string comment;
+  std::string reviewerUName;
+};
diff --git a/UserClient/LoginManager.hpp b/UserClient/LoginManager.hpp
new file mode 100644
index 0000000..371fe59
--- /dev/null
+++ b/UserClient/LoginManager.hpp
@@ -0,0 +1,22 @@
+//incomplete
+#include "Conference.hpp"
+Class LoginManager {
+  public:
+  LoginManager(bool iloggedIn,
+               const std::vector<Conference>& iconferences,
+               Conference* iactiveConference) :
+               loggedIn(iloggedIn),
+               conferences(iconferences),
+               activeConference(iactiveConference) // potentially useful for logging back into the conference they were last in
+               { }
+
+  Conference* getActiveConference() {return activeConference;}
+  std::vector<Conference> getConferences() {return conferences;}
+  void setActiveConference(Conference* iactiveConference) {activeConference =  iactiveConference;}
+  void setConferences(const std::vector<Conference>& iconferences) {conferences =  iconferences;}
+
+  bool loggedIn;
+  private:
+  std::vector<Conference> conferences;
+  Conference* activeConference;
+};
diff --git a/UserClient/PCChair.hpp b/UserClient/PCChair.hpp
new file mode 100644
index 0000000..39d487c
--- /dev/null
+++ b/UserClient/PCChair.hpp
@@ -0,0 +1,16 @@
+#include "User.hpp"
+
+#include <vector>
+
+Class PCChair : public User {
+  public:
+  PCChair(const std::vector<std::string>& iallPapers)
+  : allPapers(iallPapers)
+  { }
+  std::vector<Paper> getAllPapers() {return allPapers;}
+  void setAllPapers(const std::vector<Paper>& iallPapers) {allPapers = iallPapers;}
+  void view();
+  private:
+  std::vector<std::string> allPapers;
+
+};
diff --git a/UserClient/Paper.hpp b/UserClient/Paper.hpp
new file mode 100644
index 0000000..fca65e4
--- /dev/null
+++ b/UserClient/Paper.hpp
@@ -0,0 +1,67 @@
+//incomplete
+#include "Discussion.hpp"
+
+#include <fstream>
+#include <vector>
+
+Class Paper {
+  public:
+    Paper() { *discussion = new Discussion;}
+    ~Paper() {delete discussion;}
+    Paper(const std::string& ititle,
+      const std::string& iabstract,
+      const std::vector<string>& iauthorNames,
+      const std::vector<string>& ikeywords,
+      const std::string& ifname,
+      char* ipaper)
+      :
+      title(ititle),
+      abstract(iabstract),
+      authorNames(iauthorNames),
+      keywords(ikeywords),
+      fname(ifname),
+      paper(ipaper) // constructs from cstring
+      {*discussion = new Discussion;} // Means you can't initialize with a discussion, but that seems to be a hairy area anyway
+      // In those edge cases one could still initialize then set or use copy constructor
+/*    Paper(const Paper& ipaper) {
+      title = ipaper.title;
+      abstract = ipaper.abstract;
+      authorNames = ipaper.authorNames;
+      keywords = ipaper.keywords;
+      fname = ifname;
+      paper = ipaper.paper;
+    }  */
+
+ /*   void operator=(const Paper& ipaper) {
+      title = ipaper.title;
+      abstract = ipaper.abstract;
+      authorNames = ipaper.authorNames;
+      keywords = ipaper.keywords;
+      fname = ifname;
+      paper = ipaper.paper;
+    }  */
+
+
+    std::string getTitle() {return title;}
+    std::string getAbstract() {return abstract;}
+    std::vector<std::string> getAuthorNames() {return authorNames;}
+    std::vector<std::string> getKeywords() {return keywords;}
+    std::string getFname() {return fname;}
+    std::fstream getPaper() {return paper;}
+    Discussion* getDiscussion() {return discussion;}
+    void setTitle(const std::string& ititle) {title = ititle;}
+    void setAbstract(const std::string& iabstract) {abstract = iabstract;}
+    void setAuthorNames(const std::vector<std::string>& iauthorNames) {authorNames = iauthorNames;}
+    void setKeywords(const std::vector<std::string>& ikeywords) {keywords = ikeywords;}
+    void setFname(const std::fstream& ipaper) {paper = ipaper;}
+    void setDiscussion(Discussion* idiscussion) {discussion = idiscussion;} // potentially if the papers have the wrong discussions they can be swapped using this
+
+  private:
+    std::string title;
+    std::string abstract;
+    std::vector<std::string> authorNames;
+    std::vector<std::string> keywords;
+    std::string fname;
+    std::fstream paper;
+    Discussion* discussion;
+};
diff --git a/UserClient/Review.hpp b/UserClient/Review.hpp
new file mode 100644
index 0000000..acc4ade
--- /dev/null
+++ b/UserClient/Review.hpp
@@ -0,0 +1,51 @@
+#include "Paper.hpp"
+
+Struct Review {
+  Review(paper = NULL)
+  Review(Paper* ipaper,
+    int reviewId;
+    int ioverall,
+    int iconfidence,
+    int irelevance,
+    int ioriginality,
+    int isignificance,
+    int ipresentation,
+    int itechQuality,
+    int ievalution,
+    const std::string& icommentsStrength,
+    const std::string& icommentsWeakness,
+    const std::string& icommentsSuggestions,
+    const std::string& icommentsShortPaper,
+    const std::string& icommentsBestAward):
+    paper(ipaper)
+    overall(ioverall),
+    confidence(iconfidence),
+    relevance(irelevance),
+    originality(ioriginality),
+    significance(isignificance),
+    presentation(ipresentation),
+    techQuality(itechQuality),
+    evalution(ievalution),
+    commentsStrength(icommentsStrength),
+    commentsWeakness(icommentsWeakness),
+    commentsSuggestions(icommentsSuggestions),
+    commentsShortPaper(icommentsShortPaper),
+    commentsBestAward(icommentsBestAward))
+    { }
+  Paper paper*;
+  int reviewId;
+  int overall;
+  int confidence;
+  int relevance;
+  int originality;
+  int significance;
+  int presentation;
+  int techQuality;
+  int evalution;
+  std::string commentsStrength;
+  std::string commentsWeakness;
+  std::string commentsSuggestions;
+  std::string commentsShortPaper;
+  std::string commentsBestAward;
+
+};
diff --git a/UserClient/Reviewer.hpp b/UserClient/Reviewer.hpp
new file mode 100644
index 0000000..14aadcf
--- /dev/null
+++ b/UserClient/Reviewer.hpp
@@ -0,0 +1,43 @@
+#include "Author.hpp"
+#include "Review.hpp"
+
+Class Reviewer : public Author {
+  public:
+    Reviewer(const std::string& iusername,
+      const std::string& iname,
+      const std::string& iemail,
+      const std::string& iorganisation,
+      const std::string& iphone,
+      int iuserID,
+      const std::vector<string>& ikeywords,
+      const std::vector<Paper>& iownPapers,
+      const std::vector<Paper>& iallocatedPapers,
+      const std::vector<Paper>& ipapersToBid,
+      const std::vector<Review>& ireviews)
+      :
+      username(iusername),
+      name(iname),
+      email(iemail),
+      organisation(iorganisation),
+      phone(iphone),
+      userID(iuserID),
+      keywords(ikeywords),
+      ownPapers(iownPapers),
+      allocatedPapers(iallocatedPapers),
+      papersToBid(ipapersToBid),
+      reviews(ireviews)
+      { }
+    void view();
+    std::vector<Paper> getAllocatedPapers() {return allocatedPapers;}
+    std::vector<Paper> getPapersToBid() {return papersToBid;}
+    std::vector<Review> getReviews() {return reviews;}
+    void setAllocatedPapers(const std::vector<Paper>& iallocatedPapers) {allocatedPapers = iallocatedPapers;}
+    void setPapersToBid(const std::vector<Paper>& ipapersToBid) {papersToBid = ipapersToBid;}
+    void setReviews(const std::vector<Review>& ireviews) {reviews = ireviews;}
+
+  private:
+    std::vector<Paper> allocatedPapers;
+    std::vector<Paper> papersToBid;
+    std::vector<Review> reviews;
+};
+
diff --git a/UserClient/User.hpp b/UserClient/User.hpp
new file mode 100644
index 0000000..a3f1757
--- /dev/null
+++ b/UserClient/User.hpp
@@ -0,0 +1,44 @@
+#include <string>
+Class User {
+  public:
+    User(const std::string& iusername,
+         const std::string& iname,
+         const std::string& iemail,
+         const std::string& iorganisation,
+         const std::string& iphone,
+         const std::string& ipassword,
+         int iuserID):
+         username(iusername),
+         name(iname),
+         email(iemail),
+         organisation(iorganisation),
+         phone(iphone),
+         password(ipassword),
+         userID(iuserID)
+         { }
+    virtual void view() = 0;
+    std::string getUserID() {return userID;}
+    std::string getPassword() {return password;}
+    std::string getName() {return name;}
+    std::string getEmail() {return email;}
+    std::string getOrganisation() {return organisation;}
+    std::string getPhone() {return phone;}
+    void setUserID(int iuserID) {userID = iuserID;}
+    void setPassword(const std::string& ipassword) {password = ipassword;}
+    void setName(const std::string& iname) {name = iname;}
+    void setEmail(const std::string& iemail) {email = iemail;}
+    void setOrganisation(const std::string& iorganisation) {organisation = iorganisation;}
+    void setPhone(const std::string& iphone) {phone = iphone;}
+
+    std::string username;
+
+  protected:
+
+std::string password;
+std::string name;
+std::string email;
+std::string organisation;
+std::string phone;
+int userID{0};
+
+};

commit d9e476f824220b66a775da2e1f1046ddc5034faf
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Aug 31 14:11:41 2014 +1000

    active boolean for conf added

diff --git a/database/create_tables.txt b/database/create_tables.txt
index 769ed88..ec3745c 100644
--- a/database/create_tables.txt
+++ b/database/create_tables.txt
@@ -58,6 +58,7 @@ CREATE TABLE `Conference` (
 	`topic` varchar(512) NOT NULL,
 	`description` varchar(4096) NOT NULL,
 	`location` varchar(256) NOT NULL,
+	`active` boolean NOT NULL DEFAULT 1,
 	`paperDeadline` datetime,
 	`paperDeadlineBool` bool,
 	`reviewDeadlineSoft` datetime,

commit fa1eb37861c693071eac93197034aa699a37e012
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sun Aug 31 12:55:15 2014 +1000

    Added changes to database from weekend work 31/8

diff --git a/database/create_tables.txt b/database/create_tables.txt
index f945648..769ed88 100644
--- a/database/create_tables.txt
+++ b/database/create_tables.txt
@@ -20,9 +20,9 @@ CREATE TABLE `UserAccount` (
 
 CREATE TABLE `PersonalInfo` (
 	`infoID` int NOT NULL AUTO_INCREMENT,
-	`userID` int NOT NULL,
+	`userID` int,
 	`name` varchar(128) NOT NULL,
-	`email` varchar(64),
+	`email` varchar(128),
 	`organisation` varchar(256) NOT NULL,
 	`phone` varchar(32), 
 	PRIMARY KEY(`infoID`),
@@ -33,7 +33,7 @@ CREATE TABLE `Emails` (
 	`emailID` int NOT NULL AUTO_INCREMENT,
 	`userID` int NOT NULL,
 	`confID` int NOT NULL,
-	`emailType` ENUM(`invitation`),
+	`emailType` ENUM(`accountCreation`, `accountModified`, `paperSubmitted`, `paperAssigned`, `paperReviewed`, `rebuttalNeeded`, `rebuttalSubmitted`, `biddingOpen`, `paperAccepted`, `paperRejected`, `ReviewersNeeded`, `AllPapersReviewed`, `invitationCommitte`, `invitationChair`, `softDeadline`, `hardDeadline`),
 	PRIMARY KEY(`emailID`),
 	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
 	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
@@ -41,18 +41,23 @@ CREATE TABLE `Emails` (
 
 CREATE TABLE `ExpertiseArea` (
 	`userID` int NOT NULL,
-	`areaExpertise`,
-	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	`expertiseID` int NOT NULL,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`),
+	FOREIGN KEY(`expertiseID`) REFERENCES Keywords(`keywordID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
+CREATE TABLE `Keywords` (
+	`keywordID` int NOT NULL AUTO_INCREMENT,
+	`keyword` varchar(64) NOT NULL,
+	PRIMARY KEY(`expertiseID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
 CREATE TABLE `Conference` (
 	`confID` int NOT NULL AUTO_INCREMENT,
 	`name` varchar(256) NOT NULL,
 	`topic` varchar(512) NOT NULL,
 	`description` varchar(4096) NOT NULL,
 	`location` varchar(256) NOT NULL,
-	`endDate` datetime,
-	`endDateBool` bool,
 	`paperDeadline` datetime,
 	`paperDeadlineBool` bool,
 	`reviewDeadlineSoft` datetime,
@@ -61,22 +66,43 @@ CREATE TABLE `Conference` (
 	`reviewDeadlineHardBool` bool,
 	`discussDeadline` datetime,
 	`discussDeadlineBool` bool,
-	`reviewersPerPaper` int,
+	`reviewersPerPaper` int NOT NULL,
 	PRIMARY KEY(`conf_id`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+CREATE TABLE `ConferenceKeywords` (
+	`confID` int,
+	`keywordID` int,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
+
 CREATE TABLE `Paper` (
 	`paperID` int NOT NULL AUTO_INCREMENT,
+	`leadAuthorID` int NOT NULL,
 	`confID` int NOT NULL,
+	`keywordID` int NOT NULL,
+	`paperTitle` varchar(512) NOT NULL,
+	`paperAbstract` varchar(4096) NOT NULL,
+	`paperStatus` ENUM(`accepted`, `rejected`, submitted`, `assigned`, `reviewed`),
 	`paper` blob NOT NULL,
 	PRIMARY KEY(`paperID`),
-	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+	FOREIGN KEY(`leadAuthorID`) REFERENCES UserAccount(`userID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`keywordID`) REFERENCES Keywords(`keywordID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+CREATE TABLE `AcceptedPapers` (
+	`confID` int NOT NULL,
+	`paperID` int NOT NULL,
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
 CREATE TABLE `paperAuthors` (
 	`paperID` int NOT NULL,
 	`authorID` int NOT NULL,
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+	FOREIGN KEY(`authorID`) REFERENCES PersonalInfo(`infoID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
 CREATE TABLE `PaperKeywords` (
@@ -85,11 +111,19 @@ CREATE TABLE `PaperKeywords` (
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
 
+CREATE TABLE `PaperAssigned` (
+	`paperID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`reviewed` boolean NOT NULL DEFAULT 0,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+	
 CREATE TABLE `Review` (
 	`reportID` int NOT NULL AUTO_INCREMENT,
 	`paperID` int NOT NULL,
-	`authorID` int NOT NULL,
 	`reviewerID` int NOT NULL,
+	`confID` int NOT NULL,
 	`overall` int,
 	`confidence` int,
 	`relevance` int,
@@ -106,8 +140,19 @@ CREATE TABLE `Review` (
 	`authorRebuttal` varchar(4096),
 	PRIMARY KEY(`report_id`),
 	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
-	FOREIGN KEY(`authorID`) REFERENCES UserType(`userID`)
-	FOREIGN KEY(`reviewerID`) REFERENCES UserType(`userID`)
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 
+CREATE TABLE `ReviewerDiscussion` (
+	`commentID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`confID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`comment` varchar(4096),
+	PRIMARY KEY(`commentID`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`),
+	FOREIGN KEY(`reviewerID`) REFERENCES UserAccount(`userID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
 

commit 26247e431f992d21f713aaa8ba4b33518f05d7e3
Author: wookie2533 <matt_hollingsworth@hotmail.com>
Date:   Sat Aug 30 21:31:22 2014 +1000

    wip database creater

diff --git a/database/create_tables.txt b/database/create_tables.txt
new file mode 100644
index 0000000..f945648
--- /dev/null
+++ b/database/create_tables.txt
@@ -0,0 +1,113 @@
+USE csci222;
+
+CREATE TABLE `UserType` (
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`userType` ENUM('author', 'pc', 'chair') NOT NULL DEFAULT 'author',
+	`paidAmount` float NOT NULL DEFAULT 0,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `UserAccount` (
+	`userID` int NOT NULL AUTO_INCREMENT,
+	`username` varchar(32) NOT NULL,
+	`password` varchar(32) NOT NULL,
+	`infoID` int NOT NULL,
+	PRIMARY KEY(`userID`),
+	FOREIGN KEY(`infoID`) REFERENCES PersonalInfo(`infoID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PersonalInfo` (
+	`infoID` int NOT NULL AUTO_INCREMENT,
+	`userID` int NOT NULL,
+	`name` varchar(128) NOT NULL,
+	`email` varchar(64),
+	`organisation` varchar(256) NOT NULL,
+	`phone` varchar(32), 
+	PRIMARY KEY(`infoID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Emails` (
+	`emailID` int NOT NULL AUTO_INCREMENT,
+	`userID` int NOT NULL,
+	`confID` int NOT NULL,
+	`emailType` ENUM(`invitation`),
+	PRIMARY KEY(`emailID`),
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `ExpertiseArea` (
+	`userID` int NOT NULL,
+	`areaExpertise`,
+	FOREIGN KEY(`userID`) REFERENCES UserAccount(`UserID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Conference` (
+	`confID` int NOT NULL AUTO_INCREMENT,
+	`name` varchar(256) NOT NULL,
+	`topic` varchar(512) NOT NULL,
+	`description` varchar(4096) NOT NULL,
+	`location` varchar(256) NOT NULL,
+	`endDate` datetime,
+	`endDateBool` bool,
+	`paperDeadline` datetime,
+	`paperDeadlineBool` bool,
+	`reviewDeadlineSoft` datetime,
+	`reviewDeadlineSoftBool` bool,
+	`reviewDeadlineHard` datetime,
+	`reviewDeadlineHardBool` bool,
+	`discussDeadline` datetime,
+	`discussDeadlineBool` bool,
+	`reviewersPerPaper` int,
+	PRIMARY KEY(`conf_id`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Paper` (
+	`paperID` int NOT NULL AUTO_INCREMENT,
+	`confID` int NOT NULL,
+	`paper` blob NOT NULL,
+	PRIMARY KEY(`paperID`),
+	FOREIGN KEY(`confID`) REFERENCES Conference(`confID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `paperAuthors` (
+	`paperID` int NOT NULL,
+	`authorID` int NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `PaperKeywords` (
+	`paperID` int NOT NULL,
+	`keyword` varchar(64) NOT NULL,
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+) ENGINE=InnoDB DEFAULT CHARSET=UTF8;
+
+CREATE TABLE `Review` (
+	`reportID` int NOT NULL AUTO_INCREMENT,
+	`paperID` int NOT NULL,
+	`authorID` int NOT NULL,
+	`reviewerID` int NOT NULL,
+	`overall` int,
+	`confidence` int,
+	`relevance` int,
+	`originality` int,
+	`significance` int,
+	`presentation` int,
+	`techQuality` int,
+	`evaluation` int,
+	`commentsStrength` varchar(4096),
+	`commentsWeakness` varchar(4096),
+	`commentsSuggestions` varchar(4096),
+	`commentsShortPaper` varchar(4096),
+	`commentsBestAward` varchar(4096),
+	`authorRebuttal` varchar(4096),
+	PRIMARY KEY(`report_id`),
+	FOREIGN KEY(`paperID`) REFERENCES Paper(`paperID`)
+	FOREIGN KEY(`authorID`) REFERENCES UserType(`userID`)
+	FOREIGN KEY(`reviewerID`) REFERENCES UserType(`userID`)
+) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=UTF8;
+
+

commit 9fdcae9a2a6f66ba39d4cee582f9685ae87516fd
Author: Matthew Hollingsworth <matt_hollingsworth@hotmail.com>
Date:   Sat Aug 30 11:10:54 2014 +1000

    Initial commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..8f7df5c
--- /dev/null
+++ b/README.md
@@ -0,0 +1,4 @@
+master
+======
+
+master repo for our assignment
