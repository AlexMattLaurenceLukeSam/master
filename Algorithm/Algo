Algo:


struct ReviewerBid
{
	int score;
	int reviewerID;
};

class PaperForReview
{
	private:
		int paperID;


		ReviewerBid[numOfReqReviewrs] reviewerBids;

		std::vector<int> authors;
		std::vector<int> involvedOrganisation;
		std::vector<int> conflictingReviewersVec;
	public:
		PapersForReview(int);
		~PapersForReview();
		int getMinScore();
		void setNewReviewer(int, int);
		void checkNewReviewer(int, int);
		void addAuthor(int);
		void readInAllPapers();
		void conflictingReviewers();
};

void PaperForReview::checkNewReviewer(int newScore, int newReviewerID)
{
	if(getMinScore() < newscore)
	{
		//Set New Reviewer
		setNewReviewer(newScore, newReviewerID);
		
	}
}

int PaperForReview::getMinScore()
{
	int minScore = -1;
	for(int i=0; i<NumOfReqReviewers; i++)
	{
		if(reviewerBids[i].score < minScore)
			minScore = reviewerBids[i].score;
	}
	return minScore;
}

void setNewReviewer(int newScore, int newReviewer)
{

	minScore = getMinScore();
	for(int i=0; i< NumOfReqReviewers; i++)
	{
		if(reviewerBids[i].score < minScore)
		{
			reviewerBids[i].score = newScore;
			reviewerBids[i].reviewerID =  newReviewer;
			i=  NumOfReqReviewrs;
		}
	}

}

PaperForReview::~PaperForReview()
{

}

PaperForReview::PaperForReview(int newPaperID)
{
	paperID = newPaperID
	
	for(int i=0; i< NumOfReqReviewrs; i++)
	{
		reviewerBids[i].score = -1;
	}
}


void PaperForReview::addAuthor(int newAuthor)
{
	authors.push_back(newAuthor);
}

//TODO
void  PaperForReview::conflictingReviewers()
{
	//authors
		conflictingReviewers.insert(conflictingReviewers.end(), authors.begin(), authors.end());


	//usersFromSameOrganisation
		//ForEachAuthor:   SelectOrganisation
			//SelectAllUsersFromEachOrganisation
				//PushBack^

	//pastCoAuthors
		//ForEachAuthor:   selectAllPapers in temp
			//Select All authors for each paper in temp
				//pushBack^
}



std::map<PaperForReview*, int> allPapers; //Key is paper ID *** NEEDS TO BE DELETED***


//TODO

void readInAllPapers()
{
	// for all papers
		//create new papers object

		// select all Authors where paper==paperID
			//addAuthors to paper

		// select organisation for each author
			//add involved organisation

		// push new PaperForReview objects into the map

}





int calculateScore(int userID, int paperID)
{
	int score = 1;

	//for each keyword match
		// ++ score

	return score;

}


//TODO
//for each paper
	//IfUserID not in  conflictingReviewers
		//if(isYES())
			//calculate score * (isYES()*1000)
				//checkNewReviewer
			//elseif(isMAYBE)
				//calculate score * (isMAYBE()*100)
				//checkNewReviewer
			//else
				//calculate score
				//checkNewReviewer
