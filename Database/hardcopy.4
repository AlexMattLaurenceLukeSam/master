#include <cstdlib>                                                                                    |//              exit(1);
#include <iostream>                                                                                   |//      }
#include <fstream>                                                                                    |//      std::vector<std::string> people;
#include <string>                                                                                     |//
                                                                                                      |//      // rc = sqlite3_step(stmt);
#include "MyRecord.h"                                                                                 |//
#include "MyRecordStore.h"                                                                            |//      while (sqlite3_step(stmt) == SQLITE_ROW) {
                                                                                                      |//              const char* apersonid = reinterpret_cast<const char*> (sqlite3_column_text(stmt, 0));
#include <vector>                                                                                     |//              people.push_back(apersonid);
                                                                                                      |//      }
typedef MyRecord* RecordPtr;                                                                          |//      sqlite3_finalize(stmt);
std::vector<RecordPtr> g_theRecords;                                                                  |//
                                                                                                      |//
//std::string getImage(std::string filename);                                                         |//      // Maybe there weren't any
                                                                                                      |//      if (people.size() == 0)
static void createData();                                                                             |//              return NULL;
                                                                                                      |//
int main(int arc, char *argv[])                                                                       |//      // Build collection by getting each record
{                                                                                                     |//      std::vector<MyRecord*> *roleholders = new std::vector<MyRecord*>();
        createData();                                                                                 |//
        MyRecordStore astore;                                                                         |//      std::vector<std::string>::const_iterator it;
        if (!astore.isOK())                                                                           |//      for (it = people.begin(); it != people.end(); it++) {
        {                                                                                             |//              std::string aperson = *it;
                std::cout << "Failed to open database file" << std::endl;                             |//              MyRecord* rec = this->get(aperson.c_str());
                exit(1);                                                                              |//              roleholders->push_back(rec);
        }                                                                                             |//      }
                                                                                                      |//
        vector<RecordPtr>::const_iterator it;                                                         |//      return roleholders;
        for(it=g_theRecords.begin(); it!=g_theRecords.end(); it++)                                    |//}
        {                                                                                             |
                RecordPtr ptr = (*it);                                                                |void MyRecordStore::put(const char* key, const MyRecord *data) throw (const char*)
                const char* key = ptr->getID().c_str();                                               |{
                astore.put(key, ptr);                                                                 |
                std::cout << "Wrote record " << key << std::endl;                                     |        if (invalid)
        }                                                                                             |                throw (noDB);
        return EXIT_SUCCESS;                                                                          |
}                                                                                                     |        // Tiresome
                                                                                                      |        // If it exists - delete it
//static std::string getImage(std::string filename)                                                   |        if (this->exists(key)) {
//{                                                                                                   |                bool done = this->deleteRecord(key);
//      // Qt library has its own string class, convert STL string                                    |        }
//      QString qtfilename(filename.c_str());                                                         |        // Insert it
//      QImage animage;                                                                               |        this->recordToTables(data);
//      bool readimage = animage.load(qtfilename);                                                    |}
//      if (!readimage)                                                                               |
//      {                                                                                             |bool MyRecordStore::deleteRecord(const char* key) throw (const char*)
//              std::cout << "Image load failed for " << filename << std::endl << "Bye" << std::endl; |{
//              exit(1);                                                                              |        if (invalid)
//      }                                                                                             |                throw (noDB);
//                                                                                                    |        // explicitly delete subordinate records in Phones, Address, others and Roles
//      QImage resized = animage.scaledToWidth(50, Qt::FastTransformation);                           |        // then delete the myrecord entry
//                                                                                                    |        // recreating the prepared statements for each operation - costly
//      QByteArray ba;                                                                                |        const char* deletephones = "delete from Phones where idPerson=?";
//      QBuffer buf(&ba);                                                                             |        const char* deleteaddress = "delete from Addresses where idPerson=?";
//      resized.save(&buf, "JPG");                                                                    |        const char* deleteother = "delete from Other where idPerson=?";
//                                                                                                    |        const char* deleteroles = "delete from Roles where idPerson=?";
main.cpp                                                                            33,1           Top MyRecordStore.cpp                                                                   211,1          52%

